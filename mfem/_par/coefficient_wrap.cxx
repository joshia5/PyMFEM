/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE__input swig_types[0]
#define SWIGTYPE_p_MatrixNumbaCoefficient swig_types[1]
#define SWIGTYPE_p_MatrixNumbaFunction swig_types[2]
#define SWIGTYPE_p_MatrixNumbaFunction2 swig_types[3]
#define SWIGTYPE_p_NumbaCoefficientBase swig_types[4]
#define SWIGTYPE_p_NumbaFunction swig_types[5]
#define SWIGTYPE_p_NumbaFunctionBase swig_types[6]
#define SWIGTYPE_p_PyMFEM__wFILE swig_types[7]
#define SWIGTYPE_p_ScalarNumbaCoefficient swig_types[8]
#define SWIGTYPE_p_ScalarNumbaFunction2 swig_types[9]
#define SWIGTYPE_p_VectorNumbaCoefficient swig_types[10]
#define SWIGTYPE_p_VectorNumbaFunction swig_types[11]
#define SWIGTYPE_p_VectorNumbaFunction2 swig_types[12]
#define SWIGTYPE_p_bool swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_double swig_types[15]
#define SWIGTYPE_p_f_double__double swig_types[16]
#define SWIGTYPE_p_f_double_double__double swig_types[17]
#define SWIGTYPE_p_f_r_mfem__Vector__double swig_types[18]
#define SWIGTYPE_p_f_r_mfem__Vector_double__double swig_types[19]
#define SWIGTYPE_p_int swig_types[20]
#define SWIGTYPE_p_mfem__AbstractSparseMatrix swig_types[21]
#define SWIGTYPE_p_mfem__ArrayT_MatrixNumbaCoefficient_p_t swig_types[22]
#define SWIGTYPE_p_mfem__ArrayT_ScalarNumbaCoefficient_p_t swig_types[23]
#define SWIGTYPE_p_mfem__ArrayT_VectorNumbaCoefficient_p_t swig_types[24]
#define SWIGTYPE_p_mfem__ArrayT_int_t swig_types[25]
#define SWIGTYPE_p_mfem__ArrayT_mfem__Coefficient_p_t swig_types[26]
#define SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t swig_types[27]
#define SWIGTYPE_p_mfem__ArrayT_mfem__VectorCoefficient_p_t swig_types[28]
#define SWIGTYPE_p_mfem__Coefficient swig_types[29]
#define SWIGTYPE_p_mfem__CoefficientVector swig_types[30]
#define SWIGTYPE_p_mfem__ConstantCoefficient swig_types[31]
#define SWIGTYPE_p_mfem__ConstrainedOperator swig_types[32]
#define SWIGTYPE_p_mfem__CrossCrossCoefficient swig_types[33]
#define SWIGTYPE_p_mfem__CurlGridFunctionCoefficient swig_types[34]
#define SWIGTYPE_p_mfem__DeltaCoefficient swig_types[35]
#define SWIGTYPE_p_mfem__DenseMatrix swig_types[36]
#define SWIGTYPE_p_mfem__DenseMatrixInverse swig_types[37]
#define SWIGTYPE_p_mfem__DenseSymmetricMatrix swig_types[38]
#define SWIGTYPE_p_mfem__DeterminantCoefficient swig_types[39]
#define SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient swig_types[40]
#define SWIGTYPE_p_mfem__ElementTransformation swig_types[41]
#define SWIGTYPE_p_mfem__FaceElementTransformations swig_types[42]
#define SWIGTYPE_p_mfem__FunctionCoefficient swig_types[43]
#define SWIGTYPE_p_mfem__GradientGridFunctionCoefficient swig_types[44]
#define SWIGTYPE_p_mfem__GridFunction swig_types[45]
#define SWIGTYPE_p_mfem__GridFunctionCoefficient swig_types[46]
#define SWIGTYPE_p_mfem__IdentityMatrixCoefficient swig_types[47]
#define SWIGTYPE_p_mfem__IdentityOperator swig_types[48]
#define SWIGTYPE_p_mfem__InnerProductCoefficient swig_types[49]
#define SWIGTYPE_p_mfem__IntegrationPoint swig_types[50]
#define SWIGTYPE_p_mfem__IntegrationRule swig_types[51]
#define SWIGTYPE_p_mfem__InverseMatrixCoefficient swig_types[52]
#define SWIGTYPE_p_mfem__IsoparametricTransformation swig_types[53]
#define SWIGTYPE_p_mfem__Matrix swig_types[54]
#define SWIGTYPE_p_mfem__MatrixArrayCoefficient swig_types[55]
#define SWIGTYPE_p_mfem__MatrixCoefficient swig_types[56]
#define SWIGTYPE_p_mfem__MatrixConstantCoefficient swig_types[57]
#define SWIGTYPE_p_mfem__MatrixFunctionCoefficient swig_types[58]
#define SWIGTYPE_p_mfem__MatrixInverse swig_types[59]
#define SWIGTYPE_p_mfem__MatrixProductCoefficient swig_types[60]
#define SWIGTYPE_p_mfem__MatrixPyCoefficientBase swig_types[61]
#define SWIGTYPE_p_mfem__MatrixRestrictedCoefficient swig_types[62]
#define SWIGTYPE_p_mfem__MatrixSumCoefficient swig_types[63]
#define SWIGTYPE_p_mfem__MatrixVectorProductCoefficient swig_types[64]
#define SWIGTYPE_p_mfem__Mesh swig_types[65]
#define SWIGTYPE_p_mfem__NormalizedVectorCoefficient swig_types[66]
#define SWIGTYPE_p_mfem__Operator swig_types[67]
#define SWIGTYPE_p_mfem__OuterProductCoefficient swig_types[68]
#define SWIGTYPE_p_mfem__PWCoefficient swig_types[69]
#define SWIGTYPE_p_mfem__PWConstCoefficient swig_types[70]
#define SWIGTYPE_p_mfem__PWMatrixCoefficient swig_types[71]
#define SWIGTYPE_p_mfem__PWVectorCoefficient swig_types[72]
#define SWIGTYPE_p_mfem__ParMesh swig_types[73]
#define SWIGTYPE_p_mfem__PowerCoefficient swig_types[74]
#define SWIGTYPE_p_mfem__ProductCoefficient swig_types[75]
#define SWIGTYPE_p_mfem__ProductOperator swig_types[76]
#define SWIGTYPE_p_mfem__PyCoefficientBase swig_types[77]
#define SWIGTYPE_p_mfem__PyOperatorBase swig_types[78]
#define SWIGTYPE_p_mfem__PyTimeDependentOperatorBase swig_types[79]
#define SWIGTYPE_p_mfem__QuadratureFunction swig_types[80]
#define SWIGTYPE_p_mfem__QuadratureFunctionCoefficient swig_types[81]
#define SWIGTYPE_p_mfem__QuadratureSpaceBase swig_types[82]
#define SWIGTYPE_p_mfem__RAPOperator swig_types[83]
#define SWIGTYPE_p_mfem__RatioCoefficient swig_types[84]
#define SWIGTYPE_p_mfem__RectangularConstrainedOperator swig_types[85]
#define SWIGTYPE_p_mfem__RestrictedCoefficient swig_types[86]
#define SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient swig_types[87]
#define SWIGTYPE_p_mfem__ScalarVectorProductCoefficient swig_types[88]
#define SWIGTYPE_p_mfem__ScaledOperator swig_types[89]
#define SWIGTYPE_p_mfem__SecondOrderTimeDependentOperator swig_types[90]
#define SWIGTYPE_p_mfem__Solver swig_types[91]
#define SWIGTYPE_p_mfem__SparseMatrix swig_types[92]
#define SWIGTYPE_p_mfem__SumCoefficient swig_types[93]
#define SWIGTYPE_p_mfem__SymmetricMatrixCoefficient swig_types[94]
#define SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient swig_types[95]
#define SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient swig_types[96]
#define SWIGTYPE_p_mfem__TimeDependentAdjointOperator swig_types[97]
#define SWIGTYPE_p_mfem__TimeDependentOperator swig_types[98]
#define SWIGTYPE_p_mfem__TransformedCoefficient swig_types[99]
#define SWIGTYPE_p_mfem__TransposeMatrixCoefficient swig_types[100]
#define SWIGTYPE_p_mfem__TransposeOperator swig_types[101]
#define SWIGTYPE_p_mfem__TripleProductOperator swig_types[102]
#define SWIGTYPE_p_mfem__Vector swig_types[103]
#define SWIGTYPE_p_mfem__VectorArrayCoefficient swig_types[104]
#define SWIGTYPE_p_mfem__VectorCoefficient swig_types[105]
#define SWIGTYPE_p_mfem__VectorConstantCoefficient swig_types[106]
#define SWIGTYPE_p_mfem__VectorCrossProductCoefficient swig_types[107]
#define SWIGTYPE_p_mfem__VectorDeltaCoefficient swig_types[108]
#define SWIGTYPE_p_mfem__VectorFunctionCoefficient swig_types[109]
#define SWIGTYPE_p_mfem__VectorGridFunctionCoefficient swig_types[110]
#define SWIGTYPE_p_mfem__VectorPyCoefficientBase swig_types[111]
#define SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient swig_types[112]
#define SWIGTYPE_p_mfem__VectorRestrictedCoefficient swig_types[113]
#define SWIGTYPE_p_mfem__VectorRotProductCoefficient swig_types[114]
#define SWIGTYPE_p_mfem__VectorSumCoefficient swig_types[115]
#define SWIGTYPE_p_p_ScalarNumbaCoefficient swig_types[116]
#define SWIGTYPE_p_p_double swig_types[117]
#define SWIGTYPE_p_p_mfem__AbstractSparseMatrix swig_types[118]
#define SWIGTYPE_p_p_mfem__Coefficient swig_types[119]
#define SWIGTYPE_p_p_mfem__CoefficientVector swig_types[120]
#define SWIGTYPE_p_p_mfem__ConstantCoefficient swig_types[121]
#define SWIGTYPE_p_p_mfem__ConstrainedOperator swig_types[122]
#define SWIGTYPE_p_p_mfem__DeltaCoefficient swig_types[123]
#define SWIGTYPE_p_p_mfem__DenseMatrix swig_types[124]
#define SWIGTYPE_p_p_mfem__DenseMatrixInverse swig_types[125]
#define SWIGTYPE_p_p_mfem__DenseSymmetricMatrix swig_types[126]
#define SWIGTYPE_p_p_mfem__DeterminantCoefficient swig_types[127]
#define SWIGTYPE_p_p_mfem__DivergenceGridFunctionCoefficient swig_types[128]
#define SWIGTYPE_p_p_mfem__FunctionCoefficient swig_types[129]
#define SWIGTYPE_p_p_mfem__GridFunctionCoefficient swig_types[130]
#define SWIGTYPE_p_p_mfem__IdentityOperator swig_types[131]
#define SWIGTYPE_p_p_mfem__InnerProductCoefficient swig_types[132]
#define SWIGTYPE_p_p_mfem__IntegrationRule swig_types[133]
#define SWIGTYPE_p_p_mfem__Matrix swig_types[134]
#define SWIGTYPE_p_p_mfem__MatrixInverse swig_types[135]
#define SWIGTYPE_p_p_mfem__Operator swig_types[136]
#define SWIGTYPE_p_p_mfem__PWCoefficient swig_types[137]
#define SWIGTYPE_p_p_mfem__PWConstCoefficient swig_types[138]
#define SWIGTYPE_p_p_mfem__PowerCoefficient swig_types[139]
#define SWIGTYPE_p_p_mfem__ProductCoefficient swig_types[140]
#define SWIGTYPE_p_p_mfem__ProductOperator swig_types[141]
#define SWIGTYPE_p_p_mfem__PyCoefficientBase swig_types[142]
#define SWIGTYPE_p_p_mfem__PyOperatorBase swig_types[143]
#define SWIGTYPE_p_p_mfem__PyTimeDependentOperatorBase swig_types[144]
#define SWIGTYPE_p_p_mfem__QuadratureFunctionCoefficient swig_types[145]
#define SWIGTYPE_p_p_mfem__RAPOperator swig_types[146]
#define SWIGTYPE_p_p_mfem__RatioCoefficient swig_types[147]
#define SWIGTYPE_p_p_mfem__RectangularConstrainedOperator swig_types[148]
#define SWIGTYPE_p_p_mfem__RestrictedCoefficient swig_types[149]
#define SWIGTYPE_p_p_mfem__ScaledOperator swig_types[150]
#define SWIGTYPE_p_p_mfem__SecondOrderTimeDependentOperator swig_types[151]
#define SWIGTYPE_p_p_mfem__Solver swig_types[152]
#define SWIGTYPE_p_p_mfem__SparseMatrix swig_types[153]
#define SWIGTYPE_p_p_mfem__SumCoefficient swig_types[154]
#define SWIGTYPE_p_p_mfem__TimeDependentAdjointOperator swig_types[155]
#define SWIGTYPE_p_p_mfem__TimeDependentOperator swig_types[156]
#define SWIGTYPE_p_p_mfem__TransformedCoefficient swig_types[157]
#define SWIGTYPE_p_p_mfem__TransposeOperator swig_types[158]
#define SWIGTYPE_p_p_mfem__TripleProductOperator swig_types[159]
#define SWIGTYPE_p_p_mfem__Vector swig_types[160]
#define SWIGTYPE_p_p_mfem__VectorRotProductCoefficient swig_types[161]
#define SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t swig_types[162]
#define SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t swig_types[163]
#define SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t swig_types[164]
#define SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t swig_types[165]
#define SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t swig_types[166]
#define SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t swig_types[167]
#define SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t swig_types[168]
#define SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t swig_types[169]
static swig_type_info *swig_types[171];
static swig_module_info swig_module = {swig_types, 170, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _coefficient.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__coefficient

#else
#  define SWIG_init    init_coefficient

#endif
#define SWIG_name    "_coefficient"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>
#include <sstream>
#include <fstream>
#include <limits>
#include <cmath>
#include <cstring>
#include <ctime>
#include "mfem.hpp"  
#include "pyoperator.hpp"    
#include "../common/pycoefficient.hpp"
#include "numpy/arrayobject.h"


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


void NumbaFunctionBase::SetUserFunction(PyObject *input){
       PyObject* module = PyImport_ImportModule("numba.core.ccallback");
       if (!module){
           PyErr_SetString(PyExc_RuntimeError, "Can not load numba.core.ccallback module");
           return;
       }
       PyObject* cls = PyObject_GetAttrString(module, "CFunc");
       if (!cls){
           PyErr_SetString(PyExc_RuntimeError, "Can not load CFunc");
           return;
       }
       int check = PyObject_IsInstance(input, cls);
       if (! check){
           PyErr_SetString(PyExc_RuntimeError, "Input must be numba.core.ccallback.CFunc");
           return;
       }
       PyObject *address = PyObject_GetAttrString(input, "address");
       void *ptr = PyLong_AsVoidPtr(address);
       Py_DECREF(address);
       address_ = ptr;
}

class NumbaFunction : public NumbaFunctionBase {
 private:
    std::function<double(const mfem::Vector &)> obj1;
    std::function<double(const mfem::Vector &, double t)> obj2;

 public:
    NumbaFunction(PyObject *input, int sdim):
       NumbaFunctionBase(input, sdim, false){}

    NumbaFunction(PyObject *input, int sdim, bool td):
       NumbaFunctionBase(input, sdim, td){}

    double call0(const mfem::Vector &x){
      return ((double (*)(double *))address_)(x.GetData());
    }
    double call(const mfem::Vector &x){
      return ((double (*)(double *, int))address_)(x.GetData(), sdim_);
    }
    double call0t(const mfem::Vector &x, double t){
      return ((double (*)(double *, double))address_)(x.GetData(), t);
    }
    double callt(const mfem::Vector &x, double t){
      return ((double (*)(double *, double, int))address_)(x.GetData(), t, sdim_);
    }

    // FunctionCoefficient
    mfem::FunctionCoefficient* GenerateCoefficient(int use_0=0){
      using std::placeholders::_1;
      using std::placeholders::_2;
      if (use_0==0) {
        if (td_) {
            obj2 = std::bind(&NumbaFunction::callt, this, _1, _2);
            return new mfem::FunctionCoefficient(obj2);
        } else {
           obj1 = std::bind(&NumbaFunction::call, this, _1);
           return new mfem::FunctionCoefficient(obj1);
        }
      } else {
        if (td_) {
          obj2 = std::bind(&NumbaFunction::call0t, this, _1, _2);
            return new mfem::FunctionCoefficient(obj2);
        } else {
          obj1 = std::bind(&NumbaFunction::call0, this, _1);
           return new mfem::FunctionCoefficient(obj1);
        }
      }
   }
};
// VectorFunctionCoefficient
class VectorNumbaFunction : public NumbaFunctionBase {
 private:
  std::function<void(const mfem::Vector &, mfem::Vector &)> obj1;
  std::function<void(const mfem::Vector &, double, mfem::Vector &)> obj2;
  int vdim_;

 public:
    VectorNumbaFunction(PyObject *input, int sdim, int vdim):
       NumbaFunctionBase(input, sdim, false), vdim_(vdim){}

    VectorNumbaFunction(PyObject *input, int sdim, int vdim, bool td):
       NumbaFunctionBase(input, sdim, td), vdim_(vdim){}


    void call(const mfem::Vector &x, mfem::Vector &out){
      out = 0.0;
      return ((void (*) (double *, double *, int, int))address_)(x.GetData(),
                                                              out.GetData(),
                                                              sdim_,
                                                              vdim_);

    }
    void callt(const mfem::Vector &x, double t, mfem::Vector &out){
      out = 0.0;
      return ((void (*) (double *, double,  double *, int, int))address_)(x.GetData(),
                                                                      t,
                                                                      out.GetData(),
                                                                      sdim_,
                                                                      vdim_);
    }
    void call0(const mfem::Vector &x, mfem::Vector &out){
      out = 0.0;
      return ((void (*) (double *, double *))address_)(x.GetData(),
                                                       out.GetData());

    }
    void call0t(const mfem::Vector &x, double t, mfem::Vector &out){
      out = 0.0;
      return ((void (*) (double *, double,  double *))address_)(x.GetData(),
                                                                t,
                                                                out.GetData());
    }

    mfem::VectorFunctionCoefficient* GenerateCoefficient(int use_0=0){
      using std::placeholders::_1;
      using std::placeholders::_2;
      using std::placeholders::_3;
      if (use_0 == 0){
         if (td_) {
           obj2 = std::bind(&VectorNumbaFunction::callt, this, _1, _2, _3);
           return new mfem::VectorFunctionCoefficient(vdim_, obj2);
         } else {
           obj1 = std::bind(&VectorNumbaFunction::call, this, _1, _2);
           return new mfem::VectorFunctionCoefficient(vdim_, obj1);
         }
      } else {
         if (td_) {
           obj2 = std::bind(&VectorNumbaFunction::call0t, this, _1, _2, _3);
           return new mfem::VectorFunctionCoefficient(vdim_, obj2);
         } else {
           obj1 = std::bind(&VectorNumbaFunction::call0, this, _1, _2);
           return new mfem::VectorFunctionCoefficient(vdim_, obj1);
         }
      }
   }
};
// MatrixFunctionCoefficient
class MatrixNumbaFunction : NumbaFunctionBase {
 private:
  std::function<void(const mfem::Vector &, mfem::DenseMatrix &)> obj1;
  std::function<void(const mfem::Vector &, double, mfem::DenseMatrix &)> obj2;
  int vdim_;

 public:
    MatrixNumbaFunction(PyObject *input, int sdim, int vdim):
       NumbaFunctionBase(input, sdim, false), vdim_(vdim){}
    MatrixNumbaFunction(PyObject *input, int sdim, int vdim, bool td):
       NumbaFunctionBase(input, sdim, td), vdim_(vdim){}

    void call(const mfem::Vector &x, mfem::DenseMatrix &out){
      out = 0.0;
      return ((void (*) (double *, double *, int, int))address_)(x.GetData(),
                                                              out.GetData(),
                                                              sdim_,
                                                              vdim_);

    }
    void callt(const mfem::Vector &x, double t, mfem::DenseMatrix &out){
      out = 0.0;
      return ((void (*) (double *, double,  double *, int, int))address_)(x.GetData(),
                                                                      t,
                                                                      out.GetData(),
                                                                      sdim_,
                                                                      vdim_);
    }
    void call0(const mfem::Vector &x, mfem::DenseMatrix &out){
      out = 0.0;
      return ((void (*) (double *, double *))address_)(x.GetData(),
                                                       out.GetData());

    }
    void call0t(const mfem::Vector &x, double t, mfem::DenseMatrix &out){
      out = 0.0;
      return ((void (*) (double *, double,  double *))address_)(x.GetData(),
                                                                t,
                                                                out.GetData());
    }

    mfem::MatrixFunctionCoefficient* GenerateCoefficient(int use_0=0){
      using std::placeholders::_1;
      using std::placeholders::_2;
      using std::placeholders::_3;
      if (use_0 == 0) {
      if (td_) {
        obj2 = std::bind(&MatrixNumbaFunction::callt, this, _1, _2, _3);
        return new mfem::MatrixFunctionCoefficient(vdim_, obj2);
      } else {
        obj1 = std::bind(&MatrixNumbaFunction::call, this, _1, _2);
        return new mfem::MatrixFunctionCoefficient(vdim_, obj1);
      }
      } else {
      if (td_) {
        obj2 = std::bind(&MatrixNumbaFunction::call0t, this, _1, _2, _3);
        return new mfem::MatrixFunctionCoefficient(vdim_, obj2);
      } else {
        obj1 = std::bind(&MatrixNumbaFunction::call0, this, _1, _2);
        return new mfem::MatrixFunctionCoefficient(vdim_, obj1);
      }

      }
    }
};

//
//  NumbaCoefficientBase  (hold list of coefficients which is used as a parameter for function coefficient)
//
 template<>
   void NumbaCoefficientBase::SetParams(const mfem::Array<mfem::Coefficient *>& in_coeffs,
                                        const mfem::Array<mfem::VectorCoefficient *>& in_vcoeffs,
                                        const mfem::Array<mfem::MatrixCoefficient *>& in_mcoeffs,
                                        const mfem::Array<ScalarNumbaCoefficient *>&  in_nscoeffs,
                                        const mfem::Array<VectorNumbaCoefficient *>&  in_nvcoeffs,
                                        const mfem::Array<MatrixNumbaCoefficient *>&  in_nmcoeffs){

    static_assert(std::is_base_of<NumbaCoefficientBase, ScalarNumbaCoefficient>::value);
    static_assert(std::is_base_of<NumbaCoefficientBase, VectorNumbaCoefficient>::value);
    static_assert(std::is_base_of<NumbaCoefficientBase, MatrixNumbaCoefficient>::value);

    int size = 0;

    num_coeffs = in_coeffs.Size();
    num_vcoeffs = in_vcoeffs.Size();
    num_mcoeffs = in_mcoeffs.Size();

    if ((num_coeffs + num_vcoeffs + num_mcoeffs) > 16){
        throw std::invalid_argument("dependency dim must be up to 16");
    }
    if (num_mcoeffs > 16){
        throw std::invalid_argument("dependency dim must be up to 16");
    }
    if (num_vcoeffs > 16){
        throw std::invalid_argument("dependency dim must be up to 16");
    }
    if (num_coeffs > 16){
        throw std::invalid_argument("dependency dim must be up to 16");
    }

    pcoeffs = new mfem::Array<mfem::Coefficient *>(num_coeffs);
    pvcoeffs = new mfem::Array<mfem::VectorCoefficient *>(num_vcoeffs);
    pmcoeffs = new mfem::Array<mfem::MatrixCoefficient *>(num_mcoeffs);

    mfem::Array<mfem::Coefficient *>& coeffs = *pcoeffs;
    mfem::Array<mfem::VectorCoefficient *>& vcoeffs = *pvcoeffs;
    mfem::Array<mfem::MatrixCoefficient *>& mcoeffs = *pmcoeffs;

    for (int i = 0; i < num_coeffs; i++){
      coeffs[i] = in_coeffs[i];
      size ++;
    }
    for (int i = 0; i < num_vcoeffs; i++){
      vcoeffs[i] = in_vcoeffs[i];
      size += vcoeffs[i] -> GetVDim();
    }
    for (int i = 0; i < num_mcoeffs; i++){
      mcoeffs[i] = in_mcoeffs[i];
      size += mcoeffs[i] -> GetHeight() * mcoeffs[i] -> GetWidth();
    }

    obj->SetDataCount(num_coeffs + num_vcoeffs + num_mcoeffs);

    using std::invalid_argument;
    if (size > 256){
        throw std::invalid_argument("dependency dim must be less than 256");
    }

    num_ncoeffs = in_nscoeffs.Size();
    num_nvcoeffs = in_nvcoeffs.Size();
    num_nmcoeffs = in_nmcoeffs.Size();

    pncoeffs = new mfem::Array<NumbaCoefficientBase *>(num_ncoeffs);
    mfem::Array<NumbaCoefficientBase *>& ncoeffs = *pncoeffs;
    for (int i = 0; i < num_ncoeffs; i++){
      ncoeffs[i] = static_cast<NumbaCoefficientBase *>(in_nscoeffs[i]);
    }

    pnvcoeffs = new mfem::Array<NumbaCoefficientBase *>(num_nvcoeffs);
    mfem::Array<NumbaCoefficientBase *>& nvcoeffs = *pnvcoeffs;
    for (int i = 0; i < num_nvcoeffs; i++){
      nvcoeffs[i] = static_cast<NumbaCoefficientBase *>(in_nvcoeffs[i]);
    }

    pnmcoeffs = new mfem::Array<NumbaCoefficientBase *>(num_nmcoeffs);
    mfem::Array<NumbaCoefficientBase *>& nmcoeffs = *pnmcoeffs;
    for (int i = 0; i < num_nmcoeffs; i++){
      nmcoeffs[i] = static_cast<NumbaCoefficientBase *>(in_nmcoeffs[i]);
    }

 }

void NumbaCoefficientBase::SetTimeInDependency(double t){
    mfem::Array<mfem::Coefficient *>& coeffs = *pcoeffs;
    mfem::Array<mfem::VectorCoefficient *>& vcoeffs = *pvcoeffs;
    mfem::Array<mfem::MatrixCoefficient *>& mcoeffs = *pmcoeffs;

    for (int i = 0; i < num_coeffs; i++){
      coeffs[i]->SetTime(t);
    }
    for (int i = 0; i < num_vcoeffs; i++){
      vcoeffs[i]->SetTime(t);
    }
    for (int i = 0; i < num_mcoeffs; i++){
      mcoeffs[i]->SetTime(t);
    }

}
void NumbaCoefficientBase::PrepParams(mfem::ElementTransformation &T,
                               const mfem::IntegrationPoint &ip){

    int vdim, h, w = 0;
    int idx = 0;
    double *data = obj -> GetData();
    double **data_ptr=obj ->GetPointer();

    int s_counter = 0;
    int v_counter = 0;
    int m_counter = 0;
    int ns_counter = 0;
    int nv_counter = 0;
    int nm_counter = 0;


    int counter = 0;

    mfem::Array<mfem::Coefficient *>& coeffs = *pcoeffs;
    mfem::Array<mfem::VectorCoefficient *>& vcoeffs = *pvcoeffs;
    mfem::Array<mfem::MatrixCoefficient *>& mcoeffs = *pmcoeffs;
    mfem::Array<NumbaCoefficientBase *>& ncoeffs = *pncoeffs;
    mfem::Array<NumbaCoefficientBase *>& nvcoeffs = *pnvcoeffs;
    mfem::Array<NumbaCoefficientBase *>& nmcoeffs = *pnmcoeffs;

    for (int i = 0; i < num_dep; i++){
        switch(kinds[i]){
        case 0:// scalar
          {
           data[idx] = coeffs[s_counter]->Eval(T, ip);
           data_ptr[counter] = &data[idx];

           idx ++;
           s_counter ++;
           counter ++;

           if (isdepcomplex[i] == 1){
               data[idx] = coeffs[s_counter]->Eval(T, ip);
               data_ptr[counter] = &data[idx];

               idx ++;
               s_counter ++;
               counter ++;
           }
           if (isdepcomplex[i] == 2){
             data[idx] = dynamic_cast<ScalarNumbaCoefficient *>(ncoeffs[ns_counter])->obj-> GetScalarImaginary();
              data_ptr[counter] = &data[idx];

              idx ++;
              ns_counter ++;
              counter ++;
           }
           break;
          }
        case 1:// vector
          {
           vdim = vcoeffs[v_counter]->GetVDim();
           mfem::Vector V(vdim);
           vcoeffs[v_counter]->Eval(V, T, ip);
           data_ptr[counter] = &data[idx];
           for (int j = 0; j < vdim; j++){
             data[idx] =  V[j];
             idx ++;
           }
           v_counter ++;
           counter ++;

           if (isdepcomplex[i] == 1){
              vcoeffs[v_counter]->Eval(V, T, ip);

              data_ptr[counter] = &data[idx];
              for (int j = 0; j < vdim; j++){
                  data[idx] =  V[j];
                  idx ++;
              }
              v_counter ++;
              counter ++;
           }
           if (isdepcomplex[i] == 2){
              dynamic_cast<VectorNumbaCoefficient *>(nvcoeffs[nv_counter])->obj-> GetArrayImaginary(V);

              data_ptr[counter] = &data[idx];
              for (int j = 0; j < vdim; j++){
                  data[idx] =  V[j];
                  idx ++;
              }
              nv_counter ++;
              counter ++;
           }
           break;
          }
        case 2:// matrix
          {
           w = mcoeffs[m_counter]->GetWidth();
           h = mcoeffs[m_counter]->GetHeight();
           mfem::DenseMatrix M(h, w);
           mcoeffs[m_counter]->Eval(M, T, ip);

           data_ptr[counter] = &data[idx];
           for (int jj = 0; jj < w; jj++){
              for (int ii = 0; ii < h; ii++){
                 data[idx] =  M(ii, jj);
                 idx ++;
              }
           }
           m_counter ++;
           counter ++;

           if (isdepcomplex[i] == 1){
              mcoeffs[m_counter]->Eval(M, T, ip);
              data_ptr[counter] = &data[idx];
              for (int jj = 0; jj < w; jj++){
                for (int ii = 0; ii < h; ii++){
                  data[idx] =  M(ii, jj);
                  idx ++;
                }
              }
              m_counter ++;
              counter ++;
           }

           if (isdepcomplex[i] == 2){
              dynamic_cast<MatrixNumbaCoefficient *>(nmcoeffs[nm_counter])->obj-> GetArrayImaginary(M);

              data_ptr[counter] = &data[idx];
              for (int jj = 0; jj < w; jj++){
                for (int ii = 0; ii < h; ii++){
                  data[idx] =  M(ii, jj);
                  idx ++;
                }
              }
              nm_counter ++;
              counter ++;
           }

           break;
          }
        }
    }
}
void NumbaCoefficientBase::SetKinds(PyObject *kinds_){
  if (PyList_Check(kinds_)) {
     int ll = PyList_Size(kinds_);
     if (ll > 16){
       PyErr_SetString(PyExc_ValueError, "Dependecy must be less than 16");
       return;
     }
     for (int i = 0; i < ll; i++) {
        PyObject *s = PyList_GetItem(kinds_, i);
        kinds[i] = (int)PyInt_AsLong(s);
     }
     num_dep = ll;
  } else if (PyTuple_Check(kinds_)) {
     int ll = PyTuple_Size(kinds_);
     for (int i = 0; i < ll; i++) {
        PyObject *s = PyTuple_GetItem(kinds_,i);
        kinds[i] = (int)PyInt_AsLong(s);
     }
     if (ll > 16){
       PyErr_SetString(PyExc_ValueError, "Dependecy must be less than 16");
       return;
     }
     num_dep = ll;
  } else {
    PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple");
  }
}
void NumbaCoefficientBase::SetIsDepComplex(PyObject *isComplex_){
  if (PyList_Check(isComplex_)) {
     int ll = PyList_Size(isComplex_);
     if (ll > 16){
       PyErr_SetString(PyExc_ValueError, "Dependecy must be less than 16");
       return;
     }
     for (int i = 0; i < ll; i++) {
        PyObject *s = PyList_GetItem(isComplex_, i);
        isdepcomplex[i] = (int)PyInt_AsLong(s);
     }
     num_dep = ll;
  } else if (PyTuple_Check(isComplex_)) {
     int ll = PyTuple_Size(isComplex_);
     for (int i = 0; i < ll; i++) {
        PyObject *s = PyTuple_GetItem(isComplex_,i);
        isdepcomplex[i] = (int)PyInt_AsLong(s);
     }
     num_dep = ll;
     if (ll > 16){
       PyErr_SetString(PyExc_ValueError, "Dependecy must be less than 16");
       return;
     }
  } else {
    PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple");
  }
}


double ScalarNumbaCoefficient::Eval(mfem::ElementTransformation &T,
                                  const mfem::IntegrationPoint &ip){
   PrepParams(T, ip);
   return mfem::FunctionCoefficient::Eval(T, ip);
}

void VectorNumbaCoefficient::Eval(mfem::Vector &V,
                                  mfem::ElementTransformation &T,
                                  const mfem::IntegrationPoint &ip){
   V.SetSize(vdim);
   PrepParams(T, ip);
   return mfem::VectorFunctionCoefficient::Eval(V, T, ip);
  }

void MatrixNumbaCoefficient :: Eval(mfem::DenseMatrix &K,
                                    mfem::ElementTransformation &T,
                                    const mfem::IntegrationPoint &ip){
    K.SetSize(height, width);
    PrepParams(T, ip);
    return mfem::MatrixFunctionCoefficient::Eval(K, T, ip);
  }

//  NumberFunction Implementation 2 (this is used for mfem.jit )
class ScalarNumbaFunction2 : public NumbaFunctionBase {
 private:
  std::function<double(const mfem::Vector &)> obj1;
  std::function<double(const mfem::Vector &, double t)> obj2;
  std::complex<double> ret;

 public:
    ScalarNumbaFunction2(PyObject *input):
       NumbaFunctionBase(input, 3, false){}

    ScalarNumbaFunction2(PyObject *input, bool td):
       NumbaFunctionBase(input, 3, td){}

    ~ScalarNumbaFunction2(){}

    double call(const mfem::Vector &x){
      int sdim = x.Size();
      return ((double (*)(double *, int, void **))address_)(x.GetData(),
                                                            sdim,
                                                            (void **)data_ptr);
    }
    double callt(const mfem::Vector &x, double t){
      int sdim = x.Size();
      return ((double (*)(double *, int, double, void **))address_)(x.GetData(),
                                                                    sdim,
                                                                    t,
                                                                    (void **)data_ptr);
    }
    // complex real part
    double callr(const mfem::Vector &x){
      int sdim = x.Size();
      ret = ((std::complex<double> (*)(double *, int, void**))address_)(x.GetData(),
                                                                        sdim,
                                                                        (void **)data_ptr);
      return ret.real();
    }
    double calltr(const mfem::Vector &x, double t){
      int sdim = x.Size();
      ret = ((std::complex<double> (*)(double *, int, double, void**))address_)(x.GetData(),
                                                                                sdim,
                                                                                t,
                                                                                (void **)data_ptr);
      return ret.real();
    }
    // complex imag part
    double calli(const mfem::Vector &x){
      int sdim = x.Size();
      ret = ((std::complex<double> (*)(double *, int,  void**))address_)(x.GetData(),
                                                                         sdim,
                                                                         (void **)data_ptr);
      return ret.imag();
    }
    double callti(const mfem::Vector &x, double t){
      int sdim = x.Size();
      ret = ((std::complex<double> (*)(double *, int, double, void **))address_)(x.GetData(),
                                                                                 sdim,
                                                                                 t,
                                                                                 (void **)data_ptr);
      return ret.imag();
    }
    double GetScalarImaginary(){
      return ret.imag();
    }

    void set_obj1(std::function<double(const mfem::Vector &)> obj1_){
      obj1 = obj1_;
    };
    void set_obj2(std::function<double(const mfem::Vector &, double )> obj2_){
      obj2 = obj2_;
    };
    std::function<double(const mfem::Vector &)> get_obj1(){ return obj1; }
    std::function<double(const mfem::Vector &, double )> get_obj2(){return obj2; }
};

    // FunctionCoefficient
    // mode   (0: real, 1: complex real part, 2: complex imag part)
ScalarNumbaCoefficient* GenerateScalarNumbaCoefficient(PyObject *numba_func,  bool td, int mode){
      using std::placeholders::_1;
      using std::placeholders::_2;

      ScalarNumbaFunction2 *func_wrap = new ScalarNumbaFunction2(numba_func, td);
      if (td) {
          switch(mode){
          case 0:
            func_wrap->set_obj2(std::bind(&ScalarNumbaFunction2::callt, func_wrap, _1, _2));
            break;
          case 1:
            func_wrap->set_obj2(std::bind(&ScalarNumbaFunction2::calltr, func_wrap, _1, _2));
            break;
          case 2:
            func_wrap->set_obj2(std::bind(&ScalarNumbaFunction2::callti, func_wrap, _1, _2));
            break;
          }
          return new ScalarNumbaCoefficient(func_wrap->get_obj2(), func_wrap);
      } else {
          switch(mode){
          case 0:
            func_wrap->set_obj1(std::bind(&ScalarNumbaFunction2::call, func_wrap, _1));
            break;
          case 1:
            func_wrap->set_obj1(std::bind(&ScalarNumbaFunction2::callr, func_wrap, _1));
            break;
          case 2:
            func_wrap->set_obj1(std::bind(&ScalarNumbaFunction2::calli, func_wrap, _1));
            break;
          }
          return new ScalarNumbaCoefficient(func_wrap->get_obj1(), func_wrap);
      }
}
// VectorFunctionCoefficient
class VectorNumbaFunction2 : public NumbaFunctionBase {
 private:
  std::function<void(const mfem::Vector &, mfem::Vector &)> obj1;
  std::function<void(const mfem::Vector &, double, mfem::Vector &)> obj2;
  int vdim_;
  std::complex<double> *outc = nullptr;
 public:
    VectorNumbaFunction2(PyObject *input, int vdim)
       : NumbaFunctionBase(input, 3, false), vdim_(vdim){}

    VectorNumbaFunction2(PyObject *input, int vdim, bool td)
       : NumbaFunctionBase(input, 3, td), vdim_(vdim){}

    ~VectorNumbaFunction2(){
      delete [] outc;
    }

    void call(const mfem::Vector &x, mfem::Vector &out){
      int sdim = x.Size();
      out = 0.0;
      return ((void (*) (double *, int, void **, double *))address_)(x.GetData(),
                                                                     sdim,
                                                                     (void **)data_ptr,
                                                                     out.GetData());

    }
    void callt(const mfem::Vector &x, double t, mfem::Vector &out){
      int sdim = x.Size();
      out = 0.0;
      return ((void (*) (double *, int, double,  void**, double *))address_)(x.GetData(),
                                                                             sdim,
                                                                             t,
                                                                             (void **)data_ptr,
                                                                             out.GetData());
    }
    void callr(const mfem::Vector &x, mfem::Vector &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, void **, std::complex<double> *))address_)(x.GetData(),
                                                                            sdim,
                                                                            (void **)data_ptr, outc);
      for (int i = 0; i < vdim_; i++) {

        out[i] = outc[i].real();
      }
    }
    void calltr(const mfem::Vector &x, double t, mfem::Vector &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, double, void**,  std::complex<double> *))address_)(x.GetData(),
                                                                                    sdim,
                                                                                    t,
                                                                                    (void **)data_ptr,
                                                                                    outc);
      for (int i = 0; i < vdim_; i++) {
        out[i] = outc[i].real();
      }
    }
    void calli(const mfem::Vector &x, mfem::Vector &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, void**, std::complex<double> *))address_)(x.GetData(),
                                                                           sdim,
                                                                           (void **)data_ptr,
                                                                           outc);
      for (int i = 0; i < vdim_; i++) {
        out[i] = outc[i].imag();
      }

    }
    void callti(const mfem::Vector &x, double t, mfem::Vector &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, double, void**, std::complex<double> *))address_)(x.GetData(),
                                                                                   sdim,
                                                                                   t,
                                                                                   (void **)data_ptr,
                                                                                   outc);
      for (int i = 0; i < vdim_; i++) {
        out[i] = outc[i].imag();
      }
    }
    void GetArrayImaginary(mfem::Vector &out){
      for (int i = 0; i < vdim_; i++) {
        out[i] = outc[i].imag();
      }
    }

    void create_outc(){
      outc = new std::complex<double>[vdim_];
    }
    void set_obj1(std::function<void(const mfem::Vector &, mfem::Vector &)> obj1_){
      obj1 = obj1_;
    };
    void set_obj2(std::function<void(const mfem::Vector &, double, mfem::Vector &)> obj2_){
      obj2 = obj2_;
    };
    std::function<void(const mfem::Vector &, mfem::Vector &)> get_obj1(){return obj1;}
    std::function<void(const mfem::Vector &, double, mfem::Vector &)> get_obj2(){return obj2;}
};
VectorNumbaCoefficient* GenerateVectorNumbaCoefficient(PyObject *numba_func, int vdim, bool td, int mode){
      using std::placeholders::_1;
      using std::placeholders::_2;
      using std::placeholders::_3;

      VectorNumbaFunction2 *func_wrap = new VectorNumbaFunction2(numba_func, vdim, td);
      if (td) {
          switch(mode){
          case 0:
            func_wrap->set_obj2(std::bind(&VectorNumbaFunction2::callt, func_wrap, _1, _2, _3));
            break;
          case 1:
            func_wrap->set_obj2(std::bind(&VectorNumbaFunction2::calltr, func_wrap, _1, _2, _3));
            func_wrap->create_outc();
            break;
          case 2:
            func_wrap->set_obj2(std::bind(&VectorNumbaFunction2::callti, func_wrap, _1, _2, _3));
            func_wrap->create_outc();
            break;
          }
          return new VectorNumbaCoefficient(vdim, func_wrap->get_obj2(), func_wrap);
      } else {
          switch(mode){
          case 0:
            func_wrap->set_obj1(std::bind(&VectorNumbaFunction2::call, func_wrap, _1, _2));
            break;
          case 1:
            func_wrap->set_obj1(std::bind(&VectorNumbaFunction2::callr, func_wrap, _1, _2));
            func_wrap->create_outc();
            break;
          case 2:
            func_wrap->set_obj1(std::bind(&VectorNumbaFunction2::calli, func_wrap, _1, _2));
            func_wrap->create_outc();
            break;
          }
          return new VectorNumbaCoefficient(vdim, func_wrap->get_obj1(), func_wrap);
      }
}

// MatrixFunctionCoefficient
class MatrixNumbaFunction2 : public NumbaFunctionBase {
 private:
  std::function<void(const mfem::Vector &, mfem::DenseMatrix &)> obj1 = nullptr;
  std::function<void(const mfem::Vector &, double, mfem::DenseMatrix &)> obj2 = nullptr;
  int vdim_;
  std::complex<double> *outc;
 public:
    MatrixNumbaFunction2(PyObject *input, int vdim)
      : NumbaFunctionBase(input, 3, false), vdim_(vdim){}
    MatrixNumbaFunction2(PyObject *input, int vdim, bool td)
      : NumbaFunctionBase(input, 3, td), vdim_(vdim){}
    ~MatrixNumbaFunction2(){
      delete [] outc;
    }

    void call(const mfem::Vector &x, mfem::DenseMatrix &out){
      int sdim = x.Size();
      out = 0.0;
      return ((void (*) (double *, int, void**, double *))address_)(x.GetData(),
                                                                    sdim,
                                                                    (void **)data_ptr,
                                                                    out.GetData());

    }
    void callt(const mfem::Vector &x, double t, mfem::DenseMatrix &out){
      int sdim = x.Size();
      out = 0.0;
      return ((void (*) (double *, int, double, void**, double *))address_)(x.GetData(),
                                                                            sdim,
                                                                            t,
                                                                            (void **)data_ptr,
                                                                            out.GetData());
    }
    void callr(const mfem::Vector &x, mfem::DenseMatrix &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, void**, std::complex<double> *))address_)(x.GetData(),
                                                                           sdim,
                                                                           (void**)data_ptr,
                                                                           outc);
      double *outptr = out.GetData();
      for (int i = 0; i < vdim_; i++) {
        outptr[i] = outc[i].real();
      }
    }
    void calltr(const mfem::Vector &x, double t, mfem::DenseMatrix &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, double, void**,  std::complex<double> *))address_)(x.GetData(),
                                                                                    sdim,
                                                                                    t,
                                                                                    (void **)data_ptr,
                                                                                    outc);
      double *outptr = out.GetData();
      for (int i = 0; i < vdim_; i++) {
        outptr[i] = outc[i].real();
      }
    }
    void calli(const mfem::Vector &x, mfem::DenseMatrix &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, void**, std::complex<double> *))address_)(x.GetData(),
                                                                           sdim,
                                                                           (void **)data_ptr,
                                                                           outc);
      double *outptr = out.GetData();
      for (int i = 0; i < vdim_; i++) {
        outptr[i] = outc[i].imag();
      }

    }
    void callti(const mfem::Vector &x, double t, mfem::DenseMatrix &out){
      int sdim = x.Size();
      out = 0.0;
      ((void (*) (double *, int, double, void**,  std::complex<double> *))address_)(x.GetData(),
                                                                                    sdim,
                                                                                    t,
                                                                                    (void **)data_ptr,
                                                                                    outc);
      double *outptr = out.GetData();
      for (int i = 0; i < vdim_; i++) {
        outptr[i] = outc[i].imag();
      }
    }
    void GetArrayImaginary(mfem::DenseMatrix &out){
      double *outptr = out.GetData();
      for (int i = 0; i < vdim_; i++) {
        outptr[i] = outc[i].imag();
      }
    }
    void create_outc(){
      outc = new std::complex<double>[vdim_];
    }
    void set_obj1(std::function<void(const mfem::Vector &, mfem::DenseMatrix &)> obj1_){
      obj1 = obj1_;
    };
    void set_obj2(std::function<void(const mfem::Vector &, double, mfem::DenseMatrix &)> obj2_){
      obj2 = obj2_;
    };
    std::function<void(const mfem::Vector &, mfem::DenseMatrix &)> get_obj1(){return obj1;}
    std::function<void(const mfem::Vector &, double, mfem::DenseMatrix &)> get_obj2(){return obj2;}

};

MatrixNumbaCoefficient* GenerateMatrixNumbaCoefficient(PyObject *numba_func, int height,  int width, bool td, int mode){
  using std::placeholders::_1;
  using std::placeholders::_2;
  using std::placeholders::_3;

  //mfem::DenseMatrix &m = mfem::DenseMatrix(width, height);

  MatrixNumbaFunction2 *func_wrap = new MatrixNumbaFunction2(numba_func, width*height, td);
  if (td) {
          switch(mode){
          case 0:
            func_wrap->set_obj2(std::bind(&MatrixNumbaFunction2::callt, func_wrap, _1, _2, _3));
            break;
          case 1:
            func_wrap->set_obj2(std::bind(&MatrixNumbaFunction2::calltr, func_wrap, _1, _2, _3));
            func_wrap->create_outc();
            break;
          case 2:
            func_wrap->set_obj2(std::bind(&MatrixNumbaFunction2::callti, func_wrap, _1, _2, _3));
            func_wrap->create_outc();
            break;
          }
          return new MatrixNumbaCoefficient(height, width, func_wrap->get_obj2(), func_wrap);
   } else {
          switch(mode){
          case 0:
            func_wrap->set_obj1(std::bind(&MatrixNumbaFunction2::call, func_wrap, _1, _2));
            break;
          case 1:
            func_wrap->set_obj1(std::bind(&MatrixNumbaFunction2::callr, func_wrap, _1, _2));
            func_wrap->create_outc();
            break;
          case 2:
            func_wrap->set_obj1(std::bind(&MatrixNumbaFunction2::calli, func_wrap, _1, _2));
            func_wrap->create_outc();
            break;
          }
          return new MatrixNumbaCoefficient(height, width, func_wrap->get_obj1(), func_wrap);
      }
}

void SetNumbaCoefficientDependency(NumbaCoefficientBase &obj,
                                   const mfem::Array<mfem::Coefficient *>& a1,
                                   const mfem::Array<mfem::VectorCoefficient *>& a2,
                                   const mfem::Array<mfem::MatrixCoefficient *>& a3,
                                   const mfem::Array<ScalarNumbaCoefficient *>& a4,
                                   const mfem::Array<VectorNumbaCoefficient *>& a5,
                                   const mfem::Array<MatrixNumbaCoefficient *>& a6){
   obj.SetParams(a1,a2, a3, a4, a5, a6);
}


double fake_func(const mfem::Vector &x)
{
  return 0.0;
}
void fake_func_vec(const mfem::Vector &x, mfem::Vector &Ht)
{
     Ht(0) = 0.0;
     Ht(1) = 0.0;
     Ht(2) = 0.0;
}
void fake_func_mat(const mfem::Vector &x, mfem::DenseMatrix &Kt)
{
  Kt(0,0) = 1.0;
  Kt(1,0) = 0.0;
  Kt(2,0) = 0.0;
  Kt(0,1) = 0.0;
  Kt(1,1) = 1.0;
  Kt(2,1) = 0.0;
  Kt(0,2) = 0.0;
  Kt(1,2) = 0.0;
  Kt(2,2) = 1.0;
}

namespace mfem{ 
double PyCoefficientBase::Eval(ElementTransformation &T,
                               const IntegrationPoint &ip)
{
   double x[3];
   Vector transip(x, 3);

   T.Transform(ip, transip);

   if (isTimeDependent)
   {
     return _EvalPyT(transip, GetTime());
   }
   else
   {
     return _EvalPy(transip);
   }
}
void VectorPyCoefficientBase::Eval(Vector &V, ElementTransformation &T,
                                     const IntegrationPoint &ip)
{
   double x[3];
   Vector transip(x, 3);

   T.Transform(ip, transip);

   V.SetSize(vdim);
   if (isTimeDependent)
   {
      _EvalPyT(transip, GetTime(),  V);          
   }
   else
   {
      _EvalPy(transip, V);
   }
}

void VectorPyCoefficientBase::Eval(DenseMatrix &M, ElementTransformation &T,
                                  const IntegrationRule &ir)

{
   Vector Mi;
   M.SetSize(vdim, ir.GetNPoints());
   for (int i = 0; i < ir.GetNPoints(); i++)
   {
      M.GetColumnReference(i, Mi);
      const IntegrationPoint &ip = ir.IntPoint(i);
      T.SetIntPoint(&ip);
      Eval(Mi, T, ip);
   }
}

void MatrixPyCoefficientBase::Eval(DenseMatrix &K, ElementTransformation &T,
                                     const IntegrationPoint &ip)
{
   double x[3];
   Vector transip(x, 3);

   T.Transform(ip, transip);
   K.SetSize(height, width);   
   if (isTimeDependent)
   {
      _EvalPyT(transip, GetTime(),  K);          
   }
   else
   {
      _EvalPy(transip, K);
   }
}

}  /* end of name space*/



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "coefficient_wrap.h"

SwigDirector_PyCoefficientBase::SwigDirector_PyCoefficientBase(PyObject *self,int tdep): mfem::PyCoefficientBase(tdep), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((mfem::PyCoefficientBase *)this, this); 
}




void SwigDirector_PyCoefficientBase::SetTime(double t) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(t));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "SetTime";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("SetTime");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


double SwigDirector_PyCoefficientBase::Eval(mfem::ElementTransformation &T,mfem::IntegrationPoint const &ip) {
  double c_result = SwigValueInit< double >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&T), SWIGTYPE_p_mfem__ElementTransformation,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&ip), SWIGTYPE_p_mfem__IntegrationPoint,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "Eval";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
  }
  c_result = static_cast< double >(swig_val);
  return (double) c_result;
}


void SwigDirector_PyCoefficientBase::Project(mfem::QuadratureFunction &qf) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&qf), SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "Project";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Project");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


SwigDirector_PyCoefficientBase::~SwigDirector_PyCoefficientBase() {
}

double SwigDirector_PyCoefficientBase::_EvalPy(mfem::Vector &arg0) {
  double c_result = SwigValueInit< double >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_mfem__Vector,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "_EvalPy";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("_EvalPy");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
  }
  c_result = static_cast< double >(swig_val);
  return (double) c_result;
}


double SwigDirector_PyCoefficientBase::_EvalPyT(mfem::Vector &arg0,double arg1) {
  double c_result = SwigValueInit< double >() ;
  
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(arg1));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "_EvalPyT";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("_EvalPyT");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
  }
  c_result = static_cast< double >(swig_val);
  return (double) c_result;
}


SwigDirector_VectorPyCoefficientBase::SwigDirector_VectorPyCoefficientBase(PyObject *self,int dim,int tdep,mfem::Coefficient *q): mfem::VectorPyCoefficientBase(dim, tdep, q), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((mfem::VectorPyCoefficientBase *)this, this); 
}




void SwigDirector_VectorPyCoefficientBase::SetTime(double t) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(t));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VectorPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "SetTime";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("SetTime");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_VectorPyCoefficientBase::Eval(mfem::Vector &V,mfem::ElementTransformation &T,mfem::IntegrationPoint const &ip) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&V), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&T), SWIGTYPE_p_mfem__ElementTransformation,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&ip), SWIGTYPE_p_mfem__IntegrationPoint,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VectorPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "Eval";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_VectorPyCoefficientBase::Eval(mfem::DenseMatrix &M,mfem::ElementTransformation &T,mfem::IntegrationRule const &ir) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&M), SWIGTYPE_p_mfem__DenseMatrix,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&T), SWIGTYPE_p_mfem__ElementTransformation,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&ir), SWIGTYPE_p_mfem__IntegrationRule,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VectorPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "Eval";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_VectorPyCoefficientBase::Project(mfem::QuadratureFunction &qf) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&qf), SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VectorPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "Project";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Project");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


SwigDirector_VectorPyCoefficientBase::~SwigDirector_VectorPyCoefficientBase() {
}

void SwigDirector_VectorPyCoefficientBase::_EvalPy(mfem::Vector &arg0,mfem::Vector &arg1) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg1), SWIGTYPE_p_mfem__Vector,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VectorPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "_EvalPy";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("_EvalPy");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_VectorPyCoefficientBase::_EvalPyT(mfem::Vector &arg0,double arg1,mfem::Vector &arg2) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(arg1));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg2), SWIGTYPE_p_mfem__Vector,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VectorPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "_EvalPyT";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("_EvalPyT");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


SwigDirector_MatrixPyCoefficientBase::SwigDirector_MatrixPyCoefficientBase(PyObject *self,int dim,int tdep): mfem::MatrixPyCoefficientBase(dim, tdep), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((mfem::MatrixPyCoefficientBase *)this, this); 
}




void SwigDirector_MatrixPyCoefficientBase::SetTime(double t) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(t));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MatrixPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "SetTime";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("SetTime");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_MatrixPyCoefficientBase::Eval(mfem::DenseMatrix &K,mfem::ElementTransformation &T,mfem::IntegrationPoint const &ip) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&K), SWIGTYPE_p_mfem__DenseMatrix,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&T), SWIGTYPE_p_mfem__ElementTransformation,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&ip), SWIGTYPE_p_mfem__IntegrationPoint,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MatrixPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "Eval";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_MatrixPyCoefficientBase::Project(mfem::QuadratureFunction &qf,bool transpose) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&qf), SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_bool(static_cast< bool >(transpose));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MatrixPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "Project";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("Project");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_MatrixPyCoefficientBase::EvalSymmetric(mfem::Vector &K,mfem::ElementTransformation &T,mfem::IntegrationPoint const &ip) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&K), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&T), SWIGTYPE_p_mfem__ElementTransformation,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&ip), SWIGTYPE_p_mfem__IntegrationPoint,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MatrixPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "EvalSymmetric";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("EvalSymmetric");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


SwigDirector_MatrixPyCoefficientBase::~SwigDirector_MatrixPyCoefficientBase() {
}

void SwigDirector_MatrixPyCoefficientBase::_EvalPy(mfem::Vector &arg0,mfem::DenseMatrix &arg1) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg1), SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MatrixPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "_EvalPy";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("_EvalPy");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_MatrixPyCoefficientBase::_EvalPyT(mfem::Vector &arg0,double arg1,mfem::DenseMatrix &arg2) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_mfem__Vector,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(arg1));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg2), SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MatrixPyCoefficientBase.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "_EvalPyT";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("_EvalPyT");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_Coefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Coefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_SetTime" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coefficient_GetTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_GetTime" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  {
    try {
      result = (double)(arg1)->GetTime(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_Eval" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Coefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_Eval" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Coefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Coefficient_Eval" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Coefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Coefficient_Eval__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Coefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Coefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Coefficient::Eval(mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::Coefficient::Eval(mfem::ElementTransformation &,mfem::IntegrationPoint const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Coefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Coefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coefficient_Project" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Coefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coefficient" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Coefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__Coefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ConstantCoefficient_constant_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ConstantCoefficient *arg1 = (mfem::ConstantCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConstantCoefficient_constant_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantCoefficient_constant_set" "', argument " "1"" of type '" "mfem::ConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ConstantCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstantCoefficient_constant_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->constant = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstantCoefficient_constant_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ConstantCoefficient *arg1 = (mfem::ConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantCoefficient_constant_get" "', argument " "1"" of type '" "mfem::ConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ConstantCoefficient * >(argp1);
  result = (double) ((arg1)->constant);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstantCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1.0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"c",  NULL 
  };
  mfem::ConstantCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|O:new_ConstantCoefficient", kwnames, &obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_double(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConstantCoefficient" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    try {
      result = (mfem::ConstantCoefficient *)new mfem::ConstantCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ConstantCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstantCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ConstantCoefficient *arg1 = (mfem::ConstantCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ConstantCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantCoefficient_Eval" "', argument " "1"" of type '" "mfem::ConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstantCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ConstantCoefficient *arg1 = (mfem::ConstantCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ConstantCoefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstantCoefficient_Project" "', argument " "1"" of type '" "mfem::ConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstantCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstantCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConstantCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ConstantCoefficient *arg1 = (mfem::ConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ConstantCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstantCoefficient" "', argument " "1"" of type '" "mfem::ConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ConstantCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConstantCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ConstantCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConstantCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PWConstCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  mfem::PWConstCoefficient *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 1)) SWIG_fail;
  if (swig_obj[0]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg1 = PyArray_PyIntAsInt(swig_obj[0]);
    }
  }
  {
    try {
      result = (mfem::PWConstCoefficient *)new mfem::PWConstCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWConstCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWConstCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::PWConstCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PWConstCoefficient" "', argument " "1"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWConstCoefficient" "', argument " "1"" of type '" "mfem::Vector &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  {
    try {
      result = (mfem::PWConstCoefficient *)new mfem::PWConstCoefficient(*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWConstCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWConstCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PWConstCoefficient", 0, 1, argv))) SWIG_fail;
  --argc;
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc <= 0) {
      return _wrap_new_PWConstCoefficient__SWIG_0(self, argc, argv);
    }
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      return _wrap_new_PWConstCoefficient__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PWConstCoefficient__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PWConstCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::PWConstCoefficient::PWConstCoefficient(int)\n"
    "    mfem::PWConstCoefficient::PWConstCoefficient(mfem::Vector &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PWConstCoefficient_UpdateConstants(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWConstCoefficient *arg1 = (mfem::PWConstCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"c",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWConstCoefficient_UpdateConstants", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWConstCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWConstCoefficient_UpdateConstants" "', argument " "1"" of type '" "mfem::PWConstCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWConstCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWConstCoefficient_UpdateConstants" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWConstCoefficient_UpdateConstants" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->UpdateConstants(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWConstCoefficient___call__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWConstCoefficient *arg1 = (mfem::PWConstCoefficient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWConstCoefficient___call__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWConstCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWConstCoefficient___call__" "', argument " "1"" of type '" "mfem::PWConstCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWConstCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (double *) &(arg1)->operator ()(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWConstCoefficient_GetNConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PWConstCoefficient *arg1 = (mfem::PWConstCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWConstCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWConstCoefficient_GetNConst" "', argument " "1"" of type '" "mfem::PWConstCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWConstCoefficient * >(argp1);
  {
    try {
      result = (int)(arg1)->GetNConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWConstCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWConstCoefficient *arg1 = (mfem::PWConstCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWConstCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWConstCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWConstCoefficient_Eval" "', argument " "1"" of type '" "mfem::PWConstCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWConstCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWConstCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWConstCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWConstCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWConstCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PWConstCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PWConstCoefficient *arg1 = (mfem::PWConstCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWConstCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PWConstCoefficient" "', argument " "1"" of type '" "mfem::PWConstCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWConstCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PWConstCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__PWConstCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PWConstCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PWCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::PWCoefficient *)new mfem::PWCoefficient(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Array< int > *arg1 = 0 ;
  mfem::Array< mfem::Coefficient * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::PWCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PWCoefficient" "', argument " "1"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWCoefficient" "', argument " "1"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Array< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_mfem__Coefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PWCoefficient" "', argument " "2"" of type '" "mfem::Array< mfem::Coefficient * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWCoefficient" "', argument " "2"" of type '" "mfem::Array< mfem::Coefficient * > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< mfem::Coefficient * > * >(argp2);
  {
    try {
      result = (mfem::PWCoefficient *)new mfem::PWCoefficient((mfem::Array< int > const &)*arg1,(mfem::Array< mfem::Coefficient * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PWCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PWCoefficient__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_mfem__Coefficient_p_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PWCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PWCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::PWCoefficient::PWCoefficient()\n"
    "    mfem::PWCoefficient::PWCoefficient(mfem::Array< int > const &,mfem::Array< mfem::Coefficient * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PWCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *arg1 = (mfem::PWCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWCoefficient_SetTime" "', argument " "1"" of type '" "mfem::PWCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PWCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWCoefficient_UpdateCoefficients(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *arg1 = (mfem::PWCoefficient *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< mfem::Coefficient * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  (char *)"coefs",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWCoefficient_UpdateCoefficients", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWCoefficient_UpdateCoefficients" "', argument " "1"" of type '" "mfem::PWCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWCoefficient_UpdateCoefficients" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWCoefficient_UpdateCoefficients" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_mfem__Coefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWCoefficient_UpdateCoefficients" "', argument " "3"" of type '" "mfem::Array< mfem::Coefficient * > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWCoefficient_UpdateCoefficients" "', argument " "3"" of type '" "mfem::Array< mfem::Coefficient * > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< mfem::Coefficient * > * >(argp3);
  {
    try {
      (arg1)->UpdateCoefficients((mfem::Array< int > const &)*arg2,(mfem::Array< mfem::Coefficient * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWCoefficient_UpdateCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *arg1 = (mfem::PWCoefficient *) 0 ;
  int arg2 ;
  mfem::Coefficient *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  (char *)"coef",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWCoefficient_UpdateCoefficient", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWCoefficient_UpdateCoefficient" "', argument " "1"" of type '" "mfem::PWCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWCoefficient_UpdateCoefficient" "', argument " "3"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWCoefficient_UpdateCoefficient" "', argument " "3"" of type '" "mfem::Coefficient &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  {
    try {
      (arg1)->UpdateCoefficient(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWCoefficient_ZeroCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *arg1 = (mfem::PWCoefficient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWCoefficient_ZeroCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWCoefficient_ZeroCoefficient" "', argument " "1"" of type '" "mfem::PWCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      (arg1)->ZeroCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *arg1 = (mfem::PWCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWCoefficient_Eval" "', argument " "1"" of type '" "mfem::PWCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PWCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PWCoefficient *arg1 = (mfem::PWCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PWCoefficient" "', argument " "1"" of type '" "mfem::PWCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PWCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__PWCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PWCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FunctionCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::function< double (mfem::Vector const &) > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  mfem::FunctionCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctionCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &) >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctionCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &) >""'");
    } else {
      std::function< double (mfem::Vector const &) > * temp = reinterpret_cast< std::function< double (mfem::Vector const &) > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (mfem::FunctionCoefficient *)new mfem::FunctionCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FunctionCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::function< double (mfem::Vector const &,double) > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  mfem::FunctionCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctionCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &,double) >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctionCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &,double) >""'");
    } else {
      std::function< double (mfem::Vector const &,double) > * temp = reinterpret_cast< std::function< double (mfem::Vector const &,double) > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (mfem::FunctionCoefficient *)new mfem::FunctionCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FunctionCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double (*arg1)(mfem::Vector &) = (double (*)(mfem::Vector &)) 0 ;
  mfem::FunctionCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_r_mfem__Vector__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_FunctionCoefficient" "', argument " "1"" of type '" "double (*)(mfem::Vector &)""'"); 
    }
  }
  {
    try {
      result = (mfem::FunctionCoefficient *)new mfem::FunctionCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FunctionCoefficient__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double (*arg1)(mfem::Vector &,double) = (double (*)(mfem::Vector &,double)) 0 ;
  mfem::FunctionCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_r_mfem__Vector_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_FunctionCoefficient" "', argument " "1"" of type '" "double (*)(mfem::Vector &,double)""'"); 
    }
  }
  {
    try {
      result = (mfem::FunctionCoefficient *)new mfem::FunctionCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FunctionCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FunctionCoefficient", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FunctionCoefficient__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FunctionCoefficient__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_r_mfem__Vector__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FunctionCoefficient__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *ptr = 0;
    int res = SWIG_ConvertFunctionPtr(argv[0], &ptr, SWIGTYPE_p_f_r_mfem__Vector_double__double);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FunctionCoefficient__SWIG_3(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FunctionCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::FunctionCoefficient::FunctionCoefficient(std::function< double (mfem::Vector const &) >)\n"
    "    mfem::FunctionCoefficient::FunctionCoefficient(std::function< double (mfem::Vector const &,double) >)\n"
    "    mfem::FunctionCoefficient::FunctionCoefficient(double (*)(mfem::Vector &))\n"
    "    mfem::FunctionCoefficient::FunctionCoefficient(double (*)(mfem::Vector &,double))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FunctionCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FunctionCoefficient *arg1 = (mfem::FunctionCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:FunctionCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::FunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FunctionCoefficient *arg1 = (mfem::FunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctionCoefficient" "', argument " "1"" of type '" "mfem::FunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__FunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GridFunctionCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::GridFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::GridFunctionCoefficient *)new mfem::GridFunctionCoefficient(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridFunctionCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::GridFunction *arg1 = (mfem::GridFunction *) 0 ;
  int arg2 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::GridFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunction * >(argp1);
  if (swig_obj[1]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(swig_obj[1]);
    }
  }
  {
    try {
      result = (mfem::GridFunctionCoefficient *)new mfem::GridFunctionCoefficient((mfem::GridFunction const *)arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridFunctionCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_GridFunctionCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_GridFunctionCoefficient__SWIG_0(self, argc, argv);
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__GridFunction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_GridFunctionCoefficient__SWIG_1(self, argc, argv);
      }
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_new_GridFunctionCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_GridFunctionCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::GridFunctionCoefficient::GridFunctionCoefficient()\n"
    "    mfem::GridFunctionCoefficient::GridFunctionCoefficient(mfem::GridFunction const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridFunctionCoefficient_SetGridFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GridFunctionCoefficient *arg1 = (mfem::GridFunctionCoefficient *) 0 ;
  mfem::GridFunction *arg2 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"gf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GridFunctionCoefficient_SetGridFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFunctionCoefficient_SetGridFunction" "', argument " "1"" of type '" "mfem::GridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridFunctionCoefficient_SetGridFunction" "', argument " "2"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  {
    try {
      (arg1)->SetGridFunction((mfem::GridFunction const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFunctionCoefficient_GetGridFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GridFunctionCoefficient *arg1 = (mfem::GridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::GridFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFunctionCoefficient_GetGridFunction" "', argument " "1"" of type '" "mfem::GridFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)((mfem::GridFunctionCoefficient const *)arg1)->GetGridFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFunctionCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GridFunctionCoefficient *arg1 = (mfem::GridFunctionCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:GridFunctionCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::GridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFunctionCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GridFunctionCoefficient *arg1 = (mfem::GridFunctionCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GridFunctionCoefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFunctionCoefficient_Project" "', argument " "1"" of type '" "mfem::GridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GridFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GridFunctionCoefficient *arg1 = (mfem::GridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GridFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GridFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__GridFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GridFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransformedCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  double (*arg2)(double) = (double (*)(double)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::TransformedCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformedCoefficient" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TransformedCoefficient" "', argument " "2"" of type '" "double (*)(double)""'"); 
    }
  }
  {
    try {
      result = (mfem::TransformedCoefficient *)new mfem::TransformedCoefficient(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__TransformedCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransformedCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  mfem::Coefficient *arg2 = (mfem::Coefficient *) 0 ;
  double (*arg3)(double,double) = (double (*)(double,double)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::TransformedCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformedCoefficient" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransformedCoefficient" "', argument " "2"" of type '" "mfem::Coefficient *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[2], (void**)(&arg3), SWIGTYPE_p_f_double_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_TransformedCoefficient" "', argument " "3"" of type '" "double (*)(double,double)""'"); 
    }
  }
  {
    try {
      result = (mfem::TransformedCoefficient *)new mfem::TransformedCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__TransformedCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TransformedCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TransformedCoefficient", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_double__double);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TransformedCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertFunctionPtr(argv[2], &ptr, SWIGTYPE_p_f_double_double__double);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TransformedCoefficient__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TransformedCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::TransformedCoefficient::TransformedCoefficient(mfem::Coefficient *,double (*)(double))\n"
    "    mfem::TransformedCoefficient::TransformedCoefficient(mfem::Coefficient *,mfem::Coefficient *,double (*)(double,double))\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TransformedCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::TransformedCoefficient *arg1 = (mfem::TransformedCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:TransformedCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__TransformedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformedCoefficient_SetTime" "', argument " "1"" of type '" "mfem::TransformedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransformedCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransformedCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransformedCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::TransformedCoefficient *arg1 = (mfem::TransformedCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:TransformedCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__TransformedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformedCoefficient_Eval" "', argument " "1"" of type '" "mfem::TransformedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransformedCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformedCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformedCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransformedCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformedCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransformedCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::TransformedCoefficient *arg1 = (mfem::TransformedCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__TransformedCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformedCoefficient" "', argument " "1"" of type '" "mfem::TransformedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransformedCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransformedCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__TransformedCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransformedCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DeltaCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::DeltaCoefficient *)new mfem::DeltaCoefficient(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mfem::DeltaCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeltaCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DeltaCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (mfem::DeltaCoefficient *)new mfem::DeltaCoefficient(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mfem::DeltaCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeltaCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DeltaCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DeltaCoefficient" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (mfem::DeltaCoefficient *)new mfem::DeltaCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaCoefficient__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mfem::DeltaCoefficient *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeltaCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DeltaCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DeltaCoefficient" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DeltaCoefficient" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (mfem::DeltaCoefficient *)new mfem::DeltaCoefficient(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DeltaCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DeltaCoefficient", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DeltaCoefficient__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DeltaCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DeltaCoefficient__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DeltaCoefficient__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DeltaCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DeltaCoefficient::DeltaCoefficient()\n"
    "    mfem::DeltaCoefficient::DeltaCoefficient(double,double)\n"
    "    mfem::DeltaCoefficient::DeltaCoefficient(double,double,double)\n"
    "    mfem::DeltaCoefficient::DeltaCoefficient(double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_SetTime" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_SetDeltaCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"center",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_SetDeltaCenter", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_SetDeltaCenter" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaCoefficient_SetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeltaCoefficient_SetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetDeltaCenter((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_SetScale(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_SetScale", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_SetScale" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaCoefficient_SetScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetScale(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_SetFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  double (*arg2)(double) = (double (*)(double)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"f",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_SetFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_SetFunction" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "DeltaCoefficient_SetFunction" "', argument " "2"" of type '" "double (*)(double)""'"); 
    }
  }
  {
    try {
      (arg1)->SetFunction(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_SetTol(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"tol_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_SetTol", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_SetTol" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeltaCoefficient_SetTol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTol(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_SetWeight(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  mfem::Coefficient *arg2 = (mfem::Coefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"w",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_SetWeight", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_SetWeight" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaCoefficient_SetWeight" "', argument " "2"" of type '" "mfem::Coefficient *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetWeight(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_Center(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_Center" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  {
    try {
      result = (double *)(arg1)->Center(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_Scale(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_Scale" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  {
    try {
      result = (double)(arg1)->Scale(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_Tol(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_Tol" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  {
    try {
      result = (double)(arg1)->Tol(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_Weight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_Weight" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)(arg1)->Weight(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_GetDeltaCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"center",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeltaCoefficient_GetDeltaCenter", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_GetDeltaCenter" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaCoefficient_GetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeltaCoefficient_GetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->GetDeltaCenter(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_EvalDelta(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DeltaCoefficient_EvalDelta", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_EvalDelta" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaCoefficient_EvalDelta" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeltaCoefficient_EvalDelta" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeltaCoefficient_EvalDelta" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeltaCoefficient_EvalDelta" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->EvalDelta(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeltaCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DeltaCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeltaCoefficient_Eval" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeltaCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeltaCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeltaCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeltaCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DeltaCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeltaCoefficient *arg1 = (mfem::DeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeltaCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DeltaCoefficient" "', argument " "1"" of type '" "mfem::DeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeltaCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DeltaCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DeltaCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DeltaCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RestrictedCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::Array< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"c_",  (char *)"attr",  NULL 
  };
  mfem::RestrictedCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_RestrictedCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RestrictedCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestrictedCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RestrictedCoefficient" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestrictedCoefficient" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    try {
      result = (mfem::RestrictedCoefficient *)new mfem::RestrictedCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RestrictedCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestrictedCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RestrictedCoefficient *arg1 = (mfem::RestrictedCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RestrictedCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestrictedCoefficient_SetTime" "', argument " "1"" of type '" "mfem::RestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RestrictedCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RestrictedCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestrictedCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RestrictedCoefficient *arg1 = (mfem::RestrictedCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RestrictedCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestrictedCoefficient_Eval" "', argument " "1"" of type '" "mfem::RestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RestrictedCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RestrictedCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RestrictedCoefficient *arg1 = (mfem::RestrictedCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RestrictedCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RestrictedCoefficient" "', argument " "1"" of type '" "mfem::RestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RestrictedCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RestrictedCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RestrictedCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RestrictedCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VectorCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCoefficient_GetTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCoefficient_GetTime" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  {
    try {
      result = (double)(arg1)->GetTime(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCoefficient_GetVDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCoefficient_GetVDim" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  {
    try {
      result = (int)(arg1)->GetVDim(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::VectorCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorCoefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCoefficient_Project" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = (mfem::VectorCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorConstantCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"v",  NULL 
  };
  mfem::VectorConstantCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_VectorConstantCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorConstantCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorConstantCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  {
    try {
      result = (mfem::VectorConstantCoefficient *)new mfem::VectorConstantCoefficient((mfem::Vector const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorConstantCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorConstantCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorConstantCoefficient *arg1 = (mfem::VectorConstantCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorConstantCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorConstantCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorConstantCoefficient *arg1 = (mfem::VectorConstantCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorConstantCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorConstantCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorConstantCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorConstantCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorConstantCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorConstantCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorConstantCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorConstantCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorConstantCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::VectorConstantCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorConstantCoefficient_GetVec(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorConstantCoefficient *arg1 = (mfem::VectorConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorConstantCoefficient_GetVec" "', argument " "1"" of type '" "mfem::VectorConstantCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorConstantCoefficient * >(argp1);
  {
    try {
      result = (mfem::Vector *) &((mfem::VectorConstantCoefficient const *)arg1)->GetVec(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorConstantCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorConstantCoefficient *arg1 = (mfem::VectorConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorConstantCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorConstantCoefficient" "', argument " "1"" of type '" "mfem::VectorConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorConstantCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorConstantCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorConstantCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorConstantCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PWVectorCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::PWVectorCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    try {
      result = (mfem::PWVectorCoefficient *)new mfem::PWVectorCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWVectorCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWVectorCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< mfem::VectorCoefficient * > *arg3 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::PWVectorCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PWVectorCoefficient" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWVectorCoefficient" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ArrayT_mfem__VectorCoefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PWVectorCoefficient" "', argument " "3"" of type '" "mfem::Array< mfem::VectorCoefficient * > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWVectorCoefficient" "', argument " "3"" of type '" "mfem::Array< mfem::VectorCoefficient * > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< mfem::VectorCoefficient * > * >(argp3);
  {
    try {
      result = (mfem::PWVectorCoefficient *)new mfem::PWVectorCoefficient(arg1,(mfem::Array< int > const &)*arg2,(mfem::Array< mfem::VectorCoefficient * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWVectorCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWVectorCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PWVectorCoefficient", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      return _wrap_new_PWVectorCoefficient__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__ArrayT_mfem__VectorCoefficient_p_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_PWVectorCoefficient__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PWVectorCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::PWVectorCoefficient::PWVectorCoefficient(int)\n"
    "    mfem::PWVectorCoefficient::PWVectorCoefficient(int,mfem::Array< int > const &,mfem::Array< mfem::VectorCoefficient * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWVectorCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWVectorCoefficient_SetTime" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PWVectorCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_UpdateCoefficients(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< mfem::VectorCoefficient * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  (char *)"coefs",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWVectorCoefficient_UpdateCoefficients", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWVectorCoefficient_UpdateCoefficients" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWVectorCoefficient_UpdateCoefficients" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_UpdateCoefficients" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_mfem__VectorCoefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWVectorCoefficient_UpdateCoefficients" "', argument " "3"" of type '" "mfem::Array< mfem::VectorCoefficient * > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_UpdateCoefficients" "', argument " "3"" of type '" "mfem::Array< mfem::VectorCoefficient * > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< mfem::VectorCoefficient * > * >(argp3);
  {
    try {
      (arg1)->UpdateCoefficients((mfem::Array< int > const &)*arg2,(mfem::Array< mfem::VectorCoefficient * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_UpdateCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  int arg2 ;
  mfem::VectorCoefficient *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  (char *)"coef",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWVectorCoefficient_UpdateCoefficient", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWVectorCoefficient_UpdateCoefficient" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWVectorCoefficient_UpdateCoefficient" "', argument " "3"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_UpdateCoefficient" "', argument " "3"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg3 = reinterpret_cast< mfem::VectorCoefficient * >(argp3);
  {
    try {
      (arg1)->UpdateCoefficient(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_ZeroCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWVectorCoefficient_ZeroCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWVectorCoefficient_ZeroCoefficient" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      (arg1)->ZeroCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWVectorCoefficient_Eval" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PWVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWVectorCoefficient_Eval" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PWVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWVectorCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PWVectorCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__PWVectorCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PWVectorCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__PWVectorCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PWVectorCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PWVectorCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::PWVectorCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::PWVectorCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PWVectorCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PWVectorCoefficient *arg1 = (mfem::PWVectorCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWVectorCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PWVectorCoefficient" "', argument " "1"" of type '" "mfem::PWVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWVectorCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PWVectorCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__PWVectorCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PWVectorCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorFunctionCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::Vector &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) nullptr ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::VectorFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VectorFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::VectorFunctionCoefficient *)new mfem::VectorFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorFunctionCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::Vector &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) nullptr ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::VectorFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VectorFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::VectorFunctionCoefficient *)new mfem::VectorFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorFunctionCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorFunctionCoefficient", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_VectorFunctionCoefficient__SWIG_0(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VectorFunctionCoefficient__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_VectorFunctionCoefficient__SWIG_1(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VectorFunctionCoefficient__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorFunctionCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorFunctionCoefficient::VectorFunctionCoefficient(int,std::function< void (mfem::Vector const &,mfem::Vector &) >,mfem::Coefficient *)\n"
    "    mfem::VectorFunctionCoefficient::VectorFunctionCoefficient(int,std::function< void (mfem::Vector const &,double,mfem::Vector &) >,mfem::Coefficient *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorFunctionCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorFunctionCoefficient *arg1 = (mfem::VectorFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFunctionCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorFunctionCoefficient *arg1 = (mfem::VectorFunctionCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFunctionCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorFunctionCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorFunctionCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorFunctionCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorFunctionCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorFunctionCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::VectorFunctionCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorFunctionCoefficient *arg1 = (mfem::VectorFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorFunctionCoefficient" "', argument " "1"" of type '" "mfem::VectorFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorArrayCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"dim",  NULL 
  };
  mfem::VectorArrayCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_VectorArrayCoefficient", kwnames, &obj0)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    try {
      result = (mfem::VectorArrayCoefficient *)new mfem::VectorArrayCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorArrayCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorArrayCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArrayCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_GetCoeff(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Coefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorArrayCoefficient_GetCoeff", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_GetCoeff" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Coefficient *)(arg1)->GetCoeff(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_GetCoeffs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_GetCoeffs" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient **)(arg1)->GetCoeffs(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  int arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) 0 ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"c",  (char *)"own",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:VectorArrayCoefficient_Set", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_Set" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArrayCoefficient_Set" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
  }
  arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VectorArrayCoefficient_Set" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->Set(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  int arg2 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      result = (double)(arg1)->Eval(arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorArrayCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_Eval__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArrayCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorArrayCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArrayCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorArrayCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorArrayCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorArrayCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorArrayCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorArrayCoefficient_Eval__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorArrayCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorArrayCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorArrayCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorArrayCoefficient::Eval(int,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::VectorArrayCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::VectorArrayCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorArrayCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorArrayCoefficient *arg1 = (mfem::VectorArrayCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorArrayCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorArrayCoefficient" "', argument " "1"" of type '" "mfem::VectorArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorArrayCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorArrayCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorArrayCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorArrayCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorGridFunctionCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::VectorGridFunctionCoefficient *)new mfem::VectorGridFunctionCoefficient(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorGridFunctionCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::GridFunction *arg1 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::VectorGridFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunction * >(argp1);
  {
    try {
      result = (mfem::VectorGridFunctionCoefficient *)new mfem::VectorGridFunctionCoefficient((mfem::GridFunction const *)arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorGridFunctionCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorGridFunctionCoefficient", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_VectorGridFunctionCoefficient__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__GridFunction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorGridFunctionCoefficient__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorGridFunctionCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorGridFunctionCoefficient::VectorGridFunctionCoefficient()\n"
    "    mfem::VectorGridFunctionCoefficient::VectorGridFunctionCoefficient(mfem::GridFunction const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorGridFunctionCoefficient_SetGridFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *arg1 = (mfem::VectorGridFunctionCoefficient *) 0 ;
  mfem::GridFunction *arg2 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"gf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorGridFunctionCoefficient_SetGridFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorGridFunctionCoefficient_SetGridFunction" "', argument " "1"" of type '" "mfem::VectorGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorGridFunctionCoefficient_SetGridFunction" "', argument " "2"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  {
    try {
      (arg1)->SetGridFunction((mfem::GridFunction const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorGridFunctionCoefficient_GetGridFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *arg1 = (mfem::VectorGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::GridFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorGridFunctionCoefficient_GetGridFunction" "', argument " "1"" of type '" "mfem::VectorGridFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorGridFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)((mfem::VectorGridFunctionCoefficient const *)arg1)->GetGridFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorGridFunctionCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *arg1 = (mfem::VectorGridFunctionCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorGridFunctionCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *arg1 = (mfem::VectorGridFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorGridFunctionCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorGridFunctionCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorGridFunctionCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorGridFunctionCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorGridFunctionCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorGridFunctionCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::VectorGridFunctionCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorGridFunctionCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *arg1 = (mfem::VectorGridFunctionCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorGridFunctionCoefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorGridFunctionCoefficient_Project" "', argument " "1"" of type '" "mfem::VectorGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorGridFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorGridFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorGridFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorGridFunctionCoefficient *arg1 = (mfem::VectorGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::VectorGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorGridFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorGridFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorGridFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorGridFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GradientGridFunctionCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GridFunction *arg1 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"gf",  NULL 
  };
  mfem::GradientGridFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_GradientGridFunctionCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GradientGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunction * >(argp1);
  {
    try {
      result = (mfem::GradientGridFunctionCoefficient *)new mfem::GradientGridFunctionCoefficient((mfem::GridFunction const *)arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GradientGridFunctionCoefficient_SetGridFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GradientGridFunctionCoefficient *arg1 = (mfem::GradientGridFunctionCoefficient *) 0 ;
  mfem::GridFunction *arg2 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"gf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GradientGridFunctionCoefficient_SetGridFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradientGridFunctionCoefficient_SetGridFunction" "', argument " "1"" of type '" "mfem::GradientGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GradientGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradientGridFunctionCoefficient_SetGridFunction" "', argument " "2"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  {
    try {
      (arg1)->SetGridFunction((mfem::GridFunction const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GradientGridFunctionCoefficient_GetGridFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GradientGridFunctionCoefficient *arg1 = (mfem::GradientGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::GridFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradientGridFunctionCoefficient_GetGridFunction" "', argument " "1"" of type '" "mfem::GradientGridFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GradientGridFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)((mfem::GradientGridFunctionCoefficient const *)arg1)->GetGridFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GradientGridFunctionCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::GradientGridFunctionCoefficient *arg1 = (mfem::GradientGridFunctionCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::GradientGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GradientGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GradientGridFunctionCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::GradientGridFunctionCoefficient *arg1 = (mfem::GradientGridFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::GradientGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GradientGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GradientGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GradientGridFunctionCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GradientGridFunctionCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GradientGridFunctionCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GradientGridFunctionCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GradientGridFunctionCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::GradientGridFunctionCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::GradientGridFunctionCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GradientGridFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GradientGridFunctionCoefficient *arg1 = (mfem::GradientGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GradientGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GradientGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GradientGridFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GradientGridFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__GradientGridFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GradientGridFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CurlGridFunctionCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GridFunction *arg1 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"gf",  NULL 
  };
  mfem::CurlGridFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_CurlGridFunctionCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CurlGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunction * >(argp1);
  {
    try {
      result = (mfem::CurlGridFunctionCoefficient *)new mfem::CurlGridFunctionCoefficient((mfem::GridFunction const *)arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurlGridFunctionCoefficient_SetGridFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CurlGridFunctionCoefficient *arg1 = (mfem::CurlGridFunctionCoefficient *) 0 ;
  mfem::GridFunction *arg2 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"gf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CurlGridFunctionCoefficient_SetGridFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurlGridFunctionCoefficient_SetGridFunction" "', argument " "1"" of type '" "mfem::CurlGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CurlGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CurlGridFunctionCoefficient_SetGridFunction" "', argument " "2"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  {
    try {
      (arg1)->SetGridFunction((mfem::GridFunction const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurlGridFunctionCoefficient_GetGridFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CurlGridFunctionCoefficient *arg1 = (mfem::CurlGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::GridFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurlGridFunctionCoefficient_GetGridFunction" "', argument " "1"" of type '" "mfem::CurlGridFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CurlGridFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)((mfem::CurlGridFunctionCoefficient const *)arg1)->GetGridFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurlGridFunctionCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CurlGridFunctionCoefficient *arg1 = (mfem::CurlGridFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::CurlGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CurlGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurlGridFunctionCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CurlGridFunctionCoefficient *arg1 = (mfem::CurlGridFunctionCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::CurlGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CurlGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CurlGridFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CurlGridFunctionCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CurlGridFunctionCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CurlGridFunctionCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CurlGridFunctionCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CurlGridFunctionCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::CurlGridFunctionCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::CurlGridFunctionCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CurlGridFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CurlGridFunctionCoefficient *arg1 = (mfem::CurlGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CurlGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::CurlGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CurlGridFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CurlGridFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CurlGridFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CurlGridFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DivergenceGridFunctionCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GridFunction *arg1 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"gf",  NULL 
  };
  mfem::DivergenceGridFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_DivergenceGridFunctionCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DivergenceGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunction * >(argp1);
  {
    try {
      result = (mfem::DivergenceGridFunctionCoefficient *)new mfem::DivergenceGridFunctionCoefficient((mfem::GridFunction const *)arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DivergenceGridFunctionCoefficient_SetGridFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DivergenceGridFunctionCoefficient *arg1 = (mfem::DivergenceGridFunctionCoefficient *) 0 ;
  mfem::GridFunction *arg2 = (mfem::GridFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"gf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DivergenceGridFunctionCoefficient_SetGridFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DivergenceGridFunctionCoefficient_SetGridFunction" "', argument " "1"" of type '" "mfem::DivergenceGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DivergenceGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DivergenceGridFunctionCoefficient_SetGridFunction" "', argument " "2"" of type '" "mfem::GridFunction const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  {
    try {
      (arg1)->SetGridFunction((mfem::GridFunction const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DivergenceGridFunctionCoefficient_GetGridFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DivergenceGridFunctionCoefficient *arg1 = (mfem::DivergenceGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::GridFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DivergenceGridFunctionCoefficient_GetGridFunction" "', argument " "1"" of type '" "mfem::DivergenceGridFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DivergenceGridFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)((mfem::DivergenceGridFunctionCoefficient const *)arg1)->GetGridFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DivergenceGridFunctionCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DivergenceGridFunctionCoefficient *arg1 = (mfem::DivergenceGridFunctionCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DivergenceGridFunctionCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DivergenceGridFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::DivergenceGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DivergenceGridFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DivergenceGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DivergenceGridFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DivergenceGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DivergenceGridFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DivergenceGridFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DivergenceGridFunctionCoefficient *arg1 = (mfem::DivergenceGridFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DivergenceGridFunctionCoefficient" "', argument " "1"" of type '" "mfem::DivergenceGridFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DivergenceGridFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DivergenceGridFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DivergenceGridFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorDeltaCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::VectorDeltaCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    try {
      result = (mfem::VectorDeltaCoefficient *)new mfem::VectorDeltaCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDeltaCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::VectorDeltaCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  {
    try {
      result = (mfem::VectorDeltaCoefficient *)new mfem::VectorDeltaCoefficient((mfem::Vector const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDeltaCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mfem::VectorDeltaCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDeltaCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VectorDeltaCoefficient" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (mfem::VectorDeltaCoefficient *)new mfem::VectorDeltaCoefficient((mfem::Vector const &)*arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDeltaCoefficient__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mfem::VectorDeltaCoefficient *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDeltaCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VectorDeltaCoefficient" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VectorDeltaCoefficient" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (mfem::VectorDeltaCoefficient *)new mfem::VectorDeltaCoefficient((mfem::Vector const &)*arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDeltaCoefficient__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  mfem::VectorDeltaCoefficient *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDeltaCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VectorDeltaCoefficient" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VectorDeltaCoefficient" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VectorDeltaCoefficient" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (mfem::VectorDeltaCoefficient *)new mfem::VectorDeltaCoefficient((mfem::Vector const &)*arg1,arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDeltaCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorDeltaCoefficient", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorDeltaCoefficient__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      return _wrap_new_VectorDeltaCoefficient__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VectorDeltaCoefficient__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VectorDeltaCoefficient__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VectorDeltaCoefficient__SWIG_4(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorDeltaCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorDeltaCoefficient::VectorDeltaCoefficient(int)\n"
    "    mfem::VectorDeltaCoefficient::VectorDeltaCoefficient(mfem::Vector const &)\n"
    "    mfem::VectorDeltaCoefficient::VectorDeltaCoefficient(mfem::Vector const &,double,double)\n"
    "    mfem::VectorDeltaCoefficient::VectorDeltaCoefficient(mfem::Vector const &,double,double,double)\n"
    "    mfem::VectorDeltaCoefficient::VectorDeltaCoefficient(mfem::Vector const &,double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorDeltaCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDeltaCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_SetDeltaCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::DeltaCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"d_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorDeltaCoefficient_SetDeltaCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_SetDeltaCoefficient" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DeltaCoefficient,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_SetDeltaCoefficient" "', argument " "2"" of type '" "mfem::DeltaCoefficient const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_SetDeltaCoefficient" "', argument " "2"" of type '" "mfem::DeltaCoefficient const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DeltaCoefficient * >(argp2);
  {
    try {
      (arg1)->SetDeltaCoefficient((mfem::DeltaCoefficient const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_GetDeltaCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::DeltaCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_GetDeltaCoefficient" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  {
    try {
      result = (mfem::DeltaCoefficient *) &(arg1)->GetDeltaCoefficient(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DeltaCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_SetScale(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorDeltaCoefficient_SetScale", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_SetScale" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDeltaCoefficient_SetScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetScale(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_SetDirection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"d_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorDeltaCoefficient_SetDirection", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_SetDirection" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_SetDirection" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_SetDirection" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetDirection((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_SetDeltaCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"center",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorDeltaCoefficient_SetDeltaCenter", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_SetDeltaCenter" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_SetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_SetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetDeltaCenter((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_GetDeltaCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"center",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorDeltaCoefficient_GetDeltaCenter", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_GetDeltaCenter" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_GetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_GetDeltaCenter" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->GetDeltaCenter(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_EvalDelta(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"V",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorDeltaCoefficient_EvalDelta", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_EvalDelta" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->EvalDelta(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorDeltaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDeltaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDeltaCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorDeltaCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorDeltaCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorDeltaCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorDeltaCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorDeltaCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorDeltaCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::VectorDeltaCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorDeltaCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorDeltaCoefficient *arg1 = (mfem::VectorDeltaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDeltaCoefficient" "', argument " "1"" of type '" "mfem::VectorDeltaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorDeltaCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorDeltaCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorDeltaCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorDeltaCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorRestrictedCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::Array< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"vc",  (char *)"attr",  NULL 
  };
  mfem::VectorRestrictedCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_VectorRestrictedCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorRestrictedCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorRestrictedCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorRestrictedCoefficient" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorRestrictedCoefficient" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    try {
      result = (mfem::VectorRestrictedCoefficient *)new mfem::VectorRestrictedCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorRestrictedCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRestrictedCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorRestrictedCoefficient *arg1 = (mfem::VectorRestrictedCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorRestrictedCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorRestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRestrictedCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRestrictedCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorRestrictedCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRestrictedCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorRestrictedCoefficient *arg1 = (mfem::VectorRestrictedCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorRestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRestrictedCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRestrictedCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorRestrictedCoefficient *arg1 = (mfem::VectorRestrictedCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorRestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRestrictedCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRestrictedCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRestrictedCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorRestrictedCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorRestrictedCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorRestrictedCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorRestrictedCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorRestrictedCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorRestrictedCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorRestrictedCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::VectorRestrictedCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorRestrictedCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorRestrictedCoefficient *arg1 = (mfem::VectorRestrictedCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorRestrictedCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorRestrictedCoefficient" "', argument " "1"" of type '" "mfem::VectorRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRestrictedCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorRestrictedCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorRestrictedCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorRestrictedCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MatrixCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_SetTime" "', argument " "1"" of type '" "mfem::MatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_GetTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_GetTime" "', argument " "1"" of type '" "mfem::MatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (double)(arg1)->GetTime(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_GetHeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_GetHeight" "', argument " "1"" of type '" "mfem::MatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (int)((mfem::MatrixCoefficient const *)arg1)->GetHeight(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_GetWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_GetWidth" "', argument " "1"" of type '" "mfem::MatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (int)((mfem::MatrixCoefficient const *)arg1)->GetWidth(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_GetVDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_GetVDim" "', argument " "1"" of type '" "mfem::MatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (int)((mfem::MatrixCoefficient const *)arg1)->GetVDim(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_IsSymmetric(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_IsSymmetric" "', argument " "1"" of type '" "mfem::MatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (bool)((mfem::MatrixCoefficient const *)arg1)->IsSymmetric(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  (char *)"transpose",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:MatrixCoefficient_Project", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_Project" "', argument " "1"" of type '" "mfem::MatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixCoefficient_Project" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->Project(*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixCoefficient_EvalSymmetric(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixCoefficient_EvalSymmetric", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "1"" of type '" "mfem::MatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixCoefficient_EvalSymmetric" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->EvalSymmetric(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = (mfem::MatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatrixConstantCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"m",  NULL 
  };
  mfem::MatrixConstantCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_MatrixConstantCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixConstantCoefficient" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixConstantCoefficient" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (mfem::MatrixConstantCoefficient *)new mfem::MatrixConstantCoefficient((mfem::DenseMatrix const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixConstantCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixConstantCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixConstantCoefficient *arg1 = (mfem::MatrixConstantCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixConstantCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixConstantCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixConstantCoefficient_GetMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixConstantCoefficient *arg1 = (mfem::MatrixConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::DenseMatrix *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixConstantCoefficient_GetMatrix" "', argument " "1"" of type '" "mfem::MatrixConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixConstantCoefficient * >(argp1);
  {
    try {
      result = (mfem::DenseMatrix *) &(arg1)->GetMatrix(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixConstantCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixConstantCoefficient *arg1 = (mfem::MatrixConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixConstantCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixConstantCoefficient" "', argument " "1"" of type '" "mfem::MatrixConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixConstantCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixConstantCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixConstantCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixConstantCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PWMatrixCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 = (bool) false ;
  bool val2 ;
  int ecode2 = 0 ;
  mfem::PWMatrixCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PWMatrixCoefficient" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (mfem::PWMatrixCoefficient *)new mfem::PWMatrixCoefficient(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWMatrixCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 = (bool) false ;
  bool val3 ;
  int ecode3 = 0 ;
  mfem::PWMatrixCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PWMatrixCoefficient" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = (mfem::PWMatrixCoefficient *)new mfem::PWMatrixCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWMatrixCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< mfem::MatrixCoefficient * > *arg3 = 0 ;
  bool arg4 = (bool) false ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mfem::PWMatrixCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PWMatrixCoefficient" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWMatrixCoefficient" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PWMatrixCoefficient" "', argument " "3"" of type '" "mfem::Array< mfem::MatrixCoefficient * > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWMatrixCoefficient" "', argument " "3"" of type '" "mfem::Array< mfem::MatrixCoefficient * > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< mfem::MatrixCoefficient * > * >(argp3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PWMatrixCoefficient" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (mfem::PWMatrixCoefficient *)new mfem::PWMatrixCoefficient(arg1,(mfem::Array< int > const &)*arg2,(mfem::Array< mfem::MatrixCoefficient * > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWMatrixCoefficient__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< mfem::MatrixCoefficient * > *arg4 = 0 ;
  bool arg5 = (bool) false ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  mfem::PWMatrixCoefficient *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 5)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PWMatrixCoefficient" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWMatrixCoefficient" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_PWMatrixCoefficient" "', argument " "4"" of type '" "mfem::Array< mfem::MatrixCoefficient * > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PWMatrixCoefficient" "', argument " "4"" of type '" "mfem::Array< mfem::MatrixCoefficient * > const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< mfem::MatrixCoefficient * > * >(argp4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PWMatrixCoefficient" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = (mfem::PWMatrixCoefficient *)new mfem::PWMatrixCoefficient(arg1,arg2,(mfem::Array< int > const &)*arg3,(mfem::Array< mfem::MatrixCoefficient * > const &)*arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PWMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PWMatrixCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PWMatrixCoefficient", 0, 5, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_PWMatrixCoefficient__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PWMatrixCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_PWMatrixCoefficient__SWIG_1(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PWMatrixCoefficient__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_PWMatrixCoefficient__SWIG_2(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_PWMatrixCoefficient__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_PWMatrixCoefficient__SWIG_3(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_PWMatrixCoefficient__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PWMatrixCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::PWMatrixCoefficient::PWMatrixCoefficient(int,bool)\n"
    "    mfem::PWMatrixCoefficient::PWMatrixCoefficient(int,int,bool)\n"
    "    mfem::PWMatrixCoefficient::PWMatrixCoefficient(int,mfem::Array< int > const &,mfem::Array< mfem::MatrixCoefficient * > const &,bool)\n"
    "    mfem::PWMatrixCoefficient::PWMatrixCoefficient(int,int,mfem::Array< int > const &,mfem::Array< mfem::MatrixCoefficient * > const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PWMatrixCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWMatrixCoefficient *arg1 = (mfem::PWMatrixCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWMatrixCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWMatrixCoefficient_SetTime" "', argument " "1"" of type '" "mfem::PWMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWMatrixCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PWMatrixCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWMatrixCoefficient_UpdateCoefficients(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWMatrixCoefficient *arg1 = (mfem::PWMatrixCoefficient *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< mfem::MatrixCoefficient * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  (char *)"coefs",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWMatrixCoefficient_UpdateCoefficients", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWMatrixCoefficient_UpdateCoefficients" "', argument " "1"" of type '" "mfem::PWMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWMatrixCoefficient_UpdateCoefficients" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWMatrixCoefficient_UpdateCoefficients" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWMatrixCoefficient_UpdateCoefficients" "', argument " "3"" of type '" "mfem::Array< mfem::MatrixCoefficient * > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWMatrixCoefficient_UpdateCoefficients" "', argument " "3"" of type '" "mfem::Array< mfem::MatrixCoefficient * > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< mfem::MatrixCoefficient * > * >(argp3);
  {
    try {
      (arg1)->UpdateCoefficients((mfem::Array< int > const &)*arg2,(mfem::Array< mfem::MatrixCoefficient * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWMatrixCoefficient_UpdateCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWMatrixCoefficient *arg1 = (mfem::PWMatrixCoefficient *) 0 ;
  int arg2 ;
  mfem::MatrixCoefficient *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  (char *)"coef",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PWMatrixCoefficient_UpdateCoefficient", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWMatrixCoefficient_UpdateCoefficient" "', argument " "1"" of type '" "mfem::PWMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWMatrixCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWMatrixCoefficient_UpdateCoefficient" "', argument " "3"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWMatrixCoefficient_UpdateCoefficient" "', argument " "3"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg3 = reinterpret_cast< mfem::MatrixCoefficient * >(argp3);
  {
    try {
      (arg1)->UpdateCoefficient(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWMatrixCoefficient_ZeroCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWMatrixCoefficient *arg1 = (mfem::PWMatrixCoefficient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PWMatrixCoefficient_ZeroCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWMatrixCoefficient_ZeroCoefficient" "', argument " "1"" of type '" "mfem::PWMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWMatrixCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      (arg1)->ZeroCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PWMatrixCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PWMatrixCoefficient *arg1 = (mfem::PWMatrixCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:PWMatrixCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PWMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PWMatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::PWMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PWMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PWMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PWMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PWMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PWMatrixCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PWMatrixCoefficient *arg1 = (mfem::PWMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PWMatrixCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PWMatrixCoefficient" "', argument " "1"" of type '" "mfem::PWMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PWMatrixCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PWMatrixCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__PWMatrixCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PWMatrixCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixFunctionCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) nullptr ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::MatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MatrixFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::MatrixFunctionCoefficient *)new mfem::MatrixFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFunctionCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::MatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixFunctionCoefficient" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFunctionCoefficient" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      result = (mfem::MatrixFunctionCoefficient *)new mfem::MatrixFunctionCoefficient((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFunctionCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::Vector &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) NULL ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::MatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MatrixFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::MatrixFunctionCoefficient *)new mfem::MatrixFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFunctionCoefficient__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) nullptr ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::MatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MatrixFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::MatrixFunctionCoefficient *)new mfem::MatrixFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFunctionCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MatrixFunctionCoefficient", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MatrixFunctionCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_MatrixFunctionCoefficient__SWIG_0(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MatrixFunctionCoefficient__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_MatrixFunctionCoefficient__SWIG_2(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MatrixFunctionCoefficient__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_MatrixFunctionCoefficient__SWIG_3(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MatrixFunctionCoefficient__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MatrixFunctionCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::MatrixFunctionCoefficient::MatrixFunctionCoefficient(int,std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >,mfem::Coefficient *)\n"
    "    mfem::MatrixFunctionCoefficient::MatrixFunctionCoefficient(mfem::DenseMatrix const &,mfem::Coefficient &)\n"
    "    mfem::MatrixFunctionCoefficient::MatrixFunctionCoefficient(int,std::function< void (mfem::Vector const &,mfem::Vector &) >,mfem::Coefficient *)\n"
    "    mfem::MatrixFunctionCoefficient::MatrixFunctionCoefficient(int,std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >,mfem::Coefficient *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFunctionCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixFunctionCoefficient *arg1 = (mfem::MatrixFunctionCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixFunctionCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFunctionCoefficient_SetTime" "', argument " "1"" of type '" "mfem::MatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixFunctionCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixFunctionCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFunctionCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixFunctionCoefficient *arg1 = (mfem::MatrixFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixFunctionCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFunctionCoefficient_EvalSymmetric(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixFunctionCoefficient *arg1 = (mfem::MatrixFunctionCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixFunctionCoefficient_EvalSymmetric", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "1"" of type '" "mfem::MatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFunctionCoefficient_EvalSymmetric" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->EvalSymmetric(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixFunctionCoefficient *arg1 = (mfem::MatrixFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixFunctionCoefficient" "', argument " "1"" of type '" "mfem::MatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixArrayCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"dim",  NULL 
  };
  mfem::MatrixArrayCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_MatrixArrayCoefficient", kwnames, &obj0)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    try {
      result = (mfem::MatrixArrayCoefficient *)new mfem::MatrixArrayCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixArrayCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixArrayCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixArrayCoefficient *arg1 = (mfem::MatrixArrayCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixArrayCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixArrayCoefficient_SetTime" "', argument " "1"" of type '" "mfem::MatrixArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixArrayCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixArrayCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixArrayCoefficient_GetCoeff(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixArrayCoefficient *arg1 = (mfem::MatrixArrayCoefficient *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  NULL 
  };
  mfem::Coefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixArrayCoefficient_GetCoeff", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixArrayCoefficient_GetCoeff" "', argument " "1"" of type '" "mfem::MatrixArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixArrayCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (mfem::Coefficient *)(arg1)->GetCoeff(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixArrayCoefficient_Set(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixArrayCoefficient *arg1 = (mfem::MatrixArrayCoefficient *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::Coefficient *arg4 = (mfem::Coefficient *) 0 ;
  bool arg5 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  (char *)"c",  (char *)"own",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|O:MatrixArrayCoefficient_Set", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixArrayCoefficient_Set" "', argument " "1"" of type '" "mfem::MatrixArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixArrayCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixArrayCoefficient_Set" "', argument " "4"" of type '" "mfem::Coefficient *""'"); 
  }
  arg4 = reinterpret_cast< mfem::Coefficient * >(argp4);
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MatrixArrayCoefficient_Set" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      (arg1)->Set(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixArrayCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::MatrixArrayCoefficient *arg1 = (mfem::MatrixArrayCoefficient *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::ElementTransformation *arg4 = 0 ;
  mfem::IntegrationPoint *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixArrayCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg4 = reinterpret_cast< mfem::ElementTransformation * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "5"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixArrayCoefficient_Eval" "', argument " "5"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg5 = reinterpret_cast< mfem::IntegrationPoint * >(argp5);
  {
    try {
      result = (double)(arg1)->Eval(arg2,arg3,*arg4,(mfem::IntegrationPoint const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixArrayCoefficient_Eval__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::MatrixArrayCoefficient *arg1 = (mfem::MatrixArrayCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixArrayCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixArrayCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixArrayCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixArrayCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixArrayCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MatrixArrayCoefficient_Eval", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MatrixArrayCoefficient_Eval__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__MatrixArrayCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MatrixArrayCoefficient_Eval__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MatrixArrayCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::MatrixArrayCoefficient::Eval(int,int,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::MatrixArrayCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MatrixArrayCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixArrayCoefficient *arg1 = (mfem::MatrixArrayCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixArrayCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixArrayCoefficient" "', argument " "1"" of type '" "mfem::MatrixArrayCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixArrayCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixArrayCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixArrayCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixArrayCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixRestrictedCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  mfem::Array< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"mc",  (char *)"attr",  NULL 
  };
  mfem::MatrixRestrictedCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_MatrixRestrictedCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixRestrictedCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixRestrictedCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixRestrictedCoefficient" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixRestrictedCoefficient" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    try {
      result = (mfem::MatrixRestrictedCoefficient *)new mfem::MatrixRestrictedCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixRestrictedCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixRestrictedCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixRestrictedCoefficient *arg1 = (mfem::MatrixRestrictedCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixRestrictedCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixRestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixRestrictedCoefficient_SetTime" "', argument " "1"" of type '" "mfem::MatrixRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixRestrictedCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixRestrictedCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixRestrictedCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixRestrictedCoefficient *arg1 = (mfem::MatrixRestrictedCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixRestrictedCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixRestrictedCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixRestrictedCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixRestrictedCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixRestrictedCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixRestrictedCoefficient *arg1 = (mfem::MatrixRestrictedCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixRestrictedCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixRestrictedCoefficient" "', argument " "1"" of type '" "mfem::MatrixRestrictedCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixRestrictedCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixRestrictedCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixRestrictedCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixRestrictedCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SumCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Coefficient *arg2 = 0 ;
  double arg3 = (double) 1.0 ;
  double arg4 = (double) 1.0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mfem::SumCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SumCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SumCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SumCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SumCoefficient" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SumCoefficient" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = (mfem::SumCoefficient *)new mfem::SumCoefficient(arg1,*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__SumCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SumCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::Coefficient *arg2 = 0 ;
  double arg3 = (double) 1.0 ;
  double arg4 = (double) 1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mfem::SumCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SumCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SumCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SumCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SumCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SumCoefficient" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SumCoefficient" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = (mfem::SumCoefficient *)new mfem::SumCoefficient(*arg1,*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__SumCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SumCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SumCoefficient", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_SumCoefficient__SWIG_1(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_SumCoefficient__SWIG_1(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SumCoefficient__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_SumCoefficient__SWIG_0(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_SumCoefficient__SWIG_0(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SumCoefficient__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SumCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::SumCoefficient::SumCoefficient(double,mfem::Coefficient &,double,double)\n"
    "    mfem::SumCoefficient::SumCoefficient(mfem::Coefficient &,mfem::Coefficient &,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SumCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_SetTime" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SumCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_SetAConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SumCoefficient_SetAConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_SetAConst" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SumCoefficient_SetAConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_GetAConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_GetAConst" "', argument " "1"" of type '" "mfem::SumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::SumCoefficient const *)arg1)->GetAConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SumCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SumCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SumCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::SumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::SumCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SumCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SumCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SumCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::SumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::SumCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_SetAlpha(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"alpha_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SumCoefficient_SetAlpha", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_SetAlpha" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SumCoefficient_SetAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAlpha(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_GetAlpha(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_GetAlpha" "', argument " "1"" of type '" "mfem::SumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::SumCoefficient const *)arg1)->GetAlpha(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_SetBeta(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"beta_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SumCoefficient_SetBeta", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_SetBeta" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SumCoefficient_SetBeta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetBeta(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_GetBeta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_GetBeta" "', argument " "1"" of type '" "mfem::SumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::SumCoefficient const *)arg1)->GetBeta(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SumCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:SumCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SumCoefficient_Eval" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SumCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SumCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SumCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SumCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SumCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SumCoefficient *arg1 = (mfem::SumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SumCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SumCoefficient" "', argument " "1"" of type '" "mfem::SumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SumCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SumCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__SumCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SumCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SymmetricMatrixCoefficient_GetSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixCoefficient *arg1 = (mfem::SymmetricMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixCoefficient_GetSize" "', argument " "1"" of type '" "mfem::SymmetricMatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixCoefficient * >(argp1);
  {
    try {
      result = (int)((mfem::SymmetricMatrixCoefficient const *)arg1)->GetSize(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixCoefficient_ProjectSymmetric(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixCoefficient *arg1 = (mfem::SymmetricMatrixCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SymmetricMatrixCoefficient_ProjectSymmetric", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixCoefficient_ProjectSymmetric" "', argument " "1"" of type '" "mfem::SymmetricMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixCoefficient_ProjectSymmetric" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_ProjectSymmetric" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->ProjectSymmetric(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixCoefficient *arg1 = (mfem::SymmetricMatrixCoefficient *) 0 ;
  mfem::DenseSymmetricMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::SymmetricMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseSymmetricMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseSymmetricMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixCoefficient *arg1 = (mfem::SymmetricMatrixCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::SymmetricMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricMatrixCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseSymmetricMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SymmetricMatrixCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SymmetricMatrixCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricMatrixCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::SymmetricMatrixCoefficient::Eval(mfem::DenseSymmetricMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::SymmetricMatrixCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixCoefficient_GetMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixCoefficient *arg1 = (mfem::SymmetricMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::DenseSymmetricMatrix *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixCoefficient_GetMatrix" "', argument " "1"" of type '" "mfem::SymmetricMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixCoefficient * >(argp1);
  {
    try {
      result = (mfem::DenseSymmetricMatrix *) &(arg1)->GetMatrix(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseSymmetricMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricMatrixCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixCoefficient *arg1 = (mfem::SymmetricMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricMatrixCoefficient" "', argument " "1"" of type '" "mfem::SymmetricMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymmetricMatrixCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__SymmetricMatrixCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SymmetricMatrixConstantCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseSymmetricMatrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"m",  NULL 
  };
  mfem::SymmetricMatrixConstantCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_SymmetricMatrixConstantCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseSymmetricMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricMatrixConstantCoefficient" "', argument " "1"" of type '" "mfem::DenseSymmetricMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricMatrixConstantCoefficient" "', argument " "1"" of type '" "mfem::DenseSymmetricMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseSymmetricMatrix * >(argp1);
  {
    try {
      result = (mfem::SymmetricMatrixConstantCoefficient *)new mfem::SymmetricMatrixConstantCoefficient((mfem::DenseSymmetricMatrix const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixConstantCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixConstantCoefficient *arg1 = (mfem::SymmetricMatrixConstantCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "1"" of type '" "mfem::SymmetricMatrixConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixConstantCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixConstantCoefficient *arg1 = (mfem::SymmetricMatrixConstantCoefficient *) 0 ;
  mfem::DenseSymmetricMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "1"" of type '" "mfem::SymmetricMatrixConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixConstantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseSymmetricMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseSymmetricMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixConstantCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixConstantCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricMatrixConstantCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SymmetricMatrixConstantCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseSymmetricMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SymmetricMatrixConstantCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricMatrixConstantCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::SymmetricMatrixConstantCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::SymmetricMatrixConstantCoefficient::Eval(mfem::DenseSymmetricMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricMatrixConstantCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixConstantCoefficient *arg1 = (mfem::SymmetricMatrixConstantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricMatrixConstantCoefficient" "', argument " "1"" of type '" "mfem::SymmetricMatrixConstantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixConstantCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymmetricMatrixConstantCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricMatrixConstantCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) nullptr ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::SymmetricMatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::SymmetricMatrixFunctionCoefficient *)new mfem::SymmetricMatrixFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseSymmetricMatrix *arg1 = 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::SymmetricMatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__DenseSymmetricMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "1"" of type '" "mfem::DenseSymmetricMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "1"" of type '" "mfem::DenseSymmetricMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseSymmetricMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      result = (mfem::SymmetricMatrixFunctionCoefficient *)new mfem::SymmetricMatrixFunctionCoefficient((mfem::DenseSymmetricMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) > > arg2 ;
  mfem::Coefficient *arg3 = (mfem::Coefficient *) nullptr ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::SymmetricMatrixFunctionCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (swig_obj[2]) {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SymmetricMatrixFunctionCoefficient" "', argument " "3"" of type '" "mfem::Coefficient *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  }
  {
    try {
      result = (mfem::SymmetricMatrixFunctionCoefficient *)new mfem::SymmetricMatrixFunctionCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricMatrixFunctionCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricMatrixFunctionCoefficient", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__DenseSymmetricMatrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_0(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_2(self, argc, argv);
        }
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SymmetricMatrixFunctionCoefficient__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricMatrixFunctionCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::SymmetricMatrixFunctionCoefficient::SymmetricMatrixFunctionCoefficient(int,std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) >,mfem::Coefficient *)\n"
    "    mfem::SymmetricMatrixFunctionCoefficient::SymmetricMatrixFunctionCoefficient(mfem::DenseSymmetricMatrix const &,mfem::Coefficient &)\n"
    "    mfem::SymmetricMatrixFunctionCoefficient::SymmetricMatrixFunctionCoefficient(int,std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) >,mfem::Coefficient *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixFunctionCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixFunctionCoefficient *arg1 = (mfem::SymmetricMatrixFunctionCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:SymmetricMatrixFunctionCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixFunctionCoefficient_SetTime" "', argument " "1"" of type '" "mfem::SymmetricMatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixFunctionCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricMatrixFunctionCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixFunctionCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixFunctionCoefficient *arg1 = (mfem::SymmetricMatrixFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::SymmetricMatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixFunctionCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixFunctionCoefficient *arg1 = (mfem::SymmetricMatrixFunctionCoefficient *) 0 ;
  mfem::DenseSymmetricMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::SymmetricMatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseSymmetricMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseSymmetricMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SymmetricMatrixFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricMatrixFunctionCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricMatrixFunctionCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SymmetricMatrixFunctionCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseSymmetricMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SymmetricMatrixFunctionCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricMatrixFunctionCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::SymmetricMatrixFunctionCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::SymmetricMatrixFunctionCoefficient::Eval(mfem::DenseSymmetricMatrix &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricMatrixFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::SymmetricMatrixFunctionCoefficient *arg1 = (mfem::SymmetricMatrixFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricMatrixFunctionCoefficient" "', argument " "1"" of type '" "mfem::SymmetricMatrixFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::SymmetricMatrixFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymmetricMatrixFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricMatrixFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ProductCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Coefficient *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::ProductCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ProductCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ProductCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ProductCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      result = (mfem::ProductCoefficient *)new mfem::ProductCoefficient(arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProductCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::ProductCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ProductCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ProductCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ProductCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ProductCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      result = (mfem::ProductCoefficient *)new mfem::ProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProductCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ProductCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ProductCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ProductCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ProductCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::ProductCoefficient::ProductCoefficient(double,mfem::Coefficient &)\n"
    "    mfem::ProductCoefficient::ProductCoefficient(mfem::Coefficient &,mfem::Coefficient &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::ProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_SetAConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ProductCoefficient_SetAConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_SetAConst" "', argument " "1"" of type '" "mfem::ProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProductCoefficient_SetAConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_GetAConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_GetAConst" "', argument " "1"" of type '" "mfem::ProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::ProductCoefficient const *)arg1)->GetAConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::ProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::ProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::ProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::ProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::ProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::ProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProductCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ProductCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::ProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ProductCoefficient *arg1 = (mfem::ProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProductCoefficient" "', argument " "1"" of type '" "mfem::ProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RatioCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Coefficient *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::RatioCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RatioCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RatioCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      result = (mfem::RatioCoefficient *)new mfem::RatioCoefficient(arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RatioCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RatioCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::RatioCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RatioCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RatioCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioCoefficient" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      result = (mfem::RatioCoefficient *)new mfem::RatioCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RatioCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RatioCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mfem::RatioCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RatioCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RatioCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (mfem::RatioCoefficient *)new mfem::RatioCoefficient(*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RatioCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RatioCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RatioCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RatioCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RatioCoefficient__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RatioCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RatioCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::RatioCoefficient::RatioCoefficient(double,mfem::Coefficient &)\n"
    "    mfem::RatioCoefficient::RatioCoefficient(mfem::Coefficient &,mfem::Coefficient &)\n"
    "    mfem::RatioCoefficient::RatioCoefficient(mfem::Coefficient &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RatioCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_SetTime" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RatioCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_SetAConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RatioCoefficient_SetAConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_SetAConst" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RatioCoefficient_SetAConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_GetAConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_GetAConst" "', argument " "1"" of type '" "mfem::RatioCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::RatioCoefficient const *)arg1)->GetAConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_SetBConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RatioCoefficient_SetBConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_SetBConst" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RatioCoefficient_SetBConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetBConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_GetBConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_GetBConst" "', argument " "1"" of type '" "mfem::RatioCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::RatioCoefficient const *)arg1)->GetBConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RatioCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RatioCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RatioCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::RatioCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::RatioCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RatioCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RatioCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RatioCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::RatioCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::RatioCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RatioCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RatioCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioCoefficient_Eval" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RatioCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RatioCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RatioCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RatioCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RatioCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RatioCoefficient *arg1 = (mfem::RatioCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RatioCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RatioCoefficient" "', argument " "1"" of type '" "mfem::RatioCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RatioCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RatioCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RatioCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RatioCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PowerCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"p_",  NULL 
  };
  mfem::PowerCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_PowerCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PowerCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PowerCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PowerCoefficient" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (mfem::PowerCoefficient *)new mfem::PowerCoefficient(*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PowerCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PowerCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PowerCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerCoefficient_SetTime" "', argument " "1"" of type '" "mfem::PowerCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PowerCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PowerCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::PowerCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PowerCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::PowerCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::PowerCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerCoefficient_SetExponent(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PowerCoefficient_SetExponent", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PowerCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerCoefficient_SetExponent" "', argument " "1"" of type '" "mfem::PowerCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PowerCoefficient_SetExponent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetExponent(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerCoefficient_GetExponent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PowerCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerCoefficient_GetExponent" "', argument " "1"" of type '" "mfem::PowerCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::PowerCoefficient const *)arg1)->GetExponent(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PowerCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PowerCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PowerCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PowerCoefficient_Eval" "', argument " "1"" of type '" "mfem::PowerCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PowerCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PowerCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PowerCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PowerCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PowerCoefficient *arg1 = (mfem::PowerCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PowerCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PowerCoefficient" "', argument " "1"" of type '" "mfem::PowerCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PowerCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PowerCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__PowerCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PowerCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_InnerProductCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  NULL 
  };
  mfem::InnerProductCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_InnerProductCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InnerProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InnerProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InnerProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InnerProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::InnerProductCoefficient *)new mfem::InnerProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__InnerProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InnerProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:InnerProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InnerProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::InnerProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InnerProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InnerProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:InnerProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InnerProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::InnerProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InnerProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InnerProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InnerProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InnerProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::InnerProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::InnerProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InnerProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:InnerProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InnerProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::InnerProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InnerProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InnerProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InnerProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InnerProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::InnerProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::InnerProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InnerProductCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:InnerProductCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InnerProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::InnerProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InnerProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InnerProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InnerProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InnerProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InnerProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::InnerProductCoefficient *arg1 = (mfem::InnerProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__InnerProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InnerProductCoefficient" "', argument " "1"" of type '" "mfem::InnerProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InnerProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InnerProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__InnerProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InnerProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorRotProductCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  NULL 
  };
  mfem::VectorRotProductCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_VectorRotProductCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorRotProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorRotProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorRotProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorRotProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::VectorRotProductCoefficient *)new mfem::VectorRotProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorRotProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRotProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorRotProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRotProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorRotProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRotProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorRotProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRotProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRotProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRotProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRotProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRotProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::VectorRotProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRotProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorRotProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRotProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRotProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRotProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRotProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRotProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::VectorRotProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRotProductCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorRotProductCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRotProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRotProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRotProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorRotProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRotProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorRotProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorRotProductCoefficient *arg1 = (mfem::VectorRotProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorRotProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorRotProductCoefficient" "', argument " "1"" of type '" "mfem::VectorRotProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorRotProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorRotProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorRotProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorRotProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DeterminantCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"A",  NULL 
  };
  mfem::DeterminantCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_DeterminantCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DeterminantCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DeterminantCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (mfem::DeterminantCoefficient *)new mfem::DeterminantCoefficient(*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DeterminantCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeterminantCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeterminantCoefficient *arg1 = (mfem::DeterminantCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeterminantCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeterminantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeterminantCoefficient_SetTime" "', argument " "1"" of type '" "mfem::DeterminantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeterminantCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeterminantCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeterminantCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeterminantCoefficient *arg1 = (mfem::DeterminantCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DeterminantCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeterminantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeterminantCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::DeterminantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeterminantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeterminantCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeterminantCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeterminantCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeterminantCoefficient *arg1 = (mfem::DeterminantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeterminantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeterminantCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::DeterminantCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeterminantCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::DeterminantCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DeterminantCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DeterminantCoefficient *arg1 = (mfem::DeterminantCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DeterminantCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DeterminantCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeterminantCoefficient_Eval" "', argument " "1"" of type '" "mfem::DeterminantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeterminantCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DeterminantCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeterminantCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeterminantCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeterminantCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DeterminantCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DeterminantCoefficient *arg1 = (mfem::DeterminantCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DeterminantCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DeterminantCoefficient" "', argument " "1"" of type '" "mfem::DeterminantCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DeterminantCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DeterminantCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DeterminantCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DeterminantCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorSumCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::VectorSumCoefficient *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    try {
      result = (mfem::VectorSumCoefficient *)new mfem::VectorSumCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorSumCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSumCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  double arg3 = (double) 1.0 ;
  double arg4 = (double) 1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mfem::VectorSumCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorSumCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSumCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorSumCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSumCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VectorSumCoefficient" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VectorSumCoefficient" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = (mfem::VectorSumCoefficient *)new mfem::VectorSumCoefficient(*arg1,*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorSumCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSumCoefficient__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  mfem::Coefficient *arg3 = 0 ;
  mfem::Coefficient *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mfem::VectorSumCoefficient *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorSumCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSumCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorSumCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSumCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VectorSumCoefficient" "', argument " "3"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSumCoefficient" "', argument " "3"" of type '" "mfem::Coefficient &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Coefficient * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_VectorSumCoefficient" "', argument " "4"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSumCoefficient" "', argument " "4"" of type '" "mfem::Coefficient &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Coefficient * >(argp4);
  {
    try {
      result = (mfem::VectorSumCoefficient *)new mfem::VectorSumCoefficient(*arg1,*arg2,*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorSumCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSumCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorSumCoefficient", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      return _wrap_new_VectorSumCoefficient__SWIG_0(self, argc, argv);
    }
  }
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_VectorSumCoefficient__SWIG_1(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_VectorSumCoefficient__SWIG_1(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VectorSumCoefficient__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_VectorSumCoefficient__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorSumCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorSumCoefficient::VectorSumCoefficient(int)\n"
    "    mfem::VectorSumCoefficient::VectorSumCoefficient(mfem::VectorCoefficient &,mfem::VectorCoefficient &,double,double)\n"
    "    mfem::VectorSumCoefficient::VectorSumCoefficient(mfem::VectorCoefficient &,mfem::VectorCoefficient &,mfem::Coefficient &,mfem::Coefficient &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSumCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::VectorSumCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::VectorSumCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetAlphaCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetAlphaCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetAlphaCoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_SetAlphaCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_SetAlphaCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetAlphaCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetAlphaCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetAlphaCoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::VectorSumCoefficient const *)arg1)->GetAlphaCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetBetaCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetBetaCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetBetaCoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_SetBetaCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_SetBetaCoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetBetaCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetBetaCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetBetaCoef" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::VectorSumCoefficient const *)arg1)->GetBetaCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetA(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetA", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetA" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_SetA" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_SetA" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetA((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetA" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::Vector *) &((mfem::VectorSumCoefficient const *)arg1)->GetA(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetB(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetB", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetB" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_SetB" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_SetB" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetB((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetB" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::Vector *) &((mfem::VectorSumCoefficient const *)arg1)->GetB(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetAlpha(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"alpha_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetAlpha", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetAlpha" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSumCoefficient_SetAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAlpha(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetAlpha(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetAlpha" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::VectorSumCoefficient const *)arg1)->GetAlpha(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_SetBeta(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"beta_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorSumCoefficient_SetBeta", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_SetBeta" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSumCoefficient_SetBeta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetBeta(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_GetBeta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_GetBeta" "', argument " "1"" of type '" "mfem::VectorSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::VectorSumCoefficient const *)arg1)->GetBeta(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSumCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSumCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSumCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSumCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSumCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSumCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSumCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSumCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorSumCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorSumCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSumCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorSumCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSumCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorSumCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorSumCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::VectorSumCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorSumCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorSumCoefficient *arg1 = (mfem::VectorSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorSumCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorSumCoefficient" "', argument " "1"" of type '" "mfem::VectorSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorSumCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorSumCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorSumCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorSumCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ScalarVectorProductCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::ScalarVectorProductCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarVectorProductCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarVectorProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarVectorProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::ScalarVectorProductCoefficient *)new mfem::ScalarVectorProductCoefficient(arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarVectorProductCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::ScalarVectorProductCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarVectorProductCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarVectorProductCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarVectorProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarVectorProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::ScalarVectorProductCoefficient *)new mfem::ScalarVectorProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarVectorProductCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ScalarVectorProductCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ScalarVectorProductCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ScalarVectorProductCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ScalarVectorProductCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::ScalarVectorProductCoefficient::ScalarVectorProductCoefficient(double,mfem::VectorCoefficient &)\n"
    "    mfem::ScalarVectorProductCoefficient::ScalarVectorProductCoefficient(mfem::Coefficient &,mfem::VectorCoefficient &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarVectorProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarVectorProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_SetAConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarVectorProductCoefficient_SetAConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_SetAConst" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarVectorProductCoefficient_SetAConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_GetAConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_GetAConst" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::ScalarVectorProductCoefficient const *)arg1)->GetAConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarVectorProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarVectorProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::ScalarVectorProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarVectorProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarVectorProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::ScalarVectorProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarVectorProductCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ScalarVectorProductCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ScalarVectorProductCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ScalarVectorProductCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ScalarVectorProductCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::ScalarVectorProductCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::ScalarVectorProductCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScalarVectorProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarVectorProductCoefficient *arg1 = (mfem::ScalarVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalarVectorProductCoefficient" "', argument " "1"" of type '" "mfem::ScalarVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarVectorProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalarVectorProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ScalarVectorProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScalarVectorProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NormalizedVectorCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  double arg2 = (double) 1e-6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"tol",  NULL 
  };
  mfem::NormalizedVectorCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:new_NormalizedVectorCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalizedVectorCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalizedVectorCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NormalizedVectorCoefficient" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = (mfem::NormalizedVectorCoefficient *)new mfem::NormalizedVectorCoefficient(*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__NormalizedVectorCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizedVectorCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NormalizedVectorCoefficient *arg1 = (mfem::NormalizedVectorCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NormalizedVectorCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizedVectorCoefficient_SetTime" "', argument " "1"" of type '" "mfem::NormalizedVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NormalizedVectorCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormalizedVectorCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizedVectorCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NormalizedVectorCoefficient *arg1 = (mfem::NormalizedVectorCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NormalizedVectorCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizedVectorCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::NormalizedVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NormalizedVectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NormalizedVectorCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizedVectorCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NormalizedVectorCoefficient *arg1 = (mfem::NormalizedVectorCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizedVectorCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::NormalizedVectorCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NormalizedVectorCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::NormalizedVectorCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizedVectorCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::NormalizedVectorCoefficient *arg1 = (mfem::NormalizedVectorCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "1"" of type '" "mfem::NormalizedVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NormalizedVectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizedVectorCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::NormalizedVectorCoefficient *arg1 = (mfem::NormalizedVectorCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "1"" of type '" "mfem::NormalizedVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NormalizedVectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NormalizedVectorCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizedVectorCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NormalizedVectorCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NormalizedVectorCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__NormalizedVectorCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NormalizedVectorCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NormalizedVectorCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::NormalizedVectorCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::NormalizedVectorCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NormalizedVectorCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NormalizedVectorCoefficient *arg1 = (mfem::NormalizedVectorCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NormalizedVectorCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NormalizedVectorCoefficient" "', argument " "1"" of type '" "mfem::NormalizedVectorCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NormalizedVectorCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NormalizedVectorCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__NormalizedVectorCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NormalizedVectorCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorCrossProductCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  NULL 
  };
  mfem::VectorCrossProductCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_VectorCrossProductCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorCrossProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorCrossProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorCrossProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorCrossProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::VectorCrossProductCoefficient *)new mfem::VectorCrossProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCrossProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorCrossProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorCrossProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorCrossProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCrossProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::VectorCrossProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorCrossProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCrossProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::VectorCrossProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorCrossProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorCrossProductCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorCrossProductCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorCrossProductCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCrossProductCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorCrossProductCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorCrossProductCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorCrossProductCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::VectorCrossProductCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorCrossProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorCrossProductCoefficient *arg1 = (mfem::VectorCrossProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorCrossProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorCrossProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCrossProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCrossProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorCrossProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorCrossProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorCrossProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixVectorProductCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  NULL 
  };
  mfem::MatrixVectorProductCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_MatrixVectorProductCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixVectorProductCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixVectorProductCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixVectorProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixVectorProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::MatrixVectorProductCoefficient *)new mfem::MatrixVectorProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixVectorProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixVectorProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixVectorProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixVectorProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::MatrixVectorProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixVectorProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixVectorProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::MatrixVectorProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_Eval__SWIG_1_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixVectorProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixVectorProductCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MatrixVectorProductCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MatrixVectorProductCoefficient_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MatrixVectorProductCoefficient_Eval__SWIG_1_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MatrixVectorProductCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::MatrixVectorProductCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n"
    "    mfem::MatrixVectorProductCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MatrixVectorProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixVectorProductCoefficient *arg1 = (mfem::MatrixVectorProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixVectorProductCoefficient" "', argument " "1"" of type '" "mfem::MatrixVectorProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixVectorProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixVectorProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixVectorProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixVectorProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IdentityMatrixCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"d",  NULL 
  };
  mfem::IdentityMatrixCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_IdentityMatrixCoefficient", kwnames, &obj0)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    try {
      result = (mfem::IdentityMatrixCoefficient *)new mfem::IdentityMatrixCoefficient(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__IdentityMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IdentityMatrixCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::IdentityMatrixCoefficient *arg1 = (mfem::IdentityMatrixCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:IdentityMatrixCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__IdentityMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::IdentityMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::IdentityMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdentityMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IdentityMatrixCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::IdentityMatrixCoefficient *arg1 = (mfem::IdentityMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__IdentityMatrixCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdentityMatrixCoefficient" "', argument " "1"" of type '" "mfem::IdentityMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::IdentityMatrixCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IdentityMatrixCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__IdentityMatrixCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IdentityMatrixCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixSumCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  double arg3 = (double) 1.0 ;
  double arg4 = (double) 1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  (char *)"alpha_",  (char *)"beta_",  NULL 
  };
  mfem::MatrixSumCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_MatrixSumCoefficient", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixSumCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixSumCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixSumCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixSumCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatrixSumCoefficient" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MatrixSumCoefficient" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = (mfem::MatrixSumCoefficient *)new mfem::MatrixSumCoefficient(*arg1,*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixSumCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixSumCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_SetTime" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixSumCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixSumCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixSumCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixSumCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::MatrixSumCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixSumCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixSumCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixSumCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::MatrixSumCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_SetAlpha(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"alpha_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixSumCoefficient_SetAlpha", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_SetAlpha" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixSumCoefficient_SetAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAlpha(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_GetAlpha(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_GetAlpha" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::MatrixSumCoefficient const *)arg1)->GetAlpha(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_SetBeta(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"beta_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixSumCoefficient_SetBeta", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_SetBeta" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixSumCoefficient_SetBeta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetBeta(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_GetBeta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_GetBeta" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::MatrixSumCoefficient const *)arg1)->GetBeta(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixSumCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixSumCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixSumCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixSumCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixSumCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixSumCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixSumCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixSumCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixSumCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixSumCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixSumCoefficient *arg1 = (mfem::MatrixSumCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixSumCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixSumCoefficient" "', argument " "1"" of type '" "mfem::MatrixSumCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixSumCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixSumCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixSumCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixSumCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixProductCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  NULL 
  };
  mfem::MatrixProductCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_MatrixProductCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixProductCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixProductCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MatrixProductCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixProductCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      result = (mfem::MatrixProductCoefficient *)new mfem::MatrixProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixProductCoefficient *arg1 = (mfem::MatrixProductCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::MatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixProductCoefficient *arg1 = (mfem::MatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::MatrixProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::MatrixProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixProductCoefficient *arg1 = (mfem::MatrixProductCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::MatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixProductCoefficient *arg1 = (mfem::MatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::MatrixProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::MatrixProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixProductCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixProductCoefficient *arg1 = (mfem::MatrixProductCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixProductCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::MatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixProductCoefficient *arg1 = (mfem::MatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixProductCoefficient" "', argument " "1"" of type '" "mfem::MatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ScalarMatrixProductCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::ScalarMatrixProductCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      result = (mfem::ScalarMatrixProductCoefficient *)new mfem::ScalarMatrixProductCoefficient(arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMatrixProductCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::ScalarMatrixProductCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMatrixProductCoefficient" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      result = (mfem::ScalarMatrixProductCoefficient *)new mfem::ScalarMatrixProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMatrixProductCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ScalarMatrixProductCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__MatrixCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ScalarMatrixProductCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__MatrixCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ScalarMatrixProductCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ScalarMatrixProductCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::ScalarMatrixProductCoefficient::ScalarMatrixProductCoefficient(double,mfem::MatrixCoefficient &)\n"
    "    mfem::ScalarMatrixProductCoefficient::ScalarMatrixProductCoefficient(mfem::Coefficient &,mfem::MatrixCoefficient &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarMatrixProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarMatrixProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_SetAConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarMatrixProductCoefficient_SetAConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_SetAConst" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarMatrixProductCoefficient_SetAConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_GetAConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_GetAConst" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::ScalarMatrixProductCoefficient const *)arg1)->GetAConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarMatrixProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMatrixProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMatrixProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::ScalarMatrixProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarMatrixProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMatrixProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMatrixProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::ScalarMatrixProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMatrixProductCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:ScalarMatrixProductCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMatrixProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScalarMatrixProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ScalarMatrixProductCoefficient *arg1 = (mfem::ScalarMatrixProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalarMatrixProductCoefficient" "', argument " "1"" of type '" "mfem::ScalarMatrixProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ScalarMatrixProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalarMatrixProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScalarMatrixProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransposeMatrixCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"A",  NULL 
  };
  mfem::TransposeMatrixCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_TransposeMatrixCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransposeMatrixCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransposeMatrixCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (mfem::TransposeMatrixCoefficient *)new mfem::TransposeMatrixCoefficient(*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__TransposeMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransposeMatrixCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::TransposeMatrixCoefficient *arg1 = (mfem::TransposeMatrixCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:TransposeMatrixCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__TransposeMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransposeMatrixCoefficient_SetTime" "', argument " "1"" of type '" "mfem::TransposeMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransposeMatrixCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransposeMatrixCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransposeMatrixCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::TransposeMatrixCoefficient *arg1 = (mfem::TransposeMatrixCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:TransposeMatrixCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__TransposeMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransposeMatrixCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::TransposeMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransposeMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransposeMatrixCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransposeMatrixCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransposeMatrixCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::TransposeMatrixCoefficient *arg1 = (mfem::TransposeMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__TransposeMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransposeMatrixCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::TransposeMatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransposeMatrixCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::TransposeMatrixCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransposeMatrixCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::TransposeMatrixCoefficient *arg1 = (mfem::TransposeMatrixCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:TransposeMatrixCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__TransposeMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::TransposeMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransposeMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransposeMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransposeMatrixCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::TransposeMatrixCoefficient *arg1 = (mfem::TransposeMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__TransposeMatrixCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransposeMatrixCoefficient" "', argument " "1"" of type '" "mfem::TransposeMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::TransposeMatrixCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransposeMatrixCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__TransposeMatrixCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransposeMatrixCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_InverseMatrixCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"A",  NULL 
  };
  mfem::InverseMatrixCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_InverseMatrixCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InverseMatrixCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InverseMatrixCoefficient" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  {
    try {
      result = (mfem::InverseMatrixCoefficient *)new mfem::InverseMatrixCoefficient(*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__InverseMatrixCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseMatrixCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InverseMatrixCoefficient *arg1 = (mfem::InverseMatrixCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:InverseMatrixCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InverseMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseMatrixCoefficient_SetTime" "', argument " "1"" of type '" "mfem::InverseMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InverseMatrixCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseMatrixCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseMatrixCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InverseMatrixCoefficient *arg1 = (mfem::InverseMatrixCoefficient *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:InverseMatrixCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InverseMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseMatrixCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::InverseMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InverseMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InverseMatrixCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseMatrixCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseMatrixCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::InverseMatrixCoefficient *arg1 = (mfem::InverseMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__InverseMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseMatrixCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::InverseMatrixCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InverseMatrixCoefficient * >(argp1);
  {
    try {
      result = (mfem::MatrixCoefficient *)((mfem::InverseMatrixCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseMatrixCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::InverseMatrixCoefficient *arg1 = (mfem::InverseMatrixCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:InverseMatrixCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__InverseMatrixCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InverseMatrixCoefficient_Eval" "', argument " "1"" of type '" "mfem::InverseMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InverseMatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InverseMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseMatrixCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InverseMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseMatrixCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "InverseMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InverseMatrixCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InverseMatrixCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::InverseMatrixCoefficient *arg1 = (mfem::InverseMatrixCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__InverseMatrixCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InverseMatrixCoefficient" "', argument " "1"" of type '" "mfem::InverseMatrixCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::InverseMatrixCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InverseMatrixCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__InverseMatrixCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InverseMatrixCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_OuterProductCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  NULL 
  };
  mfem::OuterProductCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_OuterProductCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OuterProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OuterProductCoefficient" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OuterProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OuterProductCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::OuterProductCoefficient *)new mfem::OuterProductCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__OuterProductCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OuterProductCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:OuterProductCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OuterProductCoefficient_SetTime" "', argument " "1"" of type '" "mfem::OuterProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OuterProductCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OuterProductCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:OuterProductCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OuterProductCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::OuterProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OuterProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OuterProductCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OuterProductCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OuterProductCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::OuterProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::OuterProductCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OuterProductCoefficient_SetBCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"B",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:OuterProductCoefficient_SetBCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OuterProductCoefficient_SetBCoef" "', argument " "1"" of type '" "mfem::OuterProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OuterProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OuterProductCoefficient_SetBCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetBCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OuterProductCoefficient_GetBCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OuterProductCoefficient_GetBCoef" "', argument " "1"" of type '" "mfem::OuterProductCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::OuterProductCoefficient const *)arg1)->GetBCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OuterProductCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:OuterProductCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OuterProductCoefficient_Eval" "', argument " "1"" of type '" "mfem::OuterProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OuterProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OuterProductCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OuterProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OuterProductCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OuterProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OuterProductCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OuterProductCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::OuterProductCoefficient *arg1 = (mfem::OuterProductCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__OuterProductCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OuterProductCoefficient" "', argument " "1"" of type '" "mfem::OuterProductCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::OuterProductCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OuterProductCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__OuterProductCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *OuterProductCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CrossCrossCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::CrossCrossCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CrossCrossCoefficient" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CrossCrossCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CrossCrossCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::CrossCrossCoefficient *)new mfem::CrossCrossCoefficient(arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CrossCrossCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CrossCrossCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::CrossCrossCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CrossCrossCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CrossCrossCoefficient" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CrossCrossCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CrossCrossCoefficient" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      result = (mfem::CrossCrossCoefficient *)new mfem::CrossCrossCoefficient(*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CrossCrossCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CrossCrossCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CrossCrossCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CrossCrossCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CrossCrossCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CrossCrossCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::CrossCrossCoefficient::CrossCrossCoefficient(double,mfem::VectorCoefficient &)\n"
    "    mfem::CrossCrossCoefficient::CrossCrossCoefficient(mfem::Coefficient &,mfem::VectorCoefficient &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CrossCrossCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_SetTime" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CrossCrossCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_SetAConst(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CrossCrossCoefficient_SetAConst", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_SetAConst" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CrossCrossCoefficient_SetAConst" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetAConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_GetAConst(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_GetAConst" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  {
    try {
      result = (double)((mfem::CrossCrossCoefficient const *)arg1)->GetAConst(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_SetACoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CrossCrossCoefficient_SetACoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_SetACoef" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossCrossCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCrossCoefficient_SetACoef" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->SetACoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_GetACoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Coefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_GetACoef" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  {
    try {
      result = (mfem::Coefficient *)((mfem::CrossCrossCoefficient const *)arg1)->GetACoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_SetKCoef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CrossCrossCoefficient_SetKCoef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_SetKCoef" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossCrossCoefficient_SetKCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCrossCoefficient_SetKCoef" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->SetKCoef(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_GetKCoef(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::VectorCoefficient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_GetKCoef" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  {
    try {
      result = (mfem::VectorCoefficient *)((mfem::CrossCrossCoefficient const *)arg1)->GetKCoef(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossCrossCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"M",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CrossCrossCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossCrossCoefficient_Eval" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossCrossCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCrossCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CrossCrossCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCrossCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CrossCrossCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CrossCrossCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CrossCrossCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrossCrossCoefficient *arg1 = (mfem::CrossCrossCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrossCrossCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CrossCrossCoefficient" "', argument " "1"" of type '" "mfem::CrossCrossCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrossCrossCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CrossCrossCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CrossCrossCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CrossCrossCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorQuadratureFunctionCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadratureFunction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"qf",  NULL 
  };
  mfem::VectorQuadratureFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_VectorQuadratureFunctionCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorQuadratureFunctionCoefficient" "', argument " "1"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorQuadratureFunctionCoefficient" "', argument " "1"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureFunction * >(argp1);
  {
    try {
      result = (mfem::VectorQuadratureFunctionCoefficient *)new mfem::VectorQuadratureFunctionCoefficient(*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorQuadratureFunctionCoefficient_SetComponent(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorQuadratureFunctionCoefficient *arg1 = (mfem::VectorQuadratureFunctionCoefficient *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"index_",  (char *)"length_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorQuadratureFunctionCoefficient_SetComponent", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorQuadratureFunctionCoefficient_SetComponent" "', argument " "1"" of type '" "mfem::VectorQuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorQuadratureFunctionCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      (arg1)->SetComponent(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorQuadratureFunctionCoefficient_GetQuadFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorQuadratureFunctionCoefficient *arg1 = (mfem::VectorQuadratureFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::QuadratureFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorQuadratureFunctionCoefficient_GetQuadFunction" "', argument " "1"" of type '" "mfem::VectorQuadratureFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorQuadratureFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::QuadratureFunction *) &((mfem::VectorQuadratureFunctionCoefficient const *)arg1)->GetQuadFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadratureFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorQuadratureFunctionCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorQuadratureFunctionCoefficient *arg1 = (mfem::VectorQuadratureFunctionCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorQuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorQuadratureFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorQuadratureFunctionCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorQuadratureFunctionCoefficient *arg1 = (mfem::VectorQuadratureFunctionCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::VectorQuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorQuadratureFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorQuadratureFunctionCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorQuadratureFunctionCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorQuadratureFunctionCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorQuadratureFunctionCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorQuadratureFunctionCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorQuadratureFunctionCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::VectorQuadratureFunctionCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorQuadratureFunctionCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorQuadratureFunctionCoefficient *arg1 = (mfem::VectorQuadratureFunctionCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorQuadratureFunctionCoefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorQuadratureFunctionCoefficient_Project" "', argument " "1"" of type '" "mfem::VectorQuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorQuadratureFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorQuadratureFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorQuadratureFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorQuadratureFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorQuadratureFunctionCoefficient *arg1 = (mfem::VectorQuadratureFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorQuadratureFunctionCoefficient" "', argument " "1"" of type '" "mfem::VectorQuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorQuadratureFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorQuadratureFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorQuadratureFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuadratureFunctionCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadratureFunction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"qf",  NULL 
  };
  mfem::QuadratureFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_QuadratureFunctionCoefficient", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QuadratureFunctionCoefficient" "', argument " "1"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuadratureFunctionCoefficient" "', argument " "1"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureFunction * >(argp1);
  {
    try {
      result = (mfem::QuadratureFunctionCoefficient *)new mfem::QuadratureFunctionCoefficient(*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadratureFunctionCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadratureFunctionCoefficient_GetQuadFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadratureFunctionCoefficient *arg1 = (mfem::QuadratureFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::QuadratureFunction *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadratureFunctionCoefficient_GetQuadFunction" "', argument " "1"" of type '" "mfem::QuadratureFunctionCoefficient const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureFunctionCoefficient * >(argp1);
  {
    try {
      result = (mfem::QuadratureFunction *) &((mfem::QuadratureFunctionCoefficient const *)arg1)->GetQuadFunction(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadratureFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadratureFunctionCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadratureFunctionCoefficient *arg1 = (mfem::QuadratureFunctionCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:QuadratureFunctionCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadratureFunctionCoefficient_Eval" "', argument " "1"" of type '" "mfem::QuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QuadratureFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QuadratureFunctionCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "QuadratureFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QuadratureFunctionCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadratureFunctionCoefficient_Project(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadratureFunctionCoefficient *arg1 = (mfem::QuadratureFunctionCoefficient *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadratureFunctionCoefficient_Project", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadratureFunctionCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadratureFunctionCoefficient_Project" "', argument " "1"" of type '" "mfem::QuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureFunctionCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QuadratureFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QuadratureFunctionCoefficient_Project" "', argument " "2"" of type '" "mfem::QuadratureFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuadratureFunctionCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadratureFunctionCoefficient *arg1 = (mfem::QuadratureFunctionCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadratureFunctionCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuadratureFunctionCoefficient" "', argument " "1"" of type '" "mfem::QuadratureFunctionCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureFunctionCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuadratureFunctionCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__QuadratureFunctionCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuadratureFunctionCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___or__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CoefficientStorage arg1 ;
  mfem::CoefficientStorage arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL 
  };
  mfem::CoefficientStorage result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__or__", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__or__" "', argument " "1"" of type '" "mfem::CoefficientStorage""'");
  } 
  arg1 = static_cast< mfem::CoefficientStorage >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__or__" "', argument " "2"" of type '" "mfem::CoefficientStorage""'");
  } 
  arg2 = static_cast< mfem::CoefficientStorage >(val2);
  {
    try {
      result = (mfem::CoefficientStorage)mfem::operator |(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___and__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CoefficientStorage arg1 ;
  mfem::CoefficientStorage arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"b",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:__and__", kwnames, &obj0, &obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__and__" "', argument " "1"" of type '" "mfem::CoefficientStorage""'");
  } 
  arg1 = static_cast< mfem::CoefficientStorage >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__and__" "', argument " "2"" of type '" "mfem::CoefficientStorage""'");
  } 
  arg2 = static_cast< mfem::CoefficientStorage >(val2);
  {
    try {
      result = (int)mfem::operator &(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_CoefficientVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::QuadratureSpaceBase *arg1 = 0 ;
  mfem::CoefficientStorage arg2 = (mfem::CoefficientStorage) mfem::CoefficientStorage::FULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mfem::CoefficientVector *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__QuadratureSpaceBase,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadratureSpaceBase * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::CoefficientStorage""'");
    } 
    arg2 = static_cast< mfem::CoefficientStorage >(val2);
  }
  {
    try {
      result = (mfem::CoefficientVector *)new mfem::CoefficientVector(*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CoefficientVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoefficientVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = (mfem::Coefficient *) 0 ;
  mfem::QuadratureSpaceBase *arg2 = 0 ;
  mfem::CoefficientStorage arg3 = (mfem::CoefficientStorage) mfem::CoefficientStorage::FULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mfem::CoefficientVector *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::Coefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__QuadratureSpaceBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureSpaceBase * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CoefficientVector" "', argument " "3"" of type '" "mfem::CoefficientStorage""'");
    } 
    arg3 = static_cast< mfem::CoefficientStorage >(val3);
  }
  {
    try {
      result = (mfem::CoefficientVector *)new mfem::CoefficientVector(arg1,*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CoefficientVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoefficientVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Coefficient *arg1 = 0 ;
  mfem::QuadratureSpaceBase *arg2 = 0 ;
  mfem::CoefficientStorage arg3 = (mfem::CoefficientStorage) mfem::CoefficientStorage::FULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mfem::CoefficientVector *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::Coefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Coefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__QuadratureSpaceBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureSpaceBase * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CoefficientVector" "', argument " "3"" of type '" "mfem::CoefficientStorage""'");
    } 
    arg3 = static_cast< mfem::CoefficientStorage >(val3);
  }
  {
    try {
      result = (mfem::CoefficientVector *)new mfem::CoefficientVector(*arg1,*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CoefficientVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoefficientVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorCoefficient *arg1 = 0 ;
  mfem::QuadratureSpaceBase *arg2 = 0 ;
  mfem::CoefficientStorage arg3 = (mfem::CoefficientStorage) mfem::CoefficientStorage::FULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mfem::CoefficientVector *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__QuadratureSpaceBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureSpaceBase * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CoefficientVector" "', argument " "3"" of type '" "mfem::CoefficientStorage""'");
    } 
    arg3 = static_cast< mfem::CoefficientStorage >(val3);
  }
  {
    try {
      result = (mfem::CoefficientVector *)new mfem::CoefficientVector(*arg1,*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CoefficientVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoefficientVector__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::MatrixCoefficient *arg1 = 0 ;
  mfem::QuadratureSpaceBase *arg2 = 0 ;
  mfem::CoefficientStorage arg3 = (mfem::CoefficientStorage) mfem::CoefficientStorage::FULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mfem::CoefficientVector *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "1"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__QuadratureSpaceBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoefficientVector" "', argument " "2"" of type '" "mfem::QuadratureSpaceBase &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureSpaceBase * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CoefficientVector" "', argument " "3"" of type '" "mfem::CoefficientStorage""'");
    } 
    arg3 = static_cast< mfem::CoefficientStorage >(val3);
  }
  {
    try {
      result = (mfem::CoefficientVector *)new mfem::CoefficientVector(*arg1,*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CoefficientVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CoefficientVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CoefficientVector", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__QuadratureSpaceBase, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_CoefficientVector__SWIG_0(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CoefficientVector__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__QuadratureSpaceBase, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_CoefficientVector__SWIG_1(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CoefficientVector__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__QuadratureSpaceBase, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_CoefficientVector__SWIG_2(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CoefficientVector__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__QuadratureSpaceBase, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_CoefficientVector__SWIG_3(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CoefficientVector__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__MatrixCoefficient, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__QuadratureSpaceBase, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_CoefficientVector__SWIG_4(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CoefficientVector__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CoefficientVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::CoefficientVector::CoefficientVector(mfem::QuadratureSpaceBase &,mfem::CoefficientStorage)\n"
    "    mfem::CoefficientVector::CoefficientVector(mfem::Coefficient *,mfem::QuadratureSpaceBase &,mfem::CoefficientStorage)\n"
    "    mfem::CoefficientVector::CoefficientVector(mfem::Coefficient &,mfem::QuadratureSpaceBase &,mfem::CoefficientStorage)\n"
    "    mfem::CoefficientVector::CoefficientVector(mfem::VectorCoefficient &,mfem::QuadratureSpaceBase &,mfem::CoefficientStorage)\n"
    "    mfem::CoefficientVector::CoefficientVector(mfem::MatrixCoefficient &,mfem::QuadratureSpaceBase &,mfem::CoefficientStorage)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_Project__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::Coefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_Project" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_Project" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_Project" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_Project__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_Project" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_Project" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_Project" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->Project(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_Project__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_Project" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_Project" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_Project" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CoefficientVector_Project" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->Project(*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_Project(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CoefficientVector_Project", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CoefficientVector_Project__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CoefficientVector_Project__SWIG_1(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__MatrixCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_CoefficientVector_Project__SWIG_2(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CoefficientVector_Project__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CoefficientVector_Project'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::CoefficientVector::Project(mfem::Coefficient &)\n"
    "    mfem::CoefficientVector::Project(mfem::VectorCoefficient &)\n"
    "    mfem::CoefficientVector::Project(mfem::MatrixCoefficient &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_ProjectTranspose(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::MatrixCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"coeff",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CoefficientVector_ProjectTranspose", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_ProjectTranspose" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__MatrixCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_ProjectTranspose" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_ProjectTranspose" "', argument " "2"" of type '" "mfem::MatrixCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::MatrixCoefficient * >(argp2);
  {
    try {
      (arg1)->ProjectTranspose(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_MakeRef(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::QuadratureFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"qf_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CoefficientVector_MakeRef", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_MakeRef" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__QuadratureFunction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_MakeRef" "', argument " "2"" of type '" "mfem::QuadratureFunction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_MakeRef" "', argument " "2"" of type '" "mfem::QuadratureFunction const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::QuadratureFunction * >(argp2);
  {
    try {
      (arg1)->MakeRef((mfem::QuadratureFunction const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_SetConstant__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_SetConstant" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetConstant(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_SetConstant__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_SetConstant" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetConstant((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_SetConstant__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_SetConstant" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->SetConstant((mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_SetConstant__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  mfem::DenseSymmetricMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_SetConstant" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseSymmetricMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoefficientVector_SetConstant" "', argument " "2"" of type '" "mfem::DenseSymmetricMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseSymmetricMatrix * >(argp2);
  {
    try {
      (arg1)->SetConstant((mfem::DenseSymmetricMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_SetConstant(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CoefficientVector_SetConstant", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CoefficientVector_SetConstant__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CoefficientVector_SetConstant__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseSymmetricMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CoefficientVector_SetConstant__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__CoefficientVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CoefficientVector_SetConstant__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CoefficientVector_SetConstant'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::CoefficientVector::SetConstant(double)\n"
    "    mfem::CoefficientVector::SetConstant(mfem::Vector const &)\n"
    "    mfem::CoefficientVector::SetConstant(mfem::DenseMatrix const &)\n"
    "    mfem::CoefficientVector::SetConstant(mfem::DenseSymmetricMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CoefficientVector_GetVDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoefficientVector_GetVDim" "', argument " "1"" of type '" "mfem::CoefficientVector const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  {
    try {
      result = (int)((mfem::CoefficientVector const *)arg1)->GetVDim(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CoefficientVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CoefficientVector *arg1 = (mfem::CoefficientVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CoefficientVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CoefficientVector" "', argument " "1"" of type '" "mfem::CoefficientVector *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CoefficientVector * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CoefficientVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CoefficientVector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CoefficientVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ComputeLpNorm__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Coefficient *arg2 = 0 ;
  mfem::Mesh *arg3 = 0 ;
  mfem::IntegrationRule **arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::IntegrationRule **tmp_ptrarray4 ;
  bool allocated4 = false ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ComputeLpNorm" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeLpNorm" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLpNorm" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeLpNorm" "', argument " "3"" of type '" "mfem::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLpNorm" "', argument " "3"" of type '" "mfem::Mesh &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Mesh * >(argp3);
  {
    //  List/Tuple -> mfem::IntegrationRule *
    
    int res = 0;
    if (PyList_Check(swig_obj[3])) {
      int ll = PyList_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyList_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else if (PyTuple_Check(swig_obj[3])) {
      int ll = PyTuple_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyTuple_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(swig_obj[3], (void **) &tmp_ptrarray4, SWIGTYPE_p_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg4 = tmp_ptrarray4;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple or mfem::IntegrationRule * *[]");
        return NULL;
      }
    }
    
    tmp_ptrarray4 = arg4;
    
    
    
    
    
    
  }
  {
    try {
      result = (double)mfem::ComputeLpNorm(arg1,*arg2,*arg3,(mfem::IntegrationRule const *(*))arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return resultobj;
fail:
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeLpNorm__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  mfem::Mesh *arg3 = 0 ;
  mfem::IntegrationRule **arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::IntegrationRule **tmp_ptrarray4 ;
  bool allocated4 = false ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ComputeLpNorm" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeLpNorm" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLpNorm" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeLpNorm" "', argument " "3"" of type '" "mfem::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLpNorm" "', argument " "3"" of type '" "mfem::Mesh &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Mesh * >(argp3);
  {
    //  List/Tuple -> mfem::IntegrationRule *
    
    int res = 0;
    if (PyList_Check(swig_obj[3])) {
      int ll = PyList_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyList_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else if (PyTuple_Check(swig_obj[3])) {
      int ll = PyTuple_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyTuple_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(swig_obj[3], (void **) &tmp_ptrarray4, SWIGTYPE_p_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg4 = tmp_ptrarray4;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple or mfem::IntegrationRule * *[]");
        return NULL;
      }
    }
    
    tmp_ptrarray4 = arg4;
    
    
    
    
    
    
  }
  {
    try {
      result = (double)mfem::ComputeLpNorm(arg1,*arg2,*arg3,(mfem::IntegrationRule const *(*))arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return resultobj;
fail:
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeLpNorm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ComputeLpNorm", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = 0;
            if (PyList_Check(argv[3])){
              _v = 1;
            }
            if (PyTuple_Check(argv[3])){
              _v = 1;
            }
            mfem::IntegrationRule * *ttt;
            int res = SWIG_ConvertPtr(argv[3], (void **) &ttt, SWIGTYPE__input, SWIG_POINTER_NO_NULL);
            if (SWIG_CheckState(res)){
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComputeLpNorm__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = 0;
            if (PyList_Check(argv[3])){
              _v = 1;
            }
            if (PyTuple_Check(argv[3])){
              _v = 1;
            }
            mfem::IntegrationRule * *ttt;
            int res = SWIG_ConvertPtr(argv[3], (void **) &ttt, SWIGTYPE__input, SWIG_POINTER_NO_NULL);
            if (SWIG_CheckState(res)){
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComputeLpNorm__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ComputeLpNorm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::ComputeLpNorm(double,mfem::Coefficient &,mfem::Mesh &,mfem::IntegrationRule const *[])\n"
    "    mfem::ComputeLpNorm(double,mfem::VectorCoefficient &,mfem::Mesh &,mfem::IntegrationRule const *[])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ComputeGlobalLpNorm__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Coefficient *arg2 = 0 ;
  mfem::ParMesh *arg3 = 0 ;
  mfem::IntegrationRule **arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::IntegrationRule **tmp_ptrarray4 ;
  bool allocated4 = false ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ComputeGlobalLpNorm" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Coefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeGlobalLpNorm" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeGlobalLpNorm" "', argument " "2"" of type '" "mfem::Coefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Coefficient * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ParMesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeGlobalLpNorm" "', argument " "3"" of type '" "mfem::ParMesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeGlobalLpNorm" "', argument " "3"" of type '" "mfem::ParMesh &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ParMesh * >(argp3);
  {
    //  List/Tuple -> mfem::IntegrationRule *
    
    int res = 0;
    if (PyList_Check(swig_obj[3])) {
      int ll = PyList_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyList_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else if (PyTuple_Check(swig_obj[3])) {
      int ll = PyTuple_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyTuple_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(swig_obj[3], (void **) &tmp_ptrarray4, SWIGTYPE_p_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg4 = tmp_ptrarray4;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple or mfem::IntegrationRule * *[]");
        return NULL;
      }
    }
    
    tmp_ptrarray4 = arg4;
    
    
    
    
    
    
  }
  {
    try {
      result = (double)mfem::ComputeGlobalLpNorm(arg1,*arg2,*arg3,(mfem::IntegrationRule const *(*))arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return resultobj;
fail:
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeGlobalLpNorm__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  mfem::ParMesh *arg3 = 0 ;
  mfem::IntegrationRule **arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mfem::IntegrationRule **tmp_ptrarray4 ;
  bool allocated4 = false ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ComputeGlobalLpNorm" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeGlobalLpNorm" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeGlobalLpNorm" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ParMesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeGlobalLpNorm" "', argument " "3"" of type '" "mfem::ParMesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeGlobalLpNorm" "', argument " "3"" of type '" "mfem::ParMesh &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ParMesh * >(argp3);
  {
    //  List/Tuple -> mfem::IntegrationRule *
    
    int res = 0;
    if (PyList_Check(swig_obj[3])) {
      int ll = PyList_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyList_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else if (PyTuple_Check(swig_obj[3])) {
      int ll = PyTuple_Size(swig_obj[3]);
      arg4 = new mfem::IntegrationRule * [ll];
      allocated4 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::IntegrationRule * ttt;
        PyObject *s = PyTuple_GetItem(swig_obj[3],i);
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__IntegrationRule,
          0);
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "can not convert a list/tuple item to mfem::IntegrationRule *");	 
          return NULL;
        }	
        arg4[i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(swig_obj[3], (void **) &tmp_ptrarray4, SWIGTYPE_p_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg4 = tmp_ptrarray4;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple or mfem::IntegrationRule * *[]");
        return NULL;
      }
    }
    
    tmp_ptrarray4 = arg4;
    
    
    
    
    
    
  }
  {
    try {
      result = (double)mfem::ComputeGlobalLpNorm(arg1,*arg2,*arg3,(mfem::IntegrationRule const *(*))arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return resultobj;
fail:
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
      
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeGlobalLpNorm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ComputeGlobalLpNorm", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Coefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ParMesh, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = 0;
            if (PyList_Check(argv[3])){
              _v = 1;
            }
            if (PyTuple_Check(argv[3])){
              _v = 1;
            }
            mfem::IntegrationRule * *ttt;
            int res = SWIG_ConvertPtr(argv[3], (void **) &ttt, SWIGTYPE__input, SWIG_POINTER_NO_NULL);
            if (SWIG_CheckState(res)){
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComputeGlobalLpNorm__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ParMesh, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = 0;
            if (PyList_Check(argv[3])){
              _v = 1;
            }
            if (PyTuple_Check(argv[3])){
              _v = 1;
            }
            mfem::IntegrationRule * *ttt;
            int res = SWIG_ConvertPtr(argv[3], (void **) &ttt, SWIGTYPE__input, SWIG_POINTER_NO_NULL);
            if (SWIG_CheckState(res)){
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComputeGlobalLpNorm__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ComputeGlobalLpNorm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::ComputeGlobalLpNorm(double,mfem::Coefficient &,mfem::ParMesh &,mfem::IntegrationRule const *[])\n"
    "    mfem::ComputeGlobalLpNorm(double,mfem::VectorCoefficient &,mfem::ParMesh &,mfem::IntegrationRule const *[])\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_NumbaFunction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  NumbaFunction *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (NumbaFunction *)new NumbaFunction(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumbaFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumbaFunction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  NumbaFunction *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NumbaFunction" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (NumbaFunction *)new NumbaFunction(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumbaFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumbaFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NumbaFunction", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_new_NumbaFunction__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NumbaFunction__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NumbaFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NumbaFunction::NumbaFunction(PyObject *,int)\n"
    "    NumbaFunction::NumbaFunction(PyObject *,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NumbaFunction_call0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunction *arg1 = (NumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaFunction_call0", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunction_call0" "', argument " "1"" of type '" "NumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaFunction_call0" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaFunction_call0" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      result = (double)(arg1)->call0((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunction_call(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunction *arg1 = (NumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaFunction_call", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunction_call" "', argument " "1"" of type '" "NumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaFunction_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaFunction_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      result = (double)(arg1)->call((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunction_call0t(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunction *arg1 = (NumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:NumbaFunction_call0t", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunction_call0t" "', argument " "1"" of type '" "NumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaFunction_call0t" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaFunction_call0t" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumbaFunction_call0t" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->call0t((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunction_callt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunction *arg1 = (NumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:NumbaFunction_callt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunction_callt" "', argument " "1"" of type '" "NumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaFunction_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaFunction_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumbaFunction_callt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->callt((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunction_GenerateCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunction *arg1 = (NumbaFunction *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"use_0",  NULL 
  };
  mfem::FunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:NumbaFunction_GenerateCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunction_GenerateCoefficient" "', argument " "1"" of type '" "NumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunction * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  {
    try {
      result = (mfem::FunctionCoefficient *)(arg1)->GenerateCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FunctionCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumbaFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaFunction *arg1 = (NumbaFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumbaFunction" "', argument " "1"" of type '" "NumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunction * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumbaFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NumbaFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NumbaFunction_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorNumbaFunction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  VectorNumbaFunction *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (VectorNumbaFunction *)new VectorNumbaFunction(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaFunction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool val4 ;
  int ecode4 = 0 ;
  VectorNumbaFunction *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VectorNumbaFunction" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (VectorNumbaFunction *)new VectorNumbaFunction(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorNumbaFunction", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_new_VectorNumbaFunction__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VectorNumbaFunction__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorNumbaFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VectorNumbaFunction::VectorNumbaFunction(PyObject *,int,int)\n"
    "    VectorNumbaFunction::VectorNumbaFunction(PyObject *,int,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction_call(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction *arg1 = (VectorNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorNumbaFunction_call", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction_call" "', argument " "1"" of type '" "VectorNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorNumbaFunction_call" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_call" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->call((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction_callt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction *arg1 = (VectorNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorNumbaFunction_callt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction_callt" "', argument " "1"" of type '" "VectorNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorNumbaFunction_callt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorNumbaFunction_callt" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_callt" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      (arg1)->callt((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction_call0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction *arg1 = (VectorNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorNumbaFunction_call0", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction_call0" "', argument " "1"" of type '" "VectorNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction_call0" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_call0" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorNumbaFunction_call0" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_call0" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->call0((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction_call0t(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction *arg1 = (VectorNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorNumbaFunction_call0t", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction_call0t" "', argument " "1"" of type '" "VectorNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction_call0t" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_call0t" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorNumbaFunction_call0t" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorNumbaFunction_call0t" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction_call0t" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      (arg1)->call0t((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction_GenerateCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction *arg1 = (VectorNumbaFunction *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"use_0",  NULL 
  };
  mfem::VectorFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:VectorNumbaFunction_GenerateCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction_GenerateCoefficient" "', argument " "1"" of type '" "VectorNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  {
    try {
      result = (mfem::VectorFunctionCoefficient *)(arg1)->GenerateCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorFunctionCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorNumbaFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaFunction *arg1 = (VectorNumbaFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorNumbaFunction" "', argument " "1"" of type '" "VectorNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorNumbaFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VectorNumbaFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorNumbaFunction_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixNumbaFunction__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  MatrixNumbaFunction *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (MatrixNumbaFunction *)new MatrixNumbaFunction(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaFunction__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool val4 ;
  int ecode4 = 0 ;
  MatrixNumbaFunction *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MatrixNumbaFunction" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (MatrixNumbaFunction *)new MatrixNumbaFunction(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MatrixNumbaFunction", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_new_MatrixNumbaFunction__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MatrixNumbaFunction__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MatrixNumbaFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MatrixNumbaFunction::MatrixNumbaFunction(PyObject *,int,int)\n"
    "    MatrixNumbaFunction::MatrixNumbaFunction(PyObject *,int,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction_call(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction *arg1 = (MatrixNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixNumbaFunction_call", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction_call" "', argument " "1"" of type '" "MatrixNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixNumbaFunction_call" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_call" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->call((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction_callt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction *arg1 = (MatrixNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixNumbaFunction_callt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction_callt" "', argument " "1"" of type '" "MatrixNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixNumbaFunction_callt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixNumbaFunction_callt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_callt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->callt((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction_call0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction *arg1 = (MatrixNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixNumbaFunction_call0", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction_call0" "', argument " "1"" of type '" "MatrixNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction_call0" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_call0" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixNumbaFunction_call0" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_call0" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->call0((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction_call0t(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction *arg1 = (MatrixNumbaFunction *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixNumbaFunction_call0t", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction_call0t" "', argument " "1"" of type '" "MatrixNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction_call0t" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_call0t" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixNumbaFunction_call0t" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixNumbaFunction_call0t" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction_call0t" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->call0t((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction_GenerateCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction *arg1 = (MatrixNumbaFunction *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"use_0",  NULL 
  };
  mfem::MatrixFunctionCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:MatrixNumbaFunction_GenerateCoefficient", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction_GenerateCoefficient" "', argument " "1"" of type '" "MatrixNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  {
    try {
      result = (mfem::MatrixFunctionCoefficient *)(arg1)->GenerateCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixFunctionCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixNumbaFunction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction *arg1 = (MatrixNumbaFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixNumbaFunction" "', argument " "1"" of type '" "MatrixNumbaFunction *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixNumbaFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MatrixNumbaFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixNumbaFunction_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ScalarNumbaFunction2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  ScalarNumbaFunction2 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    try {
      result = (ScalarNumbaFunction2 *)new ScalarNumbaFunction2(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScalarNumbaFunction2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarNumbaFunction2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  ScalarNumbaFunction2 *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = swig_obj[0];
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarNumbaFunction2" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (ScalarNumbaFunction2 *)new ScalarNumbaFunction2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScalarNumbaFunction2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarNumbaFunction2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ScalarNumbaFunction2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_ScalarNumbaFunction2__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScalarNumbaFunction2__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ScalarNumbaFunction2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScalarNumbaFunction2::ScalarNumbaFunction2(PyObject *)\n"
    "    ScalarNumbaFunction2::ScalarNumbaFunction2(PyObject *,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScalarNumbaFunction2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ScalarNumbaFunction2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalarNumbaFunction2" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_call(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarNumbaFunction2_call", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_call" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      result = (double)(arg1)->call((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_callt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ScalarNumbaFunction2_callt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_callt" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarNumbaFunction2_callt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->callt((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_callr(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarNumbaFunction2_callr", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_callr" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_callr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_callr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      result = (double)(arg1)->callr((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_calltr(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ScalarNumbaFunction2_calltr", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_calltr" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_calltr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_calltr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarNumbaFunction2_calltr" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->calltr((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_calli(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarNumbaFunction2_calli", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_calli" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_calli" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_calli" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      result = (double)(arg1)->calli((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_callti(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ScalarNumbaFunction2_callti", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_callti" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_callti" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_callti" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarNumbaFunction2_callti" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)(arg1)->callti((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_GetScalarImaginary(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_GetScalarImaginary" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  {
    try {
      result = (double)(arg1)->GetScalarImaginary(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_set_obj1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  SwigValueWrapper< std::function< double (mfem::Vector const &) > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"obj1_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarNumbaFunction2_set_obj1", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_set_obj1" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_set_obj1" "', argument " "2"" of type '" "std::function< double (mfem::Vector const &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_set_obj1" "', argument " "2"" of type '" "std::function< double (mfem::Vector const &) >""'");
    } else {
      std::function< double (mfem::Vector const &) > * temp = reinterpret_cast< std::function< double (mfem::Vector const &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_obj1(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_set_obj2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  std::function< double (mfem::Vector const &,double) > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"obj2_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarNumbaFunction2_set_obj2", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_set_obj2" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaFunction2_set_obj2" "', argument " "2"" of type '" "std::function< double (mfem::Vector const &,double) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaFunction2_set_obj2" "', argument " "2"" of type '" "std::function< double (mfem::Vector const &,double) >""'");
    } else {
      std::function< double (mfem::Vector const &,double) > * temp = reinterpret_cast< std::function< double (mfem::Vector const &,double) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_obj2(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_get_obj1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::function< double (mfem::Vector const &) > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_get_obj1" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  {
    try {
      result = (arg1)->get_obj1(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj((new std::function< double (mfem::Vector const &) >(result)), SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaFunction2_get_obj2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ScalarNumbaFunction2 *arg1 = (ScalarNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::function< double (mfem::Vector const &,double) > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ScalarNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaFunction2_get_obj2" "', argument " "1"" of type '" "ScalarNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaFunction2 * >(argp1);
  {
    try {
      result = (arg1)->get_obj2(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj((new std::function< double (mfem::Vector const &,double) >(result)), SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalarNumbaFunction2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ScalarNumbaFunction2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScalarNumbaFunction2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GenerateScalarNumbaCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  bool arg2 ;
  int arg3 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"numba_func",  (char *)"td",  (char *)"mode",  NULL 
  };
  ScalarNumbaCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:GenerateScalarNumbaCoefficient", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GenerateScalarNumbaCoefficient" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (ScalarNumbaCoefficient *)GenerateScalarNumbaCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScalarNumbaCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaFunction2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  VectorNumbaFunction2 *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (VectorNumbaFunction2 *)new VectorNumbaFunction2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaFunction2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaFunction2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  VectorNumbaFunction2 *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VectorNumbaFunction2" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (VectorNumbaFunction2 *)new VectorNumbaFunction2(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaFunction2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaFunction2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorNumbaFunction2", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_new_VectorNumbaFunction2__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VectorNumbaFunction2__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorNumbaFunction2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VectorNumbaFunction2::VectorNumbaFunction2(PyObject *,int)\n"
    "    VectorNumbaFunction2::VectorNumbaFunction2(PyObject *,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorNumbaFunction2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaFunction2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorNumbaFunction2" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_call(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorNumbaFunction2_call", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_call" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorNumbaFunction2_call" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_call" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->call((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_callt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorNumbaFunction2_callt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_callt" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorNumbaFunction2_callt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorNumbaFunction2_callt" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_callt" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      (arg1)->callt((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_callr(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorNumbaFunction2_callr", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_callr" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_callr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_callr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorNumbaFunction2_callr" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_callr" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->callr((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_calltr(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorNumbaFunction2_calltr", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_calltr" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_calltr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_calltr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorNumbaFunction2_calltr" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorNumbaFunction2_calltr" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_calltr" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      (arg1)->calltr((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_calli(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorNumbaFunction2_calli", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_calli" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_calli" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_calli" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorNumbaFunction2_calli" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_calli" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->calli((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_callti(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorNumbaFunction2_callti", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_callti" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_callti" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_callti" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorNumbaFunction2_callti" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorNumbaFunction2_callti" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_callti" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      (arg1)->callti((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_GetArrayImaginary(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorNumbaFunction2_GetArrayImaginary", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_GetArrayImaginary" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_GetArrayImaginary" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_GetArrayImaginary" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->GetArrayImaginary(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_create_outc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_create_outc" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  {
    try {
      (arg1)->create_outc(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_set_obj1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::Vector &) > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"obj1_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorNumbaFunction2_set_obj1", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_set_obj1" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_set_obj1" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_set_obj1" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_obj1(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_set_obj2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::Vector &) > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"obj2_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorNumbaFunction2_set_obj2", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_set_obj2" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaFunction2_set_obj2" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaFunction2_set_obj2" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_obj2(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_get_obj1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::Vector &) > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_get_obj1" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  {
    try {
      result = (arg1)->get_obj1(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj((new std::function< void (mfem::Vector const &,mfem::Vector &) >(result)), SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaFunction2_get_obj2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaFunction2 *arg1 = (VectorNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::Vector &) > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaFunction2_get_obj2" "', argument " "1"" of type '" "VectorNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaFunction2 * >(argp1);
  {
    try {
      result = (arg1)->get_obj2(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj((new std::function< void (mfem::Vector const &,double,mfem::Vector &) >(result)), SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorNumbaFunction2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VectorNumbaFunction2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorNumbaFunction2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GenerateVectorNumbaCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"numba_func",  (char *)"vdim",  (char *)"td",  (char *)"mode",  NULL 
  };
  VectorNumbaCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:GenerateVectorNumbaCoefficient", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  arg1 = obj0;
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GenerateVectorNumbaCoefficient" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      result = (VectorNumbaCoefficient *)GenerateVectorNumbaCoefficient(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaFunction2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  MatrixNumbaFunction2 *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (MatrixNumbaFunction2 *)new MatrixNumbaFunction2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaFunction2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaFunction2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  MatrixNumbaFunction2 *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatrixNumbaFunction2" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (MatrixNumbaFunction2 *)new MatrixNumbaFunction2(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaFunction2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaFunction2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MatrixNumbaFunction2", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_new_MatrixNumbaFunction2__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MatrixNumbaFunction2__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MatrixNumbaFunction2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MatrixNumbaFunction2::MatrixNumbaFunction2(PyObject *,int)\n"
    "    MatrixNumbaFunction2::MatrixNumbaFunction2(PyObject *,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MatrixNumbaFunction2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaFunction2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixNumbaFunction2" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_call(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixNumbaFunction2_call", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_call" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_call" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixNumbaFunction2_call" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_call" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->call((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_callt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixNumbaFunction2_callt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_callt" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_callt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixNumbaFunction2_callt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixNumbaFunction2_callt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_callt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->callt((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_callr(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixNumbaFunction2_callr", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_callr" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_callr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_callr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixNumbaFunction2_callr" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_callr" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->callr((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_calltr(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixNumbaFunction2_calltr", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_calltr" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_calltr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_calltr" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixNumbaFunction2_calltr" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixNumbaFunction2_calltr" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_calltr" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->calltr((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_calli(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixNumbaFunction2_calli", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_calli" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_calli" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_calli" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixNumbaFunction2_calli" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_calli" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->calli((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_callti(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"t",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixNumbaFunction2_callti", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_callti" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_callti" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_callti" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixNumbaFunction2_callti" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixNumbaFunction2_callti" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_callti" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->callti((mfem::Vector const &)*arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_GetArrayImaginary(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixNumbaFunction2_GetArrayImaginary", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_GetArrayImaginary" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_GetArrayImaginary" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_GetArrayImaginary" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->GetArrayImaginary(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_create_outc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_create_outc" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  {
    try {
      (arg1)->create_outc(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_set_obj1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"obj1_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixNumbaFunction2_set_obj1", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_set_obj1" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_set_obj1" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_set_obj1" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_obj1(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_set_obj2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"obj2_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixNumbaFunction2_set_obj2", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_set_obj2" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaFunction2_set_obj2" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaFunction2_set_obj2" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->set_obj2(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_get_obj1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_get_obj1" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  {
    try {
      result = (arg1)->get_obj1(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj((new std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >(result)), SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaFunction2_get_obj2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaFunction2 *arg1 = (MatrixNumbaFunction2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaFunction2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaFunction2_get_obj2" "', argument " "1"" of type '" "MatrixNumbaFunction2 *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaFunction2 * >(argp1);
  {
    try {
      result = (arg1)->get_obj2(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj((new std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >(result)), SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixNumbaFunction2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MatrixNumbaFunction2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixNumbaFunction2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GenerateMatrixNumbaCoefficient(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"numba_func",  (char *)"height",  (char *)"width",  (char *)"td",  (char *)"mode",  NULL 
  };
  MatrixNumbaCoefficient *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:GenerateMatrixNumbaCoefficient", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  arg1 = obj0;
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GenerateMatrixNumbaCoefficient" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(obj4);
  }
  {
    try {
      result = (MatrixNumbaCoefficient *)GenerateMatrixNumbaCoefficient(arg1,arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaCoefficient, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetNumbaCoefficientDependency(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = 0 ;
  mfem::Array< mfem::Coefficient * > *arg2 = 0 ;
  mfem::Array< mfem::VectorCoefficient * > *arg3 = 0 ;
  mfem::Array< mfem::MatrixCoefficient * > *arg4 = 0 ;
  mfem::Array< ScalarNumbaCoefficient * > *arg5 = 0 ;
  mfem::Array< VectorNumbaCoefficient * > *arg6 = 0 ;
  mfem::Array< MatrixNumbaCoefficient * > *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< mfem::Coefficient * > *tmp_ptrarray2 ;
  bool allocated2 = false ;
  mfem::Array< mfem::VectorCoefficient * > *tmp_ptrarray3 ;
  bool allocated3 = false ;
  mfem::Array< mfem::MatrixCoefficient * > *tmp_ptrarray4 ;
  bool allocated4 = false ;
  mfem::Array< ScalarNumbaCoefficient * > *tmp_ptrarray5 ;
  bool allocated5 = false ;
  mfem::Array< VectorNumbaCoefficient * > *tmp_ptrarray6 ;
  bool allocated6 = false ;
  mfem::Array< MatrixNumbaCoefficient * > *tmp_ptrarray7 ;
  bool allocated7 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char * kwnames[] = {
    (char *)"obj",  (char *)"a1",  (char *)"a2",  (char *)"a3",  (char *)"a4",  (char *)"a5",  (char *)"a6",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOOO:SetNumbaCoefficientDependency", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NumbaCoefficientBase,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetNumbaCoefficientDependency" "', argument " "1"" of type '" "NumbaCoefficientBase &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetNumbaCoefficientDependency" "', argument " "1"" of type '" "NumbaCoefficientBase &""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  {
    //  List/Tuple (=[mfem::Coefficient*,mfem::Coefficient* ...]) -> mfem:Array<mfem::Coefficient*)
    int res = 0;
    if (PyList_Check(obj1)) {
      int ll = PyList_Size(obj1);
      arg2 = new mfem::Array<mfem::Coefficient*>(ll);
      allocated2 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::Coefficient* ttt;
        PyObject *s = PyList_GetItem(obj1,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__Coefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a list element to be <mfem::Coefficient* *>");	 
          return NULL;
        }	
        arg2[0][i] = ttt;
      }
    } else if (PyTuple_Check(obj1)) {
      int ll = PyTuple_Size(obj1);
      arg2 = new mfem::Array<mfem::Coefficient*>(ll);
      allocated2 = true;
      for (int i = 0; i < ll; i++) {
        mfem::Coefficient* ttt;
        PyObject *s = PyTuple_GetItem(obj1,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__Coefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a tuple element to be <mfem::Coefficient* *>");	 	 
          return NULL;
        }	
        arg2[0][i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(obj1, (void **) &tmp_ptrarray2, SWIGTYPE_p_mfem__ArrayT_mfem__Coefficient_p_t, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg2 = tmp_ptrarray2;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple else or Array<mfem::Coefficient*>");
        return NULL;
      }
    }
    tmp_ptrarray2 = arg2;
  }
  {
    //  List/Tuple (=[mfem::VectorCoefficient*,mfem::VectorCoefficient* ...]) -> mfem:Array<mfem::VectorCoefficient*)
    int res = 0;
    if (PyList_Check(obj2)) {
      int ll = PyList_Size(obj2);
      arg3 = new mfem::Array<mfem::VectorCoefficient*>(ll);
      allocated3 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::VectorCoefficient* ttt;
        PyObject *s = PyList_GetItem(obj2,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__VectorCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a list element to be <mfem::VectorCoefficient* *>");	 
          return NULL;
        }	
        arg3[0][i] = ttt;
      }
    } else if (PyTuple_Check(obj2)) {
      int ll = PyTuple_Size(obj2);
      arg3 = new mfem::Array<mfem::VectorCoefficient*>(ll);
      allocated3 = true;
      for (int i = 0; i < ll; i++) {
        mfem::VectorCoefficient* ttt;
        PyObject *s = PyTuple_GetItem(obj2,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__VectorCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a tuple element to be <mfem::VectorCoefficient* *>");	 	 
          return NULL;
        }	
        arg3[0][i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(obj2, (void **) &tmp_ptrarray3, SWIGTYPE_p_mfem__ArrayT_mfem__VectorCoefficient_p_t, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg3 = tmp_ptrarray3;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple else or Array<mfem::VectorCoefficient*>");
        return NULL;
      }
    }
    tmp_ptrarray3 = arg3;
  }
  {
    //  List/Tuple (=[mfem::MatrixCoefficient*,mfem::MatrixCoefficient* ...]) -> mfem:Array<mfem::MatrixCoefficient*)
    int res = 0;
    if (PyList_Check(obj3)) {
      int ll = PyList_Size(obj3);
      arg4 = new mfem::Array<mfem::MatrixCoefficient*>(ll);
      allocated4 = true;     
      for (int i = 0; i < ll; i++) {
        mfem::MatrixCoefficient* ttt;
        PyObject *s = PyList_GetItem(obj3,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__MatrixCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a list element to be <mfem::MatrixCoefficient* *>");	 
          return NULL;
        }	
        arg4[0][i] = ttt;
      }
    } else if (PyTuple_Check(obj3)) {
      int ll = PyTuple_Size(obj3);
      arg4 = new mfem::Array<mfem::MatrixCoefficient*>(ll);
      allocated4 = true;
      for (int i = 0; i < ll; i++) {
        mfem::MatrixCoefficient* ttt;
        PyObject *s = PyTuple_GetItem(obj3,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_mfem__MatrixCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a tuple element to be <mfem::MatrixCoefficient* *>");	 	 
          return NULL;
        }	
        arg4[0][i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(obj3, (void **) &tmp_ptrarray4, SWIGTYPE_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg4 = tmp_ptrarray4;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple else or Array<mfem::MatrixCoefficient*>");
        return NULL;
      }
    }
    tmp_ptrarray4 = arg4;
  }
  {
    //  List/Tuple (=[ScalarNumbaCoefficient*,ScalarNumbaCoefficient* ...]) -> mfem:Array<ScalarNumbaCoefficient*)
    int res = 0;
    if (PyList_Check(obj4)) {
      int ll = PyList_Size(obj4);
      arg5 = new mfem::Array<ScalarNumbaCoefficient*>(ll);
      allocated5 = true;     
      for (int i = 0; i < ll; i++) {
        ScalarNumbaCoefficient* ttt;
        PyObject *s = PyList_GetItem(obj4,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_ScalarNumbaCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a list element to be <ScalarNumbaCoefficient* *>");	 
          return NULL;
        }	
        arg5[0][i] = ttt;
      }
    } else if (PyTuple_Check(obj4)) {
      int ll = PyTuple_Size(obj4);
      arg5 = new mfem::Array<ScalarNumbaCoefficient*>(ll);
      allocated5 = true;
      for (int i = 0; i < ll; i++) {
        ScalarNumbaCoefficient* ttt;
        PyObject *s = PyTuple_GetItem(obj4,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_ScalarNumbaCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a tuple element to be <ScalarNumbaCoefficient* *>");	 	 
          return NULL;
        }	
        arg5[0][i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(obj4, (void **) &tmp_ptrarray5, SWIGTYPE_p_mfem__ArrayT_ScalarNumbaCoefficient_p_t, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg5 = tmp_ptrarray5;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple else or Array<ScalarNumbaCoefficient*>");
        return NULL;
      }
    }
    tmp_ptrarray5 = arg5;
  }
  {
    //  List/Tuple (=[VectorNumbaCoefficient*,VectorNumbaCoefficient* ...]) -> mfem:Array<VectorNumbaCoefficient*)
    int res = 0;
    if (PyList_Check(obj5)) {
      int ll = PyList_Size(obj5);
      arg6 = new mfem::Array<VectorNumbaCoefficient*>(ll);
      allocated6 = true;     
      for (int i = 0; i < ll; i++) {
        VectorNumbaCoefficient* ttt;
        PyObject *s = PyList_GetItem(obj5,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_VectorNumbaCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a list element to be <VectorNumbaCoefficient* *>");	 
          return NULL;
        }	
        arg6[0][i] = ttt;
      }
    } else if (PyTuple_Check(obj5)) {
      int ll = PyTuple_Size(obj5);
      arg6 = new mfem::Array<VectorNumbaCoefficient*>(ll);
      allocated6 = true;
      for (int i = 0; i < ll; i++) {
        VectorNumbaCoefficient* ttt;
        PyObject *s = PyTuple_GetItem(obj5,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_VectorNumbaCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a tuple element to be <VectorNumbaCoefficient* *>");	 	 
          return NULL;
        }	
        arg6[0][i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(obj5, (void **) &tmp_ptrarray6, SWIGTYPE_p_mfem__ArrayT_VectorNumbaCoefficient_p_t, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg6 = tmp_ptrarray6;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple else or Array<VectorNumbaCoefficient*>");
        return NULL;
      }
    }
    tmp_ptrarray6 = arg6;
  }
  {
    //  List/Tuple (=[MatrixNumbaCoefficient*,MatrixNumbaCoefficient* ...]) -> mfem:Array<MatrixNumbaCoefficient*)
    int res = 0;
    if (PyList_Check(obj6)) {
      int ll = PyList_Size(obj6);
      arg7 = new mfem::Array<MatrixNumbaCoefficient*>(ll);
      allocated7 = true;     
      for (int i = 0; i < ll; i++) {
        MatrixNumbaCoefficient* ttt;
        PyObject *s = PyList_GetItem(obj6,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_MatrixNumbaCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a list element to be <MatrixNumbaCoefficient* *>");	 
          return NULL;
        }	
        arg7[0][i] = ttt;
      }
    } else if (PyTuple_Check(obj6)) {
      int ll = PyTuple_Size(obj6);
      arg7 = new mfem::Array<MatrixNumbaCoefficient*>(ll);
      allocated7 = true;
      for (int i = 0; i < ll; i++) {
        MatrixNumbaCoefficient* ttt;
        PyObject *s = PyTuple_GetItem(obj6,i);
        //if (s == Py_None){
        //	 ttt = NULL;
        //} else {
        res = SWIG_ConvertPtr(s, (void **) &ttt,
          SWIGTYPE_p_MatrixNumbaCoefficient,
          0);
        //}
        if (!SWIG_IsOK(res)) {
          PyErr_SetString(PyExc_ValueError, "Expecting a tuple element to be <MatrixNumbaCoefficient* *>");	 	 
          return NULL;
        }	
        arg7[0][i] = ttt;
      }
    } else {
      int res = SWIG_ConvertPtr(obj6, (void **) &tmp_ptrarray7, SWIGTYPE_p_mfem__ArrayT_MatrixNumbaCoefficient_p_t, SWIG_POINTER_NO_NULL);
      if (SWIG_CheckState(res)){
        arg7 = tmp_ptrarray7;
      } else {
        PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple else or Array<MatrixNumbaCoefficient*>");
        return NULL;
      }
    }
    tmp_ptrarray7 = arg7;
  }
  {
    try {
      SetNumbaCoefficientDependency(*arg1,(mfem::Array< mfem::Coefficient * > const &)*arg2,(mfem::Array< mfem::VectorCoefficient * > const &)*arg3,(mfem::Array< mfem::MatrixCoefficient * > const &)*arg4,(mfem::Array< ScalarNumbaCoefficient * > const &)*arg5,(mfem::Array< VectorNumbaCoefficient * > const &)*arg6,(mfem::Array< MatrixNumbaCoefficient * > const &)*arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2 != 0){
      if (allocated2){
        delete arg2;
      }
    }
  }
  {
    if (arg3 != 0){
      if (allocated3){
        delete arg3;
      }
    }
  }
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
    }
  }
  {
    if (arg5 != 0){
      if (allocated5){
        delete arg5;
      }
    }
  }
  {
    if (arg6 != 0){
      if (allocated6){
        delete arg6;
      }
    }
  }
  {
    if (arg7 != 0){
      if (allocated7){
        delete arg7;
      }
    }
  }
  return resultobj;
fail:
  {
    if (arg2 != 0){
      if (allocated2){
        delete arg2;
      }
    }
  }
  {
    if (arg3 != 0){
      if (allocated3){
        delete arg3;
      }
    }
  }
  {
    if (arg4 != 0){
      if (allocated4){
        delete arg4;
      }
    }
  }
  {
    if (arg5 != 0){
      if (allocated5){
        delete arg5;
      }
    }
  }
  {
    if (arg6 != 0){
      if (allocated6){
        delete arg6;
      }
    }
  }
  {
    if (arg7 != 0){
      if (allocated7){
        delete arg7;
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_fake_func(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"x",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:fake_func", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fake_func" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fake_func" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  {
    try {
      result = (double)fake_func((mfem::Vector const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fake_func_vec(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"x",  (char *)"Ht",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:fake_func_vec", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fake_func_vec" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fake_func_vec" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fake_func_vec" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fake_func_vec" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      fake_func_vec((mfem::Vector const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fake_func_mat(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"x",  (char *)"Kt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:fake_func_mat", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fake_func_mat" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fake_func_mat" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fake_func_mat" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fake_func_mat" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      fake_func_mat((mfem::Vector const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PyCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"_self",  (char *)"tdep",  NULL 
  };
  mfem::PyCoefficientBase *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:new_PyCoefficientBase", kwnames, &obj0, &obj1)) SWIG_fail;
  arg1 = obj0;
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (mfem::PyCoefficientBase *)new SwigDirector_PyCoefficientBase(arg1,arg2); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__PyCoefficientBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyCoefficientBase_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PyCoefficientBase *arg1 = (mfem::PyCoefficientBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PyCoefficientBase_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyCoefficientBase_SetTime" "', argument " "1"" of type '" "mfem::PyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PyCoefficientBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyCoefficientBase_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::PyCoefficientBase::SetTime(arg2);
        } else {
          (arg1)->SetTime(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyCoefficientBase_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PyCoefficientBase *arg1 = (mfem::PyCoefficientBase *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PyCoefficientBase_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyCoefficientBase_Eval" "', argument " "1"" of type '" "mfem::PyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (double)(arg1)->mfem::PyCoefficientBase::Eval(*arg2,(mfem::IntegrationPoint const &)*arg3);
        } else {
          result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyCoefficientBase__EvalPy(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PyCoefficientBase *arg1 = (mfem::PyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg0",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:PyCoefficientBase__EvalPy", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyCoefficientBase__EvalPy" "', argument " "1"" of type '" "mfem::PyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyCoefficientBase__EvalPy" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyCoefficientBase__EvalPy" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("mfem::PyCoefficientBase::_EvalPy");
        } else {
          result = (double)(arg1)->_EvalPy(*arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyCoefficientBase__EvalPyT(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PyCoefficientBase *arg1 = (mfem::PyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg0",  (char *)"arg1",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:PyCoefficientBase__EvalPyT", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyCoefficientBase__EvalPyT" "', argument " "1"" of type '" "mfem::PyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyCoefficientBase__EvalPyT" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyCoefficientBase__EvalPyT" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyCoefficientBase__EvalPyT" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("mfem::PyCoefficientBase::_EvalPyT");
        } else {
          result = (double)(arg1)->_EvalPyT(*arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PyCoefficientBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::PyCoefficientBase *arg1 = (mfem::PyCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__PyCoefficientBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PyCoefficientBase" "', argument " "1"" of type '" "mfem::PyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PyCoefficientBase * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_PyCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::PyCoefficientBase *arg1 = (mfem::PyCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"_self",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_PyCoefficientBase", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__PyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_PyCoefficientBase" "', argument " "1"" of type '" "mfem::PyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::PyCoefficientBase * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PyCoefficientBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__PyCoefficientBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PyCoefficientBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VectorPyCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::Coefficient *arg4 = (mfem::Coefficient *) NULL ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"_self",  (char *)"dim",  (char *)"tdep",  (char *)"q",  NULL 
  };
  mfem::VectorPyCoefficientBase *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:new_VectorPyCoefficientBase", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  arg1 = obj0;
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  if (obj3) {
    res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_mfem__Coefficient, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_VectorPyCoefficientBase" "', argument " "4"" of type '" "mfem::Coefficient *""'"); 
    }
    arg4 = reinterpret_cast< mfem::Coefficient * >(argp4);
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (mfem::VectorPyCoefficientBase *)new SwigDirector_VectorPyCoefficientBase(arg1,arg2,arg3,arg4); 
      } else {
        result = (mfem::VectorPyCoefficientBase *)new mfem::VectorPyCoefficientBase(arg2,arg3,arg4); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__VectorPyCoefficientBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPyCoefficientBase_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorPyCoefficientBase_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPyCoefficientBase_SetTime" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPyCoefficientBase_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::VectorPyCoefficientBase::SetTime(arg2);
        } else {
          (arg1)->SetTime(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPyCoefficientBase_Eval__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::VectorPyCoefficientBase::Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4);
        } else {
          (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPyCoefficientBase_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPyCoefficientBase_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::VectorPyCoefficientBase::Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4);
        } else {
          (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPyCoefficientBase_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VectorPyCoefficientBase_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPyCoefficientBase_Eval__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPyCoefficientBase_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VectorPyCoefficientBase_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::VectorPyCoefficientBase::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::VectorPyCoefficientBase::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPyCoefficientBase__EvalPy(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg0",  (char *)"arg1",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:VectorPyCoefficientBase__EvalPy", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPyCoefficientBase__EvalPy" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPyCoefficientBase__EvalPy" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase__EvalPy" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPyCoefficientBase__EvalPy" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase__EvalPy" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::VectorPyCoefficientBase::_EvalPy(*arg2,*arg3);
        } else {
          (arg1)->_EvalPy(*arg2,*arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPyCoefficientBase__EvalPyT(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg0",  (char *)"arg1",  (char *)"arg2",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorPyCoefficientBase__EvalPyT", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPyCoefficientBase__EvalPyT" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPyCoefficientBase__EvalPyT" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase__EvalPyT" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPyCoefficientBase__EvalPyT" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPyCoefficientBase__EvalPyT" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPyCoefficientBase__EvalPyT" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::VectorPyCoefficientBase::_EvalPyT(*arg2,arg3,*arg4);
        } else {
          (arg1)->_EvalPyT(*arg2,arg3,*arg4);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorPyCoefficientBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPyCoefficientBase" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_VectorPyCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::VectorPyCoefficientBase *arg1 = (mfem::VectorPyCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"_self",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_VectorPyCoefficientBase", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__VectorPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_VectorPyCoefficientBase" "', argument " "1"" of type '" "mfem::VectorPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::VectorPyCoefficientBase * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorPyCoefficientBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__VectorPyCoefficientBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorPyCoefficientBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatrixPyCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"_self",  (char *)"dim",  (char *)"tdep",  NULL 
  };
  mfem::MatrixPyCoefficientBase *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:new_MatrixPyCoefficientBase", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  arg1 = obj0;
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (mfem::MatrixPyCoefficientBase *)new SwigDirector_MatrixPyCoefficientBase(arg1,arg2,arg3); 
      } else {
        result = (mfem::MatrixPyCoefficientBase *)new mfem::MatrixPyCoefficientBase(arg2,arg3); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixPyCoefficientBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixPyCoefficientBase_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixPyCoefficientBase *arg1 = (mfem::MatrixPyCoefficientBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixPyCoefficientBase_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixPyCoefficientBase_SetTime" "', argument " "1"" of type '" "mfem::MatrixPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixPyCoefficientBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixPyCoefficientBase_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::MatrixPyCoefficientBase::SetTime(arg2);
        } else {
          (arg1)->SetTime(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixPyCoefficientBase_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixPyCoefficientBase *arg1 = (mfem::MatrixPyCoefficientBase *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixPyCoefficientBase_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "1"" of type '" "mfem::MatrixPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::MatrixPyCoefficientBase::Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4);
        } else {
          (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixPyCoefficientBase__EvalPy(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixPyCoefficientBase *arg1 = (mfem::MatrixPyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg0",  (char *)"arg1",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MatrixPyCoefficientBase__EvalPy", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixPyCoefficientBase__EvalPy" "', argument " "1"" of type '" "mfem::MatrixPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixPyCoefficientBase__EvalPy" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase__EvalPy" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixPyCoefficientBase__EvalPy" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase__EvalPy" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::MatrixPyCoefficientBase::_EvalPy(*arg2,*arg3);
        } else {
          (arg1)->_EvalPy(*arg2,*arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixPyCoefficientBase__EvalPyT(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixPyCoefficientBase *arg1 = (mfem::MatrixPyCoefficientBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg0",  (char *)"arg1",  (char *)"arg2",  NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixPyCoefficientBase__EvalPyT", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixPyCoefficientBase__EvalPyT" "', argument " "1"" of type '" "mfem::MatrixPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixPyCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixPyCoefficientBase__EvalPyT" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase__EvalPyT" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixPyCoefficientBase__EvalPyT" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixPyCoefficientBase__EvalPyT" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixPyCoefficientBase__EvalPyT" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->mfem::MatrixPyCoefficientBase::_EvalPyT(*arg2,arg3,*arg4);
        } else {
          (arg1)->_EvalPyT(*arg2,arg3,*arg4);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }    
      //catch (...){
      //  SWIG_fail;
      //}
      //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
      //    catch (std::exception &e) { SWIG_fail; }    
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixPyCoefficientBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::MatrixPyCoefficientBase *arg1 = (mfem::MatrixPyCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__MatrixPyCoefficientBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixPyCoefficientBase" "', argument " "1"" of type '" "mfem::MatrixPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixPyCoefficientBase * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_MatrixPyCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::MatrixPyCoefficientBase *arg1 = (mfem::MatrixPyCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"_self",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:disown_MatrixPyCoefficientBase", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__MatrixPyCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_MatrixPyCoefficientBase" "', argument " "1"" of type '" "mfem::MatrixPyCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< mfem::MatrixPyCoefficientBase * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixPyCoefficientBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__MatrixPyCoefficientBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixPyCoefficientBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NumbaFunctionBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"input",  (char *)"sdim",  (char *)"td",  NULL 
  };
  NumbaFunctionBase *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:new_NumbaFunctionBase", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  arg1 = obj0;
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NumbaFunctionBase" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (NumbaFunctionBase *)new NumbaFunctionBase(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumbaFunctionBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_print_add(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_print_add" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    try {
      (arg1)->print_add(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_SetUserFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"input",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaFunctionBase_SetUserFunction", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_SetUserFunction" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->SetUserFunction(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_GetData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_GetData" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    try {
      result = (double *)(arg1)->GetData(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_GetPointer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_GetPointer" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    try {
      result = (double **)(arg1)->GetPointer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_SetDataCount(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaFunctionBase_SetDataCount", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_SetDataCount" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      (arg1)->SetDataCount(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_GetScalarImaginary(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_GetScalarImaginary" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    try {
      result = (double)(arg1)->GetScalarImaginary(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_GetArrayImaginary__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_GetArrayImaginary" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaFunctionBase_GetArrayImaginary" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaFunctionBase_GetArrayImaginary" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->GetArrayImaginary(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_GetArrayImaginary__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaFunctionBase_GetArrayImaginary" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaFunctionBase_GetArrayImaginary" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaFunctionBase_GetArrayImaginary" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->GetArrayImaginary(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaFunctionBase_GetArrayImaginary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NumbaFunctionBase_GetArrayImaginary", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NumbaFunctionBase_GetArrayImaginary__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NumbaFunctionBase_GetArrayImaginary__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NumbaFunctionBase_GetArrayImaginary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NumbaFunctionBase::GetArrayImaginary(mfem::Vector &)\n"
    "    NumbaFunctionBase::GetArrayImaginary(mfem::DenseMatrix &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NumbaFunctionBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaFunctionBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumbaFunctionBase" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumbaFunctionBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NumbaFunctionBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NumbaFunctionBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NumbaCoefficientBase(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaFunctionBase *arg1 = (NumbaFunctionBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"in_obj",  NULL 
  };
  NumbaCoefficientBase *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_NumbaCoefficientBase", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumbaCoefficientBase" "', argument " "1"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaFunctionBase * >(argp1);
  {
    try {
      result = (NumbaCoefficientBase *)new NumbaCoefficientBase(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NumbaCoefficientBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaCoefficientBase_PrepParams(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:NumbaCoefficientBase_PrepParams", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaCoefficientBase_PrepParams" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumbaCoefficientBase_PrepParams" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaCoefficientBase_PrepParams" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NumbaCoefficientBase_PrepParams" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NumbaCoefficientBase_PrepParams" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      (arg1)->PrepParams(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaCoefficientBase_SetKinds(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"kinds_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaCoefficientBase_SetKinds", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaCoefficientBase_SetKinds" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->SetKinds(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaCoefficientBase_SetIsDepComplex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"isComplex_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaCoefficientBase_SetIsDepComplex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaCoefficientBase_SetIsDepComplex" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->SetIsDepComplex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaCoefficientBase_SetOutComplex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"in_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaCoefficientBase_SetOutComplex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaCoefficientBase_SetOutComplex" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumbaCoefficientBase_SetOutComplex" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetOutComplex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaCoefficientBase_IsOutComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaCoefficientBase_IsOutComplex" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->IsOutComplex(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumbaCoefficientBase_SetTimeInDependency(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NumbaCoefficientBase_SetTimeInDependency", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NumbaCoefficientBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumbaCoefficientBase_SetTimeInDependency" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumbaCoefficientBase_SetTimeInDependency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTimeInDependency(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumbaCoefficientBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NumbaCoefficientBase *arg1 = (NumbaCoefficientBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NumbaCoefficientBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumbaCoefficientBase" "', argument " "1"" of type '" "NumbaCoefficientBase *""'"); 
  }
  arg1 = reinterpret_cast< NumbaCoefficientBase * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumbaCoefficientBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NumbaCoefficientBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NumbaCoefficientBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ScalarNumbaCoefficient_GetNDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ScalarNumbaCoefficient *arg1 = (ScalarNumbaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ScalarNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaCoefficient_GetNDim" "', argument " "1"" of type '" "ScalarNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaCoefficient * >(argp1);
  {
    try {
      result = (int)(arg1)->GetNDim(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarNumbaCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::function< double (mfem::Vector const &) > > arg1 ;
  NumbaFunctionBase *arg2 = (NumbaFunctionBase *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ScalarNumbaCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarNumbaCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &) >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarNumbaCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &) >""'");
    } else {
      std::function< double (mfem::Vector const &) > * temp = reinterpret_cast< std::function< double (mfem::Vector const &) > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarNumbaCoefficient" "', argument " "2"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg2 = reinterpret_cast< NumbaFunctionBase * >(argp2);
  {
    try {
      result = (ScalarNumbaCoefficient *)new ScalarNumbaCoefficient(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScalarNumbaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarNumbaCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::function< double (mfem::Vector const &,double) > arg1 ;
  NumbaFunctionBase *arg2 = (NumbaFunctionBase *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ScalarNumbaCoefficient *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarNumbaCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &,double) >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarNumbaCoefficient" "', argument " "1"" of type '" "std::function< double (mfem::Vector const &,double) >""'");
    } else {
      std::function< double (mfem::Vector const &,double) > * temp = reinterpret_cast< std::function< double (mfem::Vector const &,double) > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarNumbaCoefficient" "', argument " "2"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg2 = reinterpret_cast< NumbaFunctionBase * >(argp2);
  {
    try {
      result = (ScalarNumbaCoefficient *)new ScalarNumbaCoefficient(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScalarNumbaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarNumbaCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ScalarNumbaCoefficient", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_RF_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ScalarNumbaCoefficient__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ScalarNumbaCoefficient__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ScalarNumbaCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScalarNumbaCoefficient::ScalarNumbaCoefficient(std::function< double (mfem::Vector const &) >,NumbaFunctionBase *)\n"
    "    ScalarNumbaCoefficient::ScalarNumbaCoefficient(std::function< double (mfem::Vector const &,double) >,NumbaFunctionBase *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaCoefficient *arg1 = (ScalarNumbaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ScalarNumbaCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaCoefficient_SetTime" "', argument " "1"" of type '" "ScalarNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarNumbaCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarNumbaCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ScalarNumbaCoefficient *arg1 = (ScalarNumbaCoefficient *) 0 ;
  mfem::ElementTransformation *arg2 = 0 ;
  mfem::IntegrationPoint *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"T",  (char *)"ip",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ScalarNumbaCoefficient_Eval", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScalarNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarNumbaCoefficient_Eval" "', argument " "1"" of type '" "ScalarNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarNumbaCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaCoefficient_Eval" "', argument " "2"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg2 = reinterpret_cast< mfem::ElementTransformation * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarNumbaCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarNumbaCoefficient_Eval" "', argument " "3"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::IntegrationPoint * >(argp3);
  {
    try {
      result = (double)(arg1)->Eval(*arg2,(mfem::IntegrationPoint const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScalarNumbaCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  ScalarNumbaCoefficient *arg1 = (ScalarNumbaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ScalarNumbaCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalarNumbaCoefficient" "', argument " "1"" of type '" "ScalarNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< ScalarNumbaCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalarNumbaCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ScalarNumbaCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScalarNumbaCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VectorNumbaCoefficient_GetNDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaCoefficient *arg1 = (VectorNumbaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaCoefficient_GetNDim" "', argument " "1"" of type '" "VectorNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaCoefficient * >(argp1);
  {
    try {
      result = (int)(arg1)->GetNDim(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::Vector &) > > arg2 ;
  NumbaFunctionBase *arg3 = (NumbaFunctionBase *) 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VectorNumbaCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorNumbaCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorNumbaCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VectorNumbaCoefficient" "', argument " "3"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg3 = reinterpret_cast< NumbaFunctionBase * >(argp3);
  {
    try {
      result = (VectorNumbaCoefficient *)new VectorNumbaCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::Vector &) > > arg2 ;
  NumbaFunctionBase *arg3 = (NumbaFunctionBase *) 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VectorNumbaCoefficient *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorNumbaCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::Vector &) >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorNumbaCoefficient" "', argument " "2"" of type '" "std::function< void (mfem::Vector const &,double,mfem::Vector &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::Vector &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::Vector &) > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VectorNumbaCoefficient" "', argument " "3"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg3 = reinterpret_cast< NumbaFunctionBase * >(argp3);
  {
    try {
      result = (VectorNumbaCoefficient *)new VectorNumbaCoefficient(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VectorNumbaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorNumbaCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VectorNumbaCoefficient", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VectorNumbaCoefficient__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_VectorNumbaCoefficient__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VectorNumbaCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VectorNumbaCoefficient::VectorNumbaCoefficient(int,std::function< void (mfem::Vector const &,mfem::Vector &) >,NumbaFunctionBase *)\n"
    "    VectorNumbaCoefficient::VectorNumbaCoefficient(int,std::function< void (mfem::Vector const &,double,mfem::Vector &) >,NumbaFunctionBase *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorNumbaCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaCoefficient *arg1 = (VectorNumbaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:VectorNumbaCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaCoefficient_SetTime" "', argument " "1"" of type '" "VectorNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorNumbaCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorNumbaCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorNumbaCoefficient *arg1 = (VectorNumbaCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"V",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:VectorNumbaCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VectorNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorNumbaCoefficient_Eval" "', argument " "1"" of type '" "VectorNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorNumbaCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorNumbaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorNumbaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorNumbaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorNumbaCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VectorNumbaCoefficient *arg1 = (VectorNumbaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VectorNumbaCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorNumbaCoefficient" "', argument " "1"" of type '" "VectorNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< VectorNumbaCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorNumbaCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VectorNumbaCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VectorNumbaCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MatrixNumbaCoefficient_GetNDim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaCoefficient *arg1 = (MatrixNumbaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaCoefficient_GetNDim" "', argument " "1"" of type '" "MatrixNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaCoefficient * >(argp1);
  {
    try {
      result = (int)(arg1)->GetNDim(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaCoefficient__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > > arg3 ;
  NumbaFunctionBase *arg4 = (NumbaFunctionBase *) 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  MatrixNumbaCoefficient *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MatrixNumbaCoefficient" "', argument " "3"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixNumbaCoefficient" "', argument " "3"" of type '" "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MatrixNumbaCoefficient" "', argument " "4"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg4 = reinterpret_cast< NumbaFunctionBase * >(argp4);
  {
    try {
      result = (MatrixNumbaCoefficient *)new MatrixNumbaCoefficient(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaCoefficient__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  SwigValueWrapper< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > > arg3 ;
  NumbaFunctionBase *arg4 = (NumbaFunctionBase *) 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  MatrixNumbaCoefficient *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MatrixNumbaCoefficient" "', argument " "3"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixNumbaCoefficient" "', argument " "3"" of type '" "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >""'");
    } else {
      std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > * temp = reinterpret_cast< std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_NumbaFunctionBase, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_MatrixNumbaCoefficient" "', argument " "4"" of type '" "NumbaFunctionBase *""'"); 
  }
  arg4 = reinterpret_cast< NumbaFunctionBase * >(argp4);
  {
    try {
      result = (MatrixNumbaCoefficient *)new MatrixNumbaCoefficient(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixNumbaCoefficient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixNumbaCoefficient(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MatrixNumbaCoefficient", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_MatrixNumbaCoefficient__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_NumbaFunctionBase, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_MatrixNumbaCoefficient__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MatrixNumbaCoefficient'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MatrixNumbaCoefficient::MatrixNumbaCoefficient(int,int,std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >,NumbaFunctionBase *)\n"
    "    MatrixNumbaCoefficient::MatrixNumbaCoefficient(int,int,std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >,NumbaFunctionBase *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaCoefficient_SetTime(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaCoefficient *arg1 = (MatrixNumbaCoefficient *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MatrixNumbaCoefficient_SetTime", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaCoefficient_SetTime" "', argument " "1"" of type '" "MatrixNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaCoefficient * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixNumbaCoefficient_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->SetTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixNumbaCoefficient_Eval(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MatrixNumbaCoefficient *arg1 = (MatrixNumbaCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"K",  (char *)"T",  (char *)"ip",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MatrixNumbaCoefficient_Eval", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MatrixNumbaCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "1"" of type '" "MatrixNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixNumbaCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatrixNumbaCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixNumbaCoefficient *arg1 = (MatrixNumbaCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MatrixNumbaCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixNumbaCoefficient" "', argument " "1"" of type '" "MatrixNumbaCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< MatrixNumbaCoefficient * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixNumbaCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MatrixNumbaCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatrixNumbaCoefficient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "Coefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_Coefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "Coefficient_SetTime(Coefficient self, double t)"},
	 { "Coefficient_GetTime", _wrap_Coefficient_GetTime, METH_O, "Coefficient_GetTime(Coefficient self) -> double"},
	 { "Coefficient_Eval", _wrap_Coefficient_Eval, METH_VARARGS, "\n"
		"Coefficient_Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip) -> double\n"
		"Coefficient_Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip, double t) -> double\n"
		""},
	 { "Coefficient_Project", (PyCFunction)(void(*)(void))_wrap_Coefficient_Project, METH_VARARGS|METH_KEYWORDS, "Coefficient_Project(Coefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_Coefficient", _wrap_delete_Coefficient, METH_O, "delete_Coefficient(Coefficient self)"},
	 { "Coefficient_swigregister", Coefficient_swigregister, METH_O, NULL},
	 { "ConstantCoefficient_constant_set", _wrap_ConstantCoefficient_constant_set, METH_VARARGS, "ConstantCoefficient_constant_set(ConstantCoefficient self, double constant)"},
	 { "ConstantCoefficient_constant_get", _wrap_ConstantCoefficient_constant_get, METH_O, "ConstantCoefficient_constant_get(ConstantCoefficient self) -> double"},
	 { "new_ConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_ConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_ConstantCoefficient(double c=1.0) -> ConstantCoefficient"},
	 { "ConstantCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ConstantCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "ConstantCoefficient_Eval(ConstantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "ConstantCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_ConstantCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "ConstantCoefficient_Project(ConstantCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_ConstantCoefficient", _wrap_delete_ConstantCoefficient, METH_O, "delete_ConstantCoefficient(ConstantCoefficient self)"},
	 { "ConstantCoefficient_swigregister", ConstantCoefficient_swigregister, METH_O, NULL},
	 { "ConstantCoefficient_swiginit", ConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWConstCoefficient", _wrap_new_PWConstCoefficient, METH_VARARGS, "\n"
		"PWConstCoefficient(int NumOfSubD=0)\n"
		"new_PWConstCoefficient(Vector c) -> PWConstCoefficient\n"
		""},
	 { "PWConstCoefficient_UpdateConstants", (PyCFunction)(void(*)(void))_wrap_PWConstCoefficient_UpdateConstants, METH_VARARGS|METH_KEYWORDS, "PWConstCoefficient_UpdateConstants(PWConstCoefficient self, Vector c)"},
	 { "PWConstCoefficient___call__", (PyCFunction)(void(*)(void))_wrap_PWConstCoefficient___call__, METH_VARARGS|METH_KEYWORDS, "PWConstCoefficient___call__(PWConstCoefficient self, int i) -> double &"},
	 { "PWConstCoefficient_GetNConst", _wrap_PWConstCoefficient_GetNConst, METH_O, "PWConstCoefficient_GetNConst(PWConstCoefficient self) -> int"},
	 { "PWConstCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PWConstCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "PWConstCoefficient_Eval(PWConstCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_PWConstCoefficient", _wrap_delete_PWConstCoefficient, METH_O, "delete_PWConstCoefficient(PWConstCoefficient self)"},
	 { "PWConstCoefficient_swigregister", PWConstCoefficient_swigregister, METH_O, NULL},
	 { "PWConstCoefficient_swiginit", PWConstCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWCoefficient", _wrap_new_PWCoefficient, METH_VARARGS, "\n"
		"PWCoefficient()\n"
		"new_PWCoefficient(intArray attr, mfem::Array< mfem::Coefficient * > const & coefs) -> PWCoefficient\n"
		""},
	 { "PWCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "PWCoefficient_SetTime(PWCoefficient self, double t)"},
	 { "PWCoefficient_UpdateCoefficients", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_UpdateCoefficients, METH_VARARGS|METH_KEYWORDS, "PWCoefficient_UpdateCoefficients(PWCoefficient self, intArray attr, mfem::Array< mfem::Coefficient * > const & coefs)"},
	 { "PWCoefficient_UpdateCoefficient", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_UpdateCoefficient, METH_VARARGS|METH_KEYWORDS, "PWCoefficient_UpdateCoefficient(PWCoefficient self, int attr, Coefficient coef)"},
	 { "PWCoefficient_ZeroCoefficient", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_ZeroCoefficient, METH_VARARGS|METH_KEYWORDS, "PWCoefficient_ZeroCoefficient(PWCoefficient self, int attr)"},
	 { "PWCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "PWCoefficient_Eval(PWCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_PWCoefficient", _wrap_delete_PWCoefficient, METH_O, "delete_PWCoefficient(PWCoefficient self)"},
	 { "PWCoefficient_swigregister", PWCoefficient_swigregister, METH_O, NULL},
	 { "PWCoefficient_swiginit", PWCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_FunctionCoefficient", _wrap_new_FunctionCoefficient, METH_VARARGS, "\n"
		"FunctionCoefficient(std::function< double (mfem::Vector const &) > F)\n"
		"FunctionCoefficient(std::function< double (mfem::Vector const &,double) > TDF)\n"
		"FunctionCoefficient(double (*)(mfem::Vector &) f)\n"
		"new_FunctionCoefficient(double (*)(mfem::Vector &,double) tdf) -> FunctionCoefficient\n"
		""},
	 { "FunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_FunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "FunctionCoefficient_Eval(FunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_FunctionCoefficient", _wrap_delete_FunctionCoefficient, METH_O, "delete_FunctionCoefficient(FunctionCoefficient self)"},
	 { "FunctionCoefficient_swigregister", FunctionCoefficient_swigregister, METH_O, NULL},
	 { "FunctionCoefficient_swiginit", FunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_GridFunctionCoefficient", _wrap_new_GridFunctionCoefficient, METH_VARARGS, "\n"
		"GridFunctionCoefficient()\n"
		"new_GridFunctionCoefficient(mfem::GridFunction const * gf, int comp=1) -> GridFunctionCoefficient\n"
		""},
	 { "GridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_GridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "GridFunctionCoefficient_SetGridFunction(GridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "GridFunctionCoefficient_GetGridFunction", _wrap_GridFunctionCoefficient_GetGridFunction, METH_O, "GridFunctionCoefficient_GetGridFunction(GridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "GridFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_GridFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "GridFunctionCoefficient_Eval(GridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "GridFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_GridFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "GridFunctionCoefficient_Project(GridFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_GridFunctionCoefficient", _wrap_delete_GridFunctionCoefficient, METH_O, "delete_GridFunctionCoefficient(GridFunctionCoefficient self)"},
	 { "GridFunctionCoefficient_swigregister", GridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "GridFunctionCoefficient_swiginit", GridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_TransformedCoefficient", _wrap_new_TransformedCoefficient, METH_VARARGS, "\n"
		"TransformedCoefficient(Coefficient q, double (*)(double) F)\n"
		"new_TransformedCoefficient(Coefficient q1, Coefficient q2, double (*)(double,double) F) -> TransformedCoefficient\n"
		""},
	 { "TransformedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_TransformedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "TransformedCoefficient_SetTime(TransformedCoefficient self, double t)"},
	 { "TransformedCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_TransformedCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "TransformedCoefficient_Eval(TransformedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_TransformedCoefficient", _wrap_delete_TransformedCoefficient, METH_O, "delete_TransformedCoefficient(TransformedCoefficient self)"},
	 { "TransformedCoefficient_swigregister", TransformedCoefficient_swigregister, METH_O, NULL},
	 { "TransformedCoefficient_swiginit", TransformedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_DeltaCoefficient", _wrap_new_DeltaCoefficient, METH_VARARGS, "\n"
		"DeltaCoefficient()\n"
		"DeltaCoefficient(double x, double s)\n"
		"DeltaCoefficient(double x, double y, double s)\n"
		"new_DeltaCoefficient(double x, double y, double z, double s) -> DeltaCoefficient\n"
		""},
	 { "DeltaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_SetTime(DeltaCoefficient self, double t)"},
	 { "DeltaCoefficient_SetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_SetDeltaCenter(DeltaCoefficient self, Vector center)"},
	 { "DeltaCoefficient_SetScale", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetScale, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_SetScale(DeltaCoefficient self, double s_)"},
	 { "DeltaCoefficient_SetFunction", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetFunction, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_SetFunction(DeltaCoefficient self, double (*)(double) f)"},
	 { "DeltaCoefficient_SetTol", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetTol, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_SetTol(DeltaCoefficient self, double tol_)"},
	 { "DeltaCoefficient_SetWeight", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetWeight, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_SetWeight(DeltaCoefficient self, Coefficient w)"},
	 { "DeltaCoefficient_Center", _wrap_DeltaCoefficient_Center, METH_O, "DeltaCoefficient_Center(DeltaCoefficient self) -> double const *"},
	 { "DeltaCoefficient_Scale", _wrap_DeltaCoefficient_Scale, METH_O, "DeltaCoefficient_Scale(DeltaCoefficient self) -> double"},
	 { "DeltaCoefficient_Tol", _wrap_DeltaCoefficient_Tol, METH_O, "DeltaCoefficient_Tol(DeltaCoefficient self) -> double"},
	 { "DeltaCoefficient_Weight", _wrap_DeltaCoefficient_Weight, METH_O, "DeltaCoefficient_Weight(DeltaCoefficient self) -> Coefficient"},
	 { "DeltaCoefficient_GetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_GetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_GetDeltaCenter(DeltaCoefficient self, Vector center)"},
	 { "DeltaCoefficient_EvalDelta", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_EvalDelta, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_EvalDelta(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "DeltaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "DeltaCoefficient_Eval(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_DeltaCoefficient", _wrap_delete_DeltaCoefficient, METH_O, "delete_DeltaCoefficient(DeltaCoefficient self)"},
	 { "DeltaCoefficient_swigregister", DeltaCoefficient_swigregister, METH_O, NULL},
	 { "DeltaCoefficient_swiginit", DeltaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_RestrictedCoefficient", (PyCFunction)(void(*)(void))_wrap_new_RestrictedCoefficient, METH_VARARGS|METH_KEYWORDS, "new_RestrictedCoefficient(Coefficient c_, intArray attr) -> RestrictedCoefficient"},
	 { "RestrictedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_RestrictedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "RestrictedCoefficient_SetTime(RestrictedCoefficient self, double t)"},
	 { "RestrictedCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_RestrictedCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "RestrictedCoefficient_Eval(RestrictedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_RestrictedCoefficient", _wrap_delete_RestrictedCoefficient, METH_O, "delete_RestrictedCoefficient(RestrictedCoefficient self)"},
	 { "RestrictedCoefficient_swigregister", RestrictedCoefficient_swigregister, METH_O, NULL},
	 { "RestrictedCoefficient_swiginit", RestrictedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "VectorCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorCoefficient_SetTime(VectorCoefficient self, double t)"},
	 { "VectorCoefficient_GetTime", _wrap_VectorCoefficient_GetTime, METH_O, "VectorCoefficient_GetTime(VectorCoefficient self) -> double"},
	 { "VectorCoefficient_GetVDim", _wrap_VectorCoefficient_GetVDim, METH_O, "VectorCoefficient_GetVDim(VectorCoefficient self) -> int"},
	 { "VectorCoefficient_Eval", _wrap_VectorCoefficient_Eval, METH_VARARGS, "\n"
		"VectorCoefficient_Eval(VectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"VectorCoefficient_Eval(VectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "VectorCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_VectorCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "VectorCoefficient_Project(VectorCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_VectorCoefficient", _wrap_delete_VectorCoefficient, METH_O, "delete_VectorCoefficient(VectorCoefficient self)"},
	 { "VectorCoefficient_swigregister", VectorCoefficient_swigregister, METH_O, NULL},
	 { "new_VectorConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorConstantCoefficient(Vector v) -> VectorConstantCoefficient"},
	 { "VectorConstantCoefficient_Eval", _wrap_VectorConstantCoefficient_Eval, METH_VARARGS, "\n"
		"VectorConstantCoefficient_Eval(VectorConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"VectorConstantCoefficient_Eval(VectorConstantCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "VectorConstantCoefficient_GetVec", _wrap_VectorConstantCoefficient_GetVec, METH_O, "VectorConstantCoefficient_GetVec(VectorConstantCoefficient self) -> Vector"},
	 { "delete_VectorConstantCoefficient", _wrap_delete_VectorConstantCoefficient, METH_O, "delete_VectorConstantCoefficient(VectorConstantCoefficient self)"},
	 { "VectorConstantCoefficient_swigregister", VectorConstantCoefficient_swigregister, METH_O, NULL},
	 { "VectorConstantCoefficient_swiginit", VectorConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWVectorCoefficient", _wrap_new_PWVectorCoefficient, METH_VARARGS, "\n"
		"PWVectorCoefficient(int vd)\n"
		"new_PWVectorCoefficient(int vd, intArray attr, mfem::Array< mfem::VectorCoefficient * > const & coefs) -> PWVectorCoefficient\n"
		""},
	 { "PWVectorCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "PWVectorCoefficient_SetTime(PWVectorCoefficient self, double t)"},
	 { "PWVectorCoefficient_UpdateCoefficients", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_UpdateCoefficients, METH_VARARGS|METH_KEYWORDS, "PWVectorCoefficient_UpdateCoefficients(PWVectorCoefficient self, intArray attr, mfem::Array< mfem::VectorCoefficient * > const & coefs)"},
	 { "PWVectorCoefficient_UpdateCoefficient", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_UpdateCoefficient, METH_VARARGS|METH_KEYWORDS, "PWVectorCoefficient_UpdateCoefficient(PWVectorCoefficient self, int attr, VectorCoefficient coef)"},
	 { "PWVectorCoefficient_ZeroCoefficient", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_ZeroCoefficient, METH_VARARGS|METH_KEYWORDS, "PWVectorCoefficient_ZeroCoefficient(PWVectorCoefficient self, int attr)"},
	 { "PWVectorCoefficient_Eval", _wrap_PWVectorCoefficient_Eval, METH_VARARGS, "\n"
		"PWVectorCoefficient_Eval(PWVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"PWVectorCoefficient_Eval(PWVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_PWVectorCoefficient", _wrap_delete_PWVectorCoefficient, METH_O, "delete_PWVectorCoefficient(PWVectorCoefficient self)"},
	 { "PWVectorCoefficient_swigregister", PWVectorCoefficient_swigregister, METH_O, NULL},
	 { "PWVectorCoefficient_swiginit", PWVectorCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorFunctionCoefficient", _wrap_new_VectorFunctionCoefficient, METH_VARARGS, "\n"
		"VectorFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > F, Coefficient q=None)\n"
		"new_VectorFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::Vector &) > TDF, Coefficient q=None) -> VectorFunctionCoefficient\n"
		""},
	 { "VectorFunctionCoefficient_Eval", _wrap_VectorFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"VectorFunctionCoefficient_Eval(VectorFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"VectorFunctionCoefficient_Eval(VectorFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_VectorFunctionCoefficient", _wrap_delete_VectorFunctionCoefficient, METH_O, "delete_VectorFunctionCoefficient(VectorFunctionCoefficient self)"},
	 { "VectorFunctionCoefficient_swigregister", VectorFunctionCoefficient_swigregister, METH_O, NULL},
	 { "VectorFunctionCoefficient_swiginit", VectorFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorArrayCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorArrayCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorArrayCoefficient(int dim) -> VectorArrayCoefficient"},
	 { "VectorArrayCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorArrayCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorArrayCoefficient_SetTime(VectorArrayCoefficient self, double t)"},
	 { "VectorArrayCoefficient_GetCoeff", (PyCFunction)(void(*)(void))_wrap_VectorArrayCoefficient_GetCoeff, METH_VARARGS|METH_KEYWORDS, "VectorArrayCoefficient_GetCoeff(VectorArrayCoefficient self, int i) -> Coefficient"},
	 { "VectorArrayCoefficient_GetCoeffs", _wrap_VectorArrayCoefficient_GetCoeffs, METH_O, "VectorArrayCoefficient_GetCoeffs(VectorArrayCoefficient self) -> mfem::Coefficient **"},
	 { "VectorArrayCoefficient_Set", (PyCFunction)(void(*)(void))_wrap_VectorArrayCoefficient_Set, METH_VARARGS|METH_KEYWORDS, "VectorArrayCoefficient_Set(VectorArrayCoefficient self, int i, Coefficient c, bool own=True)"},
	 { "VectorArrayCoefficient_Eval", _wrap_VectorArrayCoefficient_Eval, METH_VARARGS, "\n"
		"VectorArrayCoefficient_Eval(VectorArrayCoefficient self, int i, ElementTransformation T, IntegrationPoint ip) -> double\n"
		"VectorArrayCoefficient_Eval(VectorArrayCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"VectorArrayCoefficient_Eval(VectorArrayCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_VectorArrayCoefficient", _wrap_delete_VectorArrayCoefficient, METH_O, "delete_VectorArrayCoefficient(VectorArrayCoefficient self)"},
	 { "VectorArrayCoefficient_swigregister", VectorArrayCoefficient_swigregister, METH_O, NULL},
	 { "VectorArrayCoefficient_swiginit", VectorArrayCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorGridFunctionCoefficient", _wrap_new_VectorGridFunctionCoefficient, METH_VARARGS, "\n"
		"VectorGridFunctionCoefficient()\n"
		"new_VectorGridFunctionCoefficient(mfem::GridFunction const * gf) -> VectorGridFunctionCoefficient\n"
		""},
	 { "VectorGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_VectorGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "VectorGridFunctionCoefficient_SetGridFunction(VectorGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "VectorGridFunctionCoefficient_GetGridFunction", _wrap_VectorGridFunctionCoefficient_GetGridFunction, METH_O, "VectorGridFunctionCoefficient_GetGridFunction(VectorGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "VectorGridFunctionCoefficient_Eval", _wrap_VectorGridFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"VectorGridFunctionCoefficient_Eval(VectorGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"VectorGridFunctionCoefficient_Eval(VectorGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "VectorGridFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_VectorGridFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "VectorGridFunctionCoefficient_Project(VectorGridFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_VectorGridFunctionCoefficient", _wrap_delete_VectorGridFunctionCoefficient, METH_O, "delete_VectorGridFunctionCoefficient(VectorGridFunctionCoefficient self)"},
	 { "VectorGridFunctionCoefficient_swigregister", VectorGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "VectorGridFunctionCoefficient_swiginit", VectorGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_GradientGridFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_GradientGridFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_GradientGridFunctionCoefficient(mfem::GridFunction const * gf) -> GradientGridFunctionCoefficient"},
	 { "GradientGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_GradientGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "GradientGridFunctionCoefficient_SetGridFunction(GradientGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "GradientGridFunctionCoefficient_GetGridFunction", _wrap_GradientGridFunctionCoefficient_GetGridFunction, METH_O, "GradientGridFunctionCoefficient_GetGridFunction(GradientGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "GradientGridFunctionCoefficient_Eval", _wrap_GradientGridFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"GradientGridFunctionCoefficient_Eval(GradientGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"GradientGridFunctionCoefficient_Eval(GradientGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_GradientGridFunctionCoefficient", _wrap_delete_GradientGridFunctionCoefficient, METH_O, "delete_GradientGridFunctionCoefficient(GradientGridFunctionCoefficient self)"},
	 { "GradientGridFunctionCoefficient_swigregister", GradientGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "GradientGridFunctionCoefficient_swiginit", GradientGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_CurlGridFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_CurlGridFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_CurlGridFunctionCoefficient(mfem::GridFunction const * gf) -> CurlGridFunctionCoefficient"},
	 { "CurlGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_CurlGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "CurlGridFunctionCoefficient_SetGridFunction(CurlGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "CurlGridFunctionCoefficient_GetGridFunction", _wrap_CurlGridFunctionCoefficient_GetGridFunction, METH_O, "CurlGridFunctionCoefficient_GetGridFunction(CurlGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "CurlGridFunctionCoefficient_Eval", _wrap_CurlGridFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"CurlGridFunctionCoefficient_Eval(CurlGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"CurlGridFunctionCoefficient_Eval(CurlGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_CurlGridFunctionCoefficient", _wrap_delete_CurlGridFunctionCoefficient, METH_O, "delete_CurlGridFunctionCoefficient(CurlGridFunctionCoefficient self)"},
	 { "CurlGridFunctionCoefficient_swigregister", CurlGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "CurlGridFunctionCoefficient_swiginit", CurlGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_DivergenceGridFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_DivergenceGridFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_DivergenceGridFunctionCoefficient(mfem::GridFunction const * gf) -> DivergenceGridFunctionCoefficient"},
	 { "DivergenceGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_DivergenceGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "DivergenceGridFunctionCoefficient_SetGridFunction(DivergenceGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "DivergenceGridFunctionCoefficient_GetGridFunction", _wrap_DivergenceGridFunctionCoefficient_GetGridFunction, METH_O, "DivergenceGridFunctionCoefficient_GetGridFunction(DivergenceGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "DivergenceGridFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_DivergenceGridFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "DivergenceGridFunctionCoefficient_Eval(DivergenceGridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_DivergenceGridFunctionCoefficient", _wrap_delete_DivergenceGridFunctionCoefficient, METH_O, "delete_DivergenceGridFunctionCoefficient(DivergenceGridFunctionCoefficient self)"},
	 { "DivergenceGridFunctionCoefficient_swigregister", DivergenceGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "DivergenceGridFunctionCoefficient_swiginit", DivergenceGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorDeltaCoefficient", _wrap_new_VectorDeltaCoefficient, METH_VARARGS, "\n"
		"VectorDeltaCoefficient(int vdim_)\n"
		"VectorDeltaCoefficient(Vector dir_)\n"
		"VectorDeltaCoefficient(Vector dir_, double x, double s)\n"
		"VectorDeltaCoefficient(Vector dir_, double x, double y, double s)\n"
		"new_VectorDeltaCoefficient(Vector dir_, double x, double y, double z, double s) -> VectorDeltaCoefficient\n"
		""},
	 { "VectorDeltaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_SetTime(VectorDeltaCoefficient self, double t)"},
	 { "VectorDeltaCoefficient_SetDeltaCoefficient", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetDeltaCoefficient, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_SetDeltaCoefficient(VectorDeltaCoefficient self, DeltaCoefficient d_)"},
	 { "VectorDeltaCoefficient_GetDeltaCoefficient", _wrap_VectorDeltaCoefficient_GetDeltaCoefficient, METH_O, "VectorDeltaCoefficient_GetDeltaCoefficient(VectorDeltaCoefficient self) -> DeltaCoefficient"},
	 { "VectorDeltaCoefficient_SetScale", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetScale, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_SetScale(VectorDeltaCoefficient self, double s)"},
	 { "VectorDeltaCoefficient_SetDirection", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetDirection, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_SetDirection(VectorDeltaCoefficient self, Vector d_)"},
	 { "VectorDeltaCoefficient_SetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_SetDeltaCenter(VectorDeltaCoefficient self, Vector center)"},
	 { "VectorDeltaCoefficient_GetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_GetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_GetDeltaCenter(VectorDeltaCoefficient self, Vector center)"},
	 { "VectorDeltaCoefficient_EvalDelta", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_EvalDelta, METH_VARARGS|METH_KEYWORDS, "VectorDeltaCoefficient_EvalDelta(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"},
	 { "VectorDeltaCoefficient_Eval", _wrap_VectorDeltaCoefficient_Eval, METH_VARARGS, "\n"
		"VectorDeltaCoefficient_Eval(VectorDeltaCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"VectorDeltaCoefficient_Eval(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_VectorDeltaCoefficient", _wrap_delete_VectorDeltaCoefficient, METH_O, "delete_VectorDeltaCoefficient(VectorDeltaCoefficient self)"},
	 { "VectorDeltaCoefficient_swigregister", VectorDeltaCoefficient_swigregister, METH_O, NULL},
	 { "VectorDeltaCoefficient_swiginit", VectorDeltaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorRestrictedCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorRestrictedCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorRestrictedCoefficient(VectorCoefficient vc, intArray attr) -> VectorRestrictedCoefficient"},
	 { "VectorRestrictedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorRestrictedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorRestrictedCoefficient_SetTime(VectorRestrictedCoefficient self, double t)"},
	 { "VectorRestrictedCoefficient_Eval", _wrap_VectorRestrictedCoefficient_Eval, METH_VARARGS, "\n"
		"VectorRestrictedCoefficient_Eval(VectorRestrictedCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"VectorRestrictedCoefficient_Eval(VectorRestrictedCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_VectorRestrictedCoefficient", _wrap_delete_VectorRestrictedCoefficient, METH_O, "delete_VectorRestrictedCoefficient(VectorRestrictedCoefficient self)"},
	 { "VectorRestrictedCoefficient_swigregister", VectorRestrictedCoefficient_swigregister, METH_O, NULL},
	 { "VectorRestrictedCoefficient_swiginit", VectorRestrictedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "MatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixCoefficient_SetTime(MatrixCoefficient self, double t)"},
	 { "MatrixCoefficient_GetTime", _wrap_MatrixCoefficient_GetTime, METH_O, "MatrixCoefficient_GetTime(MatrixCoefficient self) -> double"},
	 { "MatrixCoefficient_GetHeight", _wrap_MatrixCoefficient_GetHeight, METH_O, "MatrixCoefficient_GetHeight(MatrixCoefficient self) -> int"},
	 { "MatrixCoefficient_GetWidth", _wrap_MatrixCoefficient_GetWidth, METH_O, "MatrixCoefficient_GetWidth(MatrixCoefficient self) -> int"},
	 { "MatrixCoefficient_GetVDim", _wrap_MatrixCoefficient_GetVDim, METH_O, "MatrixCoefficient_GetVDim(MatrixCoefficient self) -> int"},
	 { "MatrixCoefficient_IsSymmetric", _wrap_MatrixCoefficient_IsSymmetric, METH_O, "MatrixCoefficient_IsSymmetric(MatrixCoefficient self) -> bool"},
	 { "MatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixCoefficient_Eval(MatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "MatrixCoefficient_Project(MatrixCoefficient self, mfem::QuadratureFunction & qf, bool transpose=False)"},
	 { "MatrixCoefficient_EvalSymmetric", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_EvalSymmetric, METH_VARARGS|METH_KEYWORDS, "MatrixCoefficient_EvalSymmetric(MatrixCoefficient self, Vector K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixCoefficient", _wrap_delete_MatrixCoefficient, METH_O, "delete_MatrixCoefficient(MatrixCoefficient self)"},
	 { "MatrixCoefficient_swigregister", MatrixCoefficient_swigregister, METH_O, NULL},
	 { "new_MatrixConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixConstantCoefficient(DenseMatrix m) -> MatrixConstantCoefficient"},
	 { "MatrixConstantCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixConstantCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixConstantCoefficient_Eval(MatrixConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixConstantCoefficient_GetMatrix", _wrap_MatrixConstantCoefficient_GetMatrix, METH_O, "MatrixConstantCoefficient_GetMatrix(MatrixConstantCoefficient self) -> DenseMatrix"},
	 { "delete_MatrixConstantCoefficient", _wrap_delete_MatrixConstantCoefficient, METH_O, "delete_MatrixConstantCoefficient(MatrixConstantCoefficient self)"},
	 { "MatrixConstantCoefficient_swigregister", MatrixConstantCoefficient_swigregister, METH_O, NULL},
	 { "MatrixConstantCoefficient_swiginit", MatrixConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWMatrixCoefficient", _wrap_new_PWMatrixCoefficient, METH_VARARGS, "\n"
		"PWMatrixCoefficient(int dim, bool symm=False)\n"
		"PWMatrixCoefficient(int h, int w, bool symm=False)\n"
		"PWMatrixCoefficient(int dim, intArray attr, mfem::Array< mfem::MatrixCoefficient * > const & coefs, bool symm=False)\n"
		"new_PWMatrixCoefficient(int h, int w, intArray attr, mfem::Array< mfem::MatrixCoefficient * > const & coefs, bool symm=False) -> PWMatrixCoefficient\n"
		""},
	 { "PWMatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "PWMatrixCoefficient_SetTime(PWMatrixCoefficient self, double t)"},
	 { "PWMatrixCoefficient_UpdateCoefficients", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_UpdateCoefficients, METH_VARARGS|METH_KEYWORDS, "PWMatrixCoefficient_UpdateCoefficients(PWMatrixCoefficient self, intArray attr, mfem::Array< mfem::MatrixCoefficient * > const & coefs)"},
	 { "PWMatrixCoefficient_UpdateCoefficient", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_UpdateCoefficient, METH_VARARGS|METH_KEYWORDS, "PWMatrixCoefficient_UpdateCoefficient(PWMatrixCoefficient self, int attr, MatrixCoefficient coef)"},
	 { "PWMatrixCoefficient_ZeroCoefficient", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_ZeroCoefficient, METH_VARARGS|METH_KEYWORDS, "PWMatrixCoefficient_ZeroCoefficient(PWMatrixCoefficient self, int attr)"},
	 { "PWMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "PWMatrixCoefficient_Eval(PWMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_PWMatrixCoefficient", _wrap_delete_PWMatrixCoefficient, METH_O, "delete_PWMatrixCoefficient(PWMatrixCoefficient self)"},
	 { "PWMatrixCoefficient_swigregister", PWMatrixCoefficient_swigregister, METH_O, NULL},
	 { "PWMatrixCoefficient_swiginit", PWMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixFunctionCoefficient", _wrap_new_MatrixFunctionCoefficient, METH_VARARGS, "\n"
		"MatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > F, Coefficient q=None)\n"
		"MatrixFunctionCoefficient(DenseMatrix m, Coefficient q)\n"
		"MatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > SymmF, Coefficient q=None)\n"
		"new_MatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > TDF, Coefficient q=None) -> MatrixFunctionCoefficient\n"
		""},
	 { "MatrixFunctionCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixFunctionCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixFunctionCoefficient_SetTime(MatrixFunctionCoefficient self, double t)"},
	 { "MatrixFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixFunctionCoefficient_Eval(MatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixFunctionCoefficient_EvalSymmetric", (PyCFunction)(void(*)(void))_wrap_MatrixFunctionCoefficient_EvalSymmetric, METH_VARARGS|METH_KEYWORDS, "MatrixFunctionCoefficient_EvalSymmetric(MatrixFunctionCoefficient self, Vector K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixFunctionCoefficient", _wrap_delete_MatrixFunctionCoefficient, METH_O, "delete_MatrixFunctionCoefficient(MatrixFunctionCoefficient self)"},
	 { "MatrixFunctionCoefficient_swigregister", MatrixFunctionCoefficient_swigregister, METH_O, NULL},
	 { "MatrixFunctionCoefficient_swiginit", MatrixFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixArrayCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixArrayCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixArrayCoefficient(int dim) -> MatrixArrayCoefficient"},
	 { "MatrixArrayCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixArrayCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixArrayCoefficient_SetTime(MatrixArrayCoefficient self, double t)"},
	 { "MatrixArrayCoefficient_GetCoeff", (PyCFunction)(void(*)(void))_wrap_MatrixArrayCoefficient_GetCoeff, METH_VARARGS|METH_KEYWORDS, "MatrixArrayCoefficient_GetCoeff(MatrixArrayCoefficient self, int i, int j) -> Coefficient"},
	 { "MatrixArrayCoefficient_Set", (PyCFunction)(void(*)(void))_wrap_MatrixArrayCoefficient_Set, METH_VARARGS|METH_KEYWORDS, "MatrixArrayCoefficient_Set(MatrixArrayCoefficient self, int i, int j, Coefficient c, bool own=True)"},
	 { "MatrixArrayCoefficient_Eval", _wrap_MatrixArrayCoefficient_Eval, METH_VARARGS, "\n"
		"MatrixArrayCoefficient_Eval(MatrixArrayCoefficient self, int i, int j, ElementTransformation T, IntegrationPoint ip) -> double\n"
		"MatrixArrayCoefficient_Eval(MatrixArrayCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_MatrixArrayCoefficient", _wrap_delete_MatrixArrayCoefficient, METH_O, "delete_MatrixArrayCoefficient(MatrixArrayCoefficient self)"},
	 { "MatrixArrayCoefficient_swigregister", MatrixArrayCoefficient_swigregister, METH_O, NULL},
	 { "MatrixArrayCoefficient_swiginit", MatrixArrayCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixRestrictedCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixRestrictedCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixRestrictedCoefficient(MatrixCoefficient mc, intArray attr) -> MatrixRestrictedCoefficient"},
	 { "MatrixRestrictedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixRestrictedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixRestrictedCoefficient_SetTime(MatrixRestrictedCoefficient self, double t)"},
	 { "MatrixRestrictedCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixRestrictedCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixRestrictedCoefficient_Eval(MatrixRestrictedCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixRestrictedCoefficient", _wrap_delete_MatrixRestrictedCoefficient, METH_O, "delete_MatrixRestrictedCoefficient(MatrixRestrictedCoefficient self)"},
	 { "MatrixRestrictedCoefficient_swigregister", MatrixRestrictedCoefficient_swigregister, METH_O, NULL},
	 { "MatrixRestrictedCoefficient_swiginit", MatrixRestrictedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_SumCoefficient", _wrap_new_SumCoefficient, METH_VARARGS, "\n"
		"SumCoefficient(double A, Coefficient B, double alpha_=1.0, double beta_=1.0)\n"
		"new_SumCoefficient(Coefficient A, Coefficient B, double alpha_=1.0, double beta_=1.0) -> SumCoefficient\n"
		""},
	 { "SumCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_SetTime(SumCoefficient self, double t)"},
	 { "SumCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_SetAConst(SumCoefficient self, double A)"},
	 { "SumCoefficient_GetAConst", _wrap_SumCoefficient_GetAConst, METH_O, "SumCoefficient_GetAConst(SumCoefficient self) -> double"},
	 { "SumCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_SetACoef(SumCoefficient self, Coefficient A)"},
	 { "SumCoefficient_GetACoef", _wrap_SumCoefficient_GetACoef, METH_O, "SumCoefficient_GetACoef(SumCoefficient self) -> Coefficient"},
	 { "SumCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_SetBCoef(SumCoefficient self, Coefficient B)"},
	 { "SumCoefficient_GetBCoef", _wrap_SumCoefficient_GetBCoef, METH_O, "SumCoefficient_GetBCoef(SumCoefficient self) -> Coefficient"},
	 { "SumCoefficient_SetAlpha", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetAlpha, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_SetAlpha(SumCoefficient self, double alpha_)"},
	 { "SumCoefficient_GetAlpha", _wrap_SumCoefficient_GetAlpha, METH_O, "SumCoefficient_GetAlpha(SumCoefficient self) -> double"},
	 { "SumCoefficient_SetBeta", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetBeta, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_SetBeta(SumCoefficient self, double beta_)"},
	 { "SumCoefficient_GetBeta", _wrap_SumCoefficient_GetBeta, METH_O, "SumCoefficient_GetBeta(SumCoefficient self) -> double"},
	 { "SumCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "SumCoefficient_Eval(SumCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_SumCoefficient", _wrap_delete_SumCoefficient, METH_O, "delete_SumCoefficient(SumCoefficient self)"},
	 { "SumCoefficient_swigregister", SumCoefficient_swigregister, METH_O, NULL},
	 { "SumCoefficient_swiginit", SumCoefficient_swiginit, METH_VARARGS, NULL},
	 { "SymmetricMatrixCoefficient_GetSize", _wrap_SymmetricMatrixCoefficient_GetSize, METH_O, "SymmetricMatrixCoefficient_GetSize(SymmetricMatrixCoefficient self) -> int"},
	 { "SymmetricMatrixCoefficient_ProjectSymmetric", (PyCFunction)(void(*)(void))_wrap_SymmetricMatrixCoefficient_ProjectSymmetric, METH_VARARGS|METH_KEYWORDS, "SymmetricMatrixCoefficient_ProjectSymmetric(SymmetricMatrixCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "SymmetricMatrixCoefficient_Eval", _wrap_SymmetricMatrixCoefficient_Eval, METH_VARARGS, "\n"
		"SymmetricMatrixCoefficient_Eval(SymmetricMatrixCoefficient self, DenseSymmetricMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		"SymmetricMatrixCoefficient_Eval(SymmetricMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "SymmetricMatrixCoefficient_GetMatrix", _wrap_SymmetricMatrixCoefficient_GetMatrix, METH_O, "SymmetricMatrixCoefficient_GetMatrix(SymmetricMatrixCoefficient self) -> DenseSymmetricMatrix"},
	 { "delete_SymmetricMatrixCoefficient", _wrap_delete_SymmetricMatrixCoefficient, METH_O, "delete_SymmetricMatrixCoefficient(SymmetricMatrixCoefficient self)"},
	 { "SymmetricMatrixCoefficient_swigregister", SymmetricMatrixCoefficient_swigregister, METH_O, NULL},
	 { "new_SymmetricMatrixConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_SymmetricMatrixConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_SymmetricMatrixConstantCoefficient(DenseSymmetricMatrix m) -> SymmetricMatrixConstantCoefficient"},
	 { "SymmetricMatrixConstantCoefficient_Eval", _wrap_SymmetricMatrixConstantCoefficient_Eval, METH_VARARGS, "\n"
		"SymmetricMatrixConstantCoefficient_Eval(SymmetricMatrixConstantCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		"SymmetricMatrixConstantCoefficient_Eval(SymmetricMatrixConstantCoefficient self, DenseSymmetricMatrix M, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_SymmetricMatrixConstantCoefficient", _wrap_delete_SymmetricMatrixConstantCoefficient, METH_O, "delete_SymmetricMatrixConstantCoefficient(SymmetricMatrixConstantCoefficient self)"},
	 { "SymmetricMatrixConstantCoefficient_swigregister", SymmetricMatrixConstantCoefficient_swigregister, METH_O, NULL},
	 { "SymmetricMatrixConstantCoefficient_swiginit", SymmetricMatrixConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricMatrixFunctionCoefficient", _wrap_new_SymmetricMatrixFunctionCoefficient, METH_VARARGS, "\n"
		"SymmetricMatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > F, Coefficient q=None)\n"
		"SymmetricMatrixFunctionCoefficient(DenseSymmetricMatrix m, Coefficient q)\n"
		"new_SymmetricMatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) > TDF, Coefficient q=None) -> SymmetricMatrixFunctionCoefficient\n"
		""},
	 { "SymmetricMatrixFunctionCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_SymmetricMatrixFunctionCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SymmetricMatrixFunctionCoefficient_SetTime(SymmetricMatrixFunctionCoefficient self, double t)"},
	 { "SymmetricMatrixFunctionCoefficient_Eval", _wrap_SymmetricMatrixFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"SymmetricMatrixFunctionCoefficient_Eval(SymmetricMatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		"SymmetricMatrixFunctionCoefficient_Eval(SymmetricMatrixFunctionCoefficient self, DenseSymmetricMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_SymmetricMatrixFunctionCoefficient", _wrap_delete_SymmetricMatrixFunctionCoefficient, METH_O, "delete_SymmetricMatrixFunctionCoefficient(SymmetricMatrixFunctionCoefficient self)"},
	 { "SymmetricMatrixFunctionCoefficient_swigregister", SymmetricMatrixFunctionCoefficient_swigregister, METH_O, NULL},
	 { "SymmetricMatrixFunctionCoefficient_swiginit", SymmetricMatrixFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_ProductCoefficient", _wrap_new_ProductCoefficient, METH_VARARGS, "\n"
		"ProductCoefficient(double A, Coefficient B)\n"
		"new_ProductCoefficient(Coefficient A, Coefficient B) -> ProductCoefficient\n"
		""},
	 { "ProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "ProductCoefficient_SetTime(ProductCoefficient self, double t)"},
	 { "ProductCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "ProductCoefficient_SetAConst(ProductCoefficient self, double A)"},
	 { "ProductCoefficient_GetAConst", _wrap_ProductCoefficient_GetAConst, METH_O, "ProductCoefficient_GetAConst(ProductCoefficient self) -> double"},
	 { "ProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "ProductCoefficient_SetACoef(ProductCoefficient self, Coefficient A)"},
	 { "ProductCoefficient_GetACoef", _wrap_ProductCoefficient_GetACoef, METH_O, "ProductCoefficient_GetACoef(ProductCoefficient self) -> Coefficient"},
	 { "ProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "ProductCoefficient_SetBCoef(ProductCoefficient self, Coefficient B)"},
	 { "ProductCoefficient_GetBCoef", _wrap_ProductCoefficient_GetBCoef, METH_O, "ProductCoefficient_GetBCoef(ProductCoefficient self) -> Coefficient"},
	 { "ProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "ProductCoefficient_Eval(ProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_ProductCoefficient", _wrap_delete_ProductCoefficient, METH_O, "delete_ProductCoefficient(ProductCoefficient self)"},
	 { "ProductCoefficient_swigregister", ProductCoefficient_swigregister, METH_O, NULL},
	 { "ProductCoefficient_swiginit", ProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_RatioCoefficient", _wrap_new_RatioCoefficient, METH_VARARGS, "\n"
		"RatioCoefficient(double A, Coefficient B)\n"
		"RatioCoefficient(Coefficient A, Coefficient B)\n"
		"new_RatioCoefficient(Coefficient A, double B) -> RatioCoefficient\n"
		""},
	 { "RatioCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "RatioCoefficient_SetTime(RatioCoefficient self, double t)"},
	 { "RatioCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "RatioCoefficient_SetAConst(RatioCoefficient self, double A)"},
	 { "RatioCoefficient_GetAConst", _wrap_RatioCoefficient_GetAConst, METH_O, "RatioCoefficient_GetAConst(RatioCoefficient self) -> double"},
	 { "RatioCoefficient_SetBConst", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetBConst, METH_VARARGS|METH_KEYWORDS, "RatioCoefficient_SetBConst(RatioCoefficient self, double B)"},
	 { "RatioCoefficient_GetBConst", _wrap_RatioCoefficient_GetBConst, METH_O, "RatioCoefficient_GetBConst(RatioCoefficient self) -> double"},
	 { "RatioCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "RatioCoefficient_SetACoef(RatioCoefficient self, Coefficient A)"},
	 { "RatioCoefficient_GetACoef", _wrap_RatioCoefficient_GetACoef, METH_O, "RatioCoefficient_GetACoef(RatioCoefficient self) -> Coefficient"},
	 { "RatioCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "RatioCoefficient_SetBCoef(RatioCoefficient self, Coefficient B)"},
	 { "RatioCoefficient_GetBCoef", _wrap_RatioCoefficient_GetBCoef, METH_O, "RatioCoefficient_GetBCoef(RatioCoefficient self) -> Coefficient"},
	 { "RatioCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "RatioCoefficient_Eval(RatioCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_RatioCoefficient", _wrap_delete_RatioCoefficient, METH_O, "delete_RatioCoefficient(RatioCoefficient self)"},
	 { "RatioCoefficient_swigregister", RatioCoefficient_swigregister, METH_O, NULL},
	 { "RatioCoefficient_swiginit", RatioCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PowerCoefficient", (PyCFunction)(void(*)(void))_wrap_new_PowerCoefficient, METH_VARARGS|METH_KEYWORDS, "new_PowerCoefficient(Coefficient A, double p_) -> PowerCoefficient"},
	 { "PowerCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "PowerCoefficient_SetTime(PowerCoefficient self, double t)"},
	 { "PowerCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "PowerCoefficient_SetACoef(PowerCoefficient self, Coefficient A)"},
	 { "PowerCoefficient_GetACoef", _wrap_PowerCoefficient_GetACoef, METH_O, "PowerCoefficient_GetACoef(PowerCoefficient self) -> Coefficient"},
	 { "PowerCoefficient_SetExponent", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_SetExponent, METH_VARARGS|METH_KEYWORDS, "PowerCoefficient_SetExponent(PowerCoefficient self, double p_)"},
	 { "PowerCoefficient_GetExponent", _wrap_PowerCoefficient_GetExponent, METH_O, "PowerCoefficient_GetExponent(PowerCoefficient self) -> double"},
	 { "PowerCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "PowerCoefficient_Eval(PowerCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_PowerCoefficient", _wrap_delete_PowerCoefficient, METH_O, "delete_PowerCoefficient(PowerCoefficient self)"},
	 { "PowerCoefficient_swigregister", PowerCoefficient_swigregister, METH_O, NULL},
	 { "PowerCoefficient_swiginit", PowerCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_InnerProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_InnerProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_InnerProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> InnerProductCoefficient"},
	 { "InnerProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "InnerProductCoefficient_SetTime(InnerProductCoefficient self, double t)"},
	 { "InnerProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "InnerProductCoefficient_SetACoef(InnerProductCoefficient self, VectorCoefficient A)"},
	 { "InnerProductCoefficient_GetACoef", _wrap_InnerProductCoefficient_GetACoef, METH_O, "InnerProductCoefficient_GetACoef(InnerProductCoefficient self) -> VectorCoefficient"},
	 { "InnerProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "InnerProductCoefficient_SetBCoef(InnerProductCoefficient self, VectorCoefficient B)"},
	 { "InnerProductCoefficient_GetBCoef", _wrap_InnerProductCoefficient_GetBCoef, METH_O, "InnerProductCoefficient_GetBCoef(InnerProductCoefficient self) -> VectorCoefficient"},
	 { "InnerProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "InnerProductCoefficient_Eval(InnerProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_InnerProductCoefficient", _wrap_delete_InnerProductCoefficient, METH_O, "delete_InnerProductCoefficient(InnerProductCoefficient self)"},
	 { "InnerProductCoefficient_swigregister", InnerProductCoefficient_swigregister, METH_O, NULL},
	 { "InnerProductCoefficient_swiginit", InnerProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorRotProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorRotProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorRotProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> VectorRotProductCoefficient"},
	 { "VectorRotProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorRotProductCoefficient_SetTime(VectorRotProductCoefficient self, double t)"},
	 { "VectorRotProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "VectorRotProductCoefficient_SetACoef(VectorRotProductCoefficient self, VectorCoefficient A)"},
	 { "VectorRotProductCoefficient_GetACoef", _wrap_VectorRotProductCoefficient_GetACoef, METH_O, "VectorRotProductCoefficient_GetACoef(VectorRotProductCoefficient self) -> VectorCoefficient"},
	 { "VectorRotProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "VectorRotProductCoefficient_SetBCoef(VectorRotProductCoefficient self, VectorCoefficient B)"},
	 { "VectorRotProductCoefficient_GetBCoef", _wrap_VectorRotProductCoefficient_GetBCoef, METH_O, "VectorRotProductCoefficient_GetBCoef(VectorRotProductCoefficient self) -> VectorCoefficient"},
	 { "VectorRotProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "VectorRotProductCoefficient_Eval(VectorRotProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_VectorRotProductCoefficient", _wrap_delete_VectorRotProductCoefficient, METH_O, "delete_VectorRotProductCoefficient(VectorRotProductCoefficient self)"},
	 { "VectorRotProductCoefficient_swigregister", VectorRotProductCoefficient_swigregister, METH_O, NULL},
	 { "VectorRotProductCoefficient_swiginit", VectorRotProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_DeterminantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_DeterminantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_DeterminantCoefficient(MatrixCoefficient A) -> DeterminantCoefficient"},
	 { "DeterminantCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_DeterminantCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "DeterminantCoefficient_SetTime(DeterminantCoefficient self, double t)"},
	 { "DeterminantCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_DeterminantCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "DeterminantCoefficient_SetACoef(DeterminantCoefficient self, MatrixCoefficient A)"},
	 { "DeterminantCoefficient_GetACoef", _wrap_DeterminantCoefficient_GetACoef, METH_O, "DeterminantCoefficient_GetACoef(DeterminantCoefficient self) -> MatrixCoefficient"},
	 { "DeterminantCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_DeterminantCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "DeterminantCoefficient_Eval(DeterminantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_DeterminantCoefficient", _wrap_delete_DeterminantCoefficient, METH_O, "delete_DeterminantCoefficient(DeterminantCoefficient self)"},
	 { "DeterminantCoefficient_swigregister", DeterminantCoefficient_swigregister, METH_O, NULL},
	 { "DeterminantCoefficient_swiginit", DeterminantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorSumCoefficient", _wrap_new_VectorSumCoefficient, METH_VARARGS, "\n"
		"VectorSumCoefficient(int dim)\n"
		"VectorSumCoefficient(VectorCoefficient A, VectorCoefficient B, double alpha_=1.0, double beta_=1.0)\n"
		"new_VectorSumCoefficient(VectorCoefficient A_, VectorCoefficient B_, Coefficient alpha_, Coefficient beta_) -> VectorSumCoefficient\n"
		""},
	 { "VectorSumCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetTime(VectorSumCoefficient self, double t)"},
	 { "VectorSumCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetACoef(VectorSumCoefficient self, VectorCoefficient A_)"},
	 { "VectorSumCoefficient_GetACoef", _wrap_VectorSumCoefficient_GetACoef, METH_O, "VectorSumCoefficient_GetACoef(VectorSumCoefficient self) -> VectorCoefficient"},
	 { "VectorSumCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetBCoef(VectorSumCoefficient self, VectorCoefficient B_)"},
	 { "VectorSumCoefficient_GetBCoef", _wrap_VectorSumCoefficient_GetBCoef, METH_O, "VectorSumCoefficient_GetBCoef(VectorSumCoefficient self) -> VectorCoefficient"},
	 { "VectorSumCoefficient_SetAlphaCoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetAlphaCoef, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetAlphaCoef(VectorSumCoefficient self, Coefficient A_)"},
	 { "VectorSumCoefficient_GetAlphaCoef", _wrap_VectorSumCoefficient_GetAlphaCoef, METH_O, "VectorSumCoefficient_GetAlphaCoef(VectorSumCoefficient self) -> Coefficient"},
	 { "VectorSumCoefficient_SetBetaCoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetBetaCoef, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetBetaCoef(VectorSumCoefficient self, Coefficient B_)"},
	 { "VectorSumCoefficient_GetBetaCoef", _wrap_VectorSumCoefficient_GetBetaCoef, METH_O, "VectorSumCoefficient_GetBetaCoef(VectorSumCoefficient self) -> Coefficient"},
	 { "VectorSumCoefficient_SetA", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetA, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetA(VectorSumCoefficient self, Vector A_)"},
	 { "VectorSumCoefficient_GetA", _wrap_VectorSumCoefficient_GetA, METH_O, "VectorSumCoefficient_GetA(VectorSumCoefficient self) -> Vector"},
	 { "VectorSumCoefficient_SetB", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetB, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetB(VectorSumCoefficient self, Vector B_)"},
	 { "VectorSumCoefficient_GetB", _wrap_VectorSumCoefficient_GetB, METH_O, "VectorSumCoefficient_GetB(VectorSumCoefficient self) -> Vector"},
	 { "VectorSumCoefficient_SetAlpha", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetAlpha, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetAlpha(VectorSumCoefficient self, double alpha_)"},
	 { "VectorSumCoefficient_GetAlpha", _wrap_VectorSumCoefficient_GetAlpha, METH_O, "VectorSumCoefficient_GetAlpha(VectorSumCoefficient self) -> double"},
	 { "VectorSumCoefficient_SetBeta", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetBeta, METH_VARARGS|METH_KEYWORDS, "VectorSumCoefficient_SetBeta(VectorSumCoefficient self, double beta_)"},
	 { "VectorSumCoefficient_GetBeta", _wrap_VectorSumCoefficient_GetBeta, METH_O, "VectorSumCoefficient_GetBeta(VectorSumCoefficient self) -> double"},
	 { "VectorSumCoefficient_Eval", _wrap_VectorSumCoefficient_Eval, METH_VARARGS, "\n"
		"VectorSumCoefficient_Eval(VectorSumCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"VectorSumCoefficient_Eval(VectorSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_VectorSumCoefficient", _wrap_delete_VectorSumCoefficient, METH_O, "delete_VectorSumCoefficient(VectorSumCoefficient self)"},
	 { "VectorSumCoefficient_swigregister", VectorSumCoefficient_swigregister, METH_O, NULL},
	 { "VectorSumCoefficient_swiginit", VectorSumCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_ScalarVectorProductCoefficient", _wrap_new_ScalarVectorProductCoefficient, METH_VARARGS, "\n"
		"ScalarVectorProductCoefficient(double A, VectorCoefficient B)\n"
		"new_ScalarVectorProductCoefficient(Coefficient A, VectorCoefficient B) -> ScalarVectorProductCoefficient\n"
		""},
	 { "ScalarVectorProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "ScalarVectorProductCoefficient_SetTime(ScalarVectorProductCoefficient self, double t)"},
	 { "ScalarVectorProductCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "ScalarVectorProductCoefficient_SetAConst(ScalarVectorProductCoefficient self, double A)"},
	 { "ScalarVectorProductCoefficient_GetAConst", _wrap_ScalarVectorProductCoefficient_GetAConst, METH_O, "ScalarVectorProductCoefficient_GetAConst(ScalarVectorProductCoefficient self) -> double"},
	 { "ScalarVectorProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "ScalarVectorProductCoefficient_SetACoef(ScalarVectorProductCoefficient self, Coefficient A)"},
	 { "ScalarVectorProductCoefficient_GetACoef", _wrap_ScalarVectorProductCoefficient_GetACoef, METH_O, "ScalarVectorProductCoefficient_GetACoef(ScalarVectorProductCoefficient self) -> Coefficient"},
	 { "ScalarVectorProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "ScalarVectorProductCoefficient_SetBCoef(ScalarVectorProductCoefficient self, VectorCoefficient B)"},
	 { "ScalarVectorProductCoefficient_GetBCoef", _wrap_ScalarVectorProductCoefficient_GetBCoef, METH_O, "ScalarVectorProductCoefficient_GetBCoef(ScalarVectorProductCoefficient self) -> VectorCoefficient"},
	 { "ScalarVectorProductCoefficient_Eval", _wrap_ScalarVectorProductCoefficient_Eval, METH_VARARGS, "\n"
		"ScalarVectorProductCoefficient_Eval(ScalarVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"ScalarVectorProductCoefficient_Eval(ScalarVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_ScalarVectorProductCoefficient", _wrap_delete_ScalarVectorProductCoefficient, METH_O, "delete_ScalarVectorProductCoefficient(ScalarVectorProductCoefficient self)"},
	 { "ScalarVectorProductCoefficient_swigregister", ScalarVectorProductCoefficient_swigregister, METH_O, NULL},
	 { "ScalarVectorProductCoefficient_swiginit", ScalarVectorProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_NormalizedVectorCoefficient", (PyCFunction)(void(*)(void))_wrap_new_NormalizedVectorCoefficient, METH_VARARGS|METH_KEYWORDS, "new_NormalizedVectorCoefficient(VectorCoefficient A, double tol=1e-6) -> NormalizedVectorCoefficient"},
	 { "NormalizedVectorCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_NormalizedVectorCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "NormalizedVectorCoefficient_SetTime(NormalizedVectorCoefficient self, double t)"},
	 { "NormalizedVectorCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_NormalizedVectorCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "NormalizedVectorCoefficient_SetACoef(NormalizedVectorCoefficient self, VectorCoefficient A)"},
	 { "NormalizedVectorCoefficient_GetACoef", _wrap_NormalizedVectorCoefficient_GetACoef, METH_O, "NormalizedVectorCoefficient_GetACoef(NormalizedVectorCoefficient self) -> VectorCoefficient"},
	 { "NormalizedVectorCoefficient_Eval", _wrap_NormalizedVectorCoefficient_Eval, METH_VARARGS, "\n"
		"NormalizedVectorCoefficient_Eval(NormalizedVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"NormalizedVectorCoefficient_Eval(NormalizedVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_NormalizedVectorCoefficient", _wrap_delete_NormalizedVectorCoefficient, METH_O, "delete_NormalizedVectorCoefficient(NormalizedVectorCoefficient self)"},
	 { "NormalizedVectorCoefficient_swigregister", NormalizedVectorCoefficient_swigregister, METH_O, NULL},
	 { "NormalizedVectorCoefficient_swiginit", NormalizedVectorCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorCrossProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorCrossProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorCrossProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> VectorCrossProductCoefficient"},
	 { "VectorCrossProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorCrossProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorCrossProductCoefficient_SetTime(VectorCrossProductCoefficient self, double t)"},
	 { "VectorCrossProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_VectorCrossProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "VectorCrossProductCoefficient_SetACoef(VectorCrossProductCoefficient self, VectorCoefficient A)"},
	 { "VectorCrossProductCoefficient_GetACoef", _wrap_VectorCrossProductCoefficient_GetACoef, METH_O, "VectorCrossProductCoefficient_GetACoef(VectorCrossProductCoefficient self) -> VectorCoefficient"},
	 { "VectorCrossProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_VectorCrossProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "VectorCrossProductCoefficient_SetBCoef(VectorCrossProductCoefficient self, VectorCoefficient B)"},
	 { "VectorCrossProductCoefficient_GetBCoef", _wrap_VectorCrossProductCoefficient_GetBCoef, METH_O, "VectorCrossProductCoefficient_GetBCoef(VectorCrossProductCoefficient self) -> VectorCoefficient"},
	 { "VectorCrossProductCoefficient_Eval", _wrap_VectorCrossProductCoefficient_Eval, METH_VARARGS, "\n"
		"VectorCrossProductCoefficient_Eval(VectorCrossProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"VectorCrossProductCoefficient_Eval(VectorCrossProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_VectorCrossProductCoefficient", _wrap_delete_VectorCrossProductCoefficient, METH_O, "delete_VectorCrossProductCoefficient(VectorCrossProductCoefficient self)"},
	 { "VectorCrossProductCoefficient_swigregister", VectorCrossProductCoefficient_swigregister, METH_O, NULL},
	 { "VectorCrossProductCoefficient_swiginit", VectorCrossProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixVectorProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixVectorProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixVectorProductCoefficient(MatrixCoefficient A, VectorCoefficient B) -> MatrixVectorProductCoefficient"},
	 { "MatrixVectorProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixVectorProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixVectorProductCoefficient_SetTime(MatrixVectorProductCoefficient self, double t)"},
	 { "MatrixVectorProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_MatrixVectorProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "MatrixVectorProductCoefficient_SetACoef(MatrixVectorProductCoefficient self, MatrixCoefficient A)"},
	 { "MatrixVectorProductCoefficient_GetACoef", _wrap_MatrixVectorProductCoefficient_GetACoef, METH_O, "MatrixVectorProductCoefficient_GetACoef(MatrixVectorProductCoefficient self) -> MatrixCoefficient"},
	 { "MatrixVectorProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_MatrixVectorProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "MatrixVectorProductCoefficient_SetBCoef(MatrixVectorProductCoefficient self, VectorCoefficient B)"},
	 { "MatrixVectorProductCoefficient_GetBCoef", _wrap_MatrixVectorProductCoefficient_GetBCoef, METH_O, "MatrixVectorProductCoefficient_GetBCoef(MatrixVectorProductCoefficient self) -> VectorCoefficient"},
	 { "MatrixVectorProductCoefficient_Eval", _wrap_MatrixVectorProductCoefficient_Eval, METH_VARARGS, "\n"
		"MatrixVectorProductCoefficient_Eval(MatrixVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"MatrixVectorProductCoefficient_Eval(MatrixVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_MatrixVectorProductCoefficient", _wrap_delete_MatrixVectorProductCoefficient, METH_O, "delete_MatrixVectorProductCoefficient(MatrixVectorProductCoefficient self)"},
	 { "MatrixVectorProductCoefficient_swigregister", MatrixVectorProductCoefficient_swigregister, METH_O, NULL},
	 { "MatrixVectorProductCoefficient_swiginit", MatrixVectorProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_IdentityMatrixCoefficient", (PyCFunction)(void(*)(void))_wrap_new_IdentityMatrixCoefficient, METH_VARARGS|METH_KEYWORDS, "new_IdentityMatrixCoefficient(int d) -> IdentityMatrixCoefficient"},
	 { "IdentityMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_IdentityMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "IdentityMatrixCoefficient_Eval(IdentityMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_IdentityMatrixCoefficient", _wrap_delete_IdentityMatrixCoefficient, METH_O, "delete_IdentityMatrixCoefficient(IdentityMatrixCoefficient self)"},
	 { "IdentityMatrixCoefficient_swigregister", IdentityMatrixCoefficient_swigregister, METH_O, NULL},
	 { "IdentityMatrixCoefficient_swiginit", IdentityMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixSumCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixSumCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixSumCoefficient(MatrixCoefficient A, MatrixCoefficient B, double alpha_=1.0, double beta_=1.0) -> MatrixSumCoefficient"},
	 { "MatrixSumCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixSumCoefficient_SetTime(MatrixSumCoefficient self, double t)"},
	 { "MatrixSumCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "MatrixSumCoefficient_SetACoef(MatrixSumCoefficient self, MatrixCoefficient A)"},
	 { "MatrixSumCoefficient_GetACoef", _wrap_MatrixSumCoefficient_GetACoef, METH_O, "MatrixSumCoefficient_GetACoef(MatrixSumCoefficient self) -> MatrixCoefficient"},
	 { "MatrixSumCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "MatrixSumCoefficient_SetBCoef(MatrixSumCoefficient self, MatrixCoefficient B)"},
	 { "MatrixSumCoefficient_GetBCoef", _wrap_MatrixSumCoefficient_GetBCoef, METH_O, "MatrixSumCoefficient_GetBCoef(MatrixSumCoefficient self) -> MatrixCoefficient"},
	 { "MatrixSumCoefficient_SetAlpha", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetAlpha, METH_VARARGS|METH_KEYWORDS, "MatrixSumCoefficient_SetAlpha(MatrixSumCoefficient self, double alpha_)"},
	 { "MatrixSumCoefficient_GetAlpha", _wrap_MatrixSumCoefficient_GetAlpha, METH_O, "MatrixSumCoefficient_GetAlpha(MatrixSumCoefficient self) -> double"},
	 { "MatrixSumCoefficient_SetBeta", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetBeta, METH_VARARGS|METH_KEYWORDS, "MatrixSumCoefficient_SetBeta(MatrixSumCoefficient self, double beta_)"},
	 { "MatrixSumCoefficient_GetBeta", _wrap_MatrixSumCoefficient_GetBeta, METH_O, "MatrixSumCoefficient_GetBeta(MatrixSumCoefficient self) -> double"},
	 { "MatrixSumCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixSumCoefficient_Eval(MatrixSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixSumCoefficient", _wrap_delete_MatrixSumCoefficient, METH_O, "delete_MatrixSumCoefficient(MatrixSumCoefficient self)"},
	 { "MatrixSumCoefficient_swigregister", MatrixSumCoefficient_swigregister, METH_O, NULL},
	 { "MatrixSumCoefficient_swiginit", MatrixSumCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixProductCoefficient(MatrixCoefficient A, MatrixCoefficient B) -> MatrixProductCoefficient"},
	 { "MatrixProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_MatrixProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "MatrixProductCoefficient_SetACoef(MatrixProductCoefficient self, MatrixCoefficient A)"},
	 { "MatrixProductCoefficient_GetACoef", _wrap_MatrixProductCoefficient_GetACoef, METH_O, "MatrixProductCoefficient_GetACoef(MatrixProductCoefficient self) -> MatrixCoefficient"},
	 { "MatrixProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_MatrixProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "MatrixProductCoefficient_SetBCoef(MatrixProductCoefficient self, MatrixCoefficient B)"},
	 { "MatrixProductCoefficient_GetBCoef", _wrap_MatrixProductCoefficient_GetBCoef, METH_O, "MatrixProductCoefficient_GetBCoef(MatrixProductCoefficient self) -> MatrixCoefficient"},
	 { "MatrixProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixProductCoefficient_Eval(MatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixProductCoefficient", _wrap_delete_MatrixProductCoefficient, METH_O, "delete_MatrixProductCoefficient(MatrixProductCoefficient self)"},
	 { "MatrixProductCoefficient_swigregister", MatrixProductCoefficient_swigregister, METH_O, NULL},
	 { "MatrixProductCoefficient_swiginit", MatrixProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_ScalarMatrixProductCoefficient", _wrap_new_ScalarMatrixProductCoefficient, METH_VARARGS, "\n"
		"ScalarMatrixProductCoefficient(double A, MatrixCoefficient B)\n"
		"new_ScalarMatrixProductCoefficient(Coefficient A, MatrixCoefficient B) -> ScalarMatrixProductCoefficient\n"
		""},
	 { "ScalarMatrixProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "ScalarMatrixProductCoefficient_SetTime(ScalarMatrixProductCoefficient self, double t)"},
	 { "ScalarMatrixProductCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "ScalarMatrixProductCoefficient_SetAConst(ScalarMatrixProductCoefficient self, double A)"},
	 { "ScalarMatrixProductCoefficient_GetAConst", _wrap_ScalarMatrixProductCoefficient_GetAConst, METH_O, "ScalarMatrixProductCoefficient_GetAConst(ScalarMatrixProductCoefficient self) -> double"},
	 { "ScalarMatrixProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "ScalarMatrixProductCoefficient_SetACoef(ScalarMatrixProductCoefficient self, Coefficient A)"},
	 { "ScalarMatrixProductCoefficient_GetACoef", _wrap_ScalarMatrixProductCoefficient_GetACoef, METH_O, "ScalarMatrixProductCoefficient_GetACoef(ScalarMatrixProductCoefficient self) -> Coefficient"},
	 { "ScalarMatrixProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "ScalarMatrixProductCoefficient_SetBCoef(ScalarMatrixProductCoefficient self, MatrixCoefficient B)"},
	 { "ScalarMatrixProductCoefficient_GetBCoef", _wrap_ScalarMatrixProductCoefficient_GetBCoef, METH_O, "ScalarMatrixProductCoefficient_GetBCoef(ScalarMatrixProductCoefficient self) -> MatrixCoefficient"},
	 { "ScalarMatrixProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "ScalarMatrixProductCoefficient_Eval(ScalarMatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_ScalarMatrixProductCoefficient", _wrap_delete_ScalarMatrixProductCoefficient, METH_O, "delete_ScalarMatrixProductCoefficient(ScalarMatrixProductCoefficient self)"},
	 { "ScalarMatrixProductCoefficient_swigregister", ScalarMatrixProductCoefficient_swigregister, METH_O, NULL},
	 { "ScalarMatrixProductCoefficient_swiginit", ScalarMatrixProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_TransposeMatrixCoefficient", (PyCFunction)(void(*)(void))_wrap_new_TransposeMatrixCoefficient, METH_VARARGS|METH_KEYWORDS, "new_TransposeMatrixCoefficient(MatrixCoefficient A) -> TransposeMatrixCoefficient"},
	 { "TransposeMatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_TransposeMatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "TransposeMatrixCoefficient_SetTime(TransposeMatrixCoefficient self, double t)"},
	 { "TransposeMatrixCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_TransposeMatrixCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "TransposeMatrixCoefficient_SetACoef(TransposeMatrixCoefficient self, MatrixCoefficient A)"},
	 { "TransposeMatrixCoefficient_GetACoef", _wrap_TransposeMatrixCoefficient_GetACoef, METH_O, "TransposeMatrixCoefficient_GetACoef(TransposeMatrixCoefficient self) -> MatrixCoefficient"},
	 { "TransposeMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_TransposeMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "TransposeMatrixCoefficient_Eval(TransposeMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_TransposeMatrixCoefficient", _wrap_delete_TransposeMatrixCoefficient, METH_O, "delete_TransposeMatrixCoefficient(TransposeMatrixCoefficient self)"},
	 { "TransposeMatrixCoefficient_swigregister", TransposeMatrixCoefficient_swigregister, METH_O, NULL},
	 { "TransposeMatrixCoefficient_swiginit", TransposeMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_InverseMatrixCoefficient", (PyCFunction)(void(*)(void))_wrap_new_InverseMatrixCoefficient, METH_VARARGS|METH_KEYWORDS, "new_InverseMatrixCoefficient(MatrixCoefficient A) -> InverseMatrixCoefficient"},
	 { "InverseMatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_InverseMatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "InverseMatrixCoefficient_SetTime(InverseMatrixCoefficient self, double t)"},
	 { "InverseMatrixCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_InverseMatrixCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "InverseMatrixCoefficient_SetACoef(InverseMatrixCoefficient self, MatrixCoefficient A)"},
	 { "InverseMatrixCoefficient_GetACoef", _wrap_InverseMatrixCoefficient_GetACoef, METH_O, "InverseMatrixCoefficient_GetACoef(InverseMatrixCoefficient self) -> MatrixCoefficient"},
	 { "InverseMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_InverseMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "InverseMatrixCoefficient_Eval(InverseMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_InverseMatrixCoefficient", _wrap_delete_InverseMatrixCoefficient, METH_O, "delete_InverseMatrixCoefficient(InverseMatrixCoefficient self)"},
	 { "InverseMatrixCoefficient_swigregister", InverseMatrixCoefficient_swigregister, METH_O, NULL},
	 { "InverseMatrixCoefficient_swiginit", InverseMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_OuterProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_OuterProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_OuterProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> OuterProductCoefficient"},
	 { "OuterProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "OuterProductCoefficient_SetTime(OuterProductCoefficient self, double t)"},
	 { "OuterProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "OuterProductCoefficient_SetACoef(OuterProductCoefficient self, VectorCoefficient A)"},
	 { "OuterProductCoefficient_GetACoef", _wrap_OuterProductCoefficient_GetACoef, METH_O, "OuterProductCoefficient_GetACoef(OuterProductCoefficient self) -> VectorCoefficient"},
	 { "OuterProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "OuterProductCoefficient_SetBCoef(OuterProductCoefficient self, VectorCoefficient B)"},
	 { "OuterProductCoefficient_GetBCoef", _wrap_OuterProductCoefficient_GetBCoef, METH_O, "OuterProductCoefficient_GetBCoef(OuterProductCoefficient self) -> VectorCoefficient"},
	 { "OuterProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "OuterProductCoefficient_Eval(OuterProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_OuterProductCoefficient", _wrap_delete_OuterProductCoefficient, METH_O, "delete_OuterProductCoefficient(OuterProductCoefficient self)"},
	 { "OuterProductCoefficient_swigregister", OuterProductCoefficient_swigregister, METH_O, NULL},
	 { "OuterProductCoefficient_swiginit", OuterProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_CrossCrossCoefficient", _wrap_new_CrossCrossCoefficient, METH_VARARGS, "\n"
		"CrossCrossCoefficient(double A, VectorCoefficient K)\n"
		"new_CrossCrossCoefficient(Coefficient A, VectorCoefficient K) -> CrossCrossCoefficient\n"
		""},
	 { "CrossCrossCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "CrossCrossCoefficient_SetTime(CrossCrossCoefficient self, double t)"},
	 { "CrossCrossCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "CrossCrossCoefficient_SetAConst(CrossCrossCoefficient self, double A)"},
	 { "CrossCrossCoefficient_GetAConst", _wrap_CrossCrossCoefficient_GetAConst, METH_O, "CrossCrossCoefficient_GetAConst(CrossCrossCoefficient self) -> double"},
	 { "CrossCrossCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "CrossCrossCoefficient_SetACoef(CrossCrossCoefficient self, Coefficient A)"},
	 { "CrossCrossCoefficient_GetACoef", _wrap_CrossCrossCoefficient_GetACoef, METH_O, "CrossCrossCoefficient_GetACoef(CrossCrossCoefficient self) -> Coefficient"},
	 { "CrossCrossCoefficient_SetKCoef", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetKCoef, METH_VARARGS|METH_KEYWORDS, "CrossCrossCoefficient_SetKCoef(CrossCrossCoefficient self, VectorCoefficient K)"},
	 { "CrossCrossCoefficient_GetKCoef", _wrap_CrossCrossCoefficient_GetKCoef, METH_O, "CrossCrossCoefficient_GetKCoef(CrossCrossCoefficient self) -> VectorCoefficient"},
	 { "CrossCrossCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "CrossCrossCoefficient_Eval(CrossCrossCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_CrossCrossCoefficient", _wrap_delete_CrossCrossCoefficient, METH_O, "delete_CrossCrossCoefficient(CrossCrossCoefficient self)"},
	 { "CrossCrossCoefficient_swigregister", CrossCrossCoefficient_swigregister, METH_O, NULL},
	 { "CrossCrossCoefficient_swiginit", CrossCrossCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorQuadratureFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorQuadratureFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorQuadratureFunctionCoefficient(mfem::QuadratureFunction & qf) -> VectorQuadratureFunctionCoefficient"},
	 { "VectorQuadratureFunctionCoefficient_SetComponent", (PyCFunction)(void(*)(void))_wrap_VectorQuadratureFunctionCoefficient_SetComponent, METH_VARARGS|METH_KEYWORDS, "VectorQuadratureFunctionCoefficient_SetComponent(VectorQuadratureFunctionCoefficient self, int index_, int length_)"},
	 { "VectorQuadratureFunctionCoefficient_GetQuadFunction", _wrap_VectorQuadratureFunctionCoefficient_GetQuadFunction, METH_O, "VectorQuadratureFunctionCoefficient_GetQuadFunction(VectorQuadratureFunctionCoefficient self) -> mfem::QuadratureFunction const &"},
	 { "VectorQuadratureFunctionCoefficient_Eval", _wrap_VectorQuadratureFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"VectorQuadratureFunctionCoefficient_Eval(VectorQuadratureFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"VectorQuadratureFunctionCoefficient_Eval(VectorQuadratureFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "VectorQuadratureFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_VectorQuadratureFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "VectorQuadratureFunctionCoefficient_Project(VectorQuadratureFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_VectorQuadratureFunctionCoefficient", _wrap_delete_VectorQuadratureFunctionCoefficient, METH_O, "delete_VectorQuadratureFunctionCoefficient(VectorQuadratureFunctionCoefficient self)"},
	 { "VectorQuadratureFunctionCoefficient_swigregister", VectorQuadratureFunctionCoefficient_swigregister, METH_O, NULL},
	 { "VectorQuadratureFunctionCoefficient_swiginit", VectorQuadratureFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_QuadratureFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_QuadratureFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_QuadratureFunctionCoefficient(mfem::QuadratureFunction & qf) -> QuadratureFunctionCoefficient"},
	 { "QuadratureFunctionCoefficient_GetQuadFunction", _wrap_QuadratureFunctionCoefficient_GetQuadFunction, METH_O, "QuadratureFunctionCoefficient_GetQuadFunction(QuadratureFunctionCoefficient self) -> mfem::QuadratureFunction const &"},
	 { "QuadratureFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_QuadratureFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "QuadratureFunctionCoefficient_Eval(QuadratureFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "QuadratureFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_QuadratureFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "QuadratureFunctionCoefficient_Project(QuadratureFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_QuadratureFunctionCoefficient", _wrap_delete_QuadratureFunctionCoefficient, METH_O, "delete_QuadratureFunctionCoefficient(QuadratureFunctionCoefficient self)"},
	 { "QuadratureFunctionCoefficient_swigregister", QuadratureFunctionCoefficient_swigregister, METH_O, NULL},
	 { "QuadratureFunctionCoefficient_swiginit", QuadratureFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "__or__", (PyCFunction)(void(*)(void))_wrap___or__, METH_VARARGS|METH_KEYWORDS, "__or__(mfem::CoefficientStorage a, mfem::CoefficientStorage b) -> mfem::CoefficientStorage"},
	 { "__and__", (PyCFunction)(void(*)(void))_wrap___and__, METH_VARARGS|METH_KEYWORDS, "__and__(mfem::CoefficientStorage a, mfem::CoefficientStorage b) -> int"},
	 { "new_CoefficientVector", _wrap_new_CoefficientVector, METH_VARARGS, "\n"
		"CoefficientVector(mfem::QuadratureSpaceBase & qs_, mfem::CoefficientStorage storage_=FULL)\n"
		"CoefficientVector(Coefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL)\n"
		"CoefficientVector(Coefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL)\n"
		"CoefficientVector(VectorCoefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL)\n"
		"new_CoefficientVector(MatrixCoefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector\n"
		""},
	 { "CoefficientVector_Project", _wrap_CoefficientVector_Project, METH_VARARGS, "\n"
		"CoefficientVector_Project(CoefficientVector self, Coefficient coeff)\n"
		"CoefficientVector_Project(CoefficientVector self, VectorCoefficient coeff)\n"
		"CoefficientVector_Project(CoefficientVector self, MatrixCoefficient coeff, bool transpose=False)\n"
		""},
	 { "CoefficientVector_ProjectTranspose", (PyCFunction)(void(*)(void))_wrap_CoefficientVector_ProjectTranspose, METH_VARARGS|METH_KEYWORDS, "CoefficientVector_ProjectTranspose(CoefficientVector self, MatrixCoefficient coeff)"},
	 { "CoefficientVector_MakeRef", (PyCFunction)(void(*)(void))_wrap_CoefficientVector_MakeRef, METH_VARARGS|METH_KEYWORDS, "CoefficientVector_MakeRef(CoefficientVector self, mfem::QuadratureFunction const & qf_)"},
	 { "CoefficientVector_SetConstant", _wrap_CoefficientVector_SetConstant, METH_VARARGS, "\n"
		"CoefficientVector_SetConstant(CoefficientVector self, double constant)\n"
		"CoefficientVector_SetConstant(CoefficientVector self, Vector constant)\n"
		"CoefficientVector_SetConstant(CoefficientVector self, DenseMatrix constant)\n"
		"CoefficientVector_SetConstant(CoefficientVector self, DenseSymmetricMatrix constant)\n"
		""},
	 { "CoefficientVector_GetVDim", _wrap_CoefficientVector_GetVDim, METH_O, "CoefficientVector_GetVDim(CoefficientVector self) -> int"},
	 { "delete_CoefficientVector", _wrap_delete_CoefficientVector, METH_O, "delete_CoefficientVector(CoefficientVector self)"},
	 { "CoefficientVector_swigregister", CoefficientVector_swigregister, METH_O, NULL},
	 { "CoefficientVector_swiginit", CoefficientVector_swiginit, METH_VARARGS, NULL},
	 { "ComputeLpNorm", _wrap_ComputeLpNorm, METH_VARARGS, "\n"
		"ComputeLpNorm(double p, Coefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> double\n"
		"ComputeLpNorm(double p, VectorCoefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> double\n"
		""},
	 { "ComputeGlobalLpNorm", _wrap_ComputeGlobalLpNorm, METH_VARARGS, "\n"
		"ComputeGlobalLpNorm(double p, Coefficient coeff, mfem::ParMesh & pmesh, mfem::IntegrationRule const *[] irs) -> double\n"
		"ComputeGlobalLpNorm(double p, VectorCoefficient coeff, mfem::ParMesh & pmesh, mfem::IntegrationRule const *[] irs) -> double\n"
		""},
	 { "new_NumbaFunction", _wrap_new_NumbaFunction, METH_VARARGS, "\n"
		"NumbaFunction(PyObject * input, int sdim)\n"
		"new_NumbaFunction(PyObject * input, int sdim, bool td) -> NumbaFunction\n"
		""},
	 { "NumbaFunction_call0", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_call0, METH_VARARGS|METH_KEYWORDS, "NumbaFunction_call0(NumbaFunction self, Vector x) -> double"},
	 { "NumbaFunction_call", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_call, METH_VARARGS|METH_KEYWORDS, "NumbaFunction_call(NumbaFunction self, Vector x) -> double"},
	 { "NumbaFunction_call0t", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_call0t, METH_VARARGS|METH_KEYWORDS, "NumbaFunction_call0t(NumbaFunction self, Vector x, double t) -> double"},
	 { "NumbaFunction_callt", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_callt, METH_VARARGS|METH_KEYWORDS, "NumbaFunction_callt(NumbaFunction self, Vector x, double t) -> double"},
	 { "NumbaFunction_GenerateCoefficient", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_GenerateCoefficient, METH_VARARGS|METH_KEYWORDS, "NumbaFunction_GenerateCoefficient(NumbaFunction self, int use_0=0) -> FunctionCoefficient"},
	 { "delete_NumbaFunction", _wrap_delete_NumbaFunction, METH_O, "delete_NumbaFunction(NumbaFunction self)"},
	 { "NumbaFunction_swigregister", NumbaFunction_swigregister, METH_O, NULL},
	 { "NumbaFunction_swiginit", NumbaFunction_swiginit, METH_VARARGS, NULL},
	 { "new_VectorNumbaFunction", _wrap_new_VectorNumbaFunction, METH_VARARGS, "\n"
		"VectorNumbaFunction(PyObject * input, int sdim, int vdim)\n"
		"new_VectorNumbaFunction(PyObject * input, int sdim, int vdim, bool td) -> VectorNumbaFunction\n"
		""},
	 { "VectorNumbaFunction_call", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_call, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction_call(VectorNumbaFunction self, Vector x, Vector out)"},
	 { "VectorNumbaFunction_callt", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_callt, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction_callt(VectorNumbaFunction self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction_call0", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_call0, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction_call0(VectorNumbaFunction self, Vector x, Vector out)"},
	 { "VectorNumbaFunction_call0t", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_call0t, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction_call0t(VectorNumbaFunction self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction_GenerateCoefficient", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_GenerateCoefficient, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction_GenerateCoefficient(VectorNumbaFunction self, int use_0=0) -> VectorFunctionCoefficient"},
	 { "delete_VectorNumbaFunction", _wrap_delete_VectorNumbaFunction, METH_O, "delete_VectorNumbaFunction(VectorNumbaFunction self)"},
	 { "VectorNumbaFunction_swigregister", VectorNumbaFunction_swigregister, METH_O, NULL},
	 { "VectorNumbaFunction_swiginit", VectorNumbaFunction_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixNumbaFunction", _wrap_new_MatrixNumbaFunction, METH_VARARGS, "\n"
		"MatrixNumbaFunction(PyObject * input, int sdim, int vdim)\n"
		"new_MatrixNumbaFunction(PyObject * input, int sdim, int vdim, bool td) -> MatrixNumbaFunction\n"
		""},
	 { "MatrixNumbaFunction_call", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_call, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction_call(MatrixNumbaFunction self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction_callt", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_callt, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction_callt(MatrixNumbaFunction self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction_call0", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_call0, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction_call0(MatrixNumbaFunction self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction_call0t", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_call0t, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction_call0t(MatrixNumbaFunction self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction_GenerateCoefficient", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_GenerateCoefficient, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction_GenerateCoefficient(MatrixNumbaFunction self, int use_0=0) -> MatrixFunctionCoefficient"},
	 { "delete_MatrixNumbaFunction", _wrap_delete_MatrixNumbaFunction, METH_O, "delete_MatrixNumbaFunction(MatrixNumbaFunction self)"},
	 { "MatrixNumbaFunction_swigregister", MatrixNumbaFunction_swigregister, METH_O, NULL},
	 { "MatrixNumbaFunction_swiginit", MatrixNumbaFunction_swiginit, METH_VARARGS, NULL},
	 { "new_ScalarNumbaFunction2", _wrap_new_ScalarNumbaFunction2, METH_VARARGS, "\n"
		"ScalarNumbaFunction2(PyObject * input)\n"
		"new_ScalarNumbaFunction2(PyObject * input, bool td) -> ScalarNumbaFunction2\n"
		""},
	 { "delete_ScalarNumbaFunction2", _wrap_delete_ScalarNumbaFunction2, METH_O, "delete_ScalarNumbaFunction2(ScalarNumbaFunction2 self)"},
	 { "ScalarNumbaFunction2_call", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_call, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_call(ScalarNumbaFunction2 self, Vector x) -> double"},
	 { "ScalarNumbaFunction2_callt", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_callt, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_callt(ScalarNumbaFunction2 self, Vector x, double t) -> double"},
	 { "ScalarNumbaFunction2_callr", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_callr, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_callr(ScalarNumbaFunction2 self, Vector x) -> double"},
	 { "ScalarNumbaFunction2_calltr", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_calltr, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_calltr(ScalarNumbaFunction2 self, Vector x, double t) -> double"},
	 { "ScalarNumbaFunction2_calli", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_calli, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_calli(ScalarNumbaFunction2 self, Vector x) -> double"},
	 { "ScalarNumbaFunction2_callti", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_callti, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_callti(ScalarNumbaFunction2 self, Vector x, double t) -> double"},
	 { "ScalarNumbaFunction2_GetScalarImaginary", _wrap_ScalarNumbaFunction2_GetScalarImaginary, METH_O, "ScalarNumbaFunction2_GetScalarImaginary(ScalarNumbaFunction2 self) -> double"},
	 { "ScalarNumbaFunction2_set_obj1", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_set_obj1, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_set_obj1(ScalarNumbaFunction2 self, std::function< double (mfem::Vector const &) > obj1_)"},
	 { "ScalarNumbaFunction2_set_obj2", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_set_obj2, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaFunction2_set_obj2(ScalarNumbaFunction2 self, std::function< double (mfem::Vector const &,double) > obj2_)"},
	 { "ScalarNumbaFunction2_get_obj1", _wrap_ScalarNumbaFunction2_get_obj1, METH_O, "ScalarNumbaFunction2_get_obj1(ScalarNumbaFunction2 self) -> std::function< double (mfem::Vector const &) >"},
	 { "ScalarNumbaFunction2_get_obj2", _wrap_ScalarNumbaFunction2_get_obj2, METH_O, "ScalarNumbaFunction2_get_obj2(ScalarNumbaFunction2 self) -> std::function< double (mfem::Vector const &,double) >"},
	 { "ScalarNumbaFunction2_swigregister", ScalarNumbaFunction2_swigregister, METH_O, NULL},
	 { "ScalarNumbaFunction2_swiginit", ScalarNumbaFunction2_swiginit, METH_VARARGS, NULL},
	 { "GenerateScalarNumbaCoefficient", (PyCFunction)(void(*)(void))_wrap_GenerateScalarNumbaCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateScalarNumbaCoefficient(PyObject * numba_func, bool td, int mode) -> ScalarNumbaCoefficient"},
	 { "new_VectorNumbaFunction2", _wrap_new_VectorNumbaFunction2, METH_VARARGS, "\n"
		"VectorNumbaFunction2(PyObject * input, int vdim)\n"
		"new_VectorNumbaFunction2(PyObject * input, int vdim, bool td) -> VectorNumbaFunction2\n"
		""},
	 { "delete_VectorNumbaFunction2", _wrap_delete_VectorNumbaFunction2, METH_O, "delete_VectorNumbaFunction2(VectorNumbaFunction2 self)"},
	 { "VectorNumbaFunction2_call", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_call, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_call(VectorNumbaFunction2 self, Vector x, Vector out)"},
	 { "VectorNumbaFunction2_callt", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_callt, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_callt(VectorNumbaFunction2 self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction2_callr", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_callr, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_callr(VectorNumbaFunction2 self, Vector x, Vector out)"},
	 { "VectorNumbaFunction2_calltr", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_calltr, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_calltr(VectorNumbaFunction2 self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction2_calli", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_calli, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_calli(VectorNumbaFunction2 self, Vector x, Vector out)"},
	 { "VectorNumbaFunction2_callti", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_callti, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_callti(VectorNumbaFunction2 self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction2_GetArrayImaginary", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_GetArrayImaginary, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_GetArrayImaginary(VectorNumbaFunction2 self, Vector out)"},
	 { "VectorNumbaFunction2_create_outc", _wrap_VectorNumbaFunction2_create_outc, METH_O, "VectorNumbaFunction2_create_outc(VectorNumbaFunction2 self)"},
	 { "VectorNumbaFunction2_set_obj1", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_set_obj1, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_set_obj1(VectorNumbaFunction2 self, std::function< void (mfem::Vector const &,mfem::Vector &) > obj1_)"},
	 { "VectorNumbaFunction2_set_obj2", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_set_obj2, METH_VARARGS|METH_KEYWORDS, "VectorNumbaFunction2_set_obj2(VectorNumbaFunction2 self, std::function< void (mfem::Vector const &,double,mfem::Vector &) > obj2_)"},
	 { "VectorNumbaFunction2_get_obj1", _wrap_VectorNumbaFunction2_get_obj1, METH_O, "VectorNumbaFunction2_get_obj1(VectorNumbaFunction2 self) -> std::function< void (mfem::Vector const &,mfem::Vector &) >"},
	 { "VectorNumbaFunction2_get_obj2", _wrap_VectorNumbaFunction2_get_obj2, METH_O, "VectorNumbaFunction2_get_obj2(VectorNumbaFunction2 self) -> std::function< void (mfem::Vector const &,double,mfem::Vector &) >"},
	 { "VectorNumbaFunction2_swigregister", VectorNumbaFunction2_swigregister, METH_O, NULL},
	 { "VectorNumbaFunction2_swiginit", VectorNumbaFunction2_swiginit, METH_VARARGS, NULL},
	 { "GenerateVectorNumbaCoefficient", (PyCFunction)(void(*)(void))_wrap_GenerateVectorNumbaCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateVectorNumbaCoefficient(PyObject * numba_func, int vdim, bool td, int mode) -> VectorNumbaCoefficient"},
	 { "new_MatrixNumbaFunction2", _wrap_new_MatrixNumbaFunction2, METH_VARARGS, "\n"
		"MatrixNumbaFunction2(PyObject * input, int vdim)\n"
		"new_MatrixNumbaFunction2(PyObject * input, int vdim, bool td) -> MatrixNumbaFunction2\n"
		""},
	 { "delete_MatrixNumbaFunction2", _wrap_delete_MatrixNumbaFunction2, METH_O, "delete_MatrixNumbaFunction2(MatrixNumbaFunction2 self)"},
	 { "MatrixNumbaFunction2_call", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_call, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_call(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_callt", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_callt, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_callt(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_callr", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_callr, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_callr(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_calltr", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_calltr, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_calltr(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_calli", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_calli, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_calli(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_callti", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_callti, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_callti(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_GetArrayImaginary", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_GetArrayImaginary, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_GetArrayImaginary(MatrixNumbaFunction2 self, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_create_outc", _wrap_MatrixNumbaFunction2_create_outc, METH_O, "MatrixNumbaFunction2_create_outc(MatrixNumbaFunction2 self)"},
	 { "MatrixNumbaFunction2_set_obj1", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_set_obj1, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_set_obj1(MatrixNumbaFunction2 self, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > obj1_)"},
	 { "MatrixNumbaFunction2_set_obj2", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_set_obj2, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaFunction2_set_obj2(MatrixNumbaFunction2 self, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > obj2_)"},
	 { "MatrixNumbaFunction2_get_obj1", _wrap_MatrixNumbaFunction2_get_obj1, METH_O, "MatrixNumbaFunction2_get_obj1(MatrixNumbaFunction2 self) -> std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >"},
	 { "MatrixNumbaFunction2_get_obj2", _wrap_MatrixNumbaFunction2_get_obj2, METH_O, "MatrixNumbaFunction2_get_obj2(MatrixNumbaFunction2 self) -> std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >"},
	 { "MatrixNumbaFunction2_swigregister", MatrixNumbaFunction2_swigregister, METH_O, NULL},
	 { "MatrixNumbaFunction2_swiginit", MatrixNumbaFunction2_swiginit, METH_VARARGS, NULL},
	 { "GenerateMatrixNumbaCoefficient", (PyCFunction)(void(*)(void))_wrap_GenerateMatrixNumbaCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateMatrixNumbaCoefficient(PyObject * numba_func, int height, int width, bool td, int mode) -> MatrixNumbaCoefficient"},
	 { "SetNumbaCoefficientDependency", (PyCFunction)(void(*)(void))_wrap_SetNumbaCoefficientDependency, METH_VARARGS|METH_KEYWORDS, "SetNumbaCoefficientDependency(NumbaCoefficientBase obj, mfem::Array< mfem::Coefficient * > const & a1, mfem::Array< mfem::VectorCoefficient * > const & a2, mfem::Array< mfem::MatrixCoefficient * > const & a3, mfem::Array< ScalarNumbaCoefficient * > const & a4, mfem::Array< VectorNumbaCoefficient * > const & a5, mfem::Array< MatrixNumbaCoefficient * > const & a6)"},
	 { "fake_func", (PyCFunction)(void(*)(void))_wrap_fake_func, METH_VARARGS|METH_KEYWORDS, "fake_func(Vector x) -> double"},
	 { "fake_func_vec", (PyCFunction)(void(*)(void))_wrap_fake_func_vec, METH_VARARGS|METH_KEYWORDS, "fake_func_vec(Vector x, Vector Ht)"},
	 { "fake_func_mat", (PyCFunction)(void(*)(void))_wrap_fake_func_mat, METH_VARARGS|METH_KEYWORDS, "fake_func_mat(Vector x, DenseMatrix Kt)"},
	 { "new_PyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_PyCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_PyCoefficientBase(PyObject * _self, int tdep) -> PyCoefficientBase"},
	 { "PyCoefficientBase_SetTime", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase_SetTime, METH_VARARGS|METH_KEYWORDS, "PyCoefficientBase_SetTime(PyCoefficientBase self, double t)"},
	 { "PyCoefficientBase_Eval", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase_Eval, METH_VARARGS|METH_KEYWORDS, "PyCoefficientBase_Eval(PyCoefficientBase self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "PyCoefficientBase__EvalPy", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase__EvalPy, METH_VARARGS|METH_KEYWORDS, "PyCoefficientBase__EvalPy(PyCoefficientBase self, Vector arg0) -> double"},
	 { "PyCoefficientBase__EvalPyT", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase__EvalPyT, METH_VARARGS|METH_KEYWORDS, "PyCoefficientBase__EvalPyT(PyCoefficientBase self, Vector arg0, double arg1) -> double"},
	 { "delete_PyCoefficientBase", _wrap_delete_PyCoefficientBase, METH_O, "delete_PyCoefficientBase(PyCoefficientBase self)"},
	 { "disown_PyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_disown_PyCoefficientBase, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "PyCoefficientBase_swigregister", PyCoefficientBase_swigregister, METH_O, NULL},
	 { "PyCoefficientBase_swiginit", PyCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "new_VectorPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_VectorPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_VectorPyCoefficientBase(PyObject * _self, int dim, int tdep, Coefficient q=None) -> VectorPyCoefficientBase"},
	 { "VectorPyCoefficientBase_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorPyCoefficientBase_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorPyCoefficientBase_SetTime(VectorPyCoefficientBase self, double t)"},
	 { "VectorPyCoefficientBase_Eval", _wrap_VectorPyCoefficientBase_Eval, METH_VARARGS, "\n"
		"VectorPyCoefficientBase_Eval(VectorPyCoefficientBase self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"VectorPyCoefficientBase_Eval(VectorPyCoefficientBase self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "VectorPyCoefficientBase__EvalPy", (PyCFunction)(void(*)(void))_wrap_VectorPyCoefficientBase__EvalPy, METH_VARARGS|METH_KEYWORDS, "VectorPyCoefficientBase__EvalPy(VectorPyCoefficientBase self, Vector arg0, Vector arg1)"},
	 { "VectorPyCoefficientBase__EvalPyT", (PyCFunction)(void(*)(void))_wrap_VectorPyCoefficientBase__EvalPyT, METH_VARARGS|METH_KEYWORDS, "VectorPyCoefficientBase__EvalPyT(VectorPyCoefficientBase self, Vector arg0, double arg1, Vector arg2)"},
	 { "delete_VectorPyCoefficientBase", _wrap_delete_VectorPyCoefficientBase, METH_O, "delete_VectorPyCoefficientBase(VectorPyCoefficientBase self)"},
	 { "disown_VectorPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_disown_VectorPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "VectorPyCoefficientBase_swigregister", VectorPyCoefficientBase_swigregister, METH_O, NULL},
	 { "VectorPyCoefficientBase_swiginit", VectorPyCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_MatrixPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_MatrixPyCoefficientBase(PyObject * _self, int dim, int tdep) -> MatrixPyCoefficientBase"},
	 { "MatrixPyCoefficientBase_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixPyCoefficientBase_SetTime(MatrixPyCoefficientBase self, double t)"},
	 { "MatrixPyCoefficientBase_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixPyCoefficientBase_Eval(MatrixPyCoefficientBase self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixPyCoefficientBase__EvalPy", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase__EvalPy, METH_VARARGS|METH_KEYWORDS, "MatrixPyCoefficientBase__EvalPy(MatrixPyCoefficientBase self, Vector arg0, DenseMatrix arg1)"},
	 { "MatrixPyCoefficientBase__EvalPyT", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase__EvalPyT, METH_VARARGS|METH_KEYWORDS, "MatrixPyCoefficientBase__EvalPyT(MatrixPyCoefficientBase self, Vector arg0, double arg1, DenseMatrix arg2)"},
	 { "delete_MatrixPyCoefficientBase", _wrap_delete_MatrixPyCoefficientBase, METH_O, "delete_MatrixPyCoefficientBase(MatrixPyCoefficientBase self)"},
	 { "disown_MatrixPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_disown_MatrixPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "MatrixPyCoefficientBase_swigregister", MatrixPyCoefficientBase_swigregister, METH_O, NULL},
	 { "MatrixPyCoefficientBase_swiginit", MatrixPyCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "new_NumbaFunctionBase", (PyCFunction)(void(*)(void))_wrap_new_NumbaFunctionBase, METH_VARARGS|METH_KEYWORDS, "new_NumbaFunctionBase(PyObject * input, int sdim, bool td) -> NumbaFunctionBase"},
	 { "NumbaFunctionBase_print_add", _wrap_NumbaFunctionBase_print_add, METH_O, "NumbaFunctionBase_print_add(NumbaFunctionBase self)"},
	 { "NumbaFunctionBase_SetUserFunction", (PyCFunction)(void(*)(void))_wrap_NumbaFunctionBase_SetUserFunction, METH_VARARGS|METH_KEYWORDS, "NumbaFunctionBase_SetUserFunction(NumbaFunctionBase self, PyObject * input)"},
	 { "NumbaFunctionBase_GetData", _wrap_NumbaFunctionBase_GetData, METH_O, "NumbaFunctionBase_GetData(NumbaFunctionBase self) -> double *"},
	 { "NumbaFunctionBase_GetPointer", _wrap_NumbaFunctionBase_GetPointer, METH_O, "NumbaFunctionBase_GetPointer(NumbaFunctionBase self) -> double **"},
	 { "NumbaFunctionBase_SetDataCount", (PyCFunction)(void(*)(void))_wrap_NumbaFunctionBase_SetDataCount, METH_VARARGS|METH_KEYWORDS, "NumbaFunctionBase_SetDataCount(NumbaFunctionBase self, int x)"},
	 { "NumbaFunctionBase_GetScalarImaginary", _wrap_NumbaFunctionBase_GetScalarImaginary, METH_O, "NumbaFunctionBase_GetScalarImaginary(NumbaFunctionBase self) -> double"},
	 { "NumbaFunctionBase_GetArrayImaginary", _wrap_NumbaFunctionBase_GetArrayImaginary, METH_VARARGS, "\n"
		"NumbaFunctionBase_GetArrayImaginary(NumbaFunctionBase self, Vector arg2)\n"
		"NumbaFunctionBase_GetArrayImaginary(NumbaFunctionBase self, DenseMatrix arg2)\n"
		""},
	 { "delete_NumbaFunctionBase", _wrap_delete_NumbaFunctionBase, METH_O, "delete_NumbaFunctionBase(NumbaFunctionBase self)"},
	 { "NumbaFunctionBase_swigregister", NumbaFunctionBase_swigregister, METH_O, NULL},
	 { "NumbaFunctionBase_swiginit", NumbaFunctionBase_swiginit, METH_VARARGS, NULL},
	 { "new_NumbaCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_NumbaCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_NumbaCoefficientBase(NumbaFunctionBase in_obj) -> NumbaCoefficientBase"},
	 { "NumbaCoefficientBase_PrepParams", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_PrepParams, METH_VARARGS|METH_KEYWORDS, "NumbaCoefficientBase_PrepParams(NumbaCoefficientBase self, ElementTransformation T, IntegrationPoint ip)"},
	 { "NumbaCoefficientBase_SetKinds", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetKinds, METH_VARARGS|METH_KEYWORDS, "NumbaCoefficientBase_SetKinds(NumbaCoefficientBase self, PyObject * kinds_)"},
	 { "NumbaCoefficientBase_SetIsDepComplex", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetIsDepComplex, METH_VARARGS|METH_KEYWORDS, "NumbaCoefficientBase_SetIsDepComplex(NumbaCoefficientBase self, PyObject * isComplex_)"},
	 { "NumbaCoefficientBase_SetOutComplex", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetOutComplex, METH_VARARGS|METH_KEYWORDS, "NumbaCoefficientBase_SetOutComplex(NumbaCoefficientBase self, bool in_)"},
	 { "NumbaCoefficientBase_IsOutComplex", _wrap_NumbaCoefficientBase_IsOutComplex, METH_O, "NumbaCoefficientBase_IsOutComplex(NumbaCoefficientBase self) -> bool"},
	 { "NumbaCoefficientBase_SetTimeInDependency", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetTimeInDependency, METH_VARARGS|METH_KEYWORDS, "NumbaCoefficientBase_SetTimeInDependency(NumbaCoefficientBase self, double t)"},
	 { "delete_NumbaCoefficientBase", _wrap_delete_NumbaCoefficientBase, METH_O, "delete_NumbaCoefficientBase(NumbaCoefficientBase self)"},
	 { "NumbaCoefficientBase_swigregister", NumbaCoefficientBase_swigregister, METH_O, NULL},
	 { "NumbaCoefficientBase_swiginit", NumbaCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "ScalarNumbaCoefficient_GetNDim", _wrap_ScalarNumbaCoefficient_GetNDim, METH_O, "ScalarNumbaCoefficient_GetNDim(ScalarNumbaCoefficient self) -> int"},
	 { "new_ScalarNumbaCoefficient", _wrap_new_ScalarNumbaCoefficient, METH_VARARGS, "\n"
		"ScalarNumbaCoefficient(std::function< double (mfem::Vector const &) > F, NumbaFunctionBase in_obj)\n"
		"new_ScalarNumbaCoefficient(std::function< double (mfem::Vector const &,double) > TDF, NumbaFunctionBase in_obj) -> ScalarNumbaCoefficient\n"
		""},
	 { "ScalarNumbaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaCoefficient_SetTime(ScalarNumbaCoefficient self, double t)"},
	 { "ScalarNumbaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "ScalarNumbaCoefficient_Eval(ScalarNumbaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_ScalarNumbaCoefficient", _wrap_delete_ScalarNumbaCoefficient, METH_O, "delete_ScalarNumbaCoefficient(ScalarNumbaCoefficient self)"},
	 { "ScalarNumbaCoefficient_swigregister", ScalarNumbaCoefficient_swigregister, METH_O, NULL},
	 { "ScalarNumbaCoefficient_swiginit", ScalarNumbaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "VectorNumbaCoefficient_GetNDim", _wrap_VectorNumbaCoefficient_GetNDim, METH_O, "VectorNumbaCoefficient_GetNDim(VectorNumbaCoefficient self) -> int"},
	 { "new_VectorNumbaCoefficient", _wrap_new_VectorNumbaCoefficient, METH_VARARGS, "\n"
		"VectorNumbaCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > F, NumbaFunctionBase in_obj)\n"
		"new_VectorNumbaCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::Vector &) > TDF, NumbaFunctionBase in_obj) -> VectorNumbaCoefficient\n"
		""},
	 { "VectorNumbaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorNumbaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "VectorNumbaCoefficient_SetTime(VectorNumbaCoefficient self, double t)"},
	 { "VectorNumbaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_VectorNumbaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "VectorNumbaCoefficient_Eval(VectorNumbaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_VectorNumbaCoefficient", _wrap_delete_VectorNumbaCoefficient, METH_O, "delete_VectorNumbaCoefficient(VectorNumbaCoefficient self)"},
	 { "VectorNumbaCoefficient_swigregister", VectorNumbaCoefficient_swigregister, METH_O, NULL},
	 { "VectorNumbaCoefficient_swiginit", VectorNumbaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "MatrixNumbaCoefficient_GetNDim", _wrap_MatrixNumbaCoefficient_GetNDim, METH_O, "MatrixNumbaCoefficient_GetNDim(MatrixNumbaCoefficient self) -> int"},
	 { "new_MatrixNumbaCoefficient", _wrap_new_MatrixNumbaCoefficient, METH_VARARGS, "\n"
		"MatrixNumbaCoefficient(int h, int w, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > F, NumbaFunctionBase in_obj)\n"
		"new_MatrixNumbaCoefficient(int h, int w, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > TDF, NumbaFunctionBase in_obj) -> MatrixNumbaCoefficient\n"
		""},
	 { "MatrixNumbaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaCoefficient_SetTime(MatrixNumbaCoefficient self, double t)"},
	 { "MatrixNumbaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "MatrixNumbaCoefficient_Eval(MatrixNumbaCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixNumbaCoefficient", _wrap_delete_MatrixNumbaCoefficient, METH_O, "delete_MatrixNumbaCoefficient(MatrixNumbaCoefficient self)"},
	 { "MatrixNumbaCoefficient_swigregister", MatrixNumbaCoefficient_swigregister, METH_O, NULL},
	 { "MatrixNumbaCoefficient_swiginit", MatrixNumbaCoefficient_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "Coefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_Coefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(Coefficient self, double t)"},
	 { "Coefficient_GetTime", _wrap_Coefficient_GetTime, METH_O, "GetTime(Coefficient self) -> double"},
	 { "Coefficient_Eval", _wrap_Coefficient_Eval, METH_VARARGS, "\n"
		"Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip) -> double\n"
		"Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip, double t) -> double\n"
		""},
	 { "Coefficient_Project", (PyCFunction)(void(*)(void))_wrap_Coefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(Coefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_Coefficient", _wrap_delete_Coefficient, METH_O, "delete_Coefficient(Coefficient self)"},
	 { "Coefficient_swigregister", Coefficient_swigregister, METH_O, NULL},
	 { "ConstantCoefficient_constant_set", _wrap_ConstantCoefficient_constant_set, METH_VARARGS, "ConstantCoefficient_constant_set(ConstantCoefficient self, double constant)"},
	 { "ConstantCoefficient_constant_get", _wrap_ConstantCoefficient_constant_get, METH_O, "ConstantCoefficient_constant_get(ConstantCoefficient self) -> double"},
	 { "new_ConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_ConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_ConstantCoefficient(double c=1.0) -> ConstantCoefficient"},
	 { "ConstantCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ConstantCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(ConstantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "ConstantCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_ConstantCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(ConstantCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_ConstantCoefficient", _wrap_delete_ConstantCoefficient, METH_O, "delete_ConstantCoefficient(ConstantCoefficient self)"},
	 { "ConstantCoefficient_swigregister", ConstantCoefficient_swigregister, METH_O, NULL},
	 { "ConstantCoefficient_swiginit", ConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWConstCoefficient", _wrap_new_PWConstCoefficient, METH_VARARGS, "\n"
		"PWConstCoefficient(int NumOfSubD=0)\n"
		"new_PWConstCoefficient(Vector c) -> PWConstCoefficient\n"
		""},
	 { "PWConstCoefficient_UpdateConstants", (PyCFunction)(void(*)(void))_wrap_PWConstCoefficient_UpdateConstants, METH_VARARGS|METH_KEYWORDS, "UpdateConstants(PWConstCoefficient self, Vector c)"},
	 { "PWConstCoefficient___call__", (PyCFunction)(void(*)(void))_wrap_PWConstCoefficient___call__, METH_VARARGS|METH_KEYWORDS, "__call__(PWConstCoefficient self, int i) -> double &"},
	 { "PWConstCoefficient_GetNConst", _wrap_PWConstCoefficient_GetNConst, METH_O, "GetNConst(PWConstCoefficient self) -> int"},
	 { "PWConstCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PWConstCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(PWConstCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_PWConstCoefficient", _wrap_delete_PWConstCoefficient, METH_O, "delete_PWConstCoefficient(PWConstCoefficient self)"},
	 { "PWConstCoefficient_swigregister", PWConstCoefficient_swigregister, METH_O, NULL},
	 { "PWConstCoefficient_swiginit", PWConstCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWCoefficient", _wrap_new_PWCoefficient, METH_VARARGS, "\n"
		"PWCoefficient()\n"
		"new_PWCoefficient(intArray attr, mfem::Array< mfem::Coefficient * > const & coefs) -> PWCoefficient\n"
		""},
	 { "PWCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(PWCoefficient self, double t)"},
	 { "PWCoefficient_UpdateCoefficients", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_UpdateCoefficients, METH_VARARGS|METH_KEYWORDS, "UpdateCoefficients(PWCoefficient self, intArray attr, mfem::Array< mfem::Coefficient * > const & coefs)"},
	 { "PWCoefficient_UpdateCoefficient", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_UpdateCoefficient, METH_VARARGS|METH_KEYWORDS, "UpdateCoefficient(PWCoefficient self, int attr, Coefficient coef)"},
	 { "PWCoefficient_ZeroCoefficient", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_ZeroCoefficient, METH_VARARGS|METH_KEYWORDS, "ZeroCoefficient(PWCoefficient self, int attr)"},
	 { "PWCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PWCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(PWCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_PWCoefficient", _wrap_delete_PWCoefficient, METH_O, "delete_PWCoefficient(PWCoefficient self)"},
	 { "PWCoefficient_swigregister", PWCoefficient_swigregister, METH_O, NULL},
	 { "PWCoefficient_swiginit", PWCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_FunctionCoefficient", _wrap_new_FunctionCoefficient, METH_VARARGS, "\n"
		"FunctionCoefficient(std::function< double (mfem::Vector const &) > F)\n"
		"FunctionCoefficient(std::function< double (mfem::Vector const &,double) > TDF)\n"
		"FunctionCoefficient(double (*)(mfem::Vector &) f)\n"
		"new_FunctionCoefficient(double (*)(mfem::Vector &,double) tdf) -> FunctionCoefficient\n"
		""},
	 { "FunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_FunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(FunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_FunctionCoefficient", _wrap_delete_FunctionCoefficient, METH_O, "delete_FunctionCoefficient(FunctionCoefficient self)"},
	 { "FunctionCoefficient_swigregister", FunctionCoefficient_swigregister, METH_O, NULL},
	 { "FunctionCoefficient_swiginit", FunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_GridFunctionCoefficient", _wrap_new_GridFunctionCoefficient, METH_VARARGS, "\n"
		"GridFunctionCoefficient()\n"
		"new_GridFunctionCoefficient(mfem::GridFunction const * gf, int comp=1) -> GridFunctionCoefficient\n"
		""},
	 { "GridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_GridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "SetGridFunction(GridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "GridFunctionCoefficient_GetGridFunction", _wrap_GridFunctionCoefficient_GetGridFunction, METH_O, "GetGridFunction(GridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "GridFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_GridFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(GridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "GridFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_GridFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(GridFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_GridFunctionCoefficient", _wrap_delete_GridFunctionCoefficient, METH_O, "delete_GridFunctionCoefficient(GridFunctionCoefficient self)"},
	 { "GridFunctionCoefficient_swigregister", GridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "GridFunctionCoefficient_swiginit", GridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_TransformedCoefficient", _wrap_new_TransformedCoefficient, METH_VARARGS, "\n"
		"TransformedCoefficient(Coefficient q, double (*)(double) F)\n"
		"new_TransformedCoefficient(Coefficient q1, Coefficient q2, double (*)(double,double) F) -> TransformedCoefficient\n"
		""},
	 { "TransformedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_TransformedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(TransformedCoefficient self, double t)"},
	 { "TransformedCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_TransformedCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(TransformedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_TransformedCoefficient", _wrap_delete_TransformedCoefficient, METH_O, "delete_TransformedCoefficient(TransformedCoefficient self)"},
	 { "TransformedCoefficient_swigregister", TransformedCoefficient_swigregister, METH_O, NULL},
	 { "TransformedCoefficient_swiginit", TransformedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_DeltaCoefficient", _wrap_new_DeltaCoefficient, METH_VARARGS, "\n"
		"DeltaCoefficient()\n"
		"DeltaCoefficient(double x, double s)\n"
		"DeltaCoefficient(double x, double y, double s)\n"
		"new_DeltaCoefficient(double x, double y, double z, double s) -> DeltaCoefficient\n"
		""},
	 { "DeltaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(DeltaCoefficient self, double t)"},
	 { "DeltaCoefficient_SetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "SetDeltaCenter(DeltaCoefficient self, Vector center)"},
	 { "DeltaCoefficient_SetScale", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetScale, METH_VARARGS|METH_KEYWORDS, "SetScale(DeltaCoefficient self, double s_)"},
	 { "DeltaCoefficient_SetFunction", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetFunction, METH_VARARGS|METH_KEYWORDS, "SetFunction(DeltaCoefficient self, double (*)(double) f)"},
	 { "DeltaCoefficient_SetTol", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetTol, METH_VARARGS|METH_KEYWORDS, "SetTol(DeltaCoefficient self, double tol_)"},
	 { "DeltaCoefficient_SetWeight", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_SetWeight, METH_VARARGS|METH_KEYWORDS, "SetWeight(DeltaCoefficient self, Coefficient w)"},
	 { "DeltaCoefficient_Center", _wrap_DeltaCoefficient_Center, METH_O, "Center(DeltaCoefficient self) -> double const *"},
	 { "DeltaCoefficient_Scale", _wrap_DeltaCoefficient_Scale, METH_O, "Scale(DeltaCoefficient self) -> double"},
	 { "DeltaCoefficient_Tol", _wrap_DeltaCoefficient_Tol, METH_O, "Tol(DeltaCoefficient self) -> double"},
	 { "DeltaCoefficient_Weight", _wrap_DeltaCoefficient_Weight, METH_O, "Weight(DeltaCoefficient self) -> Coefficient"},
	 { "DeltaCoefficient_GetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_GetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "GetDeltaCenter(DeltaCoefficient self, Vector center)"},
	 { "DeltaCoefficient_EvalDelta", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_EvalDelta, METH_VARARGS|METH_KEYWORDS, "EvalDelta(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "DeltaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_DeltaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_DeltaCoefficient", _wrap_delete_DeltaCoefficient, METH_O, "delete_DeltaCoefficient(DeltaCoefficient self)"},
	 { "DeltaCoefficient_swigregister", DeltaCoefficient_swigregister, METH_O, NULL},
	 { "DeltaCoefficient_swiginit", DeltaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_RestrictedCoefficient", (PyCFunction)(void(*)(void))_wrap_new_RestrictedCoefficient, METH_VARARGS|METH_KEYWORDS, "new_RestrictedCoefficient(Coefficient c_, intArray attr) -> RestrictedCoefficient"},
	 { "RestrictedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_RestrictedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(RestrictedCoefficient self, double t)"},
	 { "RestrictedCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_RestrictedCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(RestrictedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_RestrictedCoefficient", _wrap_delete_RestrictedCoefficient, METH_O, "delete_RestrictedCoefficient(RestrictedCoefficient self)"},
	 { "RestrictedCoefficient_swigregister", RestrictedCoefficient_swigregister, METH_O, NULL},
	 { "RestrictedCoefficient_swiginit", RestrictedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "VectorCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorCoefficient self, double t)"},
	 { "VectorCoefficient_GetTime", _wrap_VectorCoefficient_GetTime, METH_O, "GetTime(VectorCoefficient self) -> double"},
	 { "VectorCoefficient_GetVDim", _wrap_VectorCoefficient_GetVDim, METH_O, "GetVDim(VectorCoefficient self) -> int"},
	 { "VectorCoefficient_Eval", _wrap_VectorCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(VectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "VectorCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_VectorCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(VectorCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_VectorCoefficient", _wrap_delete_VectorCoefficient, METH_O, "delete_VectorCoefficient(VectorCoefficient self)"},
	 { "VectorCoefficient_swigregister", VectorCoefficient_swigregister, METH_O, NULL},
	 { "new_VectorConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorConstantCoefficient(Vector v) -> VectorConstantCoefficient"},
	 { "VectorConstantCoefficient_Eval", _wrap_VectorConstantCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(VectorConstantCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "VectorConstantCoefficient_GetVec", _wrap_VectorConstantCoefficient_GetVec, METH_O, "GetVec(VectorConstantCoefficient self) -> Vector"},
	 { "delete_VectorConstantCoefficient", _wrap_delete_VectorConstantCoefficient, METH_O, "delete_VectorConstantCoefficient(VectorConstantCoefficient self)"},
	 { "VectorConstantCoefficient_swigregister", VectorConstantCoefficient_swigregister, METH_O, NULL},
	 { "VectorConstantCoefficient_swiginit", VectorConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWVectorCoefficient", _wrap_new_PWVectorCoefficient, METH_VARARGS, "\n"
		"PWVectorCoefficient(int vd)\n"
		"new_PWVectorCoefficient(int vd, intArray attr, mfem::Array< mfem::VectorCoefficient * > const & coefs) -> PWVectorCoefficient\n"
		""},
	 { "PWVectorCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(PWVectorCoefficient self, double t)"},
	 { "PWVectorCoefficient_UpdateCoefficients", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_UpdateCoefficients, METH_VARARGS|METH_KEYWORDS, "UpdateCoefficients(PWVectorCoefficient self, intArray attr, mfem::Array< mfem::VectorCoefficient * > const & coefs)"},
	 { "PWVectorCoefficient_UpdateCoefficient", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_UpdateCoefficient, METH_VARARGS|METH_KEYWORDS, "UpdateCoefficient(PWVectorCoefficient self, int attr, VectorCoefficient coef)"},
	 { "PWVectorCoefficient_ZeroCoefficient", (PyCFunction)(void(*)(void))_wrap_PWVectorCoefficient_ZeroCoefficient, METH_VARARGS|METH_KEYWORDS, "ZeroCoefficient(PWVectorCoefficient self, int attr)"},
	 { "PWVectorCoefficient_Eval", _wrap_PWVectorCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(PWVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(PWVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_PWVectorCoefficient", _wrap_delete_PWVectorCoefficient, METH_O, "delete_PWVectorCoefficient(PWVectorCoefficient self)"},
	 { "PWVectorCoefficient_swigregister", PWVectorCoefficient_swigregister, METH_O, NULL},
	 { "PWVectorCoefficient_swiginit", PWVectorCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorFunctionCoefficient", _wrap_new_VectorFunctionCoefficient, METH_VARARGS, "\n"
		"VectorFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > F, Coefficient q=None)\n"
		"new_VectorFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::Vector &) > TDF, Coefficient q=None) -> VectorFunctionCoefficient\n"
		""},
	 { "VectorFunctionCoefficient_Eval", _wrap_VectorFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(VectorFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_VectorFunctionCoefficient", _wrap_delete_VectorFunctionCoefficient, METH_O, "delete_VectorFunctionCoefficient(VectorFunctionCoefficient self)"},
	 { "VectorFunctionCoefficient_swigregister", VectorFunctionCoefficient_swigregister, METH_O, NULL},
	 { "VectorFunctionCoefficient_swiginit", VectorFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorArrayCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorArrayCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorArrayCoefficient(int dim) -> VectorArrayCoefficient"},
	 { "VectorArrayCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorArrayCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorArrayCoefficient self, double t)"},
	 { "VectorArrayCoefficient_GetCoeff", (PyCFunction)(void(*)(void))_wrap_VectorArrayCoefficient_GetCoeff, METH_VARARGS|METH_KEYWORDS, "GetCoeff(VectorArrayCoefficient self, int i) -> Coefficient"},
	 { "VectorArrayCoefficient_GetCoeffs", _wrap_VectorArrayCoefficient_GetCoeffs, METH_O, "GetCoeffs(VectorArrayCoefficient self) -> mfem::Coefficient **"},
	 { "VectorArrayCoefficient_Set", (PyCFunction)(void(*)(void))_wrap_VectorArrayCoefficient_Set, METH_VARARGS|METH_KEYWORDS, "Set(VectorArrayCoefficient self, int i, Coefficient c, bool own=True)"},
	 { "VectorArrayCoefficient_Eval", _wrap_VectorArrayCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorArrayCoefficient self, int i, ElementTransformation T, IntegrationPoint ip) -> double\n"
		"Eval(VectorArrayCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(VectorArrayCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_VectorArrayCoefficient", _wrap_delete_VectorArrayCoefficient, METH_O, "delete_VectorArrayCoefficient(VectorArrayCoefficient self)"},
	 { "VectorArrayCoefficient_swigregister", VectorArrayCoefficient_swigregister, METH_O, NULL},
	 { "VectorArrayCoefficient_swiginit", VectorArrayCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorGridFunctionCoefficient", _wrap_new_VectorGridFunctionCoefficient, METH_VARARGS, "\n"
		"VectorGridFunctionCoefficient()\n"
		"new_VectorGridFunctionCoefficient(mfem::GridFunction const * gf) -> VectorGridFunctionCoefficient\n"
		""},
	 { "VectorGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_VectorGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "SetGridFunction(VectorGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "VectorGridFunctionCoefficient_GetGridFunction", _wrap_VectorGridFunctionCoefficient_GetGridFunction, METH_O, "GetGridFunction(VectorGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "VectorGridFunctionCoefficient_Eval", _wrap_VectorGridFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(VectorGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "VectorGridFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_VectorGridFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(VectorGridFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_VectorGridFunctionCoefficient", _wrap_delete_VectorGridFunctionCoefficient, METH_O, "delete_VectorGridFunctionCoefficient(VectorGridFunctionCoefficient self)"},
	 { "VectorGridFunctionCoefficient_swigregister", VectorGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "VectorGridFunctionCoefficient_swiginit", VectorGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_GradientGridFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_GradientGridFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_GradientGridFunctionCoefficient(mfem::GridFunction const * gf) -> GradientGridFunctionCoefficient"},
	 { "GradientGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_GradientGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "SetGridFunction(GradientGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "GradientGridFunctionCoefficient_GetGridFunction", _wrap_GradientGridFunctionCoefficient_GetGridFunction, METH_O, "GetGridFunction(GradientGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "GradientGridFunctionCoefficient_Eval", _wrap_GradientGridFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(GradientGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(GradientGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_GradientGridFunctionCoefficient", _wrap_delete_GradientGridFunctionCoefficient, METH_O, "delete_GradientGridFunctionCoefficient(GradientGridFunctionCoefficient self)"},
	 { "GradientGridFunctionCoefficient_swigregister", GradientGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "GradientGridFunctionCoefficient_swiginit", GradientGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_CurlGridFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_CurlGridFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_CurlGridFunctionCoefficient(mfem::GridFunction const * gf) -> CurlGridFunctionCoefficient"},
	 { "CurlGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_CurlGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "SetGridFunction(CurlGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "CurlGridFunctionCoefficient_GetGridFunction", _wrap_CurlGridFunctionCoefficient_GetGridFunction, METH_O, "GetGridFunction(CurlGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "CurlGridFunctionCoefficient_Eval", _wrap_CurlGridFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(CurlGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(CurlGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_CurlGridFunctionCoefficient", _wrap_delete_CurlGridFunctionCoefficient, METH_O, "delete_CurlGridFunctionCoefficient(CurlGridFunctionCoefficient self)"},
	 { "CurlGridFunctionCoefficient_swigregister", CurlGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "CurlGridFunctionCoefficient_swiginit", CurlGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_DivergenceGridFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_DivergenceGridFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_DivergenceGridFunctionCoefficient(mfem::GridFunction const * gf) -> DivergenceGridFunctionCoefficient"},
	 { "DivergenceGridFunctionCoefficient_SetGridFunction", (PyCFunction)(void(*)(void))_wrap_DivergenceGridFunctionCoefficient_SetGridFunction, METH_VARARGS|METH_KEYWORDS, "SetGridFunction(DivergenceGridFunctionCoefficient self, mfem::GridFunction const * gf)"},
	 { "DivergenceGridFunctionCoefficient_GetGridFunction", _wrap_DivergenceGridFunctionCoefficient_GetGridFunction, METH_O, "GetGridFunction(DivergenceGridFunctionCoefficient self) -> mfem::GridFunction const *"},
	 { "DivergenceGridFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_DivergenceGridFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(DivergenceGridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_DivergenceGridFunctionCoefficient", _wrap_delete_DivergenceGridFunctionCoefficient, METH_O, "delete_DivergenceGridFunctionCoefficient(DivergenceGridFunctionCoefficient self)"},
	 { "DivergenceGridFunctionCoefficient_swigregister", DivergenceGridFunctionCoefficient_swigregister, METH_O, NULL},
	 { "DivergenceGridFunctionCoefficient_swiginit", DivergenceGridFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorDeltaCoefficient", _wrap_new_VectorDeltaCoefficient, METH_VARARGS, "\n"
		"VectorDeltaCoefficient(int vdim_)\n"
		"VectorDeltaCoefficient(Vector dir_)\n"
		"VectorDeltaCoefficient(Vector dir_, double x, double s)\n"
		"VectorDeltaCoefficient(Vector dir_, double x, double y, double s)\n"
		"new_VectorDeltaCoefficient(Vector dir_, double x, double y, double z, double s) -> VectorDeltaCoefficient\n"
		""},
	 { "VectorDeltaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorDeltaCoefficient self, double t)"},
	 { "VectorDeltaCoefficient_SetDeltaCoefficient", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetDeltaCoefficient, METH_VARARGS|METH_KEYWORDS, "SetDeltaCoefficient(VectorDeltaCoefficient self, DeltaCoefficient d_)"},
	 { "VectorDeltaCoefficient_GetDeltaCoefficient", _wrap_VectorDeltaCoefficient_GetDeltaCoefficient, METH_O, "GetDeltaCoefficient(VectorDeltaCoefficient self) -> DeltaCoefficient"},
	 { "VectorDeltaCoefficient_SetScale", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetScale, METH_VARARGS|METH_KEYWORDS, "SetScale(VectorDeltaCoefficient self, double s)"},
	 { "VectorDeltaCoefficient_SetDirection", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetDirection, METH_VARARGS|METH_KEYWORDS, "SetDirection(VectorDeltaCoefficient self, Vector d_)"},
	 { "VectorDeltaCoefficient_SetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_SetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "SetDeltaCenter(VectorDeltaCoefficient self, Vector center)"},
	 { "VectorDeltaCoefficient_GetDeltaCenter", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_GetDeltaCenter, METH_VARARGS|METH_KEYWORDS, "GetDeltaCenter(VectorDeltaCoefficient self, Vector center)"},
	 { "VectorDeltaCoefficient_EvalDelta", (PyCFunction)(void(*)(void))_wrap_VectorDeltaCoefficient_EvalDelta, METH_VARARGS|METH_KEYWORDS, "EvalDelta(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"},
	 { "VectorDeltaCoefficient_Eval", _wrap_VectorDeltaCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorDeltaCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_VectorDeltaCoefficient", _wrap_delete_VectorDeltaCoefficient, METH_O, "delete_VectorDeltaCoefficient(VectorDeltaCoefficient self)"},
	 { "VectorDeltaCoefficient_swigregister", VectorDeltaCoefficient_swigregister, METH_O, NULL},
	 { "VectorDeltaCoefficient_swiginit", VectorDeltaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorRestrictedCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorRestrictedCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorRestrictedCoefficient(VectorCoefficient vc, intArray attr) -> VectorRestrictedCoefficient"},
	 { "VectorRestrictedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorRestrictedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorRestrictedCoefficient self, double t)"},
	 { "VectorRestrictedCoefficient_Eval", _wrap_VectorRestrictedCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorRestrictedCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(VectorRestrictedCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_VectorRestrictedCoefficient", _wrap_delete_VectorRestrictedCoefficient, METH_O, "delete_VectorRestrictedCoefficient(VectorRestrictedCoefficient self)"},
	 { "VectorRestrictedCoefficient_swigregister", VectorRestrictedCoefficient_swigregister, METH_O, NULL},
	 { "VectorRestrictedCoefficient_swiginit", VectorRestrictedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "MatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixCoefficient self, double t)"},
	 { "MatrixCoefficient_GetTime", _wrap_MatrixCoefficient_GetTime, METH_O, "GetTime(MatrixCoefficient self) -> double"},
	 { "MatrixCoefficient_GetHeight", _wrap_MatrixCoefficient_GetHeight, METH_O, "GetHeight(MatrixCoefficient self) -> int"},
	 { "MatrixCoefficient_GetWidth", _wrap_MatrixCoefficient_GetWidth, METH_O, "GetWidth(MatrixCoefficient self) -> int"},
	 { "MatrixCoefficient_GetVDim", _wrap_MatrixCoefficient_GetVDim, METH_O, "GetVDim(MatrixCoefficient self) -> int"},
	 { "MatrixCoefficient_IsSymmetric", _wrap_MatrixCoefficient_IsSymmetric, METH_O, "IsSymmetric(MatrixCoefficient self) -> bool"},
	 { "MatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(MatrixCoefficient self, mfem::QuadratureFunction & qf, bool transpose=False)"},
	 { "MatrixCoefficient_EvalSymmetric", (PyCFunction)(void(*)(void))_wrap_MatrixCoefficient_EvalSymmetric, METH_VARARGS|METH_KEYWORDS, "EvalSymmetric(MatrixCoefficient self, Vector K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixCoefficient", _wrap_delete_MatrixCoefficient, METH_O, "delete_MatrixCoefficient(MatrixCoefficient self)"},
	 { "MatrixCoefficient_swigregister", MatrixCoefficient_swigregister, METH_O, NULL},
	 { "new_MatrixConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixConstantCoefficient(DenseMatrix m) -> MatrixConstantCoefficient"},
	 { "MatrixConstantCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixConstantCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixConstantCoefficient_GetMatrix", _wrap_MatrixConstantCoefficient_GetMatrix, METH_O, "GetMatrix(MatrixConstantCoefficient self) -> DenseMatrix"},
	 { "delete_MatrixConstantCoefficient", _wrap_delete_MatrixConstantCoefficient, METH_O, "delete_MatrixConstantCoefficient(MatrixConstantCoefficient self)"},
	 { "MatrixConstantCoefficient_swigregister", MatrixConstantCoefficient_swigregister, METH_O, NULL},
	 { "MatrixConstantCoefficient_swiginit", MatrixConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PWMatrixCoefficient", _wrap_new_PWMatrixCoefficient, METH_VARARGS, "\n"
		"PWMatrixCoefficient(int dim, bool symm=False)\n"
		"PWMatrixCoefficient(int h, int w, bool symm=False)\n"
		"PWMatrixCoefficient(int dim, intArray attr, mfem::Array< mfem::MatrixCoefficient * > const & coefs, bool symm=False)\n"
		"new_PWMatrixCoefficient(int h, int w, intArray attr, mfem::Array< mfem::MatrixCoefficient * > const & coefs, bool symm=False) -> PWMatrixCoefficient\n"
		""},
	 { "PWMatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(PWMatrixCoefficient self, double t)"},
	 { "PWMatrixCoefficient_UpdateCoefficients", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_UpdateCoefficients, METH_VARARGS|METH_KEYWORDS, "UpdateCoefficients(PWMatrixCoefficient self, intArray attr, mfem::Array< mfem::MatrixCoefficient * > const & coefs)"},
	 { "PWMatrixCoefficient_UpdateCoefficient", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_UpdateCoefficient, METH_VARARGS|METH_KEYWORDS, "UpdateCoefficient(PWMatrixCoefficient self, int attr, MatrixCoefficient coef)"},
	 { "PWMatrixCoefficient_ZeroCoefficient", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_ZeroCoefficient, METH_VARARGS|METH_KEYWORDS, "ZeroCoefficient(PWMatrixCoefficient self, int attr)"},
	 { "PWMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PWMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(PWMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_PWMatrixCoefficient", _wrap_delete_PWMatrixCoefficient, METH_O, "delete_PWMatrixCoefficient(PWMatrixCoefficient self)"},
	 { "PWMatrixCoefficient_swigregister", PWMatrixCoefficient_swigregister, METH_O, NULL},
	 { "PWMatrixCoefficient_swiginit", PWMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixFunctionCoefficient", _wrap_new_MatrixFunctionCoefficient, METH_VARARGS, "\n"
		"MatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > F, Coefficient q=None)\n"
		"MatrixFunctionCoefficient(DenseMatrix m, Coefficient q)\n"
		"MatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > SymmF, Coefficient q=None)\n"
		"new_MatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > TDF, Coefficient q=None) -> MatrixFunctionCoefficient\n"
		""},
	 { "MatrixFunctionCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixFunctionCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixFunctionCoefficient self, double t)"},
	 { "MatrixFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixFunctionCoefficient_EvalSymmetric", (PyCFunction)(void(*)(void))_wrap_MatrixFunctionCoefficient_EvalSymmetric, METH_VARARGS|METH_KEYWORDS, "EvalSymmetric(MatrixFunctionCoefficient self, Vector K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixFunctionCoefficient", _wrap_delete_MatrixFunctionCoefficient, METH_O, "delete_MatrixFunctionCoefficient(MatrixFunctionCoefficient self)"},
	 { "MatrixFunctionCoefficient_swigregister", MatrixFunctionCoefficient_swigregister, METH_O, NULL},
	 { "MatrixFunctionCoefficient_swiginit", MatrixFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixArrayCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixArrayCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixArrayCoefficient(int dim) -> MatrixArrayCoefficient"},
	 { "MatrixArrayCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixArrayCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixArrayCoefficient self, double t)"},
	 { "MatrixArrayCoefficient_GetCoeff", (PyCFunction)(void(*)(void))_wrap_MatrixArrayCoefficient_GetCoeff, METH_VARARGS|METH_KEYWORDS, "GetCoeff(MatrixArrayCoefficient self, int i, int j) -> Coefficient"},
	 { "MatrixArrayCoefficient_Set", (PyCFunction)(void(*)(void))_wrap_MatrixArrayCoefficient_Set, METH_VARARGS|METH_KEYWORDS, "Set(MatrixArrayCoefficient self, int i, int j, Coefficient c, bool own=True)"},
	 { "MatrixArrayCoefficient_Eval", _wrap_MatrixArrayCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(MatrixArrayCoefficient self, int i, int j, ElementTransformation T, IntegrationPoint ip) -> double\n"
		"Eval(MatrixArrayCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_MatrixArrayCoefficient", _wrap_delete_MatrixArrayCoefficient, METH_O, "delete_MatrixArrayCoefficient(MatrixArrayCoefficient self)"},
	 { "MatrixArrayCoefficient_swigregister", MatrixArrayCoefficient_swigregister, METH_O, NULL},
	 { "MatrixArrayCoefficient_swiginit", MatrixArrayCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixRestrictedCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixRestrictedCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixRestrictedCoefficient(MatrixCoefficient mc, intArray attr) -> MatrixRestrictedCoefficient"},
	 { "MatrixRestrictedCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixRestrictedCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixRestrictedCoefficient self, double t)"},
	 { "MatrixRestrictedCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixRestrictedCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixRestrictedCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixRestrictedCoefficient", _wrap_delete_MatrixRestrictedCoefficient, METH_O, "delete_MatrixRestrictedCoefficient(MatrixRestrictedCoefficient self)"},
	 { "MatrixRestrictedCoefficient_swigregister", MatrixRestrictedCoefficient_swigregister, METH_O, NULL},
	 { "MatrixRestrictedCoefficient_swiginit", MatrixRestrictedCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_SumCoefficient", _wrap_new_SumCoefficient, METH_VARARGS, "\n"
		"SumCoefficient(double A, Coefficient B, double alpha_=1.0, double beta_=1.0)\n"
		"new_SumCoefficient(Coefficient A, Coefficient B, double alpha_=1.0, double beta_=1.0) -> SumCoefficient\n"
		""},
	 { "SumCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(SumCoefficient self, double t)"},
	 { "SumCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SetAConst(SumCoefficient self, double A)"},
	 { "SumCoefficient_GetAConst", _wrap_SumCoefficient_GetAConst, METH_O, "GetAConst(SumCoefficient self) -> double"},
	 { "SumCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(SumCoefficient self, Coefficient A)"},
	 { "SumCoefficient_GetACoef", _wrap_SumCoefficient_GetACoef, METH_O, "GetACoef(SumCoefficient self) -> Coefficient"},
	 { "SumCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(SumCoefficient self, Coefficient B)"},
	 { "SumCoefficient_GetBCoef", _wrap_SumCoefficient_GetBCoef, METH_O, "GetBCoef(SumCoefficient self) -> Coefficient"},
	 { "SumCoefficient_SetAlpha", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetAlpha, METH_VARARGS|METH_KEYWORDS, "SetAlpha(SumCoefficient self, double alpha_)"},
	 { "SumCoefficient_GetAlpha", _wrap_SumCoefficient_GetAlpha, METH_O, "GetAlpha(SumCoefficient self) -> double"},
	 { "SumCoefficient_SetBeta", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_SetBeta, METH_VARARGS|METH_KEYWORDS, "SetBeta(SumCoefficient self, double beta_)"},
	 { "SumCoefficient_GetBeta", _wrap_SumCoefficient_GetBeta, METH_O, "GetBeta(SumCoefficient self) -> double"},
	 { "SumCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_SumCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(SumCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_SumCoefficient", _wrap_delete_SumCoefficient, METH_O, "delete_SumCoefficient(SumCoefficient self)"},
	 { "SumCoefficient_swigregister", SumCoefficient_swigregister, METH_O, NULL},
	 { "SumCoefficient_swiginit", SumCoefficient_swiginit, METH_VARARGS, NULL},
	 { "SymmetricMatrixCoefficient_GetSize", _wrap_SymmetricMatrixCoefficient_GetSize, METH_O, "GetSize(SymmetricMatrixCoefficient self) -> int"},
	 { "SymmetricMatrixCoefficient_ProjectSymmetric", (PyCFunction)(void(*)(void))_wrap_SymmetricMatrixCoefficient_ProjectSymmetric, METH_VARARGS|METH_KEYWORDS, "ProjectSymmetric(SymmetricMatrixCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "SymmetricMatrixCoefficient_Eval", _wrap_SymmetricMatrixCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(SymmetricMatrixCoefficient self, DenseSymmetricMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(SymmetricMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "SymmetricMatrixCoefficient_GetMatrix", _wrap_SymmetricMatrixCoefficient_GetMatrix, METH_O, "GetMatrix(SymmetricMatrixCoefficient self) -> DenseSymmetricMatrix"},
	 { "delete_SymmetricMatrixCoefficient", _wrap_delete_SymmetricMatrixCoefficient, METH_O, "delete_SymmetricMatrixCoefficient(SymmetricMatrixCoefficient self)"},
	 { "SymmetricMatrixCoefficient_swigregister", SymmetricMatrixCoefficient_swigregister, METH_O, NULL},
	 { "new_SymmetricMatrixConstantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_SymmetricMatrixConstantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_SymmetricMatrixConstantCoefficient(DenseSymmetricMatrix m) -> SymmetricMatrixConstantCoefficient"},
	 { "SymmetricMatrixConstantCoefficient_Eval", _wrap_SymmetricMatrixConstantCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(SymmetricMatrixConstantCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(SymmetricMatrixConstantCoefficient self, DenseSymmetricMatrix M, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_SymmetricMatrixConstantCoefficient", _wrap_delete_SymmetricMatrixConstantCoefficient, METH_O, "delete_SymmetricMatrixConstantCoefficient(SymmetricMatrixConstantCoefficient self)"},
	 { "SymmetricMatrixConstantCoefficient_swigregister", SymmetricMatrixConstantCoefficient_swigregister, METH_O, NULL},
	 { "SymmetricMatrixConstantCoefficient_swiginit", SymmetricMatrixConstantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricMatrixFunctionCoefficient", _wrap_new_SymmetricMatrixFunctionCoefficient, METH_VARARGS, "\n"
		"SymmetricMatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > F, Coefficient q=None)\n"
		"SymmetricMatrixFunctionCoefficient(DenseSymmetricMatrix m, Coefficient q)\n"
		"new_SymmetricMatrixFunctionCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) > TDF, Coefficient q=None) -> SymmetricMatrixFunctionCoefficient\n"
		""},
	 { "SymmetricMatrixFunctionCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_SymmetricMatrixFunctionCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(SymmetricMatrixFunctionCoefficient self, double t)"},
	 { "SymmetricMatrixFunctionCoefficient_Eval", _wrap_SymmetricMatrixFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(SymmetricMatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(SymmetricMatrixFunctionCoefficient self, DenseSymmetricMatrix K, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_SymmetricMatrixFunctionCoefficient", _wrap_delete_SymmetricMatrixFunctionCoefficient, METH_O, "delete_SymmetricMatrixFunctionCoefficient(SymmetricMatrixFunctionCoefficient self)"},
	 { "SymmetricMatrixFunctionCoefficient_swigregister", SymmetricMatrixFunctionCoefficient_swigregister, METH_O, NULL},
	 { "SymmetricMatrixFunctionCoefficient_swiginit", SymmetricMatrixFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_ProductCoefficient", _wrap_new_ProductCoefficient, METH_VARARGS, "\n"
		"ProductCoefficient(double A, Coefficient B)\n"
		"new_ProductCoefficient(Coefficient A, Coefficient B) -> ProductCoefficient\n"
		""},
	 { "ProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(ProductCoefficient self, double t)"},
	 { "ProductCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SetAConst(ProductCoefficient self, double A)"},
	 { "ProductCoefficient_GetAConst", _wrap_ProductCoefficient_GetAConst, METH_O, "GetAConst(ProductCoefficient self) -> double"},
	 { "ProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(ProductCoefficient self, Coefficient A)"},
	 { "ProductCoefficient_GetACoef", _wrap_ProductCoefficient_GetACoef, METH_O, "GetACoef(ProductCoefficient self) -> Coefficient"},
	 { "ProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(ProductCoefficient self, Coefficient B)"},
	 { "ProductCoefficient_GetBCoef", _wrap_ProductCoefficient_GetBCoef, METH_O, "GetBCoef(ProductCoefficient self) -> Coefficient"},
	 { "ProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(ProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_ProductCoefficient", _wrap_delete_ProductCoefficient, METH_O, "delete_ProductCoefficient(ProductCoefficient self)"},
	 { "ProductCoefficient_swigregister", ProductCoefficient_swigregister, METH_O, NULL},
	 { "ProductCoefficient_swiginit", ProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_RatioCoefficient", _wrap_new_RatioCoefficient, METH_VARARGS, "\n"
		"RatioCoefficient(double A, Coefficient B)\n"
		"RatioCoefficient(Coefficient A, Coefficient B)\n"
		"new_RatioCoefficient(Coefficient A, double B) -> RatioCoefficient\n"
		""},
	 { "RatioCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(RatioCoefficient self, double t)"},
	 { "RatioCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SetAConst(RatioCoefficient self, double A)"},
	 { "RatioCoefficient_GetAConst", _wrap_RatioCoefficient_GetAConst, METH_O, "GetAConst(RatioCoefficient self) -> double"},
	 { "RatioCoefficient_SetBConst", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetBConst, METH_VARARGS|METH_KEYWORDS, "SetBConst(RatioCoefficient self, double B)"},
	 { "RatioCoefficient_GetBConst", _wrap_RatioCoefficient_GetBConst, METH_O, "GetBConst(RatioCoefficient self) -> double"},
	 { "RatioCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(RatioCoefficient self, Coefficient A)"},
	 { "RatioCoefficient_GetACoef", _wrap_RatioCoefficient_GetACoef, METH_O, "GetACoef(RatioCoefficient self) -> Coefficient"},
	 { "RatioCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(RatioCoefficient self, Coefficient B)"},
	 { "RatioCoefficient_GetBCoef", _wrap_RatioCoefficient_GetBCoef, METH_O, "GetBCoef(RatioCoefficient self) -> Coefficient"},
	 { "RatioCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_RatioCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(RatioCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_RatioCoefficient", _wrap_delete_RatioCoefficient, METH_O, "delete_RatioCoefficient(RatioCoefficient self)"},
	 { "RatioCoefficient_swigregister", RatioCoefficient_swigregister, METH_O, NULL},
	 { "RatioCoefficient_swiginit", RatioCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_PowerCoefficient", (PyCFunction)(void(*)(void))_wrap_new_PowerCoefficient, METH_VARARGS|METH_KEYWORDS, "new_PowerCoefficient(Coefficient A, double p_) -> PowerCoefficient"},
	 { "PowerCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(PowerCoefficient self, double t)"},
	 { "PowerCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(PowerCoefficient self, Coefficient A)"},
	 { "PowerCoefficient_GetACoef", _wrap_PowerCoefficient_GetACoef, METH_O, "GetACoef(PowerCoefficient self) -> Coefficient"},
	 { "PowerCoefficient_SetExponent", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_SetExponent, METH_VARARGS|METH_KEYWORDS, "SetExponent(PowerCoefficient self, double p_)"},
	 { "PowerCoefficient_GetExponent", _wrap_PowerCoefficient_GetExponent, METH_O, "GetExponent(PowerCoefficient self) -> double"},
	 { "PowerCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_PowerCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(PowerCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_PowerCoefficient", _wrap_delete_PowerCoefficient, METH_O, "delete_PowerCoefficient(PowerCoefficient self)"},
	 { "PowerCoefficient_swigregister", PowerCoefficient_swigregister, METH_O, NULL},
	 { "PowerCoefficient_swiginit", PowerCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_InnerProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_InnerProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_InnerProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> InnerProductCoefficient"},
	 { "InnerProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(InnerProductCoefficient self, double t)"},
	 { "InnerProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(InnerProductCoefficient self, VectorCoefficient A)"},
	 { "InnerProductCoefficient_GetACoef", _wrap_InnerProductCoefficient_GetACoef, METH_O, "GetACoef(InnerProductCoefficient self) -> VectorCoefficient"},
	 { "InnerProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(InnerProductCoefficient self, VectorCoefficient B)"},
	 { "InnerProductCoefficient_GetBCoef", _wrap_InnerProductCoefficient_GetBCoef, METH_O, "GetBCoef(InnerProductCoefficient self) -> VectorCoefficient"},
	 { "InnerProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_InnerProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(InnerProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_InnerProductCoefficient", _wrap_delete_InnerProductCoefficient, METH_O, "delete_InnerProductCoefficient(InnerProductCoefficient self)"},
	 { "InnerProductCoefficient_swigregister", InnerProductCoefficient_swigregister, METH_O, NULL},
	 { "InnerProductCoefficient_swiginit", InnerProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorRotProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorRotProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorRotProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> VectorRotProductCoefficient"},
	 { "VectorRotProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorRotProductCoefficient self, double t)"},
	 { "VectorRotProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(VectorRotProductCoefficient self, VectorCoefficient A)"},
	 { "VectorRotProductCoefficient_GetACoef", _wrap_VectorRotProductCoefficient_GetACoef, METH_O, "GetACoef(VectorRotProductCoefficient self) -> VectorCoefficient"},
	 { "VectorRotProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(VectorRotProductCoefficient self, VectorCoefficient B)"},
	 { "VectorRotProductCoefficient_GetBCoef", _wrap_VectorRotProductCoefficient_GetBCoef, METH_O, "GetBCoef(VectorRotProductCoefficient self) -> VectorCoefficient"},
	 { "VectorRotProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_VectorRotProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(VectorRotProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_VectorRotProductCoefficient", _wrap_delete_VectorRotProductCoefficient, METH_O, "delete_VectorRotProductCoefficient(VectorRotProductCoefficient self)"},
	 { "VectorRotProductCoefficient_swigregister", VectorRotProductCoefficient_swigregister, METH_O, NULL},
	 { "VectorRotProductCoefficient_swiginit", VectorRotProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_DeterminantCoefficient", (PyCFunction)(void(*)(void))_wrap_new_DeterminantCoefficient, METH_VARARGS|METH_KEYWORDS, "new_DeterminantCoefficient(MatrixCoefficient A) -> DeterminantCoefficient"},
	 { "DeterminantCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_DeterminantCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(DeterminantCoefficient self, double t)"},
	 { "DeterminantCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_DeterminantCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(DeterminantCoefficient self, MatrixCoefficient A)"},
	 { "DeterminantCoefficient_GetACoef", _wrap_DeterminantCoefficient_GetACoef, METH_O, "GetACoef(DeterminantCoefficient self) -> MatrixCoefficient"},
	 { "DeterminantCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_DeterminantCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(DeterminantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_DeterminantCoefficient", _wrap_delete_DeterminantCoefficient, METH_O, "delete_DeterminantCoefficient(DeterminantCoefficient self)"},
	 { "DeterminantCoefficient_swigregister", DeterminantCoefficient_swigregister, METH_O, NULL},
	 { "DeterminantCoefficient_swiginit", DeterminantCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorSumCoefficient", _wrap_new_VectorSumCoefficient, METH_VARARGS, "\n"
		"VectorSumCoefficient(int dim)\n"
		"VectorSumCoefficient(VectorCoefficient A, VectorCoefficient B, double alpha_=1.0, double beta_=1.0)\n"
		"new_VectorSumCoefficient(VectorCoefficient A_, VectorCoefficient B_, Coefficient alpha_, Coefficient beta_) -> VectorSumCoefficient\n"
		""},
	 { "VectorSumCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorSumCoefficient self, double t)"},
	 { "VectorSumCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(VectorSumCoefficient self, VectorCoefficient A_)"},
	 { "VectorSumCoefficient_GetACoef", _wrap_VectorSumCoefficient_GetACoef, METH_O, "GetACoef(VectorSumCoefficient self) -> VectorCoefficient"},
	 { "VectorSumCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(VectorSumCoefficient self, VectorCoefficient B_)"},
	 { "VectorSumCoefficient_GetBCoef", _wrap_VectorSumCoefficient_GetBCoef, METH_O, "GetBCoef(VectorSumCoefficient self) -> VectorCoefficient"},
	 { "VectorSumCoefficient_SetAlphaCoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetAlphaCoef, METH_VARARGS|METH_KEYWORDS, "SetAlphaCoef(VectorSumCoefficient self, Coefficient A_)"},
	 { "VectorSumCoefficient_GetAlphaCoef", _wrap_VectorSumCoefficient_GetAlphaCoef, METH_O, "GetAlphaCoef(VectorSumCoefficient self) -> Coefficient"},
	 { "VectorSumCoefficient_SetBetaCoef", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetBetaCoef, METH_VARARGS|METH_KEYWORDS, "SetBetaCoef(VectorSumCoefficient self, Coefficient B_)"},
	 { "VectorSumCoefficient_GetBetaCoef", _wrap_VectorSumCoefficient_GetBetaCoef, METH_O, "GetBetaCoef(VectorSumCoefficient self) -> Coefficient"},
	 { "VectorSumCoefficient_SetA", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetA, METH_VARARGS|METH_KEYWORDS, "SetA(VectorSumCoefficient self, Vector A_)"},
	 { "VectorSumCoefficient_GetA", _wrap_VectorSumCoefficient_GetA, METH_O, "GetA(VectorSumCoefficient self) -> Vector"},
	 { "VectorSumCoefficient_SetB", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetB, METH_VARARGS|METH_KEYWORDS, "SetB(VectorSumCoefficient self, Vector B_)"},
	 { "VectorSumCoefficient_GetB", _wrap_VectorSumCoefficient_GetB, METH_O, "GetB(VectorSumCoefficient self) -> Vector"},
	 { "VectorSumCoefficient_SetAlpha", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetAlpha, METH_VARARGS|METH_KEYWORDS, "SetAlpha(VectorSumCoefficient self, double alpha_)"},
	 { "VectorSumCoefficient_GetAlpha", _wrap_VectorSumCoefficient_GetAlpha, METH_O, "GetAlpha(VectorSumCoefficient self) -> double"},
	 { "VectorSumCoefficient_SetBeta", (PyCFunction)(void(*)(void))_wrap_VectorSumCoefficient_SetBeta, METH_VARARGS|METH_KEYWORDS, "SetBeta(VectorSumCoefficient self, double beta_)"},
	 { "VectorSumCoefficient_GetBeta", _wrap_VectorSumCoefficient_GetBeta, METH_O, "GetBeta(VectorSumCoefficient self) -> double"},
	 { "VectorSumCoefficient_Eval", _wrap_VectorSumCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorSumCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(VectorSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_VectorSumCoefficient", _wrap_delete_VectorSumCoefficient, METH_O, "delete_VectorSumCoefficient(VectorSumCoefficient self)"},
	 { "VectorSumCoefficient_swigregister", VectorSumCoefficient_swigregister, METH_O, NULL},
	 { "VectorSumCoefficient_swiginit", VectorSumCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_ScalarVectorProductCoefficient", _wrap_new_ScalarVectorProductCoefficient, METH_VARARGS, "\n"
		"ScalarVectorProductCoefficient(double A, VectorCoefficient B)\n"
		"new_ScalarVectorProductCoefficient(Coefficient A, VectorCoefficient B) -> ScalarVectorProductCoefficient\n"
		""},
	 { "ScalarVectorProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(ScalarVectorProductCoefficient self, double t)"},
	 { "ScalarVectorProductCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SetAConst(ScalarVectorProductCoefficient self, double A)"},
	 { "ScalarVectorProductCoefficient_GetAConst", _wrap_ScalarVectorProductCoefficient_GetAConst, METH_O, "GetAConst(ScalarVectorProductCoefficient self) -> double"},
	 { "ScalarVectorProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(ScalarVectorProductCoefficient self, Coefficient A)"},
	 { "ScalarVectorProductCoefficient_GetACoef", _wrap_ScalarVectorProductCoefficient_GetACoef, METH_O, "GetACoef(ScalarVectorProductCoefficient self) -> Coefficient"},
	 { "ScalarVectorProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_ScalarVectorProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(ScalarVectorProductCoefficient self, VectorCoefficient B)"},
	 { "ScalarVectorProductCoefficient_GetBCoef", _wrap_ScalarVectorProductCoefficient_GetBCoef, METH_O, "GetBCoef(ScalarVectorProductCoefficient self) -> VectorCoefficient"},
	 { "ScalarVectorProductCoefficient_Eval", _wrap_ScalarVectorProductCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(ScalarVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(ScalarVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_ScalarVectorProductCoefficient", _wrap_delete_ScalarVectorProductCoefficient, METH_O, "delete_ScalarVectorProductCoefficient(ScalarVectorProductCoefficient self)"},
	 { "ScalarVectorProductCoefficient_swigregister", ScalarVectorProductCoefficient_swigregister, METH_O, NULL},
	 { "ScalarVectorProductCoefficient_swiginit", ScalarVectorProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_NormalizedVectorCoefficient", (PyCFunction)(void(*)(void))_wrap_new_NormalizedVectorCoefficient, METH_VARARGS|METH_KEYWORDS, "new_NormalizedVectorCoefficient(VectorCoefficient A, double tol=1e-6) -> NormalizedVectorCoefficient"},
	 { "NormalizedVectorCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_NormalizedVectorCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(NormalizedVectorCoefficient self, double t)"},
	 { "NormalizedVectorCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_NormalizedVectorCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(NormalizedVectorCoefficient self, VectorCoefficient A)"},
	 { "NormalizedVectorCoefficient_GetACoef", _wrap_NormalizedVectorCoefficient_GetACoef, METH_O, "GetACoef(NormalizedVectorCoefficient self) -> VectorCoefficient"},
	 { "NormalizedVectorCoefficient_Eval", _wrap_NormalizedVectorCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(NormalizedVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(NormalizedVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_NormalizedVectorCoefficient", _wrap_delete_NormalizedVectorCoefficient, METH_O, "delete_NormalizedVectorCoefficient(NormalizedVectorCoefficient self)"},
	 { "NormalizedVectorCoefficient_swigregister", NormalizedVectorCoefficient_swigregister, METH_O, NULL},
	 { "NormalizedVectorCoefficient_swiginit", NormalizedVectorCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorCrossProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorCrossProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorCrossProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> VectorCrossProductCoefficient"},
	 { "VectorCrossProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorCrossProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorCrossProductCoefficient self, double t)"},
	 { "VectorCrossProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_VectorCrossProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(VectorCrossProductCoefficient self, VectorCoefficient A)"},
	 { "VectorCrossProductCoefficient_GetACoef", _wrap_VectorCrossProductCoefficient_GetACoef, METH_O, "GetACoef(VectorCrossProductCoefficient self) -> VectorCoefficient"},
	 { "VectorCrossProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_VectorCrossProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(VectorCrossProductCoefficient self, VectorCoefficient B)"},
	 { "VectorCrossProductCoefficient_GetBCoef", _wrap_VectorCrossProductCoefficient_GetBCoef, METH_O, "GetBCoef(VectorCrossProductCoefficient self) -> VectorCoefficient"},
	 { "VectorCrossProductCoefficient_Eval", _wrap_VectorCrossProductCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorCrossProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(VectorCrossProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_VectorCrossProductCoefficient", _wrap_delete_VectorCrossProductCoefficient, METH_O, "delete_VectorCrossProductCoefficient(VectorCrossProductCoefficient self)"},
	 { "VectorCrossProductCoefficient_swigregister", VectorCrossProductCoefficient_swigregister, METH_O, NULL},
	 { "VectorCrossProductCoefficient_swiginit", VectorCrossProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixVectorProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixVectorProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixVectorProductCoefficient(MatrixCoefficient A, VectorCoefficient B) -> MatrixVectorProductCoefficient"},
	 { "MatrixVectorProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixVectorProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixVectorProductCoefficient self, double t)"},
	 { "MatrixVectorProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_MatrixVectorProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(MatrixVectorProductCoefficient self, MatrixCoefficient A)"},
	 { "MatrixVectorProductCoefficient_GetACoef", _wrap_MatrixVectorProductCoefficient_GetACoef, METH_O, "GetACoef(MatrixVectorProductCoefficient self) -> MatrixCoefficient"},
	 { "MatrixVectorProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_MatrixVectorProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(MatrixVectorProductCoefficient self, VectorCoefficient B)"},
	 { "MatrixVectorProductCoefficient_GetBCoef", _wrap_MatrixVectorProductCoefficient_GetBCoef, METH_O, "GetBCoef(MatrixVectorProductCoefficient self) -> VectorCoefficient"},
	 { "MatrixVectorProductCoefficient_Eval", _wrap_MatrixVectorProductCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(MatrixVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		"Eval(MatrixVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		""},
	 { "delete_MatrixVectorProductCoefficient", _wrap_delete_MatrixVectorProductCoefficient, METH_O, "delete_MatrixVectorProductCoefficient(MatrixVectorProductCoefficient self)"},
	 { "MatrixVectorProductCoefficient_swigregister", MatrixVectorProductCoefficient_swigregister, METH_O, NULL},
	 { "MatrixVectorProductCoefficient_swiginit", MatrixVectorProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_IdentityMatrixCoefficient", (PyCFunction)(void(*)(void))_wrap_new_IdentityMatrixCoefficient, METH_VARARGS|METH_KEYWORDS, "new_IdentityMatrixCoefficient(int d) -> IdentityMatrixCoefficient"},
	 { "IdentityMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_IdentityMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(IdentityMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_IdentityMatrixCoefficient", _wrap_delete_IdentityMatrixCoefficient, METH_O, "delete_IdentityMatrixCoefficient(IdentityMatrixCoefficient self)"},
	 { "IdentityMatrixCoefficient_swigregister", IdentityMatrixCoefficient_swigregister, METH_O, NULL},
	 { "IdentityMatrixCoefficient_swiginit", IdentityMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixSumCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixSumCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixSumCoefficient(MatrixCoefficient A, MatrixCoefficient B, double alpha_=1.0, double beta_=1.0) -> MatrixSumCoefficient"},
	 { "MatrixSumCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixSumCoefficient self, double t)"},
	 { "MatrixSumCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(MatrixSumCoefficient self, MatrixCoefficient A)"},
	 { "MatrixSumCoefficient_GetACoef", _wrap_MatrixSumCoefficient_GetACoef, METH_O, "GetACoef(MatrixSumCoefficient self) -> MatrixCoefficient"},
	 { "MatrixSumCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(MatrixSumCoefficient self, MatrixCoefficient B)"},
	 { "MatrixSumCoefficient_GetBCoef", _wrap_MatrixSumCoefficient_GetBCoef, METH_O, "GetBCoef(MatrixSumCoefficient self) -> MatrixCoefficient"},
	 { "MatrixSumCoefficient_SetAlpha", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetAlpha, METH_VARARGS|METH_KEYWORDS, "SetAlpha(MatrixSumCoefficient self, double alpha_)"},
	 { "MatrixSumCoefficient_GetAlpha", _wrap_MatrixSumCoefficient_GetAlpha, METH_O, "GetAlpha(MatrixSumCoefficient self) -> double"},
	 { "MatrixSumCoefficient_SetBeta", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_SetBeta, METH_VARARGS|METH_KEYWORDS, "SetBeta(MatrixSumCoefficient self, double beta_)"},
	 { "MatrixSumCoefficient_GetBeta", _wrap_MatrixSumCoefficient_GetBeta, METH_O, "GetBeta(MatrixSumCoefficient self) -> double"},
	 { "MatrixSumCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixSumCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixSumCoefficient", _wrap_delete_MatrixSumCoefficient, METH_O, "delete_MatrixSumCoefficient(MatrixSumCoefficient self)"},
	 { "MatrixSumCoefficient_swigregister", MatrixSumCoefficient_swigregister, METH_O, NULL},
	 { "MatrixSumCoefficient_swiginit", MatrixSumCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_MatrixProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_MatrixProductCoefficient(MatrixCoefficient A, MatrixCoefficient B) -> MatrixProductCoefficient"},
	 { "MatrixProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_MatrixProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(MatrixProductCoefficient self, MatrixCoefficient A)"},
	 { "MatrixProductCoefficient_GetACoef", _wrap_MatrixProductCoefficient_GetACoef, METH_O, "GetACoef(MatrixProductCoefficient self) -> MatrixCoefficient"},
	 { "MatrixProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_MatrixProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(MatrixProductCoefficient self, MatrixCoefficient B)"},
	 { "MatrixProductCoefficient_GetBCoef", _wrap_MatrixProductCoefficient_GetBCoef, METH_O, "GetBCoef(MatrixProductCoefficient self) -> MatrixCoefficient"},
	 { "MatrixProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixProductCoefficient", _wrap_delete_MatrixProductCoefficient, METH_O, "delete_MatrixProductCoefficient(MatrixProductCoefficient self)"},
	 { "MatrixProductCoefficient_swigregister", MatrixProductCoefficient_swigregister, METH_O, NULL},
	 { "MatrixProductCoefficient_swiginit", MatrixProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_ScalarMatrixProductCoefficient", _wrap_new_ScalarMatrixProductCoefficient, METH_VARARGS, "\n"
		"ScalarMatrixProductCoefficient(double A, MatrixCoefficient B)\n"
		"new_ScalarMatrixProductCoefficient(Coefficient A, MatrixCoefficient B) -> ScalarMatrixProductCoefficient\n"
		""},
	 { "ScalarMatrixProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(ScalarMatrixProductCoefficient self, double t)"},
	 { "ScalarMatrixProductCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SetAConst(ScalarMatrixProductCoefficient self, double A)"},
	 { "ScalarMatrixProductCoefficient_GetAConst", _wrap_ScalarMatrixProductCoefficient_GetAConst, METH_O, "GetAConst(ScalarMatrixProductCoefficient self) -> double"},
	 { "ScalarMatrixProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(ScalarMatrixProductCoefficient self, Coefficient A)"},
	 { "ScalarMatrixProductCoefficient_GetACoef", _wrap_ScalarMatrixProductCoefficient_GetACoef, METH_O, "GetACoef(ScalarMatrixProductCoefficient self) -> Coefficient"},
	 { "ScalarMatrixProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(ScalarMatrixProductCoefficient self, MatrixCoefficient B)"},
	 { "ScalarMatrixProductCoefficient_GetBCoef", _wrap_ScalarMatrixProductCoefficient_GetBCoef, METH_O, "GetBCoef(ScalarMatrixProductCoefficient self) -> MatrixCoefficient"},
	 { "ScalarMatrixProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ScalarMatrixProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(ScalarMatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_ScalarMatrixProductCoefficient", _wrap_delete_ScalarMatrixProductCoefficient, METH_O, "delete_ScalarMatrixProductCoefficient(ScalarMatrixProductCoefficient self)"},
	 { "ScalarMatrixProductCoefficient_swigregister", ScalarMatrixProductCoefficient_swigregister, METH_O, NULL},
	 { "ScalarMatrixProductCoefficient_swiginit", ScalarMatrixProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_TransposeMatrixCoefficient", (PyCFunction)(void(*)(void))_wrap_new_TransposeMatrixCoefficient, METH_VARARGS|METH_KEYWORDS, "new_TransposeMatrixCoefficient(MatrixCoefficient A) -> TransposeMatrixCoefficient"},
	 { "TransposeMatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_TransposeMatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(TransposeMatrixCoefficient self, double t)"},
	 { "TransposeMatrixCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_TransposeMatrixCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(TransposeMatrixCoefficient self, MatrixCoefficient A)"},
	 { "TransposeMatrixCoefficient_GetACoef", _wrap_TransposeMatrixCoefficient_GetACoef, METH_O, "GetACoef(TransposeMatrixCoefficient self) -> MatrixCoefficient"},
	 { "TransposeMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_TransposeMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(TransposeMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_TransposeMatrixCoefficient", _wrap_delete_TransposeMatrixCoefficient, METH_O, "delete_TransposeMatrixCoefficient(TransposeMatrixCoefficient self)"},
	 { "TransposeMatrixCoefficient_swigregister", TransposeMatrixCoefficient_swigregister, METH_O, NULL},
	 { "TransposeMatrixCoefficient_swiginit", TransposeMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_InverseMatrixCoefficient", (PyCFunction)(void(*)(void))_wrap_new_InverseMatrixCoefficient, METH_VARARGS|METH_KEYWORDS, "new_InverseMatrixCoefficient(MatrixCoefficient A) -> InverseMatrixCoefficient"},
	 { "InverseMatrixCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_InverseMatrixCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(InverseMatrixCoefficient self, double t)"},
	 { "InverseMatrixCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_InverseMatrixCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(InverseMatrixCoefficient self, MatrixCoefficient A)"},
	 { "InverseMatrixCoefficient_GetACoef", _wrap_InverseMatrixCoefficient_GetACoef, METH_O, "GetACoef(InverseMatrixCoefficient self) -> MatrixCoefficient"},
	 { "InverseMatrixCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_InverseMatrixCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(InverseMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_InverseMatrixCoefficient", _wrap_delete_InverseMatrixCoefficient, METH_O, "delete_InverseMatrixCoefficient(InverseMatrixCoefficient self)"},
	 { "InverseMatrixCoefficient_swigregister", InverseMatrixCoefficient_swigregister, METH_O, NULL},
	 { "InverseMatrixCoefficient_swiginit", InverseMatrixCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_OuterProductCoefficient", (PyCFunction)(void(*)(void))_wrap_new_OuterProductCoefficient, METH_VARARGS|METH_KEYWORDS, "new_OuterProductCoefficient(VectorCoefficient A, VectorCoefficient B) -> OuterProductCoefficient"},
	 { "OuterProductCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(OuterProductCoefficient self, double t)"},
	 { "OuterProductCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(OuterProductCoefficient self, VectorCoefficient A)"},
	 { "OuterProductCoefficient_GetACoef", _wrap_OuterProductCoefficient_GetACoef, METH_O, "GetACoef(OuterProductCoefficient self) -> VectorCoefficient"},
	 { "OuterProductCoefficient_SetBCoef", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_SetBCoef, METH_VARARGS|METH_KEYWORDS, "SetBCoef(OuterProductCoefficient self, VectorCoefficient B)"},
	 { "OuterProductCoefficient_GetBCoef", _wrap_OuterProductCoefficient_GetBCoef, METH_O, "GetBCoef(OuterProductCoefficient self) -> VectorCoefficient"},
	 { "OuterProductCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_OuterProductCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(OuterProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_OuterProductCoefficient", _wrap_delete_OuterProductCoefficient, METH_O, "delete_OuterProductCoefficient(OuterProductCoefficient self)"},
	 { "OuterProductCoefficient_swigregister", OuterProductCoefficient_swigregister, METH_O, NULL},
	 { "OuterProductCoefficient_swiginit", OuterProductCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_CrossCrossCoefficient", _wrap_new_CrossCrossCoefficient, METH_VARARGS, "\n"
		"CrossCrossCoefficient(double A, VectorCoefficient K)\n"
		"new_CrossCrossCoefficient(Coefficient A, VectorCoefficient K) -> CrossCrossCoefficient\n"
		""},
	 { "CrossCrossCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(CrossCrossCoefficient self, double t)"},
	 { "CrossCrossCoefficient_SetAConst", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetAConst, METH_VARARGS|METH_KEYWORDS, "SetAConst(CrossCrossCoefficient self, double A)"},
	 { "CrossCrossCoefficient_GetAConst", _wrap_CrossCrossCoefficient_GetAConst, METH_O, "GetAConst(CrossCrossCoefficient self) -> double"},
	 { "CrossCrossCoefficient_SetACoef", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetACoef, METH_VARARGS|METH_KEYWORDS, "SetACoef(CrossCrossCoefficient self, Coefficient A)"},
	 { "CrossCrossCoefficient_GetACoef", _wrap_CrossCrossCoefficient_GetACoef, METH_O, "GetACoef(CrossCrossCoefficient self) -> Coefficient"},
	 { "CrossCrossCoefficient_SetKCoef", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_SetKCoef, METH_VARARGS|METH_KEYWORDS, "SetKCoef(CrossCrossCoefficient self, VectorCoefficient K)"},
	 { "CrossCrossCoefficient_GetKCoef", _wrap_CrossCrossCoefficient_GetKCoef, METH_O, "GetKCoef(CrossCrossCoefficient self) -> VectorCoefficient"},
	 { "CrossCrossCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_CrossCrossCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(CrossCrossCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_CrossCrossCoefficient", _wrap_delete_CrossCrossCoefficient, METH_O, "delete_CrossCrossCoefficient(CrossCrossCoefficient self)"},
	 { "CrossCrossCoefficient_swigregister", CrossCrossCoefficient_swigregister, METH_O, NULL},
	 { "CrossCrossCoefficient_swiginit", CrossCrossCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_VectorQuadratureFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_VectorQuadratureFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_VectorQuadratureFunctionCoefficient(mfem::QuadratureFunction & qf) -> VectorQuadratureFunctionCoefficient"},
	 { "VectorQuadratureFunctionCoefficient_SetComponent", (PyCFunction)(void(*)(void))_wrap_VectorQuadratureFunctionCoefficient_SetComponent, METH_VARARGS|METH_KEYWORDS, "SetComponent(VectorQuadratureFunctionCoefficient self, int index_, int length_)"},
	 { "VectorQuadratureFunctionCoefficient_GetQuadFunction", _wrap_VectorQuadratureFunctionCoefficient_GetQuadFunction, METH_O, "GetQuadFunction(VectorQuadratureFunctionCoefficient self) -> mfem::QuadratureFunction const &"},
	 { "VectorQuadratureFunctionCoefficient_Eval", _wrap_VectorQuadratureFunctionCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(VectorQuadratureFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(VectorQuadratureFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "VectorQuadratureFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_VectorQuadratureFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(VectorQuadratureFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_VectorQuadratureFunctionCoefficient", _wrap_delete_VectorQuadratureFunctionCoefficient, METH_O, "delete_VectorQuadratureFunctionCoefficient(VectorQuadratureFunctionCoefficient self)"},
	 { "VectorQuadratureFunctionCoefficient_swigregister", VectorQuadratureFunctionCoefficient_swigregister, METH_O, NULL},
	 { "VectorQuadratureFunctionCoefficient_swiginit", VectorQuadratureFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "new_QuadratureFunctionCoefficient", (PyCFunction)(void(*)(void))_wrap_new_QuadratureFunctionCoefficient, METH_VARARGS|METH_KEYWORDS, "new_QuadratureFunctionCoefficient(mfem::QuadratureFunction & qf) -> QuadratureFunctionCoefficient"},
	 { "QuadratureFunctionCoefficient_GetQuadFunction", _wrap_QuadratureFunctionCoefficient_GetQuadFunction, METH_O, "GetQuadFunction(QuadratureFunctionCoefficient self) -> mfem::QuadratureFunction const &"},
	 { "QuadratureFunctionCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_QuadratureFunctionCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(QuadratureFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "QuadratureFunctionCoefficient_Project", (PyCFunction)(void(*)(void))_wrap_QuadratureFunctionCoefficient_Project, METH_VARARGS|METH_KEYWORDS, "Project(QuadratureFunctionCoefficient self, mfem::QuadratureFunction & qf)"},
	 { "delete_QuadratureFunctionCoefficient", _wrap_delete_QuadratureFunctionCoefficient, METH_O, "delete_QuadratureFunctionCoefficient(QuadratureFunctionCoefficient self)"},
	 { "QuadratureFunctionCoefficient_swigregister", QuadratureFunctionCoefficient_swigregister, METH_O, NULL},
	 { "QuadratureFunctionCoefficient_swiginit", QuadratureFunctionCoefficient_swiginit, METH_VARARGS, NULL},
	 { "__or__", (PyCFunction)(void(*)(void))_wrap___or__, METH_VARARGS|METH_KEYWORDS, "__or__(mfem::CoefficientStorage a, mfem::CoefficientStorage b) -> mfem::CoefficientStorage"},
	 { "__and__", (PyCFunction)(void(*)(void))_wrap___and__, METH_VARARGS|METH_KEYWORDS, "__and__(mfem::CoefficientStorage a, mfem::CoefficientStorage b) -> int"},
	 { "new_CoefficientVector", _wrap_new_CoefficientVector, METH_VARARGS, "\n"
		"CoefficientVector(mfem::QuadratureSpaceBase & qs_, mfem::CoefficientStorage storage_=FULL)\n"
		"CoefficientVector(Coefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL)\n"
		"CoefficientVector(Coefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL)\n"
		"CoefficientVector(VectorCoefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL)\n"
		"new_CoefficientVector(MatrixCoefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector\n"
		""},
	 { "CoefficientVector_Project", _wrap_CoefficientVector_Project, METH_VARARGS, "\n"
		"Project(CoefficientVector self, Coefficient coeff)\n"
		"Project(CoefficientVector self, VectorCoefficient coeff)\n"
		"Project(CoefficientVector self, MatrixCoefficient coeff, bool transpose=False)\n"
		""},
	 { "CoefficientVector_ProjectTranspose", (PyCFunction)(void(*)(void))_wrap_CoefficientVector_ProjectTranspose, METH_VARARGS|METH_KEYWORDS, "ProjectTranspose(CoefficientVector self, MatrixCoefficient coeff)"},
	 { "CoefficientVector_MakeRef", (PyCFunction)(void(*)(void))_wrap_CoefficientVector_MakeRef, METH_VARARGS|METH_KEYWORDS, "MakeRef(CoefficientVector self, mfem::QuadratureFunction const & qf_)"},
	 { "CoefficientVector_SetConstant", _wrap_CoefficientVector_SetConstant, METH_VARARGS, "\n"
		"SetConstant(CoefficientVector self, double constant)\n"
		"SetConstant(CoefficientVector self, Vector constant)\n"
		"SetConstant(CoefficientVector self, DenseMatrix constant)\n"
		"SetConstant(CoefficientVector self, DenseSymmetricMatrix constant)\n"
		""},
	 { "CoefficientVector_GetVDim", _wrap_CoefficientVector_GetVDim, METH_O, "GetVDim(CoefficientVector self) -> int"},
	 { "delete_CoefficientVector", _wrap_delete_CoefficientVector, METH_O, "delete_CoefficientVector(CoefficientVector self)"},
	 { "CoefficientVector_swigregister", CoefficientVector_swigregister, METH_O, NULL},
	 { "CoefficientVector_swiginit", CoefficientVector_swiginit, METH_VARARGS, NULL},
	 { "ComputeLpNorm", _wrap_ComputeLpNorm, METH_VARARGS, "\n"
		"ComputeLpNorm(double p, Coefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> double\n"
		"ComputeLpNorm(double p, VectorCoefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> double\n"
		""},
	 { "ComputeGlobalLpNorm", _wrap_ComputeGlobalLpNorm, METH_VARARGS, "\n"
		"ComputeGlobalLpNorm(double p, Coefficient coeff, mfem::ParMesh & pmesh, mfem::IntegrationRule const *[] irs) -> double\n"
		"ComputeGlobalLpNorm(double p, VectorCoefficient coeff, mfem::ParMesh & pmesh, mfem::IntegrationRule const *[] irs) -> double\n"
		""},
	 { "new_NumbaFunction", _wrap_new_NumbaFunction, METH_VARARGS, "\n"
		"NumbaFunction(PyObject * input, int sdim)\n"
		"new_NumbaFunction(PyObject * input, int sdim, bool td) -> NumbaFunction\n"
		""},
	 { "NumbaFunction_call0", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_call0, METH_VARARGS|METH_KEYWORDS, "call0(NumbaFunction self, Vector x) -> double"},
	 { "NumbaFunction_call", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_call, METH_VARARGS|METH_KEYWORDS, "call(NumbaFunction self, Vector x) -> double"},
	 { "NumbaFunction_call0t", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_call0t, METH_VARARGS|METH_KEYWORDS, "call0t(NumbaFunction self, Vector x, double t) -> double"},
	 { "NumbaFunction_callt", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_callt, METH_VARARGS|METH_KEYWORDS, "callt(NumbaFunction self, Vector x, double t) -> double"},
	 { "NumbaFunction_GenerateCoefficient", (PyCFunction)(void(*)(void))_wrap_NumbaFunction_GenerateCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateCoefficient(NumbaFunction self, int use_0=0) -> FunctionCoefficient"},
	 { "delete_NumbaFunction", _wrap_delete_NumbaFunction, METH_O, "delete_NumbaFunction(NumbaFunction self)"},
	 { "NumbaFunction_swigregister", NumbaFunction_swigregister, METH_O, NULL},
	 { "NumbaFunction_swiginit", NumbaFunction_swiginit, METH_VARARGS, NULL},
	 { "new_VectorNumbaFunction", _wrap_new_VectorNumbaFunction, METH_VARARGS, "\n"
		"VectorNumbaFunction(PyObject * input, int sdim, int vdim)\n"
		"new_VectorNumbaFunction(PyObject * input, int sdim, int vdim, bool td) -> VectorNumbaFunction\n"
		""},
	 { "VectorNumbaFunction_call", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_call, METH_VARARGS|METH_KEYWORDS, "call(VectorNumbaFunction self, Vector x, Vector out)"},
	 { "VectorNumbaFunction_callt", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_callt, METH_VARARGS|METH_KEYWORDS, "callt(VectorNumbaFunction self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction_call0", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_call0, METH_VARARGS|METH_KEYWORDS, "call0(VectorNumbaFunction self, Vector x, Vector out)"},
	 { "VectorNumbaFunction_call0t", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_call0t, METH_VARARGS|METH_KEYWORDS, "call0t(VectorNumbaFunction self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction_GenerateCoefficient", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction_GenerateCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateCoefficient(VectorNumbaFunction self, int use_0=0) -> VectorFunctionCoefficient"},
	 { "delete_VectorNumbaFunction", _wrap_delete_VectorNumbaFunction, METH_O, "delete_VectorNumbaFunction(VectorNumbaFunction self)"},
	 { "VectorNumbaFunction_swigregister", VectorNumbaFunction_swigregister, METH_O, NULL},
	 { "VectorNumbaFunction_swiginit", VectorNumbaFunction_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixNumbaFunction", _wrap_new_MatrixNumbaFunction, METH_VARARGS, "\n"
		"MatrixNumbaFunction(PyObject * input, int sdim, int vdim)\n"
		"new_MatrixNumbaFunction(PyObject * input, int sdim, int vdim, bool td) -> MatrixNumbaFunction\n"
		""},
	 { "MatrixNumbaFunction_call", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_call, METH_VARARGS|METH_KEYWORDS, "call(MatrixNumbaFunction self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction_callt", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_callt, METH_VARARGS|METH_KEYWORDS, "callt(MatrixNumbaFunction self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction_call0", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_call0, METH_VARARGS|METH_KEYWORDS, "call0(MatrixNumbaFunction self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction_call0t", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_call0t, METH_VARARGS|METH_KEYWORDS, "call0t(MatrixNumbaFunction self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction_GenerateCoefficient", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction_GenerateCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateCoefficient(MatrixNumbaFunction self, int use_0=0) -> MatrixFunctionCoefficient"},
	 { "delete_MatrixNumbaFunction", _wrap_delete_MatrixNumbaFunction, METH_O, "delete_MatrixNumbaFunction(MatrixNumbaFunction self)"},
	 { "MatrixNumbaFunction_swigregister", MatrixNumbaFunction_swigregister, METH_O, NULL},
	 { "MatrixNumbaFunction_swiginit", MatrixNumbaFunction_swiginit, METH_VARARGS, NULL},
	 { "new_ScalarNumbaFunction2", _wrap_new_ScalarNumbaFunction2, METH_VARARGS, "\n"
		"ScalarNumbaFunction2(PyObject * input)\n"
		"new_ScalarNumbaFunction2(PyObject * input, bool td) -> ScalarNumbaFunction2\n"
		""},
	 { "delete_ScalarNumbaFunction2", _wrap_delete_ScalarNumbaFunction2, METH_O, "delete_ScalarNumbaFunction2(ScalarNumbaFunction2 self)"},
	 { "ScalarNumbaFunction2_call", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_call, METH_VARARGS|METH_KEYWORDS, "call(ScalarNumbaFunction2 self, Vector x) -> double"},
	 { "ScalarNumbaFunction2_callt", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_callt, METH_VARARGS|METH_KEYWORDS, "callt(ScalarNumbaFunction2 self, Vector x, double t) -> double"},
	 { "ScalarNumbaFunction2_callr", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_callr, METH_VARARGS|METH_KEYWORDS, "callr(ScalarNumbaFunction2 self, Vector x) -> double"},
	 { "ScalarNumbaFunction2_calltr", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_calltr, METH_VARARGS|METH_KEYWORDS, "calltr(ScalarNumbaFunction2 self, Vector x, double t) -> double"},
	 { "ScalarNumbaFunction2_calli", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_calli, METH_VARARGS|METH_KEYWORDS, "calli(ScalarNumbaFunction2 self, Vector x) -> double"},
	 { "ScalarNumbaFunction2_callti", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_callti, METH_VARARGS|METH_KEYWORDS, "callti(ScalarNumbaFunction2 self, Vector x, double t) -> double"},
	 { "ScalarNumbaFunction2_GetScalarImaginary", _wrap_ScalarNumbaFunction2_GetScalarImaginary, METH_O, "GetScalarImaginary(ScalarNumbaFunction2 self) -> double"},
	 { "ScalarNumbaFunction2_set_obj1", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_set_obj1, METH_VARARGS|METH_KEYWORDS, "set_obj1(ScalarNumbaFunction2 self, std::function< double (mfem::Vector const &) > obj1_)"},
	 { "ScalarNumbaFunction2_set_obj2", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaFunction2_set_obj2, METH_VARARGS|METH_KEYWORDS, "set_obj2(ScalarNumbaFunction2 self, std::function< double (mfem::Vector const &,double) > obj2_)"},
	 { "ScalarNumbaFunction2_get_obj1", _wrap_ScalarNumbaFunction2_get_obj1, METH_O, "get_obj1(ScalarNumbaFunction2 self) -> std::function< double (mfem::Vector const &) >"},
	 { "ScalarNumbaFunction2_get_obj2", _wrap_ScalarNumbaFunction2_get_obj2, METH_O, "get_obj2(ScalarNumbaFunction2 self) -> std::function< double (mfem::Vector const &,double) >"},
	 { "ScalarNumbaFunction2_swigregister", ScalarNumbaFunction2_swigregister, METH_O, NULL},
	 { "ScalarNumbaFunction2_swiginit", ScalarNumbaFunction2_swiginit, METH_VARARGS, NULL},
	 { "GenerateScalarNumbaCoefficient", (PyCFunction)(void(*)(void))_wrap_GenerateScalarNumbaCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateScalarNumbaCoefficient(PyObject * numba_func, bool td, int mode) -> ScalarNumbaCoefficient"},
	 { "new_VectorNumbaFunction2", _wrap_new_VectorNumbaFunction2, METH_VARARGS, "\n"
		"VectorNumbaFunction2(PyObject * input, int vdim)\n"
		"new_VectorNumbaFunction2(PyObject * input, int vdim, bool td) -> VectorNumbaFunction2\n"
		""},
	 { "delete_VectorNumbaFunction2", _wrap_delete_VectorNumbaFunction2, METH_O, "delete_VectorNumbaFunction2(VectorNumbaFunction2 self)"},
	 { "VectorNumbaFunction2_call", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_call, METH_VARARGS|METH_KEYWORDS, "call(VectorNumbaFunction2 self, Vector x, Vector out)"},
	 { "VectorNumbaFunction2_callt", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_callt, METH_VARARGS|METH_KEYWORDS, "callt(VectorNumbaFunction2 self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction2_callr", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_callr, METH_VARARGS|METH_KEYWORDS, "callr(VectorNumbaFunction2 self, Vector x, Vector out)"},
	 { "VectorNumbaFunction2_calltr", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_calltr, METH_VARARGS|METH_KEYWORDS, "calltr(VectorNumbaFunction2 self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction2_calli", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_calli, METH_VARARGS|METH_KEYWORDS, "calli(VectorNumbaFunction2 self, Vector x, Vector out)"},
	 { "VectorNumbaFunction2_callti", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_callti, METH_VARARGS|METH_KEYWORDS, "callti(VectorNumbaFunction2 self, Vector x, double t, Vector out)"},
	 { "VectorNumbaFunction2_GetArrayImaginary", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_GetArrayImaginary, METH_VARARGS|METH_KEYWORDS, "GetArrayImaginary(VectorNumbaFunction2 self, Vector out)"},
	 { "VectorNumbaFunction2_create_outc", _wrap_VectorNumbaFunction2_create_outc, METH_O, "create_outc(VectorNumbaFunction2 self)"},
	 { "VectorNumbaFunction2_set_obj1", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_set_obj1, METH_VARARGS|METH_KEYWORDS, "set_obj1(VectorNumbaFunction2 self, std::function< void (mfem::Vector const &,mfem::Vector &) > obj1_)"},
	 { "VectorNumbaFunction2_set_obj2", (PyCFunction)(void(*)(void))_wrap_VectorNumbaFunction2_set_obj2, METH_VARARGS|METH_KEYWORDS, "set_obj2(VectorNumbaFunction2 self, std::function< void (mfem::Vector const &,double,mfem::Vector &) > obj2_)"},
	 { "VectorNumbaFunction2_get_obj1", _wrap_VectorNumbaFunction2_get_obj1, METH_O, "get_obj1(VectorNumbaFunction2 self) -> std::function< void (mfem::Vector const &,mfem::Vector &) >"},
	 { "VectorNumbaFunction2_get_obj2", _wrap_VectorNumbaFunction2_get_obj2, METH_O, "get_obj2(VectorNumbaFunction2 self) -> std::function< void (mfem::Vector const &,double,mfem::Vector &) >"},
	 { "VectorNumbaFunction2_swigregister", VectorNumbaFunction2_swigregister, METH_O, NULL},
	 { "VectorNumbaFunction2_swiginit", VectorNumbaFunction2_swiginit, METH_VARARGS, NULL},
	 { "GenerateVectorNumbaCoefficient", (PyCFunction)(void(*)(void))_wrap_GenerateVectorNumbaCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateVectorNumbaCoefficient(PyObject * numba_func, int vdim, bool td, int mode) -> VectorNumbaCoefficient"},
	 { "new_MatrixNumbaFunction2", _wrap_new_MatrixNumbaFunction2, METH_VARARGS, "\n"
		"MatrixNumbaFunction2(PyObject * input, int vdim)\n"
		"new_MatrixNumbaFunction2(PyObject * input, int vdim, bool td) -> MatrixNumbaFunction2\n"
		""},
	 { "delete_MatrixNumbaFunction2", _wrap_delete_MatrixNumbaFunction2, METH_O, "delete_MatrixNumbaFunction2(MatrixNumbaFunction2 self)"},
	 { "MatrixNumbaFunction2_call", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_call, METH_VARARGS|METH_KEYWORDS, "call(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_callt", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_callt, METH_VARARGS|METH_KEYWORDS, "callt(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_callr", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_callr, METH_VARARGS|METH_KEYWORDS, "callr(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_calltr", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_calltr, METH_VARARGS|METH_KEYWORDS, "calltr(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_calli", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_calli, METH_VARARGS|METH_KEYWORDS, "calli(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_callti", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_callti, METH_VARARGS|METH_KEYWORDS, "callti(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_GetArrayImaginary", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_GetArrayImaginary, METH_VARARGS|METH_KEYWORDS, "GetArrayImaginary(MatrixNumbaFunction2 self, DenseMatrix out)"},
	 { "MatrixNumbaFunction2_create_outc", _wrap_MatrixNumbaFunction2_create_outc, METH_O, "create_outc(MatrixNumbaFunction2 self)"},
	 { "MatrixNumbaFunction2_set_obj1", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_set_obj1, METH_VARARGS|METH_KEYWORDS, "set_obj1(MatrixNumbaFunction2 self, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > obj1_)"},
	 { "MatrixNumbaFunction2_set_obj2", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaFunction2_set_obj2, METH_VARARGS|METH_KEYWORDS, "set_obj2(MatrixNumbaFunction2 self, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > obj2_)"},
	 { "MatrixNumbaFunction2_get_obj1", _wrap_MatrixNumbaFunction2_get_obj1, METH_O, "get_obj1(MatrixNumbaFunction2 self) -> std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >"},
	 { "MatrixNumbaFunction2_get_obj2", _wrap_MatrixNumbaFunction2_get_obj2, METH_O, "get_obj2(MatrixNumbaFunction2 self) -> std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >"},
	 { "MatrixNumbaFunction2_swigregister", MatrixNumbaFunction2_swigregister, METH_O, NULL},
	 { "MatrixNumbaFunction2_swiginit", MatrixNumbaFunction2_swiginit, METH_VARARGS, NULL},
	 { "GenerateMatrixNumbaCoefficient", (PyCFunction)(void(*)(void))_wrap_GenerateMatrixNumbaCoefficient, METH_VARARGS|METH_KEYWORDS, "GenerateMatrixNumbaCoefficient(PyObject * numba_func, int height, int width, bool td, int mode) -> MatrixNumbaCoefficient"},
	 { "SetNumbaCoefficientDependency", (PyCFunction)(void(*)(void))_wrap_SetNumbaCoefficientDependency, METH_VARARGS|METH_KEYWORDS, "SetNumbaCoefficientDependency(NumbaCoefficientBase obj, mfem::Array< mfem::Coefficient * > const & a1, mfem::Array< mfem::VectorCoefficient * > const & a2, mfem::Array< mfem::MatrixCoefficient * > const & a3, mfem::Array< ScalarNumbaCoefficient * > const & a4, mfem::Array< VectorNumbaCoefficient * > const & a5, mfem::Array< MatrixNumbaCoefficient * > const & a6)"},
	 { "fake_func", (PyCFunction)(void(*)(void))_wrap_fake_func, METH_VARARGS|METH_KEYWORDS, "fake_func(Vector x) -> double"},
	 { "fake_func_vec", (PyCFunction)(void(*)(void))_wrap_fake_func_vec, METH_VARARGS|METH_KEYWORDS, "fake_func_vec(Vector x, Vector Ht)"},
	 { "fake_func_mat", (PyCFunction)(void(*)(void))_wrap_fake_func_mat, METH_VARARGS|METH_KEYWORDS, "fake_func_mat(Vector x, DenseMatrix Kt)"},
	 { "new_PyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_PyCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_PyCoefficientBase(PyObject * _self, int tdep) -> PyCoefficientBase"},
	 { "PyCoefficientBase_SetTime", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(PyCoefficientBase self, double t)"},
	 { "PyCoefficientBase_Eval", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(PyCoefficientBase self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "PyCoefficientBase__EvalPy", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase__EvalPy, METH_VARARGS|METH_KEYWORDS, "_EvalPy(PyCoefficientBase self, Vector arg0) -> double"},
	 { "PyCoefficientBase__EvalPyT", (PyCFunction)(void(*)(void))_wrap_PyCoefficientBase__EvalPyT, METH_VARARGS|METH_KEYWORDS, "_EvalPyT(PyCoefficientBase self, Vector arg0, double arg1) -> double"},
	 { "delete_PyCoefficientBase", _wrap_delete_PyCoefficientBase, METH_O, "delete_PyCoefficientBase(PyCoefficientBase self)"},
	 { "disown_PyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_disown_PyCoefficientBase, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "PyCoefficientBase_swigregister", PyCoefficientBase_swigregister, METH_O, NULL},
	 { "PyCoefficientBase_swiginit", PyCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "new_VectorPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_VectorPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_VectorPyCoefficientBase(PyObject * _self, int dim, int tdep, Coefficient q=None) -> VectorPyCoefficientBase"},
	 { "VectorPyCoefficientBase_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorPyCoefficientBase_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorPyCoefficientBase self, double t)"},
	 { "VectorPyCoefficientBase_Eval", _wrap_VectorPyCoefficientBase_Eval, METH_VARARGS, "\n"
		"Eval(VectorPyCoefficientBase self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(VectorPyCoefficientBase self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "VectorPyCoefficientBase__EvalPy", (PyCFunction)(void(*)(void))_wrap_VectorPyCoefficientBase__EvalPy, METH_VARARGS|METH_KEYWORDS, "_EvalPy(VectorPyCoefficientBase self, Vector arg0, Vector arg1)"},
	 { "VectorPyCoefficientBase__EvalPyT", (PyCFunction)(void(*)(void))_wrap_VectorPyCoefficientBase__EvalPyT, METH_VARARGS|METH_KEYWORDS, "_EvalPyT(VectorPyCoefficientBase self, Vector arg0, double arg1, Vector arg2)"},
	 { "delete_VectorPyCoefficientBase", _wrap_delete_VectorPyCoefficientBase, METH_O, "delete_VectorPyCoefficientBase(VectorPyCoefficientBase self)"},
	 { "disown_VectorPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_disown_VectorPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "VectorPyCoefficientBase_swigregister", VectorPyCoefficientBase_swigregister, METH_O, NULL},
	 { "VectorPyCoefficientBase_swiginit", VectorPyCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "new_MatrixPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_MatrixPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_MatrixPyCoefficientBase(PyObject * _self, int dim, int tdep) -> MatrixPyCoefficientBase"},
	 { "MatrixPyCoefficientBase_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixPyCoefficientBase self, double t)"},
	 { "MatrixPyCoefficientBase_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixPyCoefficientBase self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "MatrixPyCoefficientBase__EvalPy", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase__EvalPy, METH_VARARGS|METH_KEYWORDS, "_EvalPy(MatrixPyCoefficientBase self, Vector arg0, DenseMatrix arg1)"},
	 { "MatrixPyCoefficientBase__EvalPyT", (PyCFunction)(void(*)(void))_wrap_MatrixPyCoefficientBase__EvalPyT, METH_VARARGS|METH_KEYWORDS, "_EvalPyT(MatrixPyCoefficientBase self, Vector arg0, double arg1, DenseMatrix arg2)"},
	 { "delete_MatrixPyCoefficientBase", _wrap_delete_MatrixPyCoefficientBase, METH_O, "delete_MatrixPyCoefficientBase(MatrixPyCoefficientBase self)"},
	 { "disown_MatrixPyCoefficientBase", (PyCFunction)(void(*)(void))_wrap_disown_MatrixPyCoefficientBase, METH_VARARGS|METH_KEYWORDS, NULL},
	 { "MatrixPyCoefficientBase_swigregister", MatrixPyCoefficientBase_swigregister, METH_O, NULL},
	 { "MatrixPyCoefficientBase_swiginit", MatrixPyCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "new_NumbaFunctionBase", (PyCFunction)(void(*)(void))_wrap_new_NumbaFunctionBase, METH_VARARGS|METH_KEYWORDS, "new_NumbaFunctionBase(PyObject * input, int sdim, bool td) -> NumbaFunctionBase"},
	 { "NumbaFunctionBase_print_add", _wrap_NumbaFunctionBase_print_add, METH_O, "print_add(NumbaFunctionBase self)"},
	 { "NumbaFunctionBase_SetUserFunction", (PyCFunction)(void(*)(void))_wrap_NumbaFunctionBase_SetUserFunction, METH_VARARGS|METH_KEYWORDS, "SetUserFunction(NumbaFunctionBase self, PyObject * input)"},
	 { "NumbaFunctionBase_GetData", _wrap_NumbaFunctionBase_GetData, METH_O, "GetData(NumbaFunctionBase self) -> double *"},
	 { "NumbaFunctionBase_GetPointer", _wrap_NumbaFunctionBase_GetPointer, METH_O, "GetPointer(NumbaFunctionBase self) -> double **"},
	 { "NumbaFunctionBase_SetDataCount", (PyCFunction)(void(*)(void))_wrap_NumbaFunctionBase_SetDataCount, METH_VARARGS|METH_KEYWORDS, "SetDataCount(NumbaFunctionBase self, int x)"},
	 { "NumbaFunctionBase_GetScalarImaginary", _wrap_NumbaFunctionBase_GetScalarImaginary, METH_O, "GetScalarImaginary(NumbaFunctionBase self) -> double"},
	 { "NumbaFunctionBase_GetArrayImaginary", _wrap_NumbaFunctionBase_GetArrayImaginary, METH_VARARGS, "\n"
		"GetArrayImaginary(NumbaFunctionBase self, Vector arg2)\n"
		"GetArrayImaginary(NumbaFunctionBase self, DenseMatrix arg2)\n"
		""},
	 { "delete_NumbaFunctionBase", _wrap_delete_NumbaFunctionBase, METH_O, "delete_NumbaFunctionBase(NumbaFunctionBase self)"},
	 { "NumbaFunctionBase_swigregister", NumbaFunctionBase_swigregister, METH_O, NULL},
	 { "NumbaFunctionBase_swiginit", NumbaFunctionBase_swiginit, METH_VARARGS, NULL},
	 { "new_NumbaCoefficientBase", (PyCFunction)(void(*)(void))_wrap_new_NumbaCoefficientBase, METH_VARARGS|METH_KEYWORDS, "new_NumbaCoefficientBase(NumbaFunctionBase in_obj) -> NumbaCoefficientBase"},
	 { "NumbaCoefficientBase_PrepParams", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_PrepParams, METH_VARARGS|METH_KEYWORDS, "PrepParams(NumbaCoefficientBase self, ElementTransformation T, IntegrationPoint ip)"},
	 { "NumbaCoefficientBase_SetKinds", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetKinds, METH_VARARGS|METH_KEYWORDS, "SetKinds(NumbaCoefficientBase self, PyObject * kinds_)"},
	 { "NumbaCoefficientBase_SetIsDepComplex", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetIsDepComplex, METH_VARARGS|METH_KEYWORDS, "SetIsDepComplex(NumbaCoefficientBase self, PyObject * isComplex_)"},
	 { "NumbaCoefficientBase_SetOutComplex", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetOutComplex, METH_VARARGS|METH_KEYWORDS, "SetOutComplex(NumbaCoefficientBase self, bool in_)"},
	 { "NumbaCoefficientBase_IsOutComplex", _wrap_NumbaCoefficientBase_IsOutComplex, METH_O, "IsOutComplex(NumbaCoefficientBase self) -> bool"},
	 { "NumbaCoefficientBase_SetTimeInDependency", (PyCFunction)(void(*)(void))_wrap_NumbaCoefficientBase_SetTimeInDependency, METH_VARARGS|METH_KEYWORDS, "SetTimeInDependency(NumbaCoefficientBase self, double t)"},
	 { "delete_NumbaCoefficientBase", _wrap_delete_NumbaCoefficientBase, METH_O, "delete_NumbaCoefficientBase(NumbaCoefficientBase self)"},
	 { "NumbaCoefficientBase_swigregister", NumbaCoefficientBase_swigregister, METH_O, NULL},
	 { "NumbaCoefficientBase_swiginit", NumbaCoefficientBase_swiginit, METH_VARARGS, NULL},
	 { "ScalarNumbaCoefficient_GetNDim", _wrap_ScalarNumbaCoefficient_GetNDim, METH_O, "GetNDim(ScalarNumbaCoefficient self) -> int"},
	 { "new_ScalarNumbaCoefficient", _wrap_new_ScalarNumbaCoefficient, METH_VARARGS, "\n"
		"ScalarNumbaCoefficient(std::function< double (mfem::Vector const &) > F, NumbaFunctionBase in_obj)\n"
		"new_ScalarNumbaCoefficient(std::function< double (mfem::Vector const &,double) > TDF, NumbaFunctionBase in_obj) -> ScalarNumbaCoefficient\n"
		""},
	 { "ScalarNumbaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(ScalarNumbaCoefficient self, double t)"},
	 { "ScalarNumbaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_ScalarNumbaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(ScalarNumbaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"},
	 { "delete_ScalarNumbaCoefficient", _wrap_delete_ScalarNumbaCoefficient, METH_O, "delete_ScalarNumbaCoefficient(ScalarNumbaCoefficient self)"},
	 { "ScalarNumbaCoefficient_swigregister", ScalarNumbaCoefficient_swigregister, METH_O, NULL},
	 { "ScalarNumbaCoefficient_swiginit", ScalarNumbaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "VectorNumbaCoefficient_GetNDim", _wrap_VectorNumbaCoefficient_GetNDim, METH_O, "GetNDim(VectorNumbaCoefficient self) -> int"},
	 { "new_VectorNumbaCoefficient", _wrap_new_VectorNumbaCoefficient, METH_VARARGS, "\n"
		"VectorNumbaCoefficient(int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > F, NumbaFunctionBase in_obj)\n"
		"new_VectorNumbaCoefficient(int dim, std::function< void (mfem::Vector const &,double,mfem::Vector &) > TDF, NumbaFunctionBase in_obj) -> VectorNumbaCoefficient\n"
		""},
	 { "VectorNumbaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_VectorNumbaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(VectorNumbaCoefficient self, double t)"},
	 { "VectorNumbaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_VectorNumbaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(VectorNumbaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_VectorNumbaCoefficient", _wrap_delete_VectorNumbaCoefficient, METH_O, "delete_VectorNumbaCoefficient(VectorNumbaCoefficient self)"},
	 { "VectorNumbaCoefficient_swigregister", VectorNumbaCoefficient_swigregister, METH_O, NULL},
	 { "VectorNumbaCoefficient_swiginit", VectorNumbaCoefficient_swiginit, METH_VARARGS, NULL},
	 { "MatrixNumbaCoefficient_GetNDim", _wrap_MatrixNumbaCoefficient_GetNDim, METH_O, "GetNDim(MatrixNumbaCoefficient self) -> int"},
	 { "new_MatrixNumbaCoefficient", _wrap_new_MatrixNumbaCoefficient, METH_VARARGS, "\n"
		"MatrixNumbaCoefficient(int h, int w, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > F, NumbaFunctionBase in_obj)\n"
		"new_MatrixNumbaCoefficient(int h, int w, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > TDF, NumbaFunctionBase in_obj) -> MatrixNumbaCoefficient\n"
		""},
	 { "MatrixNumbaCoefficient_SetTime", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaCoefficient_SetTime, METH_VARARGS|METH_KEYWORDS, "SetTime(MatrixNumbaCoefficient self, double t)"},
	 { "MatrixNumbaCoefficient_Eval", (PyCFunction)(void(*)(void))_wrap_MatrixNumbaCoefficient_Eval, METH_VARARGS|METH_KEYWORDS, "Eval(MatrixNumbaCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"},
	 { "delete_MatrixNumbaCoefficient", _wrap_delete_MatrixNumbaCoefficient, METH_O, "delete_MatrixNumbaCoefficient(MatrixNumbaCoefficient self)"},
	 { "MatrixNumbaCoefficient_swigregister", MatrixNumbaCoefficient_swigregister, METH_O, NULL},
	 { "MatrixNumbaCoefficient_swiginit", MatrixNumbaCoefficient_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MatrixNumbaCoefficientTo_p_NumbaCoefficientBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NumbaCoefficientBase *)  ((MatrixNumbaCoefficient *) x));
}
static void *_p_ScalarNumbaCoefficientTo_p_NumbaCoefficientBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NumbaCoefficientBase *)  ((ScalarNumbaCoefficient *) x));
}
static void *_p_VectorNumbaCoefficientTo_p_NumbaCoefficientBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NumbaCoefficientBase *)  ((VectorNumbaCoefficient *) x));
}
static void *_p_ScalarNumbaCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *) (mfem::FunctionCoefficient *) ((ScalarNumbaCoefficient *) x));
}
static void *_p_mfem__ConstantCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ConstantCoefficient *) x));
}
static void *_p_mfem__DeltaCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DeltaCoefficient *) x));
}
static void *_p_mfem__DeterminantCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DeterminantCoefficient *) x));
}
static void *_p_mfem__DivergenceGridFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DivergenceGridFunctionCoefficient *) x));
}
static void *_p_mfem__FunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::FunctionCoefficient *) x));
}
static void *_p_mfem__GridFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::GridFunctionCoefficient *) x));
}
static void *_p_mfem__InnerProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::InnerProductCoefficient *) x));
}
static void *_p_mfem__PWCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PWCoefficient *) x));
}
static void *_p_mfem__PWConstCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PWConstCoefficient *) x));
}
static void *_p_mfem__PowerCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PowerCoefficient *) x));
}
static void *_p_mfem__ProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ProductCoefficient *) x));
}
static void *_p_mfem__PyCoefficientBaseTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *) (mfem::FunctionCoefficient *) ((mfem::PyCoefficientBase *) x));
}
static void *_p_mfem__QuadratureFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::QuadratureFunctionCoefficient *) x));
}
static void *_p_mfem__RatioCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::RatioCoefficient *) x));
}
static void *_p_mfem__RestrictedCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::RestrictedCoefficient *) x));
}
static void *_p_mfem__SumCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::SumCoefficient *) x));
}
static void *_p_mfem__TransformedCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::TransformedCoefficient *) x));
}
static void *_p_mfem__VectorRotProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::VectorRotProductCoefficient *) x));
}
static void *_p_mfem__FaceElementTransformationsTo_p_mfem__ElementTransformation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::ElementTransformation *) (mfem::IsoparametricTransformation *) ((mfem::FaceElementTransformations *) x));
}
static void *_p_mfem__IsoparametricTransformationTo_p_mfem__ElementTransformation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::ElementTransformation *)  ((mfem::IsoparametricTransformation *) x));
}
static void *_p_ScalarNumbaCoefficientTo_p_mfem__FunctionCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FunctionCoefficient *)  ((ScalarNumbaCoefficient *) x));
}
static void *_p_mfem__PyCoefficientBaseTo_p_mfem__FunctionCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FunctionCoefficient *)  ((mfem::PyCoefficientBase *) x));
}
static void *_p_MatrixNumbaCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::MatrixFunctionCoefficient *) ((MatrixNumbaCoefficient *) x));
}
static void *_p_mfem__CrossCrossCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::CrossCrossCoefficient *) x));
}
static void *_p_mfem__IdentityMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::IdentityMatrixCoefficient *) x));
}
static void *_p_mfem__InverseMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::InverseMatrixCoefficient *) x));
}
static void *_p_mfem__MatrixArrayCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixArrayCoefficient *) x));
}
static void *_p_mfem__MatrixConstantCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixConstantCoefficient *) x));
}
static void *_p_mfem__MatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixFunctionCoefficient *) x));
}
static void *_p_mfem__MatrixProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixProductCoefficient *) x));
}
static void *_p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::MatrixFunctionCoefficient *) ((mfem::MatrixPyCoefficientBase *) x));
}
static void *_p_mfem__MatrixRestrictedCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixRestrictedCoefficient *) x));
}
static void *_p_mfem__MatrixSumCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixSumCoefficient *) x));
}
static void *_p_mfem__OuterProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::OuterProductCoefficient *) x));
}
static void *_p_mfem__PWMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::PWMatrixCoefficient *) x));
}
static void *_p_mfem__ScalarMatrixProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::ScalarMatrixProductCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::SymmetricMatrixCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::SymmetricMatrixCoefficient *) ((mfem::SymmetricMatrixConstantCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::SymmetricMatrixCoefficient *) ((mfem::SymmetricMatrixFunctionCoefficient *) x));
}
static void *_p_mfem__TransposeMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::TransposeMatrixCoefficient *) x));
}
static void *_p_MatrixNumbaCoefficientTo_p_mfem__MatrixFunctionCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixFunctionCoefficient *)  ((MatrixNumbaCoefficient *) x));
}
static void *_p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixFunctionCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixFunctionCoefficient *)  ((mfem::MatrixPyCoefficientBase *) x));
}
static void *_p_mfem__AbstractSparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::AbstractSparseMatrix *) x));
}
static void *_p_mfem__ConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ConstrainedOperator *) x));
}
static void *_p_mfem__DenseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseMatrix *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__DenseSymmetricMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseSymmetricMatrix *) x));
}
static void *_p_mfem__IdentityOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::IdentityOperator *) x));
}
static void *_p_mfem__MatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Matrix *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *) ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__ProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ProductOperator *) x));
}
static void *_p_mfem__PyOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::PyOperatorBase *) x));
}
static void *_p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase *) x));
}
static void *_p_mfem__RAPOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RAPOperator *) x));
}
static void *_p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RectangularConstrainedOperator *) x));
}
static void *_p_mfem__ScaledOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ScaledOperator *) x));
}
static void *_p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator *) x));
}
static void *_p_mfem__SolverTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Solver *) x));
}
static void *_p_mfem__SparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *)(mfem::AbstractSparseMatrix *) ((mfem::SparseMatrix *) x));
}
static void *_p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator *) x));
}
static void *_p_mfem__TimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TimeDependentOperator *) x));
}
static void *_p_mfem__TransposeOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TransposeOperator *) x));
}
static void *_p_mfem__TripleProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TripleProductOperator *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *)  ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__SymmetricMatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::SymmetricMatrixCoefficient *)  ((mfem::SymmetricMatrixConstantCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__SymmetricMatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::SymmetricMatrixCoefficient *)  ((mfem::SymmetricMatrixFunctionCoefficient *) x));
}
static void *_p_mfem__CoefficientVectorTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::CoefficientVector *) x));
}
static void *_p_VectorNumbaCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *) (mfem::VectorFunctionCoefficient *) ((VectorNumbaCoefficient *) x));
}
static void *_p_mfem__CurlGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::CurlGridFunctionCoefficient *) x));
}
static void *_p_mfem__GradientGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::GradientGridFunctionCoefficient *) x));
}
static void *_p_mfem__MatrixVectorProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::MatrixVectorProductCoefficient *) x));
}
static void *_p_mfem__NormalizedVectorCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::NormalizedVectorCoefficient *) x));
}
static void *_p_mfem__PWVectorCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::PWVectorCoefficient *) x));
}
static void *_p_mfem__ScalarVectorProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::ScalarVectorProductCoefficient *) x));
}
static void *_p_mfem__VectorArrayCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorArrayCoefficient *) x));
}
static void *_p_mfem__VectorConstantCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorConstantCoefficient *) x));
}
static void *_p_mfem__VectorCrossProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorCrossProductCoefficient *) x));
}
static void *_p_mfem__VectorDeltaCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorDeltaCoefficient *) x));
}
static void *_p_mfem__VectorFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorFunctionCoefficient *) x));
}
static void *_p_mfem__VectorGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorGridFunctionCoefficient *) x));
}
static void *_p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *) (mfem::VectorFunctionCoefficient *) ((mfem::VectorPyCoefficientBase *) x));
}
static void *_p_mfem__VectorQuadratureFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorQuadratureFunctionCoefficient *) x));
}
static void *_p_mfem__VectorRestrictedCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorRestrictedCoefficient *) x));
}
static void *_p_mfem__VectorSumCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorSumCoefficient *) x));
}
static void *_p_VectorNumbaCoefficientTo_p_mfem__VectorFunctionCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorFunctionCoefficient *)  ((VectorNumbaCoefficient *) x));
}
static void *_p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorFunctionCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorFunctionCoefficient *)  ((mfem::VectorPyCoefficientBase *) x));
}
static void *_p_p_ScalarNumbaCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **) (mfem::FunctionCoefficient *) ((ScalarNumbaCoefficient **) x));
}
static void *_p_p_mfem__ConstantCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::ConstantCoefficient **) x));
}
static void *_p_p_mfem__DeltaCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::DeltaCoefficient **) x));
}
static void *_p_p_mfem__DeterminantCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::DeterminantCoefficient **) x));
}
static void *_p_p_mfem__DivergenceGridFunctionCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::DivergenceGridFunctionCoefficient **) x));
}
static void *_p_p_mfem__FunctionCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::FunctionCoefficient **) x));
}
static void *_p_p_mfem__GridFunctionCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::GridFunctionCoefficient **) x));
}
static void *_p_p_mfem__InnerProductCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::InnerProductCoefficient **) x));
}
static void *_p_p_mfem__PWCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::PWCoefficient **) x));
}
static void *_p_p_mfem__PWConstCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::PWConstCoefficient **) x));
}
static void *_p_p_mfem__PowerCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::PowerCoefficient **) x));
}
static void *_p_p_mfem__ProductCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::ProductCoefficient **) x));
}
static void *_p_p_mfem__PyCoefficientBaseTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **) (mfem::FunctionCoefficient *) ((mfem::PyCoefficientBase **) x));
}
static void *_p_p_mfem__QuadratureFunctionCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::QuadratureFunctionCoefficient **) x));
}
static void *_p_p_mfem__RatioCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::RatioCoefficient **) x));
}
static void *_p_p_mfem__RestrictedCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::RestrictedCoefficient **) x));
}
static void *_p_p_mfem__SumCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::SumCoefficient **) x));
}
static void *_p_p_mfem__TransformedCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::TransformedCoefficient **) x));
}
static void *_p_p_mfem__VectorRotProductCoefficientTo_p_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient **)  ((mfem::VectorRotProductCoefficient **) x));
}
static void *_p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::AbstractSparseMatrix **) x));
}
static void *_p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ConstrainedOperator **) x));
}
static void *_p_p_mfem__DenseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseMatrix **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__DenseSymmetricMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseSymmetricMatrix **) x));
}
static void *_p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::IdentityOperator **) x));
}
static void *_p_p_mfem__MatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Matrix **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *) ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__ProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ProductOperator **) x));
}
static void *_p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::PyOperatorBase **) x));
}
static void *_p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase **) x));
}
static void *_p_p_mfem__RAPOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RAPOperator **) x));
}
static void *_p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RectangularConstrainedOperator **) x));
}
static void *_p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ScaledOperator **) x));
}
static void *_p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator **) x));
}
static void *_p_p_mfem__SolverTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Solver **) x));
}
static void *_p_p_mfem__SparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *)(mfem::AbstractSparseMatrix *) ((mfem::SparseMatrix **) x));
}
static void *_p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator **) x));
}
static void *_p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TimeDependentOperator **) x));
}
static void *_p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TransposeOperator **) x));
}
static void *_p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TripleProductOperator **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **)  ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__CoefficientVectorTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::CoefficientVector **) x));
}
static swig_type_info _swigt___input = {"__input", "$input", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixNumbaCoefficient = {"_p_MatrixNumbaCoefficient", "MatrixNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixNumbaFunction = {"_p_MatrixNumbaFunction", "MatrixNumbaFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixNumbaFunction2 = {"_p_MatrixNumbaFunction2", "MatrixNumbaFunction2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumbaCoefficientBase = {"_p_NumbaCoefficientBase", "NumbaCoefficientBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumbaFunction = {"_p_NumbaFunction", "NumbaFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NumbaFunctionBase = {"_p_NumbaFunctionBase", "NumbaFunctionBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyMFEM__wFILE = {"_p_PyMFEM__wFILE", "PyMFEM::wFILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScalarNumbaCoefficient = {"_p_ScalarNumbaCoefficient", "ScalarNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScalarNumbaFunction2 = {"_p_ScalarNumbaFunction2", "ScalarNumbaFunction2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorNumbaCoefficient = {"_p_VectorNumbaCoefficient", "VectorNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorNumbaFunction = {"_p_VectorNumbaFunction", "VectorNumbaFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorNumbaFunction2 = {"_p_VectorNumbaFunction2", "VectorNumbaFunction2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double__double = {"_p_f_double__double", "double (*)(double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_double__double = {"_p_f_double_double__double", "double (*)(double,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_mfem__Vector__double = {"_p_f_r_mfem__Vector__double", "double (*)(mfem::Vector &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_mfem__Vector_double__double = {"_p_f_r_mfem__Vector_double__double", "double (*)(mfem::Vector &,double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_MatrixNumbaCoefficient_p_t = {"_p_mfem__ArrayT_MatrixNumbaCoefficient_p_t", "mfem::Array< MatrixNumbaCoefficient * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_ScalarNumbaCoefficient_p_t = {"_p_mfem__ArrayT_ScalarNumbaCoefficient_p_t", "mfem::Array< ScalarNumbaCoefficient * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_VectorNumbaCoefficient_p_t = {"_p_mfem__ArrayT_VectorNumbaCoefficient_p_t", "mfem::Array< VectorNumbaCoefficient * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_int_t = {"_p_mfem__ArrayT_int_t", "mfem::Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__Coefficient_p_t = {"_p_mfem__ArrayT_mfem__Coefficient_p_t", "mfem::Array< mfem::Coefficient * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__MatrixCoefficient_p_t = {"_p_mfem__ArrayT_mfem__MatrixCoefficient_p_t", "mfem::Array< mfem::MatrixCoefficient * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__VectorCoefficient_p_t = {"_p_mfem__ArrayT_mfem__VectorCoefficient_p_t", "mfem::Array< mfem::VectorCoefficient * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Coefficient = {"_p_mfem__Coefficient", "mfem::Coefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CoefficientVector = {"_p_mfem__CoefficientVector", "mfem::CoefficientVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ConstantCoefficient = {"_p_mfem__ConstantCoefficient", "mfem::ConstantCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CrossCrossCoefficient = {"_p_mfem__CrossCrossCoefficient", "mfem::CrossCrossCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CurlGridFunctionCoefficient = {"_p_mfem__CurlGridFunctionCoefficient", "mfem::CurlGridFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DeltaCoefficient = {"_p_mfem__DeltaCoefficient", "mfem::DeltaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrix = {"_p_mfem__DenseMatrix", "mfem::DenseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DenseSymmetricMatrix = {"_p_mfem__DenseSymmetricMatrix", "mfem::DenseSymmetricMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DeterminantCoefficient = {"_p_mfem__DeterminantCoefficient", "mfem::DeterminantCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DivergenceGridFunctionCoefficient = {"_p_mfem__DivergenceGridFunctionCoefficient", "mfem::DivergenceGridFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ElementTransformation = {"_p_mfem__ElementTransformation", "mfem::ElementTransformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__FaceElementTransformations = {"_p_mfem__FaceElementTransformations", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IsoparametricTransformation = {"_p_mfem__IsoparametricTransformation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FunctionCoefficient = {"_p_mfem__FunctionCoefficient", "mfem::FunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GradientGridFunctionCoefficient = {"_p_mfem__GradientGridFunctionCoefficient", "mfem::GradientGridFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GridFunction = {"_p_mfem__GridFunction", "mfem::GridFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GridFunctionCoefficient = {"_p_mfem__GridFunctionCoefficient", "mfem::GridFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IdentityMatrixCoefficient = {"_p_mfem__IdentityMatrixCoefficient", "mfem::IdentityMatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__InnerProductCoefficient = {"_p_mfem__InnerProductCoefficient", "mfem::InnerProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IntegrationPoint = {"_p_mfem__IntegrationPoint", "mfem::IntegrationPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IntegrationRule = {"_p_mfem__IntegrationRule", "mfem::IntegrationRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__InverseMatrixCoefficient = {"_p_mfem__InverseMatrixCoefficient", "mfem::InverseMatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixArrayCoefficient = {"_p_mfem__MatrixArrayCoefficient", "mfem::MatrixArrayCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixCoefficient = {"_p_mfem__MatrixCoefficient", "mfem::MatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixConstantCoefficient = {"_p_mfem__MatrixConstantCoefficient", "mfem::MatrixConstantCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixFunctionCoefficient = {"_p_mfem__MatrixFunctionCoefficient", "mfem::MatrixFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixProductCoefficient = {"_p_mfem__MatrixProductCoefficient", "mfem::MatrixProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixPyCoefficientBase = {"_p_mfem__MatrixPyCoefficientBase", "mfem::MatrixPyCoefficientBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixRestrictedCoefficient = {"_p_mfem__MatrixRestrictedCoefficient", "mfem::MatrixRestrictedCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixSumCoefficient = {"_p_mfem__MatrixSumCoefficient", "mfem::MatrixSumCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixVectorProductCoefficient = {"_p_mfem__MatrixVectorProductCoefficient", "mfem::MatVecCoefficient *|mfem::MatrixVectorProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Mesh = {"_p_mfem__Mesh", "mfem::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__NormalizedVectorCoefficient = {"_p_mfem__NormalizedVectorCoefficient", "mfem::NormalizedVectorCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Operator = {"_p_mfem__Operator", "mfem::Operator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__AbstractSparseMatrix = {"_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ConstrainedOperator = {"_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrixInverse = {"_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IdentityOperator = {"_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Matrix = {"_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixInverse = {"_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ProductOperator = {"_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyOperatorBase = {"_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyTimeDependentOperatorBase = {"_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RAPOperator = {"_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RectangularConstrainedOperator = {"_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScaledOperator = {"_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SecondOrderTimeDependentOperator = {"_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SparseMatrix = {"_p_mfem__SparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentAdjointOperator = {"_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentOperator = {"_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransposeOperator = {"_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TripleProductOperator = {"_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__OuterProductCoefficient = {"_p_mfem__OuterProductCoefficient", "mfem::OuterProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__PWCoefficient = {"_p_mfem__PWCoefficient", "mfem::PWCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__PWConstCoefficient = {"_p_mfem__PWConstCoefficient", "mfem::PWConstCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__PWMatrixCoefficient = {"_p_mfem__PWMatrixCoefficient", "mfem::PWMatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__PWVectorCoefficient = {"_p_mfem__PWVectorCoefficient", "mfem::PWVectorCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ParMesh = {"_p_mfem__ParMesh", "mfem::ParMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__PowerCoefficient = {"_p_mfem__PowerCoefficient", "mfem::PowerCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ProductCoefficient = {"_p_mfem__ProductCoefficient", "mfem::ProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__PyCoefficientBase = {"_p_mfem__PyCoefficientBase", "mfem::PyCoefficientBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadratureFunction = {"_p_mfem__QuadratureFunction", "mfem::QuadratureFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadratureFunctionCoefficient = {"_p_mfem__QuadratureFunctionCoefficient", "mfem::QuadratureFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadratureSpaceBase = {"_p_mfem__QuadratureSpaceBase", "mfem::QuadratureSpaceBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RatioCoefficient = {"_p_mfem__RatioCoefficient", "mfem::RatioCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RestrictedCoefficient = {"_p_mfem__RestrictedCoefficient", "mfem::RestrictedCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ScalarMatrixProductCoefficient = {"_p_mfem__ScalarMatrixProductCoefficient", "mfem::ScalarMatrixProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ScalarVectorProductCoefficient = {"_p_mfem__ScalarVectorProductCoefficient", "mfem::ScalarVectorProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Solver = {"_p_mfem__Solver", "mfem::Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__SumCoefficient = {"_p_mfem__SumCoefficient", "mfem::SumCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixCoefficient = {"_p_mfem__SymmetricMatrixCoefficient", "mfem::SymmetricMatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixConstantCoefficient = {"_p_mfem__SymmetricMatrixConstantCoefficient", "mfem::SymmetricMatrixConstantCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixFunctionCoefficient = {"_p_mfem__SymmetricMatrixFunctionCoefficient", "mfem::SymmetricMatrixFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__TransformedCoefficient = {"_p_mfem__TransformedCoefficient", "mfem::TransformedCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__TransposeMatrixCoefficient = {"_p_mfem__TransposeMatrixCoefficient", "mfem::TransposeMatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Vector = {"_p_mfem__Vector", "mfem::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorArrayCoefficient = {"_p_mfem__VectorArrayCoefficient", "mfem::VectorArrayCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorCoefficient = {"_p_mfem__VectorCoefficient", "mfem::DiagonalMatrixCoefficient *|mfem::VectorCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorConstantCoefficient = {"_p_mfem__VectorConstantCoefficient", "mfem::VectorConstantCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorCrossProductCoefficient = {"_p_mfem__VectorCrossProductCoefficient", "mfem::VectorCrossProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorDeltaCoefficient = {"_p_mfem__VectorDeltaCoefficient", "mfem::VectorDeltaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorFunctionCoefficient = {"_p_mfem__VectorFunctionCoefficient", "mfem::VectorFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorGridFunctionCoefficient = {"_p_mfem__VectorGridFunctionCoefficient", "mfem::VectorGridFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorPyCoefficientBase = {"_p_mfem__VectorPyCoefficientBase", "mfem::VectorPyCoefficientBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorQuadratureFunctionCoefficient = {"_p_mfem__VectorQuadratureFunctionCoefficient", "mfem::VectorQuadratureFunctionCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorRestrictedCoefficient = {"_p_mfem__VectorRestrictedCoefficient", "mfem::VectorRestrictedCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorRotProductCoefficient = {"_p_mfem__VectorRotProductCoefficient", "mfem::VectorRotProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__VectorSumCoefficient = {"_p_mfem__VectorSumCoefficient", "mfem::VectorSumCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Coefficient = {"_p_p_mfem__Coefficient", "mfem::Coefficient **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ScalarNumbaCoefficient = {"_p_p_ScalarNumbaCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConstantCoefficient = {"_p_p_mfem__ConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DeltaCoefficient = {"_p_p_mfem__DeltaCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DeterminantCoefficient = {"_p_p_mfem__DeterminantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DivergenceGridFunctionCoefficient = {"_p_p_mfem__DivergenceGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__FunctionCoefficient = {"_p_p_mfem__FunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__GridFunctionCoefficient = {"_p_p_mfem__GridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__InnerProductCoefficient = {"_p_p_mfem__InnerProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PWCoefficient = {"_p_p_mfem__PWCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PWConstCoefficient = {"_p_p_mfem__PWConstCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PowerCoefficient = {"_p_p_mfem__PowerCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ProductCoefficient = {"_p_p_mfem__ProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyCoefficientBase = {"_p_p_mfem__PyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__QuadratureFunctionCoefficient = {"_p_p_mfem__QuadratureFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RatioCoefficient = {"_p_p_mfem__RatioCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RestrictedCoefficient = {"_p_p_mfem__RestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SumCoefficient = {"_p_p_mfem__SumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TransformedCoefficient = {"_p_p_mfem__TransformedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__VectorRotProductCoefficient = {"_p_p_mfem__VectorRotProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__IntegrationRule = {"_p_p_mfem__IntegrationRule", "mfem::IntegrationRule **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Operator = {"_p_p_mfem__Operator", "mfem::Operator **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__AbstractSparseMatrix = {"_p_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConstrainedOperator = {"_p_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrix = {"_p_p_mfem__DenseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrixInverse = {"_p_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseSymmetricMatrix = {"_p_p_mfem__DenseSymmetricMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__IdentityOperator = {"_p_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Matrix = {"_p_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__MatrixInverse = {"_p_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ProductOperator = {"_p_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyOperatorBase = {"_p_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyTimeDependentOperatorBase = {"_p_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RAPOperator = {"_p_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RectangularConstrainedOperator = {"_p_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ScaledOperator = {"_p_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SecondOrderTimeDependentOperator = {"_p_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SparseMatrix = {"_p_p_mfem__SparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentAdjointOperator = {"_p_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentOperator = {"_p_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TransposeOperator = {"_p_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TripleProductOperator = {"_p_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Solver = {"_p_p_mfem__Solver", "mfem::Solver **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Vector = {"_p_p_mfem__Vector", "mfem::Vector **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__CoefficientVector = {"_p_p_mfem__CoefficientVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_std__functionT_double_fmfem__Vector_const_RF_t = {"_p_std__functionT_double_fmfem__Vector_const_RF_t", "std::function< double (mfem::Vector const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_double_fmfem__Vector_const_R_doubleF_t = {"_p_std__functionT_double_fmfem__Vector_const_R_doubleF_t", "std::function< double (mfem::Vector const &,double) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t = {"_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t", "std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t = {"_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t", "std::function< void (mfem::Vector const &,double,mfem::DenseSymmetricMatrix &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t = {"_p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t", "std::function< void (mfem::Vector const &,double,mfem::Vector &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t = {"_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t", "std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t = {"_p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t", "std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t = {"_p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t", "std::function< void (mfem::Vector const &,mfem::Vector &) > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt___input,
  &_swigt__p_MatrixNumbaCoefficient,
  &_swigt__p_MatrixNumbaFunction,
  &_swigt__p_MatrixNumbaFunction2,
  &_swigt__p_NumbaCoefficientBase,
  &_swigt__p_NumbaFunction,
  &_swigt__p_NumbaFunctionBase,
  &_swigt__p_PyMFEM__wFILE,
  &_swigt__p_ScalarNumbaCoefficient,
  &_swigt__p_ScalarNumbaFunction2,
  &_swigt__p_VectorNumbaCoefficient,
  &_swigt__p_VectorNumbaFunction,
  &_swigt__p_VectorNumbaFunction2,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_double__double,
  &_swigt__p_f_double_double__double,
  &_swigt__p_f_r_mfem__Vector__double,
  &_swigt__p_f_r_mfem__Vector_double__double,
  &_swigt__p_int,
  &_swigt__p_mfem__AbstractSparseMatrix,
  &_swigt__p_mfem__ArrayT_MatrixNumbaCoefficient_p_t,
  &_swigt__p_mfem__ArrayT_ScalarNumbaCoefficient_p_t,
  &_swigt__p_mfem__ArrayT_VectorNumbaCoefficient_p_t,
  &_swigt__p_mfem__ArrayT_int_t,
  &_swigt__p_mfem__ArrayT_mfem__Coefficient_p_t,
  &_swigt__p_mfem__ArrayT_mfem__MatrixCoefficient_p_t,
  &_swigt__p_mfem__ArrayT_mfem__VectorCoefficient_p_t,
  &_swigt__p_mfem__Coefficient,
  &_swigt__p_mfem__CoefficientVector,
  &_swigt__p_mfem__ConstantCoefficient,
  &_swigt__p_mfem__ConstrainedOperator,
  &_swigt__p_mfem__CrossCrossCoefficient,
  &_swigt__p_mfem__CurlGridFunctionCoefficient,
  &_swigt__p_mfem__DeltaCoefficient,
  &_swigt__p_mfem__DenseMatrix,
  &_swigt__p_mfem__DenseMatrixInverse,
  &_swigt__p_mfem__DenseSymmetricMatrix,
  &_swigt__p_mfem__DeterminantCoefficient,
  &_swigt__p_mfem__DivergenceGridFunctionCoefficient,
  &_swigt__p_mfem__ElementTransformation,
  &_swigt__p_mfem__FaceElementTransformations,
  &_swigt__p_mfem__FunctionCoefficient,
  &_swigt__p_mfem__GradientGridFunctionCoefficient,
  &_swigt__p_mfem__GridFunction,
  &_swigt__p_mfem__GridFunctionCoefficient,
  &_swigt__p_mfem__IdentityMatrixCoefficient,
  &_swigt__p_mfem__IdentityOperator,
  &_swigt__p_mfem__InnerProductCoefficient,
  &_swigt__p_mfem__IntegrationPoint,
  &_swigt__p_mfem__IntegrationRule,
  &_swigt__p_mfem__InverseMatrixCoefficient,
  &_swigt__p_mfem__IsoparametricTransformation,
  &_swigt__p_mfem__Matrix,
  &_swigt__p_mfem__MatrixArrayCoefficient,
  &_swigt__p_mfem__MatrixCoefficient,
  &_swigt__p_mfem__MatrixConstantCoefficient,
  &_swigt__p_mfem__MatrixFunctionCoefficient,
  &_swigt__p_mfem__MatrixInverse,
  &_swigt__p_mfem__MatrixProductCoefficient,
  &_swigt__p_mfem__MatrixPyCoefficientBase,
  &_swigt__p_mfem__MatrixRestrictedCoefficient,
  &_swigt__p_mfem__MatrixSumCoefficient,
  &_swigt__p_mfem__MatrixVectorProductCoefficient,
  &_swigt__p_mfem__Mesh,
  &_swigt__p_mfem__NormalizedVectorCoefficient,
  &_swigt__p_mfem__Operator,
  &_swigt__p_mfem__OuterProductCoefficient,
  &_swigt__p_mfem__PWCoefficient,
  &_swigt__p_mfem__PWConstCoefficient,
  &_swigt__p_mfem__PWMatrixCoefficient,
  &_swigt__p_mfem__PWVectorCoefficient,
  &_swigt__p_mfem__ParMesh,
  &_swigt__p_mfem__PowerCoefficient,
  &_swigt__p_mfem__ProductCoefficient,
  &_swigt__p_mfem__ProductOperator,
  &_swigt__p_mfem__PyCoefficientBase,
  &_swigt__p_mfem__PyOperatorBase,
  &_swigt__p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_mfem__QuadratureFunction,
  &_swigt__p_mfem__QuadratureFunctionCoefficient,
  &_swigt__p_mfem__QuadratureSpaceBase,
  &_swigt__p_mfem__RAPOperator,
  &_swigt__p_mfem__RatioCoefficient,
  &_swigt__p_mfem__RectangularConstrainedOperator,
  &_swigt__p_mfem__RestrictedCoefficient,
  &_swigt__p_mfem__ScalarMatrixProductCoefficient,
  &_swigt__p_mfem__ScalarVectorProductCoefficient,
  &_swigt__p_mfem__ScaledOperator,
  &_swigt__p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_mfem__Solver,
  &_swigt__p_mfem__SparseMatrix,
  &_swigt__p_mfem__SumCoefficient,
  &_swigt__p_mfem__SymmetricMatrixCoefficient,
  &_swigt__p_mfem__SymmetricMatrixConstantCoefficient,
  &_swigt__p_mfem__SymmetricMatrixFunctionCoefficient,
  &_swigt__p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_mfem__TimeDependentOperator,
  &_swigt__p_mfem__TransformedCoefficient,
  &_swigt__p_mfem__TransposeMatrixCoefficient,
  &_swigt__p_mfem__TransposeOperator,
  &_swigt__p_mfem__TripleProductOperator,
  &_swigt__p_mfem__Vector,
  &_swigt__p_mfem__VectorArrayCoefficient,
  &_swigt__p_mfem__VectorCoefficient,
  &_swigt__p_mfem__VectorConstantCoefficient,
  &_swigt__p_mfem__VectorCrossProductCoefficient,
  &_swigt__p_mfem__VectorDeltaCoefficient,
  &_swigt__p_mfem__VectorFunctionCoefficient,
  &_swigt__p_mfem__VectorGridFunctionCoefficient,
  &_swigt__p_mfem__VectorPyCoefficientBase,
  &_swigt__p_mfem__VectorQuadratureFunctionCoefficient,
  &_swigt__p_mfem__VectorRestrictedCoefficient,
  &_swigt__p_mfem__VectorRotProductCoefficient,
  &_swigt__p_mfem__VectorSumCoefficient,
  &_swigt__p_p_ScalarNumbaCoefficient,
  &_swigt__p_p_double,
  &_swigt__p_p_mfem__AbstractSparseMatrix,
  &_swigt__p_p_mfem__Coefficient,
  &_swigt__p_p_mfem__CoefficientVector,
  &_swigt__p_p_mfem__ConstantCoefficient,
  &_swigt__p_p_mfem__ConstrainedOperator,
  &_swigt__p_p_mfem__DeltaCoefficient,
  &_swigt__p_p_mfem__DenseMatrix,
  &_swigt__p_p_mfem__DenseMatrixInverse,
  &_swigt__p_p_mfem__DenseSymmetricMatrix,
  &_swigt__p_p_mfem__DeterminantCoefficient,
  &_swigt__p_p_mfem__DivergenceGridFunctionCoefficient,
  &_swigt__p_p_mfem__FunctionCoefficient,
  &_swigt__p_p_mfem__GridFunctionCoefficient,
  &_swigt__p_p_mfem__IdentityOperator,
  &_swigt__p_p_mfem__InnerProductCoefficient,
  &_swigt__p_p_mfem__IntegrationRule,
  &_swigt__p_p_mfem__Matrix,
  &_swigt__p_p_mfem__MatrixInverse,
  &_swigt__p_p_mfem__Operator,
  &_swigt__p_p_mfem__PWCoefficient,
  &_swigt__p_p_mfem__PWConstCoefficient,
  &_swigt__p_p_mfem__PowerCoefficient,
  &_swigt__p_p_mfem__ProductCoefficient,
  &_swigt__p_p_mfem__ProductOperator,
  &_swigt__p_p_mfem__PyCoefficientBase,
  &_swigt__p_p_mfem__PyOperatorBase,
  &_swigt__p_p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_p_mfem__QuadratureFunctionCoefficient,
  &_swigt__p_p_mfem__RAPOperator,
  &_swigt__p_p_mfem__RatioCoefficient,
  &_swigt__p_p_mfem__RectangularConstrainedOperator,
  &_swigt__p_p_mfem__RestrictedCoefficient,
  &_swigt__p_p_mfem__ScaledOperator,
  &_swigt__p_p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_p_mfem__Solver,
  &_swigt__p_p_mfem__SparseMatrix,
  &_swigt__p_p_mfem__SumCoefficient,
  &_swigt__p_p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_p_mfem__TimeDependentOperator,
  &_swigt__p_p_mfem__TransformedCoefficient,
  &_swigt__p_p_mfem__TransposeOperator,
  &_swigt__p_p_mfem__TripleProductOperator,
  &_swigt__p_p_mfem__Vector,
  &_swigt__p_p_mfem__VectorRotProductCoefficient,
  &_swigt__p_std__functionT_double_fmfem__Vector_const_RF_t,
  &_swigt__p_std__functionT_double_fmfem__Vector_const_R_doubleF_t,
  &_swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t,
  &_swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t,
  &_swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t,
  &_swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t,
  &_swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t,
  &_swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t,
};

static swig_cast_info _swigc___input[] = {  {&_swigt___input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixNumbaCoefficient[] = {  {&_swigt__p_MatrixNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixNumbaFunction[] = {  {&_swigt__p_MatrixNumbaFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixNumbaFunction2[] = {  {&_swigt__p_MatrixNumbaFunction2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumbaCoefficientBase[] = {  {&_swigt__p_NumbaCoefficientBase, 0, 0, 0},  {&_swigt__p_MatrixNumbaCoefficient, _p_MatrixNumbaCoefficientTo_p_NumbaCoefficientBase, 0, 0},  {&_swigt__p_ScalarNumbaCoefficient, _p_ScalarNumbaCoefficientTo_p_NumbaCoefficientBase, 0, 0},  {&_swigt__p_VectorNumbaCoefficient, _p_VectorNumbaCoefficientTo_p_NumbaCoefficientBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumbaFunction[] = {  {&_swigt__p_NumbaFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NumbaFunctionBase[] = {  {&_swigt__p_NumbaFunctionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyMFEM__wFILE[] = {  {&_swigt__p_PyMFEM__wFILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScalarNumbaCoefficient[] = {  {&_swigt__p_ScalarNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScalarNumbaFunction2[] = {  {&_swigt__p_ScalarNumbaFunction2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorNumbaCoefficient[] = {  {&_swigt__p_VectorNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorNumbaFunction[] = {  {&_swigt__p_VectorNumbaFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorNumbaFunction2[] = {  {&_swigt__p_VectorNumbaFunction2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double__double[] = {  {&_swigt__p_f_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_double__double[] = {  {&_swigt__p_f_double_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_mfem__Vector__double[] = {  {&_swigt__p_f_r_mfem__Vector__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_mfem__Vector_double__double[] = {  {&_swigt__p_f_r_mfem__Vector_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_MatrixNumbaCoefficient_p_t[] = {  {&_swigt__p_mfem__ArrayT_MatrixNumbaCoefficient_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_ScalarNumbaCoefficient_p_t[] = {  {&_swigt__p_mfem__ArrayT_ScalarNumbaCoefficient_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_VectorNumbaCoefficient_p_t[] = {  {&_swigt__p_mfem__ArrayT_VectorNumbaCoefficient_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_int_t[] = {  {&_swigt__p_mfem__ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__Coefficient_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__Coefficient_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__MatrixCoefficient_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__MatrixCoefficient_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__VectorCoefficient_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__VectorCoefficient_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Coefficient[] = {  {&_swigt__p_mfem__Coefficient, 0, 0, 0},  {&_swigt__p_ScalarNumbaCoefficient, _p_ScalarNumbaCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ConstantCoefficient, _p_mfem__ConstantCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DeltaCoefficient, _p_mfem__DeltaCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DeterminantCoefficient, _p_mfem__DeterminantCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DivergenceGridFunctionCoefficient, _p_mfem__DivergenceGridFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__FunctionCoefficient, _p_mfem__FunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__GridFunctionCoefficient, _p_mfem__GridFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__InnerProductCoefficient, _p_mfem__InnerProductCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PWCoefficient, _p_mfem__PWCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PWConstCoefficient, _p_mfem__PWConstCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PowerCoefficient, _p_mfem__PowerCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ProductCoefficient, _p_mfem__ProductCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PyCoefficientBase, _p_mfem__PyCoefficientBaseTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__QuadratureFunctionCoefficient, _p_mfem__QuadratureFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__RatioCoefficient, _p_mfem__RatioCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__RestrictedCoefficient, _p_mfem__RestrictedCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__SumCoefficient, _p_mfem__SumCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__TransformedCoefficient, _p_mfem__TransformedCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__VectorRotProductCoefficient, _p_mfem__VectorRotProductCoefficientTo_p_mfem__Coefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CoefficientVector[] = {  {&_swigt__p_mfem__CoefficientVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstantCoefficient[] = {  {&_swigt__p_mfem__ConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrossCrossCoefficient[] = {  {&_swigt__p_mfem__CrossCrossCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CurlGridFunctionCoefficient[] = {  {&_swigt__p_mfem__CurlGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DeltaCoefficient[] = {  {&_swigt__p_mfem__DeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrix[] = {  {&_swigt__p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseSymmetricMatrix[] = {  {&_swigt__p_mfem__DenseSymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DeterminantCoefficient[] = {  {&_swigt__p_mfem__DeterminantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DivergenceGridFunctionCoefficient[] = {  {&_swigt__p_mfem__DivergenceGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FaceElementTransformations[] = {{&_swigt__p_mfem__FaceElementTransformations, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IsoparametricTransformation[] = {{&_swigt__p_mfem__IsoparametricTransformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ElementTransformation[] = {  {&_swigt__p_mfem__ElementTransformation, 0, 0, 0},  {&_swigt__p_mfem__FaceElementTransformations, _p_mfem__FaceElementTransformationsTo_p_mfem__ElementTransformation, 0, 0},  {&_swigt__p_mfem__IsoparametricTransformation, _p_mfem__IsoparametricTransformationTo_p_mfem__ElementTransformation, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FunctionCoefficient[] = {  {&_swigt__p_mfem__FunctionCoefficient, 0, 0, 0},  {&_swigt__p_ScalarNumbaCoefficient, _p_ScalarNumbaCoefficientTo_p_mfem__FunctionCoefficient, 0, 0},  {&_swigt__p_mfem__PyCoefficientBase, _p_mfem__PyCoefficientBaseTo_p_mfem__FunctionCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GradientGridFunctionCoefficient[] = {  {&_swigt__p_mfem__GradientGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GridFunction[] = {  {&_swigt__p_mfem__GridFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GridFunctionCoefficient[] = {  {&_swigt__p_mfem__GridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityMatrixCoefficient[] = {  {&_swigt__p_mfem__IdentityMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InnerProductCoefficient[] = {  {&_swigt__p_mfem__InnerProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IntegrationPoint[] = {  {&_swigt__p_mfem__IntegrationPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IntegrationRule[] = {  {&_swigt__p_mfem__IntegrationRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InverseMatrixCoefficient[] = {  {&_swigt__p_mfem__InverseMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixArrayCoefficient[] = {  {&_swigt__p_mfem__MatrixArrayCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixCoefficient[] = {  {&_swigt__p_mfem__MatrixCoefficient, 0, 0, 0},  {&_swigt__p_MatrixNumbaCoefficient, _p_MatrixNumbaCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__CrossCrossCoefficient, _p_mfem__CrossCrossCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__IdentityMatrixCoefficient, _p_mfem__IdentityMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__InverseMatrixCoefficient, _p_mfem__InverseMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixArrayCoefficient, _p_mfem__MatrixArrayCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixConstantCoefficient, _p_mfem__MatrixConstantCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixFunctionCoefficient, _p_mfem__MatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixProductCoefficient, _p_mfem__MatrixProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixPyCoefficientBase, _p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixRestrictedCoefficient, _p_mfem__MatrixRestrictedCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixSumCoefficient, _p_mfem__MatrixSumCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__OuterProductCoefficient, _p_mfem__OuterProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__PWMatrixCoefficient, _p_mfem__PWMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__ScalarMatrixProductCoefficient, _p_mfem__ScalarMatrixProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixCoefficient, _p_mfem__SymmetricMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, _p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, _p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__TransposeMatrixCoefficient, _p_mfem__TransposeMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixConstantCoefficient[] = {  {&_swigt__p_mfem__MatrixConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixFunctionCoefficient[] = {  {&_swigt__p_mfem__MatrixFunctionCoefficient, 0, 0, 0},  {&_swigt__p_MatrixNumbaCoefficient, _p_MatrixNumbaCoefficientTo_p_mfem__MatrixFunctionCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixPyCoefficientBase, _p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixFunctionCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixProductCoefficient[] = {  {&_swigt__p_mfem__MatrixProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixPyCoefficientBase[] = {  {&_swigt__p_mfem__MatrixPyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixRestrictedCoefficient[] = {  {&_swigt__p_mfem__MatrixRestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixSumCoefficient[] = {  {&_swigt__p_mfem__MatrixSumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixVectorProductCoefficient[] = {  {&_swigt__p_mfem__MatrixVectorProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Mesh[] = {  {&_swigt__p_mfem__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NormalizedVectorCoefficient[] = {  {&_swigt__p_mfem__NormalizedVectorCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstrainedOperator[] = {{&_swigt__p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrixInverse[] = {{&_swigt__p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityOperator[] = {{&_swigt__p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Matrix[] = {{&_swigt__p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixInverse[] = {{&_swigt__p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductOperator[] = {{&_swigt__p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyOperatorBase[] = {{&_swigt__p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RAPOperator[] = {{&_swigt__p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScaledOperator[] = {{&_swigt__p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SparseMatrix[] = {{&_swigt__p_mfem__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentOperator[] = {{&_swigt__p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeOperator[] = {{&_swigt__p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TripleProductOperator[] = {{&_swigt__p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Operator[] = {  {&_swigt__p_mfem__Operator, 0, 0, 0},  {&_swigt__p_mfem__AbstractSparseMatrix, _p_mfem__AbstractSparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ConstrainedOperator, _p_mfem__ConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrix, _p_mfem__DenseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseSymmetricMatrix, _p_mfem__DenseSymmetricMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__IdentityOperator, _p_mfem__IdentityOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Matrix, _p_mfem__MatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ProductOperator, _p_mfem__ProductOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyOperatorBase, _p_mfem__PyOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyTimeDependentOperatorBase, _p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RAPOperator, _p_mfem__RAPOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RectangularConstrainedOperator, _p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ScaledOperator, _p_mfem__ScaledOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SecondOrderTimeDependentOperator, _p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Solver, _p_mfem__SolverTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SparseMatrix, _p_mfem__SparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentAdjointOperator, _p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentOperator, _p_mfem__TimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TransposeOperator, _p_mfem__TransposeOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TripleProductOperator, _p_mfem__TripleProductOperatorTo_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__OuterProductCoefficient[] = {  {&_swigt__p_mfem__OuterProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWCoefficient[] = {  {&_swigt__p_mfem__PWCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWConstCoefficient[] = {  {&_swigt__p_mfem__PWConstCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWMatrixCoefficient[] = {  {&_swigt__p_mfem__PWMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWVectorCoefficient[] = {  {&_swigt__p_mfem__PWVectorCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ParMesh[] = {  {&_swigt__p_mfem__ParMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PowerCoefficient[] = {  {&_swigt__p_mfem__PowerCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductCoefficient[] = {  {&_swigt__p_mfem__ProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyCoefficientBase[] = {  {&_swigt__p_mfem__PyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadratureFunction[] = {  {&_swigt__p_mfem__QuadratureFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadratureFunctionCoefficient[] = {  {&_swigt__p_mfem__QuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadratureSpaceBase[] = {  {&_swigt__p_mfem__QuadratureSpaceBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RatioCoefficient[] = {  {&_swigt__p_mfem__RatioCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RestrictedCoefficient[] = {  {&_swigt__p_mfem__RestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarMatrixProductCoefficient[] = {  {&_swigt__p_mfem__ScalarMatrixProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarVectorProductCoefficient[] = {  {&_swigt__p_mfem__ScalarVectorProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Solver[] = {  {&_swigt__p_mfem__Solver, 0, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Solver, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SumCoefficient[] = {  {&_swigt__p_mfem__SumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixCoefficient[] = {  {&_swigt__p_mfem__SymmetricMatrixCoefficient, 0, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, _p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__SymmetricMatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, _p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__SymmetricMatrixCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixConstantCoefficient[] = {  {&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixFunctionCoefficient[] = {  {&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransformedCoefficient[] = {  {&_swigt__p_mfem__TransformedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeMatrixCoefficient[] = {  {&_swigt__p_mfem__TransposeMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Vector[] = {  {&_swigt__p_mfem__Vector, 0, 0, 0},  {&_swigt__p_mfem__CoefficientVector, _p_mfem__CoefficientVectorTo_p_mfem__Vector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorArrayCoefficient[] = {  {&_swigt__p_mfem__VectorArrayCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorCoefficient[] = {  {&_swigt__p_mfem__VectorCoefficient, 0, 0, 0},  {&_swigt__p_VectorNumbaCoefficient, _p_VectorNumbaCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__CurlGridFunctionCoefficient, _p_mfem__CurlGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__GradientGridFunctionCoefficient, _p_mfem__GradientGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixVectorProductCoefficient, _p_mfem__MatrixVectorProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__NormalizedVectorCoefficient, _p_mfem__NormalizedVectorCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__PWVectorCoefficient, _p_mfem__PWVectorCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__ScalarVectorProductCoefficient, _p_mfem__ScalarVectorProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorArrayCoefficient, _p_mfem__VectorArrayCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorConstantCoefficient, _p_mfem__VectorConstantCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorCrossProductCoefficient, _p_mfem__VectorCrossProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorDeltaCoefficient, _p_mfem__VectorDeltaCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorFunctionCoefficient, _p_mfem__VectorFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorGridFunctionCoefficient, _p_mfem__VectorGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorPyCoefficientBase, _p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorQuadratureFunctionCoefficient, _p_mfem__VectorQuadratureFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorRestrictedCoefficient, _p_mfem__VectorRestrictedCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorSumCoefficient, _p_mfem__VectorSumCoefficientTo_p_mfem__VectorCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorConstantCoefficient[] = {  {&_swigt__p_mfem__VectorConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorCrossProductCoefficient[] = {  {&_swigt__p_mfem__VectorCrossProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorDeltaCoefficient[] = {  {&_swigt__p_mfem__VectorDeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorFunctionCoefficient[] = {  {&_swigt__p_mfem__VectorFunctionCoefficient, 0, 0, 0},  {&_swigt__p_VectorNumbaCoefficient, _p_VectorNumbaCoefficientTo_p_mfem__VectorFunctionCoefficient, 0, 0},  {&_swigt__p_mfem__VectorPyCoefficientBase, _p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorFunctionCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorGridFunctionCoefficient[] = {  {&_swigt__p_mfem__VectorGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorPyCoefficientBase[] = {  {&_swigt__p_mfem__VectorPyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorQuadratureFunctionCoefficient[] = {  {&_swigt__p_mfem__VectorQuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorRestrictedCoefficient[] = {  {&_swigt__p_mfem__VectorRestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorRotProductCoefficient[] = {  {&_swigt__p_mfem__VectorRotProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorSumCoefficient[] = {  {&_swigt__p_mfem__VectorSumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ScalarNumbaCoefficient[] = {{&_swigt__p_p_ScalarNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConstantCoefficient[] = {{&_swigt__p_p_mfem__ConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DeltaCoefficient[] = {{&_swigt__p_p_mfem__DeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DeterminantCoefficient[] = {{&_swigt__p_p_mfem__DeterminantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DivergenceGridFunctionCoefficient[] = {{&_swigt__p_p_mfem__DivergenceGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__FunctionCoefficient[] = {{&_swigt__p_p_mfem__FunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__GridFunctionCoefficient[] = {{&_swigt__p_p_mfem__GridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__InnerProductCoefficient[] = {{&_swigt__p_p_mfem__InnerProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PWCoefficient[] = {{&_swigt__p_p_mfem__PWCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PWConstCoefficient[] = {{&_swigt__p_p_mfem__PWConstCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PowerCoefficient[] = {{&_swigt__p_p_mfem__PowerCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ProductCoefficient[] = {{&_swigt__p_p_mfem__ProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyCoefficientBase[] = {{&_swigt__p_p_mfem__PyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__QuadratureFunctionCoefficient[] = {{&_swigt__p_p_mfem__QuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RatioCoefficient[] = {{&_swigt__p_p_mfem__RatioCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RestrictedCoefficient[] = {{&_swigt__p_p_mfem__RestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SumCoefficient[] = {{&_swigt__p_p_mfem__SumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TransformedCoefficient[] = {{&_swigt__p_p_mfem__TransformedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__VectorRotProductCoefficient[] = {{&_swigt__p_p_mfem__VectorRotProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Coefficient[] = {  {&_swigt__p_p_mfem__Coefficient, 0, 0, 0},  {&_swigt__p_p_ScalarNumbaCoefficient, _p_p_ScalarNumbaCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__ConstantCoefficient, _p_p_mfem__ConstantCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__DeltaCoefficient, _p_p_mfem__DeltaCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__DeterminantCoefficient, _p_p_mfem__DeterminantCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__DivergenceGridFunctionCoefficient, _p_p_mfem__DivergenceGridFunctionCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__FunctionCoefficient, _p_p_mfem__FunctionCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__GridFunctionCoefficient, _p_p_mfem__GridFunctionCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__InnerProductCoefficient, _p_p_mfem__InnerProductCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__PWCoefficient, _p_p_mfem__PWCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__PWConstCoefficient, _p_p_mfem__PWConstCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__PowerCoefficient, _p_p_mfem__PowerCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__ProductCoefficient, _p_p_mfem__ProductCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__PyCoefficientBase, _p_p_mfem__PyCoefficientBaseTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__QuadratureFunctionCoefficient, _p_p_mfem__QuadratureFunctionCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__RatioCoefficient, _p_p_mfem__RatioCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__RestrictedCoefficient, _p_p_mfem__RestrictedCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__SumCoefficient, _p_p_mfem__SumCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__TransformedCoefficient, _p_p_mfem__TransformedCoefficientTo_p_p_mfem__Coefficient, 0, 0},  {&_swigt__p_p_mfem__VectorRotProductCoefficient, _p_p_mfem__VectorRotProductCoefficientTo_p_p_mfem__Coefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IntegrationRule[] = {  {&_swigt__p_p_mfem__IntegrationRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConstrainedOperator[] = {{&_swigt__p_p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrix[] = {{&_swigt__p_p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrixInverse[] = {{&_swigt__p_p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseSymmetricMatrix[] = {{&_swigt__p_p_mfem__DenseSymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IdentityOperator[] = {{&_swigt__p_p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Matrix[] = {{&_swigt__p_p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__MatrixInverse[] = {{&_swigt__p_p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ProductOperator[] = {{&_swigt__p_p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyOperatorBase[] = {{&_swigt__p_p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RAPOperator[] = {{&_swigt__p_p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ScaledOperator[] = {{&_swigt__p_p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SparseMatrix[] = {{&_swigt__p_p_mfem__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentOperator[] = {{&_swigt__p_p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TransposeOperator[] = {{&_swigt__p_p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TripleProductOperator[] = {{&_swigt__p_p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Operator[] = {  {&_swigt__p_p_mfem__Operator, 0, 0, 0},  {&_swigt__p_p_mfem__AbstractSparseMatrix, _p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ConstrainedOperator, _p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrix, _p_p_mfem__DenseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseSymmetricMatrix, _p_p_mfem__DenseSymmetricMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__IdentityOperator, _p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Matrix, _p_p_mfem__MatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ProductOperator, _p_p_mfem__ProductOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyOperatorBase, _p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyTimeDependentOperatorBase, _p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RAPOperator, _p_p_mfem__RAPOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RectangularConstrainedOperator, _p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ScaledOperator, _p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, _p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Solver, _p_p_mfem__SolverTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SparseMatrix, _p_p_mfem__SparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentAdjointOperator, _p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentOperator, _p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TransposeOperator, _p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TripleProductOperator, _p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Solver[] = {  {&_swigt__p_p_mfem__Solver, 0, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__CoefficientVector[] = {{&_swigt__p_p_mfem__CoefficientVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Vector[] = {  {&_swigt__p_p_mfem__Vector, 0, 0, 0},  {&_swigt__p_p_mfem__CoefficientVector, _p_p_mfem__CoefficientVectorTo_p_p_mfem__Vector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_double_fmfem__Vector_const_RF_t[] = {  {&_swigt__p_std__functionT_double_fmfem__Vector_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_double_fmfem__Vector_const_R_doubleF_t[] = {  {&_swigt__p_std__functionT_double_fmfem__Vector_const_R_doubleF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t[] = {  {&_swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t[] = {  {&_swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t[] = {  {&_swigt__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t[] = {  {&_swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t[] = {  {&_swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t[] = {  {&_swigt__p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc___input,
  _swigc__p_MatrixNumbaCoefficient,
  _swigc__p_MatrixNumbaFunction,
  _swigc__p_MatrixNumbaFunction2,
  _swigc__p_NumbaCoefficientBase,
  _swigc__p_NumbaFunction,
  _swigc__p_NumbaFunctionBase,
  _swigc__p_PyMFEM__wFILE,
  _swigc__p_ScalarNumbaCoefficient,
  _swigc__p_ScalarNumbaFunction2,
  _swigc__p_VectorNumbaCoefficient,
  _swigc__p_VectorNumbaFunction,
  _swigc__p_VectorNumbaFunction2,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_double__double,
  _swigc__p_f_double_double__double,
  _swigc__p_f_r_mfem__Vector__double,
  _swigc__p_f_r_mfem__Vector_double__double,
  _swigc__p_int,
  _swigc__p_mfem__AbstractSparseMatrix,
  _swigc__p_mfem__ArrayT_MatrixNumbaCoefficient_p_t,
  _swigc__p_mfem__ArrayT_ScalarNumbaCoefficient_p_t,
  _swigc__p_mfem__ArrayT_VectorNumbaCoefficient_p_t,
  _swigc__p_mfem__ArrayT_int_t,
  _swigc__p_mfem__ArrayT_mfem__Coefficient_p_t,
  _swigc__p_mfem__ArrayT_mfem__MatrixCoefficient_p_t,
  _swigc__p_mfem__ArrayT_mfem__VectorCoefficient_p_t,
  _swigc__p_mfem__Coefficient,
  _swigc__p_mfem__CoefficientVector,
  _swigc__p_mfem__ConstantCoefficient,
  _swigc__p_mfem__ConstrainedOperator,
  _swigc__p_mfem__CrossCrossCoefficient,
  _swigc__p_mfem__CurlGridFunctionCoefficient,
  _swigc__p_mfem__DeltaCoefficient,
  _swigc__p_mfem__DenseMatrix,
  _swigc__p_mfem__DenseMatrixInverse,
  _swigc__p_mfem__DenseSymmetricMatrix,
  _swigc__p_mfem__DeterminantCoefficient,
  _swigc__p_mfem__DivergenceGridFunctionCoefficient,
  _swigc__p_mfem__ElementTransformation,
  _swigc__p_mfem__FaceElementTransformations,
  _swigc__p_mfem__FunctionCoefficient,
  _swigc__p_mfem__GradientGridFunctionCoefficient,
  _swigc__p_mfem__GridFunction,
  _swigc__p_mfem__GridFunctionCoefficient,
  _swigc__p_mfem__IdentityMatrixCoefficient,
  _swigc__p_mfem__IdentityOperator,
  _swigc__p_mfem__InnerProductCoefficient,
  _swigc__p_mfem__IntegrationPoint,
  _swigc__p_mfem__IntegrationRule,
  _swigc__p_mfem__InverseMatrixCoefficient,
  _swigc__p_mfem__IsoparametricTransformation,
  _swigc__p_mfem__Matrix,
  _swigc__p_mfem__MatrixArrayCoefficient,
  _swigc__p_mfem__MatrixCoefficient,
  _swigc__p_mfem__MatrixConstantCoefficient,
  _swigc__p_mfem__MatrixFunctionCoefficient,
  _swigc__p_mfem__MatrixInverse,
  _swigc__p_mfem__MatrixProductCoefficient,
  _swigc__p_mfem__MatrixPyCoefficientBase,
  _swigc__p_mfem__MatrixRestrictedCoefficient,
  _swigc__p_mfem__MatrixSumCoefficient,
  _swigc__p_mfem__MatrixVectorProductCoefficient,
  _swigc__p_mfem__Mesh,
  _swigc__p_mfem__NormalizedVectorCoefficient,
  _swigc__p_mfem__Operator,
  _swigc__p_mfem__OuterProductCoefficient,
  _swigc__p_mfem__PWCoefficient,
  _swigc__p_mfem__PWConstCoefficient,
  _swigc__p_mfem__PWMatrixCoefficient,
  _swigc__p_mfem__PWVectorCoefficient,
  _swigc__p_mfem__ParMesh,
  _swigc__p_mfem__PowerCoefficient,
  _swigc__p_mfem__ProductCoefficient,
  _swigc__p_mfem__ProductOperator,
  _swigc__p_mfem__PyCoefficientBase,
  _swigc__p_mfem__PyOperatorBase,
  _swigc__p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_mfem__QuadratureFunction,
  _swigc__p_mfem__QuadratureFunctionCoefficient,
  _swigc__p_mfem__QuadratureSpaceBase,
  _swigc__p_mfem__RAPOperator,
  _swigc__p_mfem__RatioCoefficient,
  _swigc__p_mfem__RectangularConstrainedOperator,
  _swigc__p_mfem__RestrictedCoefficient,
  _swigc__p_mfem__ScalarMatrixProductCoefficient,
  _swigc__p_mfem__ScalarVectorProductCoefficient,
  _swigc__p_mfem__ScaledOperator,
  _swigc__p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_mfem__Solver,
  _swigc__p_mfem__SparseMatrix,
  _swigc__p_mfem__SumCoefficient,
  _swigc__p_mfem__SymmetricMatrixCoefficient,
  _swigc__p_mfem__SymmetricMatrixConstantCoefficient,
  _swigc__p_mfem__SymmetricMatrixFunctionCoefficient,
  _swigc__p_mfem__TimeDependentAdjointOperator,
  _swigc__p_mfem__TimeDependentOperator,
  _swigc__p_mfem__TransformedCoefficient,
  _swigc__p_mfem__TransposeMatrixCoefficient,
  _swigc__p_mfem__TransposeOperator,
  _swigc__p_mfem__TripleProductOperator,
  _swigc__p_mfem__Vector,
  _swigc__p_mfem__VectorArrayCoefficient,
  _swigc__p_mfem__VectorCoefficient,
  _swigc__p_mfem__VectorConstantCoefficient,
  _swigc__p_mfem__VectorCrossProductCoefficient,
  _swigc__p_mfem__VectorDeltaCoefficient,
  _swigc__p_mfem__VectorFunctionCoefficient,
  _swigc__p_mfem__VectorGridFunctionCoefficient,
  _swigc__p_mfem__VectorPyCoefficientBase,
  _swigc__p_mfem__VectorQuadratureFunctionCoefficient,
  _swigc__p_mfem__VectorRestrictedCoefficient,
  _swigc__p_mfem__VectorRotProductCoefficient,
  _swigc__p_mfem__VectorSumCoefficient,
  _swigc__p_p_ScalarNumbaCoefficient,
  _swigc__p_p_double,
  _swigc__p_p_mfem__AbstractSparseMatrix,
  _swigc__p_p_mfem__Coefficient,
  _swigc__p_p_mfem__CoefficientVector,
  _swigc__p_p_mfem__ConstantCoefficient,
  _swigc__p_p_mfem__ConstrainedOperator,
  _swigc__p_p_mfem__DeltaCoefficient,
  _swigc__p_p_mfem__DenseMatrix,
  _swigc__p_p_mfem__DenseMatrixInverse,
  _swigc__p_p_mfem__DenseSymmetricMatrix,
  _swigc__p_p_mfem__DeterminantCoefficient,
  _swigc__p_p_mfem__DivergenceGridFunctionCoefficient,
  _swigc__p_p_mfem__FunctionCoefficient,
  _swigc__p_p_mfem__GridFunctionCoefficient,
  _swigc__p_p_mfem__IdentityOperator,
  _swigc__p_p_mfem__InnerProductCoefficient,
  _swigc__p_p_mfem__IntegrationRule,
  _swigc__p_p_mfem__Matrix,
  _swigc__p_p_mfem__MatrixInverse,
  _swigc__p_p_mfem__Operator,
  _swigc__p_p_mfem__PWCoefficient,
  _swigc__p_p_mfem__PWConstCoefficient,
  _swigc__p_p_mfem__PowerCoefficient,
  _swigc__p_p_mfem__ProductCoefficient,
  _swigc__p_p_mfem__ProductOperator,
  _swigc__p_p_mfem__PyCoefficientBase,
  _swigc__p_p_mfem__PyOperatorBase,
  _swigc__p_p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_p_mfem__QuadratureFunctionCoefficient,
  _swigc__p_p_mfem__RAPOperator,
  _swigc__p_p_mfem__RatioCoefficient,
  _swigc__p_p_mfem__RectangularConstrainedOperator,
  _swigc__p_p_mfem__RestrictedCoefficient,
  _swigc__p_p_mfem__ScaledOperator,
  _swigc__p_p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_p_mfem__Solver,
  _swigc__p_p_mfem__SparseMatrix,
  _swigc__p_p_mfem__SumCoefficient,
  _swigc__p_p_mfem__TimeDependentAdjointOperator,
  _swigc__p_p_mfem__TimeDependentOperator,
  _swigc__p_p_mfem__TransformedCoefficient,
  _swigc__p_p_mfem__TransposeOperator,
  _swigc__p_p_mfem__TripleProductOperator,
  _swigc__p_p_mfem__Vector,
  _swigc__p_p_mfem__VectorRotProductCoefficient,
  _swigc__p_std__functionT_double_fmfem__Vector_const_RF_t,
  _swigc__p_std__functionT_double_fmfem__Vector_const_R_doubleF_t,
  _swigc__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseMatrix_RF_t,
  _swigc__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__DenseSymmetricMatrix_RF_t,
  _swigc__p_std__functionT_void_fmfem__Vector_const_R_double_mfem__Vector_RF_t,
  _swigc__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseMatrix_RF_t,
  _swigc__p_std__functionT_void_fmfem__Vector_const_R_mfem__DenseSymmetricMatrix_RF_t,
  _swigc__p_std__functionT_void_fmfem__Vector_const_R_mfem__Vector_RF_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "MFEM_VERSION",SWIG_From_int(static_cast< int >(40503)));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_STRING",SWIG_FromCharPtr("4.5.3"));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_TYPE",SWIG_From_int(static_cast< int >(((40503)%2))));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_TYPE_RELEASE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_TYPE_DEVELOPMENT",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_MAJOR",SWIG_From_int(static_cast< int >(((40503)/10000))));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_MINOR",SWIG_From_int(static_cast< int >((((40503)/100)%100))));
  SWIG_Python_SetConstant(d, "MFEM_VERSION_PATCH",SWIG_From_int(static_cast< int >(((40503)%100))));
  
  import_array();
  
  SWIG_Python_SetConstant(d, "CoefficientStorage_FULL",SWIG_From_int(static_cast< int >(mfem::CoefficientStorage::FULL)));
  SWIG_Python_SetConstant(d, "CoefficientStorage_CONSTANTS",SWIG_From_int(static_cast< int >(mfem::CoefficientStorage::CONSTANTS)));
  SWIG_Python_SetConstant(d, "CoefficientStorage_SYMMETRIC",SWIG_From_int(static_cast< int >(mfem::CoefficientStorage::SYMMETRIC)));
  SWIG_Python_SetConstant(d, "CoefficientStorage_COMPRESSED",SWIG_From_int(static_cast< int >(mfem::CoefficientStorage::COMPRESSED)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}


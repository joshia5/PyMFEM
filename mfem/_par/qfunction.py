# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _qfunction
else:
    import _qfunction

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _qfunction.SWIG_PyInstanceMethod_New
_swig_new_static_method = _qfunction.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._par.fe
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.globals
import mfem._par.vector
import mfem._par.geom
import mfem._par.intrules
import mfem._par.densemat
import mfem._par.operators
import mfem._par.matrix
import mfem._par.sparsemat
import mfem._par.fe_base
import mfem._par.fe_fixed_order
import mfem._par.element
import mfem._par.table
import mfem._par.hash
import mfem._par.fe_h1
import mfem._par.fe_nd
import mfem._par.fe_rt
import mfem._par.fe_l2
import mfem._par.fe_nurbs
import mfem._par.fe_pos
import mfem._par.fe_ser
import mfem._par.mesh
import mfem._par.sort_pairs
import mfem._par.ncmesh
import mfem._par.vtk
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.coefficient
import mfem._par.symmat
import mfem._par.eltrans
import mfem._par.fespace
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.doftrans
import mfem._par.handle
import mfem._par.hypre
import mfem._par.restriction
import mfem._par.bilininteg
import mfem._par.linearform
import mfem._par.nonlininteg
import mfem._par.std_vectors
import mfem._par.qspace
class QuadratureFunction(mfem._par.vector.Vector):
    r"""Proxy of C++ mfem::QuadratureFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(QuadratureFunction self) -> QuadratureFunction
        __init__(QuadratureFunction self, QuadratureSpaceBase qspace_, int vdim_=1) -> QuadratureFunction
        __init__(QuadratureFunction self, QuadratureSpaceBase qspace_, int vdim_=1) -> QuadratureFunction
        __init__(QuadratureFunction self, QuadratureSpaceBase qspace_, double * qf_data, int vdim_=1) -> QuadratureFunction
        __init__(QuadratureFunction self, QuadratureFunction orig) -> QuadratureFunction
        __init__(QuadratureFunction self, Mesh mesh, std::istream & _in) -> QuadratureFunction
        """
        _qfunction.QuadratureFunction_swiginit(self, _qfunction.new_QuadratureFunction(*args))

    def GetVDim(self):
        r"""GetVDim(QuadratureFunction self) -> int"""
        return _qfunction.QuadratureFunction_GetVDim(self)
    GetVDim = _swig_new_instance_method(_qfunction.QuadratureFunction_GetVDim)

    def SetVDim(self, vdim_):
        r"""SetVDim(QuadratureFunction self, int vdim_)"""
        return _qfunction.QuadratureFunction_SetVDim(self, vdim_)
    SetVDim = _swig_new_instance_method(_qfunction.QuadratureFunction_SetVDim)

    def GetSpace(self, *args):
        r"""
        GetSpace(QuadratureFunction self) -> QuadratureSpaceBase
        GetSpace(QuadratureFunction self) -> QuadratureSpaceBase
        """
        return _qfunction.QuadratureFunction_GetSpace(self, *args)
    GetSpace = _swig_new_instance_method(_qfunction.QuadratureFunction_GetSpace)

    def OwnsSpace(self):
        r"""OwnsSpace(QuadratureFunction self) -> bool"""
        return _qfunction.QuadratureFunction_OwnsSpace(self)
    OwnsSpace = _swig_new_instance_method(_qfunction.QuadratureFunction_OwnsSpace)

    def SetOwnsSpace(self, own):
        r"""SetOwnsSpace(QuadratureFunction self, bool own)"""
        return _qfunction.QuadratureFunction_SetOwnsSpace(self, own)
    SetOwnsSpace = _swig_new_instance_method(_qfunction.QuadratureFunction_SetOwnsSpace)

    def ProjectGridFunction(self, gf):
        r"""ProjectGridFunction(QuadratureFunction self, GridFunction gf)"""
        return _qfunction.QuadratureFunction_ProjectGridFunction(self, gf)
    ProjectGridFunction = _swig_new_instance_method(_qfunction.QuadratureFunction_ProjectGridFunction)

    def GetValues(self, *args):
        r"""
        GetValues(QuadratureFunction self, int idx, Vector values)
        GetValues(QuadratureFunction self, int idx, Vector values)
        GetValues(QuadratureFunction self, int idx, int const ip_num, Vector values)
        GetValues(QuadratureFunction self, int idx, int const ip_num, Vector values)
        GetValues(QuadratureFunction self, int idx, DenseMatrix values)
        GetValues(QuadratureFunction self, int idx, DenseMatrix values)
        """
        return _qfunction.QuadratureFunction_GetValues(self, *args)
    GetValues = _swig_new_instance_method(_qfunction.QuadratureFunction_GetValues)

    def GetIntRule(self, idx):
        r"""GetIntRule(QuadratureFunction self, int idx) -> IntegrationRule"""
        return _qfunction.QuadratureFunction_GetIntRule(self, idx)
    GetIntRule = _swig_new_instance_method(_qfunction.QuadratureFunction_GetIntRule)

    def SaveVTU(self, *args):
        r"""
        SaveVTU(QuadratureFunction self, std::ostream & out, mfem::VTKFormat format=ASCII, int compression_level=0)
        SaveVTU(QuadratureFunction self, std::string const & filename, mfem::VTKFormat format=ASCII, int compression_level=0)
        """
        return _qfunction.QuadratureFunction_SaveVTU(self, *args)
    SaveVTU = _swig_new_instance_method(_qfunction.QuadratureFunction_SaveVTU)
    __swig_destroy__ = _qfunction.delete_QuadratureFunction

    def Save(self, *args):
        r"""
        Save(QuadratureFunction self, std::ostream & out)
        Save(QuadratureFunction self, char const * file, int precision=16)
        """
        return _qfunction.QuadratureFunction_Save(self, *args)
    Save = _swig_new_instance_method(_qfunction.QuadratureFunction_Save)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(QuadratureFunction self, char const * file, int precision=16)"""
        return _qfunction.QuadratureFunction_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_qfunction.QuadratureFunction_SaveGZ)

# Register QuadratureFunction in _qfunction:
_qfunction.QuadratureFunction_swigregister(QuadratureFunction)


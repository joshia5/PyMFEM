/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_PyMFEM__wFILE swig_types[0]
#define SWIGTYPE_p_bool swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_double swig_types[3]
#define SWIGTYPE_p_int swig_types[4]
#define SWIGTYPE_p_mfem__AbstractSparseMatrix swig_types[5]
#define SWIGTYPE_p_mfem__ArrayT_int_t swig_types[6]
#define SWIGTYPE_p_mfem__CholeskyFactors swig_types[7]
#define SWIGTYPE_p_mfem__ConstrainedOperator swig_types[8]
#define SWIGTYPE_p_mfem__DenseMatrix swig_types[9]
#define SWIGTYPE_p_mfem__DenseMatrixInverse swig_types[10]
#define SWIGTYPE_p_mfem__DenseTensor swig_types[11]
#define SWIGTYPE_p_mfem__Factors swig_types[12]
#define SWIGTYPE_p_mfem__IdentityOperator swig_types[13]
#define SWIGTYPE_p_mfem__LUFactors swig_types[14]
#define SWIGTYPE_p_mfem__Matrix swig_types[15]
#define SWIGTYPE_p_mfem__MatrixInverse swig_types[16]
#define SWIGTYPE_p_mfem__MemoryT_double_t swig_types[17]
#define SWIGTYPE_p_mfem__Operator swig_types[18]
#define SWIGTYPE_p_mfem__ProductOperator swig_types[19]
#define SWIGTYPE_p_mfem__PyOperatorBase swig_types[20]
#define SWIGTYPE_p_mfem__PyTimeDependentOperatorBase swig_types[21]
#define SWIGTYPE_p_mfem__RAPOperator swig_types[22]
#define SWIGTYPE_p_mfem__RectangularConstrainedOperator swig_types[23]
#define SWIGTYPE_p_mfem__ScaledOperator swig_types[24]
#define SWIGTYPE_p_mfem__SecondOrderTimeDependentOperator swig_types[25]
#define SWIGTYPE_p_mfem__Solver swig_types[26]
#define SWIGTYPE_p_mfem__Table swig_types[27]
#define SWIGTYPE_p_mfem__TimeDependentAdjointOperator swig_types[28]
#define SWIGTYPE_p_mfem__TimeDependentOperator swig_types[29]
#define SWIGTYPE_p_mfem__TransposeOperator swig_types[30]
#define SWIGTYPE_p_mfem__TripleProductOperator swig_types[31]
#define SWIGTYPE_p_mfem__Vector swig_types[32]
#define SWIGTYPE_p_p_mfem__AbstractSparseMatrix swig_types[33]
#define SWIGTYPE_p_p_mfem__ConstrainedOperator swig_types[34]
#define SWIGTYPE_p_p_mfem__DenseMatrix swig_types[35]
#define SWIGTYPE_p_p_mfem__DenseMatrixInverse swig_types[36]
#define SWIGTYPE_p_p_mfem__IdentityOperator swig_types[37]
#define SWIGTYPE_p_p_mfem__Matrix swig_types[38]
#define SWIGTYPE_p_p_mfem__MatrixInverse swig_types[39]
#define SWIGTYPE_p_p_mfem__Operator swig_types[40]
#define SWIGTYPE_p_p_mfem__ProductOperator swig_types[41]
#define SWIGTYPE_p_p_mfem__PyOperatorBase swig_types[42]
#define SWIGTYPE_p_p_mfem__PyTimeDependentOperatorBase swig_types[43]
#define SWIGTYPE_p_p_mfem__RAPOperator swig_types[44]
#define SWIGTYPE_p_p_mfem__RectangularConstrainedOperator swig_types[45]
#define SWIGTYPE_p_p_mfem__ScaledOperator swig_types[46]
#define SWIGTYPE_p_p_mfem__SecondOrderTimeDependentOperator swig_types[47]
#define SWIGTYPE_p_p_mfem__Solver swig_types[48]
#define SWIGTYPE_p_p_mfem__TimeDependentAdjointOperator swig_types[49]
#define SWIGTYPE_p_p_mfem__TimeDependentOperator swig_types[50]
#define SWIGTYPE_p_p_mfem__TransposeOperator swig_types[51]
#define SWIGTYPE_p_p_mfem__TripleProductOperator swig_types[52]
#define SWIGTYPE_p_p_mfem__Vector swig_types[53]
#define SWIGTYPE_p_void swig_types[54]
static swig_type_info *swig_types[56];
static swig_module_info swig_module = {swig_types, 55, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _densemat.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__densemat

#else
#  define SWIG_init    init_densemat

#endif
#define SWIG_name    "_densemat"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <fstream>
#include <iostream>
#include "mfem.hpp"
#include "numpy/arrayobject.h"
#include "pyoperator.hpp"
#include "../common/io_stream.hpp"
using namespace mfem;  


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


  #define SWIG_From_double   PyFloat_FromDouble 


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN mfem::DenseMatrix *new_mfem_DenseMatrix__SWIG_7(PyObject *numpymat){
    /* note that these error does not raise error in python
       type check is actually done in wrapper layer */
    if (!PyArray_Check(numpymat)){
       PyErr_SetString(PyExc_ValueError, "Input data must be ndarray");
       return NULL;
    }
    PyArrayObject *numpymat0 = reinterpret_cast<PyArrayObject *>(numpymat);
    int typ = PyArray_TYPE(numpymat0);
    if (typ != NPY_DOUBLE){
        PyErr_SetString(PyExc_ValueError, "Input data must be float64");
	return NULL;
    }
    int ndim = PyArray_NDIM(numpymat0);
    if (ndim != 2){
      PyErr_SetString(PyExc_ValueError, "Input data NDIM must be 2");
      return NULL;
    }
    npy_intp *shape = PyArray_DIMS(numpymat0);    

    return  new mfem::DenseMatrix(shape[0], shape[1]);
  }
SWIGINTERN void mfem_DenseMatrix_Assign__SWIG_0(mfem::DenseMatrix *self,double const v){
    (* self) = v;
  }
SWIGINTERN void mfem_DenseMatrix_Assign__SWIG_1(mfem::DenseMatrix *self,mfem::DenseMatrix const &m){
    (* self) = m;
  }
SWIGINTERN void mfem_DenseMatrix_Assign__SWIG_2(mfem::DenseMatrix *self,PyObject *numpymat){
    /* note that these error does not raise error in python
       type check is actually done in wrapper layer */
    if (!PyArray_Check(numpymat)){
       PyErr_SetString(PyExc_ValueError, "Input data must be ndarray");
       return;
    }
    PyArrayObject *numpymat0 = reinterpret_cast<PyArrayObject *>(numpymat);    
    int typ = PyArray_TYPE(numpymat0);
    if (typ != NPY_DOUBLE){
        PyErr_SetString(PyExc_ValueError, "Input data must be float64");
	return;
    }
    int ndim = PyArray_NDIM(numpymat0);
    if (ndim != 2){
      PyErr_SetString(PyExc_ValueError, "Input data NDIM must be 2");
      return ;
    }
    npy_intp *shape = PyArray_DIMS(numpymat0);
    int len = self->Width()*self->Height();
    if (shape[1]*shape[0] != len){    
      PyErr_SetString(PyExc_ValueError, "input data length does not match");
      return ;
    }
    PyObject * tmp1 = 
       PyArray_Transpose(numpymat0, NULL);
    PyArrayObject * tmp2 = 
      PyArray_GETCONTIGUOUS((PyArrayObject *)tmp1);
    (* self) = (double *) PyArray_DATA(tmp2);
    Py_XDECREF(tmp1);
    Py_XDECREF(tmp2);    
  }
SWIGINTERN double const mfem_DenseMatrix___getitem__(mfem::DenseMatrix const *self,int const i,int const j){
    return (* self)(i, j);
  }
SWIGINTERN void mfem_DenseMatrix___setitem__(mfem::DenseMatrix *self,int i,int j,double const v){
    (* self)(i, j) = v;
  }
SWIGINTERN PyObject *mfem_DenseMatrix_GetDataArray(mfem::DenseMatrix const *self){
     double * A = self->Data();    
     npy_intp dims[] = {self->Width(), self->Height()};
     PyObject *tmp1 = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, A);
     PyObject *ret = PyArray_Transpose((PyArrayObject *)tmp1, NULL);
     Py_XDECREF(tmp1);
     return ret;
       //return  PyArray_Transpose((PyArrayObject *)PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, A), NULL);
  }



SWIGINTERN void mfem_DenseMatrix_Print__SWIG_1(mfem::DenseMatrix *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> Print(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_DenseMatrix_PrintGZ(mfem::DenseMatrix *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> Print(*ofile);
  delete ofile;
  }
SWIGINTERN void mfem_DenseMatrix_PrintT__SWIG_1(mfem::DenseMatrix *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> PrintT(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_DenseMatrix_PrintTGZ(mfem::DenseMatrix *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> PrintT(*ofile);
  delete ofile;
  }
SWIGINTERN void mfem_DenseMatrix_PrintMatlab__SWIG_1(mfem::DenseMatrix *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> PrintMatlab(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_DenseMatrix_PrintMatlabGZ(mfem::DenseMatrix *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> PrintMatlab(*ofile);
  delete ofile;
  }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN void mfem_DenseTensor_Assign__SWIG_0(mfem::DenseTensor *self,double const c){
    (* self) = c;
  }
SWIGINTERN void mfem_DenseTensor_Assign__SWIG_1(mfem::DenseTensor *self,mfem::DenseTensor const &m){
    (* self) = m;
  }
SWIGINTERN void mfem_DenseTensor_Assign__SWIG_2(mfem::DenseTensor *self,PyObject *numpymat){
    /* note that these error does not raise error in python
       type check is actually done in wrapper layer */
    if (!PyArray_Check(numpymat)){
       PyErr_SetString(PyExc_ValueError, "Input data must be ndarray");
       return;
    }
    PyArrayObject *numpymat0 = reinterpret_cast<PyArrayObject *>(numpymat);
    int typ = PyArray_TYPE(numpymat0);
    if (typ != NPY_DOUBLE){
        PyErr_SetString(PyExc_ValueError, "Input data must be float64");
	return;
    }
    int ndim = PyArray_NDIM(numpymat0);
    if (ndim != 3){
      PyErr_SetString(PyExc_ValueError, "Input data NDIM must be 3");
      return ;
    }
    npy_intp *shape = PyArray_DIMS(numpymat0);    
    int len = self->SizeI()*self->SizeJ()*self->SizeK();
    if (shape[2]*shape[1]*shape[0] != len){    
      PyErr_SetString(PyExc_ValueError, "input data length does not match");
      return ;
    }

    for (int i=0; i < self->SizeI(); i++){
       for (int j=0; j < self->SizeJ(); j++){
          for (int k=0; k < self->SizeK(); k++){      
	    (* self)(i, j, k) = *(double *) PyArray_GETPTR3(numpymat0, i, j, k);
	}
      }
    }
  }
SWIGINTERN double const mfem_DenseTensor___getitem____SWIG_0(mfem::DenseTensor const *self,int const i,int const j,int const k){
    return (* self)(i, j, k);
  }
SWIGINTERN mfem::DenseMatrix const &mfem_DenseTensor___getitem____SWIG_1(mfem::DenseTensor const *self,int const k){
    return (* self)(k);
  }
SWIGINTERN void mfem_DenseTensor___setitem__(mfem::DenseTensor *self,int i,int j,int k,double const v){
    (* self)(i, j, k) = v;
  }
SWIGINTERN PyObject *mfem_DenseTensor_GetDataArray(mfem::DenseTensor *self){
     // DoDo this method can not be const since DenseTensor::Data is not const
     double * A = self->Data();    
     npy_intp dims[] = {self->SizeK(), self->SizeJ(), self->SizeI()};
     PyObject * obj = PyArray_SimpleNewFromData(3, dims, NPY_DOUBLE, A);
     //obj = PyArray_SwapAxes((PyArrayObject *)obj, 0, 2);
     PyObject * ret = PyArray_SwapAxes((PyArrayObject *)obj, 1, 2);
     Py_XDECREF(obj);     
     return ret;
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "densemat_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::DenseMatrix *)new mfem::DenseMatrix(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DenseMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (mfem::DenseMatrix *)new mfem::DenseMatrix((mfem::DenseMatrix const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    try {
      result = (mfem::DenseMatrix *)new mfem::DenseMatrix(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::DenseMatrix *)new mfem::DenseMatrix(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DenseMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DenseMatrix" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    try {
      result = (mfem::DenseMatrix *)new mfem::DenseMatrix((mfem::DenseMatrix const &)*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseMatrix" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (mfem::DenseMatrix *)new mfem::DenseMatrix(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_UseExternalData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"d",  (char *)"h",  (char *)"w",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_UseExternalData", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_UseExternalData" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_UseExternalData" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->UseExternalData(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Reset(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"d",  (char *)"h",  (char *)"w",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_Reset", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Reset" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Reset" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->Reset(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_ClearExternalData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_ClearExternalData" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->ClearExternalData(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Clear" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->Clear(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Size" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (int)((mfem::DenseMatrix const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetSize" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      (arg1)->SetSize(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetSize" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      (arg1)->SetSize(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_SetSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseMatrix_SetSize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_SetSize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_SetSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::SetSize(int)\n"
    "    mfem::DenseMatrix::SetSize(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Data" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double *)((mfem::DenseMatrix const *)arg1)->Data(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetData" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double *)((mfem::DenseMatrix const *)arg1)->GetData(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetMemory__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Memory< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetMemory" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (mfem::Memory< double > *) &(arg1)->GetMemory(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MemoryT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetMemory__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Memory< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetMemory" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (mfem::Memory< double > *) &((mfem::DenseMatrix const *)arg1)->GetMemory(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MemoryT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetMemory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_GetMemory", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseMatrix_GetMemory__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseMatrix_GetMemory__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_GetMemory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::GetMemory()\n"
    "    mfem::DenseMatrix::GetMemory() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_OwnsData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_OwnsData" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (bool)((mfem::DenseMatrix const *)arg1)->OwnsData(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___call____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___call__" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (double *) &(arg1)->operator ()(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___call____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___call__" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (double *) &((mfem::DenseMatrix const *)arg1)->operator ()(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix___call__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix___call____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix___call____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::operator ()(int,int)\n"
    "    mfem::DenseMatrix::operator ()(int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___mul__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix___mul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___mul__" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix___mul__" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix___mul__" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->operator *((mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Trace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Trace" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->Trace(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Elem__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Elem" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (double *) &(arg1)->Elem(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Elem__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Elem" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (double *) &((mfem::DenseMatrix const *)arg1)->Elem(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Elem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Elem", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_Elem__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_Elem__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Elem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Elem(int,int)\n"
    "    mfem::DenseMatrix::Elem(int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Mult__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Mult" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Mult" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Mult" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Mult((double const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Mult__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Mult" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Mult" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Mult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Mult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Mult((double const *)arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Mult__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Mult" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Mult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Mult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Mult" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Mult((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Mult__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Mult" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Mult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Mult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Mult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Mult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Mult((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Mult(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Mult", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Mult__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Mult__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Mult__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Mult__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Mult'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Mult(double const *,double *) const\n"
    "    mfem::DenseMatrix::Mult(double const *,mfem::Vector &) const\n"
    "    mfem::DenseMatrix::Mult(mfem::Vector const &,double *) const\n"
    "    mfem::DenseMatrix::Mult(mfem::Vector const &,mfem::Vector &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MultTranspose__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_MultTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_MultTranspose" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_MultTranspose" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->MultTranspose((double const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MultTranspose__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_MultTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_MultTranspose" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_MultTranspose" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_MultTranspose" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->MultTranspose((double const *)arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MultTranspose__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_MultTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_MultTranspose" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_MultTranspose" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_MultTranspose" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->MultTranspose((mfem::Vector const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MultTranspose__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_MultTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_MultTranspose" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_MultTranspose" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_MultTranspose" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_MultTranspose" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->MultTranspose((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MultTranspose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_MultTranspose", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_MultTranspose__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_MultTranspose__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_MultTranspose__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_MultTranspose__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_MultTranspose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::MultTranspose(double const *,double *) const\n"
    "    mfem::DenseMatrix::MultTranspose(double const *,mfem::Vector &) const\n"
    "    mfem::DenseMatrix::MultTranspose(mfem::Vector const &,double *) const\n"
    "    mfem::DenseMatrix::MultTranspose(mfem::Vector const &,mfem::Vector &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  double arg4 = (double) (double)1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"y",  (char *)"a",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:DenseMatrix_AddMult", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddMult" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_AddMult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddMult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DenseMatrix_AddMult" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->AddMult((mfem::Vector const &)*arg2,*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMultTranspose(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  double arg4 = (double) (double)1.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"x",  (char *)"y",  (char *)"a",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:DenseMatrix_AddMultTranspose", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddMultTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_AddMultTranspose" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMultTranspose" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddMultTranspose" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMultTranspose" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DenseMatrix_AddMultTranspose" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->AddMultTranspose((mfem::Vector const &)*arg2,*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMult_a(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  mfem::Vector *arg3 = 0 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"a",  (char *)"x",  (char *)"y",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_AddMult_a", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddMult_a" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_AddMult_a" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddMult_a" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMult_a" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_AddMult_a" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMult_a" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->AddMult_a(arg2,(mfem::Vector const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMultTranspose_a(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  mfem::Vector *arg3 = 0 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"a",  (char *)"x",  (char *)"y",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_AddMultTranspose_a", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddMultTranspose_a" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_AddMultTranspose_a" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddMultTranspose_a" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMultTranspose_a" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_AddMultTranspose_a" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMultTranspose_a" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->AddMultTranspose_a(arg2,(mfem::Vector const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_InnerProduct__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_InnerProduct" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_InnerProduct" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_InnerProduct" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->InnerProduct((double const *)arg2,(double const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_LeftScaling(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_LeftScaling", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_LeftScaling" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_LeftScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_LeftScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->LeftScaling((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_InvLeftScaling(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_InvLeftScaling", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_InvLeftScaling" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_InvLeftScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_InvLeftScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->InvLeftScaling((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_RightScaling(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_RightScaling", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_RightScaling" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_RightScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_RightScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->RightScaling((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_InvRightScaling(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_InvRightScaling", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_InvRightScaling" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_InvRightScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_InvRightScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->InvRightScaling((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SymmetricScaling(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_SymmetricScaling", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SymmetricScaling" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_SymmetricScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SymmetricScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SymmetricScaling((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_InvSymmetricScaling(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"s",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_InvSymmetricScaling", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_InvSymmetricScaling" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_InvSymmetricScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_InvSymmetricScaling" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->InvSymmetricScaling((mfem::Vector const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_InnerProduct__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_InnerProduct" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_InnerProduct" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_InnerProduct" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_InnerProduct" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_InnerProduct" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->InnerProduct((mfem::Vector const &)*arg2,(mfem::Vector const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_InnerProduct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_InnerProduct", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_InnerProduct__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_InnerProduct__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_InnerProduct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::InnerProduct(double const *,double const *) const\n"
    "    mfem::DenseMatrix::InnerProduct(mfem::Vector const &,mfem::Vector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Inverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::MatrixInverse *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Inverse" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (mfem::MatrixInverse *)((mfem::DenseMatrix const *)arg1)->Inverse(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MatrixInverse, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Invert(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Invert" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->Invert(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SquareRootInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SquareRootInverse" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->SquareRootInverse(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Det(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Det" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->Det(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Weight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Weight" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->Weight(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Set__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Set" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Set" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->Set(arg2,(double const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Set__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Set" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Set" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Set" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->Set(arg2,(mfem::DenseMatrix const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Set(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Set", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Set__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Set__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Set(double,double const *)\n"
    "    mfem::DenseMatrix::Set(double,mfem::DenseMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Add__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Add" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Add" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Add" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->Add(arg2,(mfem::DenseMatrix const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Add__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Add" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Add" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->Add(arg2,(double const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Add", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Add__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Add__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Add(double const,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::Add(double const,double const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___iadd____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___iadd__" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix___iadd__" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      result = (mfem::DenseMatrix *) &(arg1)->operator +=((double const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___iadd____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___iadd__" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix___iadd__" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix___iadd__" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      result = (mfem::DenseMatrix *) &(arg1)->operator +=((mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___iadd__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix___iadd__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix___iadd____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix___iadd____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix___iadd__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::operator +=(double const *)\n"
    "    mfem::DenseMatrix::operator +=(mfem::DenseMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___isub__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  NULL 
  };
  mfem::DenseMatrix *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix___isub__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___isub__" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix___isub__" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix___isub__" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      result = (mfem::DenseMatrix *) &(arg1)->operator -=((mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___imul__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"c",  NULL 
  };
  mfem::DenseMatrix *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix___imul__", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___imul__" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (mfem::DenseMatrix *) &(arg1)->operator *=(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Neg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Neg" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->Neg(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Norm2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Norm2" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Norm2" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Norm2(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Norm2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Norm2" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Norm2" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Norm2" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Norm2(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Norm2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Norm2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix_Norm2__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix_Norm2__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Norm2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Norm2(double *) const\n"
    "    mfem::DenseMatrix::Norm2(mfem::Vector &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MaxMaxNorm(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_MaxMaxNorm" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->MaxMaxNorm(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_FNorm(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_FNorm" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->FNorm(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_FNorm2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_FNorm2" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->FNorm2(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigenvalues__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Eigenvalues" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->Eigenvalues(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigenvalues__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Eigenvalues" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Eigenvalues" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->Eigenvalues(*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigensystem__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Eigensystem" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Eigensystem" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigensystem" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Eigensystem" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigensystem" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->Eigensystem(*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigenvalues__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Eigenvalues" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Eigenvalues" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->Eigenvalues(*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigenvalues__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Eigenvalues" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Eigenvalues" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_Eigenvalues" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigenvalues" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->Eigenvalues(*arg2,*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigenvalues(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Eigenvalues", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix_Eigenvalues__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Eigenvalues__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Eigenvalues__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_Eigenvalues__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Eigenvalues'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Eigenvalues(mfem::Vector &)\n"
    "    mfem::DenseMatrix::Eigenvalues(mfem::Vector &,mfem::DenseMatrix &)\n"
    "    mfem::DenseMatrix::Eigenvalues(mfem::DenseMatrix &,mfem::Vector &)\n"
    "    mfem::DenseMatrix::Eigenvalues(mfem::DenseMatrix &,mfem::Vector &,mfem::DenseMatrix &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigensystem__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Eigensystem" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Eigensystem" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigensystem" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_Eigensystem" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigensystem" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_Eigensystem" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Eigensystem" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->Eigensystem(*arg2,*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Eigensystem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Eigensystem", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_Eigensystem__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_Eigensystem__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Eigensystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Eigensystem(mfem::Vector &,mfem::DenseMatrix &)\n"
    "    mfem::DenseMatrix::Eigensystem(mfem::DenseMatrix &,mfem::Vector &,mfem::DenseMatrix &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SingularValues(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"sv",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_SingularValues", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SingularValues" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_SingularValues" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SingularValues" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->SingularValues(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Rank(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"tol",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_Rank", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Rank" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Rank" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((mfem::DenseMatrix const *)arg1)->Rank(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CalcSingularvalue(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_CalcSingularvalue", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CalcSingularvalue" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (double)((mfem::DenseMatrix const *)arg1)->CalcSingularvalue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CalcEigenvalues(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"_lambda",  (char *)"vec",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DenseMatrix_CalcEigenvalues", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CalcEigenvalues" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CalcEigenvalues" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_CalcEigenvalues" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->CalcEigenvalues(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetRow(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"r",  (char *)"row",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DenseMatrix_GetRow", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetRow" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_GetRow" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetRow" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->GetRow(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetColumn__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetColumn" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_GetColumn" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetColumn" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->GetColumn(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetColumn__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetColumn" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (double *)(arg1)->GetColumn(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetColumn__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetColumn" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (double *)((mfem::DenseMatrix const *)arg1)->GetColumn(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetColumn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_GetColumn", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseMatrix_GetColumn__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseMatrix_GetColumn__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_GetColumn__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_GetColumn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::GetColumn(int,mfem::Vector &) const\n"
    "    mfem::DenseMatrix::GetColumn(int)\n"
    "    mfem::DenseMatrix::GetColumn(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetColumnReference(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"c",  (char *)"col",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DenseMatrix_GetColumnReference", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetColumnReference" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_GetColumnReference" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetColumnReference" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->GetColumnReference(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetRow__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetRow" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetRow" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->SetRow(arg2,(double const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetRow__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetRow" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetRow" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetRow" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->SetRow(arg2,(mfem::Vector const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetCol__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetCol" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetCol" "', argument " "3"" of type '" "double const *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->SetCol(arg2,(double const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetCol__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetCol" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetCol" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetCol" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->SetCol(arg2,(mfem::Vector const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetRow__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetRow" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DenseMatrix_SetRow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetRow(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetRow(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_SetRow", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_SetRow__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_SetRow__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DenseMatrix_SetRow__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_SetRow'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::SetRow(int,double const *)\n"
    "    mfem::DenseMatrix::SetRow(int,mfem::Vector const &)\n"
    "    mfem::DenseMatrix::SetRow(int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetCol__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetCol" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DenseMatrix_SetCol" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetCol(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetCol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_SetCol", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_SetCol__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_SetCol__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DenseMatrix_SetCol__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_SetCol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::SetCol(int,double const *)\n"
    "    mfem::DenseMatrix::SetCol(int,mfem::Vector const &)\n"
    "    mfem::DenseMatrix::SetCol(int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetDiag(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"d",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_GetDiag", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetDiag" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GetDiag" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetDiag" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->GetDiag(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Getl1Diag(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"l",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_Getl1Diag", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Getl1Diag" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Getl1Diag" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Getl1Diag" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Getl1Diag(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetRowSums(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"l",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_GetRowSums", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetRowSums" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GetRowSums" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetRowSums" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->GetRowSums(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Diag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Diag" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Diag" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      (arg1)->Diag(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Diag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Diag" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Diag" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      (arg1)->Diag(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Diag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Diag", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_Diag__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_Diag__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Diag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Diag(double,int)\n"
    "    mfem::DenseMatrix::Diag(double *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Transpose__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Transpose" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->Transpose(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Transpose__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Transpose" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Transpose" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Transpose" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->Transpose((mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Transpose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Transpose", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseMatrix_Transpose__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix_Transpose__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Transpose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Transpose()\n"
    "    mfem::DenseMatrix::Transpose(mfem::DenseMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Symmetrize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Symmetrize" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->Symmetrize(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Lump(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Lump" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->Lump(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GradToCurl(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"curl",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_GradToCurl", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GradToCurl" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GradToCurl" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GradToCurl" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->GradToCurl(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GradToVectorCurl2D(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"curl",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_GradToVectorCurl2D", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GradToVectorCurl2D" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GradToVectorCurl2D" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GradToVectorCurl2D" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->GradToVectorCurl2D(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GradToDiv(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"div",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_GradToDiv", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GradToDiv" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GradToDiv" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GradToDiv" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->GradToDiv(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyRows(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  (char *)"row1",  (char *)"row2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_CopyRows", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyRows" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyRows" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyRows" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->CopyRows((mfem::DenseMatrix const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyCols(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  (char *)"col1",  (char *)"col2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_CopyCols", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyCols" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyCols" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyCols" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->CopyCols((mfem::DenseMatrix const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMN__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyMN" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg6 = PyArray_PyIntAsInt(swig_obj[5]);
  }
  {
    try {
      (arg1)->CopyMN((mfem::DenseMatrix const &)*arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMN__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyMN" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    try {
      (arg1)->CopyMN((mfem::DenseMatrix const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMNt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  (char *)"row_offset",  (char *)"col_offset",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_CopyMNt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyMNt" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyMNt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyMNt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->CopyMNt((mfem::DenseMatrix const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMN__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyMN" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg6 = PyArray_PyIntAsInt(swig_obj[5]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[6]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg7 = PyArray_PyIntAsInt(swig_obj[6]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[7]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg8 = PyArray_PyIntAsInt(swig_obj[7]);
  }
  {
    try {
      (arg1)->CopyMN((mfem::DenseMatrix const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMN(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_CopyMN", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_DenseMatrix_CopyMN__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                return _wrap_DenseMatrix_CopyMN__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                {
                  if ((PyArray_PyIntAsInt(argv[6]) == -1) && PyErr_Occurred()) {
                    PyErr_Clear();
                    _v = 0;
                  } else {
                    _v = 1;    
                  }
                }
                if (_v) {
                  {
                    if ((PyArray_PyIntAsInt(argv[7]) == -1) && PyErr_Occurred()) {
                      PyErr_Clear();
                      _v = 0;
                    } else {
                      _v = 1;    
                    }
                  }
                  if (_v) {
                    return _wrap_DenseMatrix_CopyMN__SWIG_2(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_CopyMN'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::CopyMN(mfem::DenseMatrix const &,int,int,int,int)\n"
    "    mfem::DenseMatrix::CopyMN(mfem::DenseMatrix const &,int,int)\n"
    "    mfem::DenseMatrix::CopyMN(mfem::DenseMatrix const &,int,int,int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMNDiag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyMNDiag" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_CopyMNDiag" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    try {
      (arg1)->CopyMNDiag(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMNDiag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyMNDiag" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyMNDiag" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    try {
      (arg1)->CopyMNDiag(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyMNDiag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_CopyMNDiag", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_DenseMatrix_CopyMNDiag__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_DenseMatrix_CopyMNDiag__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_CopyMNDiag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::CopyMNDiag(double,int,int,int)\n"
    "    mfem::DenseMatrix::CopyMNDiag(double *,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CopyExceptMN(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"A",  (char *)"m",  (char *)"n",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix_CopyExceptMN", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CopyExceptMN" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_CopyExceptMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_CopyExceptMN" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->CopyExceptMN((mfem::DenseMatrix const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_AddMatrix" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMatrix" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    try {
      (arg1)->AddMatrix(*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_AddMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    try {
      (arg1)->AddMatrix(arg2,(mfem::DenseMatrix const &)*arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_AddMatrix", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_DenseMatrix_AddMatrix__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_DenseMatrix_AddMatrix__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_AddMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::AddMatrix(mfem::DenseMatrix &,int,int)\n"
    "    mfem::DenseMatrix::AddMatrix(double,mfem::DenseMatrix const &,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetSubMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->GetSubMatrix((mfem::Array< int > const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetSubMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->GetSubMatrix((mfem::Array< int > const &)*arg2,(mfem::Array< int > const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetSubMatrix__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->GetSubMatrix(arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetSubMatrix__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  mfem::DenseMatrix *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DenseMatrix_GetSubMatrix" "', argument " "6"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetSubMatrix" "', argument " "6"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg6 = reinterpret_cast< mfem::DenseMatrix * >(argp6);
  {
    try {
      (arg1)->GetSubMatrix(arg2,arg3,arg4,arg5,*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetSubMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_GetSubMatrix", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_GetSubMatrix__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_GetSubMatrix__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_GetSubMatrix__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_DenseMatrix_GetSubMatrix__SWIG_3(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_GetSubMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::GetSubMatrix(mfem::Array< int > const &,mfem::DenseMatrix &) const\n"
    "    mfem::DenseMatrix::GetSubMatrix(mfem::Array< int > const &,mfem::Array< int > const &,mfem::DenseMatrix &) const\n"
    "    mfem::DenseMatrix::GetSubMatrix(int,int,mfem::DenseMatrix &)\n"
    "    mfem::DenseMatrix::GetSubMatrix(int,int,int,int,mfem::DenseMatrix &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSubMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->SetSubMatrix((mfem::Array< int > const &)*arg2,(mfem::DenseMatrix const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSubMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->SetSubMatrix((mfem::Array< int > const &)*arg2,(mfem::Array< int > const &)*arg3,(mfem::DenseMatrix const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSubMatrix__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->SetSubMatrix(arg2,(mfem::DenseMatrix const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSubMatrix__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_SetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_SetSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->SetSubMatrix(arg2,arg3,(mfem::DenseMatrix const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_SetSubMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_SetSubMatrix", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_SetSubMatrix__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_SetSubMatrix__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_SetSubMatrix__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_SetSubMatrix__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_SetSubMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::SetSubMatrix(mfem::Array< int > const &,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::SetSubMatrix(mfem::Array< int > const &,mfem::Array< int > const &,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::SetSubMatrix(int,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::SetSubMatrix(int,int,mfem::DenseMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddSubMatrix__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->AddSubMatrix((mfem::Array< int > const &)*arg2,(mfem::DenseMatrix const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddSubMatrix__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "3"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->AddSubMatrix((mfem::Array< int > const &)*arg2,(mfem::Array< int > const &)*arg3,(mfem::DenseMatrix const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddSubMatrix__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      (arg1)->AddSubMatrix(arg2,(mfem::DenseMatrix const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddSubMatrix__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseMatrix_AddSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddSubMatrix" "', argument " "4"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      (arg1)->AddSubMatrix(arg2,arg3,(mfem::DenseMatrix const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddSubMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_AddSubMatrix", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_AddSubMatrix__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrix_AddSubMatrix__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_AddSubMatrix__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DenseMatrix_AddSubMatrix__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_AddSubMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::AddSubMatrix(mfem::Array< int > const &,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::AddSubMatrix(mfem::Array< int > const &,mfem::Array< int > const &,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::AddSubMatrix(int,mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::AddSubMatrix(int,int,mfem::DenseMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AddToVector(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"offset",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DenseMatrix_AddToVector", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AddToVector" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_AddToVector" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AddToVector" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->AddToVector(arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetFromVector(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"offset",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DenseMatrix_GetFromVector", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetFromVector" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrix_GetFromVector" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_GetFromVector" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->GetFromVector(arg2,(mfem::Vector const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_AdjustDofDirection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dofs",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_AdjustDofDirection", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_AdjustDofDirection" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_AdjustDofDirection" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_AdjustDofDirection" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    try {
      (arg1)->AdjustDofDirection(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Threshold(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"eps",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_Threshold", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Threshold" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->Threshold(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_CheckFinite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_CheckFinite" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (int)((mfem::DenseMatrix const *)arg1)->CheckFinite(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Print__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  std::ostream &arg2_defvalue = mfem::out ;
  std::ostream *arg2 = (std::ostream *) &arg2_defvalue ;
  int arg3 = (int) 4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Print" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (swig_obj[1]) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(swig_obj[1], cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io2=swig_obj[1];
          stream2 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(swig_obj[1], "precision")){
            PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream2->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp2 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream2 == 0){
        if (temp2->isSTDOUT() == 1) {
          arg2 = &std::cout;
        } else if (temp2->isGZ()){
          out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
          arg2 = out_gz2;	     
        } else {
          out_txt2.open(temp2->getFilename());
          out_txt2.precision(temp2->getPrecision());
          arg2 = &out_txt2;
        }
      } else {
        arg2 = stream2;
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->Print(*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintMatlab__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  std::ostream &arg2_defvalue = mfem::out ;
  std::ostream *arg2 = (std::ostream *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintMatlab" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (swig_obj[1]) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(swig_obj[1], cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io2=swig_obj[1];
          stream2 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(swig_obj[1], "precision")){
            PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream2->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp2 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream2 == 0){
        if (temp2->isSTDOUT() == 1) {
          arg2 = &std::cout;
        } else if (temp2->isGZ()){
          out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
          arg2 = out_gz2;	     
        } else {
          out_txt2.open(temp2->getFilename());
          out_txt2.precision(temp2->getPrecision());
          arg2 = &out_txt2;
        }
      } else {
        arg2 = stream2;
      }
    }
  }
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->PrintMatlab(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  std::ostream &arg2_defvalue = mfem::out ;
  std::ostream *arg2 = (std::ostream *) &arg2_defvalue ;
  int arg3 = (int) 4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintT" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (swig_obj[1]) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(swig_obj[1], cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io2=swig_obj[1];
          stream2 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(swig_obj[1], "precision")){
            PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream2->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp2 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream2 == 0){
        if (temp2->isSTDOUT() == 1) {
          arg2 = &std::cout;
        } else if (temp2->isGZ()){
          out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
          arg2 = out_gz2;	     
        } else {
          out_txt2.open(temp2->getFilename());
          out_txt2.precision(temp2->getPrecision());
          arg2 = &out_txt2;
        }
      } else {
        arg2 = stream2;
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      ((mfem::DenseMatrix const *)arg1)->PrintT(*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_TestInversion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_TestInversion" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      (arg1)->TestInversion(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_MemoryUsage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_MemoryUsage" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = ((mfem::DenseMatrix const *)arg1)->MemoryUsage(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Read(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"on_dev",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:DenseMatrix_Read", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Read" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Read" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (double *)((mfem::DenseMatrix const *)arg1)->Read(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_HostRead(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_HostRead" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double *)((mfem::DenseMatrix const *)arg1)->HostRead(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Write(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"on_dev",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:DenseMatrix_Write", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Write" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Write" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (double *)(arg1)->Write(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_HostWrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_HostWrite" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double *)(arg1)->HostWrite(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_ReadWrite(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"on_dev",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:DenseMatrix_ReadWrite", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_ReadWrite" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_ReadWrite" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (double *)(arg1)->ReadWrite(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_HostReadWrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_HostReadWrite" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (double *)(arg1)->HostReadWrite(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Swap(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrix_Swap", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Swap" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Swap" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Swap" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->Swap(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DenseMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DenseMatrix" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = swig_obj[0];
  {
    try {
      result = (mfem::DenseMatrix *)new_mfem_DenseMatrix__SWIG_7(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrix(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DenseMatrix", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DenseMatrix__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DenseMatrix__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      return _wrap_new_DenseMatrix__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_DenseMatrix__SWIG_7(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DenseMatrix__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_new_DenseMatrix__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_new_DenseMatrix__SWIG_5(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DenseMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::DenseMatrix()\n"
    "    mfem::DenseMatrix::DenseMatrix(mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::DenseMatrix(int)\n"
    "    mfem::DenseMatrix::DenseMatrix(int,int)\n"
    "    mfem::DenseMatrix::DenseMatrix(mfem::DenseMatrix const &,char)\n"
    "    mfem::DenseMatrix::DenseMatrix(double *,int,int)\n"
    "    mfem::DenseMatrix::DenseMatrix(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Assign__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Assign" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseMatrix_Assign" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      mfem_DenseMatrix_Assign__SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Assign__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Assign" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Assign" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrix_Assign" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem_DenseMatrix_Assign__SWIG_1(arg1,(mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Assign__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Assign" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      mfem_DenseMatrix_Assign__SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Assign(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Assign", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrix_Assign__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DenseMatrix_Assign__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DenseMatrix_Assign__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Assign(double const)\n"
    "    mfem::DenseMatrix::Assign(mfem::DenseMatrix const &)\n"
    "    mfem::DenseMatrix::Assign(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___getitem__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:DenseMatrix___getitem__", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___getitem__" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (double)mfem_DenseMatrix___getitem__((mfem::DenseMatrix const *)arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix___setitem__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseMatrix___setitem__", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix___setitem__" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DenseMatrix___setitem__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      mfem_DenseMatrix___setitem__(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_GetDataArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_GetDataArray" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  {
    try {
      result = (PyObject *)mfem_DenseMatrix_GetDataArray((mfem::DenseMatrix const *)arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Print__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_Print" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_Print" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_DenseMatrix_Print__SWIG_1(arg1,(char const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_Print(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_Print", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_DenseMatrix_Print__SWIG_0(self, argc, argv);
      }
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_DenseMatrix_Print__SWIG_0(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_Print__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_DenseMatrix_Print__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_Print__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_Print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::Print(std::ostream &,int) const\n"
    "    mfem::DenseMatrix::Print(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:DenseMatrix_PrintGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintGZ" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_PrintGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_DenseMatrix_PrintGZ(arg1,(char const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintT" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_PrintT" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_DenseMatrix_PrintT__SWIG_1(arg1,(char const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_PrintT", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_DenseMatrix_PrintT__SWIG_0(self, argc, argv);
      }
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_DenseMatrix_PrintT__SWIG_0(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_PrintT__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_DenseMatrix_PrintT__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_PrintT__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_PrintT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::PrintT(std::ostream &,int) const\n"
    "    mfem::DenseMatrix::PrintT(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintTGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:DenseMatrix_PrintTGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintTGZ" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_PrintTGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_DenseMatrix_PrintTGZ(arg1,(char const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintMatlab__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintMatlab" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_PrintMatlab" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_DenseMatrix_PrintMatlab__SWIG_1(arg1,(char const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintMatlab(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrix_PrintMatlab", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_DenseMatrix_PrintMatlab__SWIG_0(self, argc, argv);
      }
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DenseMatrix_PrintMatlab__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_DenseMatrix_PrintMatlab__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_DenseMatrix_PrintMatlab__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrix_PrintMatlab'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrix::PrintMatlab(std::ostream &) const\n"
    "    mfem::DenseMatrix::PrintMatlab(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrix_PrintMatlabGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:DenseMatrix_PrintMatlabGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrix_PrintMatlabGZ" "', argument " "1"" of type '" "mfem::DenseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrix_PrintMatlabGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_DenseMatrix_PrintMatlabGZ(arg1,(char const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *DenseMatrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DenseMatrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DenseMatrix_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LinearSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 = (double) 1.e-9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"X",  (char *)"TOL",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:LinearSolve", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearSolve" "', argument " "1"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolve" "', argument " "1"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearSolve" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinearSolve" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (bool)mfem::LinearSolve(*arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"b",  (char *)"c",  (char *)"a",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:AddMult", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddMult" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMult" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMult" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::AddMult((mfem::DenseMatrix const &)*arg1,(mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMult_a(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"alpha",  (char *)"b",  (char *)"c",  (char *)"a",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:AddMult_a", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddMult_a" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMult_a" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMult_a" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddMult_a" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      mfem::AddMult_a(arg1,(mfem::DenseMatrix const &)*arg2,(mfem::DenseMatrix const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalcAdjugate(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"adja",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CalcAdjugate", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalcAdjugate" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcAdjugate" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalcAdjugate" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcAdjugate" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::CalcAdjugate((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalcAdjugateTranspose(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"adjat",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CalcAdjugateTranspose", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalcAdjugateTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcAdjugateTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalcAdjugateTranspose" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcAdjugateTranspose" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::CalcAdjugateTranspose((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalcInverse(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"inva",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CalcInverse", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalcInverse" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcInverse" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalcInverse" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcInverse" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::CalcInverse((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalcInverseTranspose(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"inva",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CalcInverseTranspose", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalcInverseTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcInverseTranspose" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalcInverseTranspose" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcInverseTranspose" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::CalcInverseTranspose((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CalcOrtho(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"J",  (char *)"n",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CalcOrtho", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CalcOrtho" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcOrtho" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CalcOrtho" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CalcOrtho" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      mfem::CalcOrtho((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultAAt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"aat",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MultAAt", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultAAt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultAAt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultAAt" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultAAt" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::MultAAt((mfem::DenseMatrix const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultADAt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"D",  (char *)"ADAt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MultADAt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultADAt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADAt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultADAt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADAt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultADAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::MultADAt((mfem::DenseMatrix const &)*arg1,(mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMultADAt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"D",  (char *)"ADAt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:AddMultADAt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddMultADAt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADAt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMultADAt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADAt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMultADAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::AddMultADAt((mfem::DenseMatrix const &)*arg1,(mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultABt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  (char *)"ABt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MultABt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultABt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultABt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultABt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultABt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultABt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultABt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::MultABt((mfem::DenseMatrix const &)*arg1,(mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultADBt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"D",  (char *)"B",  (char *)"ADBt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:MultADBt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultADBt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADBt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultADBt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADBt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultADBt" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADBt" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MultADBt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultADBt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      mfem::MultADBt((mfem::DenseMatrix const &)*arg1,(mfem::Vector const &)*arg2,(mfem::DenseMatrix const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMultABt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  (char *)"ABt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:AddMultABt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddMultABt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultABt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMultABt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultABt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMultABt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultABt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::AddMultABt((mfem::DenseMatrix const &)*arg1,(mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMultADBt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"D",  (char *)"B",  (char *)"ADBt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:AddMultADBt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddMultADBt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADBt" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMultADBt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADBt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMultADBt" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADBt" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddMultADBt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultADBt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      mfem::AddMultADBt((mfem::DenseMatrix const &)*arg1,(mfem::Vector const &)*arg2,(mfem::DenseMatrix const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMult_a_ABt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"A",  (char *)"B",  (char *)"ABt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:AddMult_a_ABt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddMult_a_ABt" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMult_a_ABt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_ABt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMult_a_ABt" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_ABt" "', argument " "3"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddMult_a_ABt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_ABt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      mfem::AddMult_a_ABt(arg1,(mfem::DenseMatrix const &)*arg2,(mfem::DenseMatrix const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultAtB(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"A",  (char *)"B",  (char *)"AtB",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MultAtB", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultAtB" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultAtB" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultAtB" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultAtB" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultAtB" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultAtB" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::MultAtB((mfem::DenseMatrix const &)*arg1,(mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMult_a_AAt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"A",  (char *)"AAt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:AddMult_a_AAt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddMult_a_AAt" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMult_a_AAt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_AAt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMult_a_AAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_AAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::AddMult_a_AAt(arg1,(mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mult_a_AAt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"A",  (char *)"AAt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mult_a_AAt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mult_a_AAt" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mult_a_AAt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mult_a_AAt" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mult_a_AAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mult_a_AAt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::Mult_a_AAt(arg1,(mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultVVt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"v",  (char *)"vvt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:MultVVt", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultVVt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultVVt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultVVt" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultVVt" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::MultVVt((mfem::Vector const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultVWt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"v",  (char *)"w",  (char *)"VWt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:MultVWt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultVWt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultVWt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultVWt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultVWt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultVWt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultVWt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::MultVWt((mfem::Vector const &)*arg1,(mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMultVWt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"v",  (char *)"w",  (char *)"VWt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:AddMultVWt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddMultVWt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultVWt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMultVWt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultVWt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMultVWt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultVWt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::AddMultVWt((mfem::Vector const &)*arg1,(mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMultVVt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Vector *arg1 = 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"v",  (char *)"VWt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:AddMultVVt", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddMultVVt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultVVt" "', argument " "1"" of type '" "mfem::Vector const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMultVVt" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMultVVt" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      mfem::AddMultVVt((mfem::Vector const &)*arg1,*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMult_a_VWt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  mfem::DenseMatrix *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"v",  (char *)"w",  (char *)"VWt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:AddMult_a_VWt", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddMult_a_VWt" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMult_a_VWt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_VWt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMult_a_VWt" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_VWt" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AddMult_a_VWt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_VWt" "', argument " "4"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< mfem::DenseMatrix * >(argp4);
  {
    try {
      mfem::AddMult_a_VWt(arg1,(mfem::Vector const &)*arg2,(mfem::Vector const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddMult_a_VVt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double arg1 ;
  mfem::Vector *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"v",  (char *)"VVt",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:AddMult_a_VVt", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AddMult_a_VVt" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddMult_a_VVt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_VVt" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AddMult_a_VVt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddMult_a_VVt" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      mfem::AddMult_a_VVt(arg1,(mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factors_data_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Factors_data_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Factors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factors_data_set" "', argument " "1"" of type '" "mfem::Factors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Factors_data_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->data = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factors_data_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Factors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factors_data_get" "', argument " "1"" of type '" "mfem::Factors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  result = (double *) ((arg1)->data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factors__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::Factors *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::Factors *)new mfem::Factors(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Factors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factors__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  mfem::Factors *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int i, si;
    if (SWIG_ConvertPtr(swig_obj[0], (void **) &arg1, SWIGTYPE_p_double, 0|0) != -1){
      
    }
    else if (PyArray_Check(swig_obj[0])){
      arg1 = (double *) PyArray_DATA((PyArrayObject *)swig_obj[0]);
      //     arg1 = (double *) PyArray_DATA(swig_obj[0]);
    }
    else {
      if (!PyList_Check(swig_obj[0])) {
        PyErr_SetString(PyExc_ValueError, "Expecting a list");
        return NULL;
      }
      si = PyList_Size(swig_obj[0]);
      //arg1 = (double *) malloc((si)*sizeof(double));
      arg1 = new double[si];
      for (i = 0; i < si; i++) {
        PyObject *s = PyList_GetItem(swig_obj[0],i);
        if (PyInt_Check(s)) {
          arg1[i] = (double)PyFloat_AsDouble(s);
        } else if (PyFloat_Check(s)) {
          arg1[i] = (double)PyFloat_AsDouble(s);
        } else {
          delete[] arg1;
          PyErr_SetString(PyExc_ValueError, "List items must be integer/float");
          return NULL;
        }
      }
    }
    
  }
  {
    try {
      result = (mfem::Factors *)new mfem::Factors(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Factors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Factors(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Factors", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Factors__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      if (SWIG_ConvertPtr(argv[0], (void **) &_v, SWIGTYPE_p_double, 1) != -1){
        _v = 1;
      }
      else if (PyList_Check(argv[0])){
        _v = 1;
      }
      else if (PyArray_Check(argv[0])){
        _v = 1;
      }
      else {
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_Factors__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Factors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Factors::Factors()\n"
    "    mfem::Factors::Factors(double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Factors_Factor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  int arg2 ;
  double arg3 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"TOL",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Factors_Factor", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Factors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factors_Factor" "', argument " "1"" of type '" "mfem::Factors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Factors_Factor" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (bool)(arg1)->Factor(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factors_Det(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Factors_Det", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Factors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factors_Det" "', argument " "1"" of type '" "mfem::Factors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (double)((mfem::Factors const *)arg1)->Det(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factors_Solve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Factors_Solve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Factors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factors_Solve" "', argument " "1"" of type '" "mfem::Factors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Factors_Solve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::Factors const *)arg1)->Solve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Factors_GetInverseMatrix(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Factors_GetInverseMatrix", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Factors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Factors_GetInverseMatrix" "', argument " "1"" of type '" "mfem::Factors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Factors_GetInverseMatrix" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::Factors const *)arg1)->GetInverseMatrix(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Factors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Factors *arg1 = (mfem::Factors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Factors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Factors" "', argument " "1"" of type '" "mfem::Factors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Factors * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Factors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__Factors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Factors_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LUFactors_ipiv_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LUFactors_ipiv_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_ipiv_set" "', argument " "1"" of type '" "mfem::LUFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LUFactors_ipiv_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  if (arg1) (arg1)->ipiv = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_ipiv_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_ipiv_get" "', argument " "1"" of type '" "mfem::LUFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  result = (int *) ((arg1)->ipiv);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LUFactors__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::LUFactors *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::LUFactors *)new mfem::LUFactors(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__LUFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LUFactors__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mfem::LUFactors *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int i, si;
    if (SWIG_ConvertPtr(swig_obj[0], (void **) &arg1, SWIGTYPE_p_double, 0|0) != -1){
      
    }
    else if (PyArray_Check(swig_obj[0])){
      arg1 = (double *) PyArray_DATA((PyArrayObject *)swig_obj[0]);
      //     arg1 = (double *) PyArray_DATA(swig_obj[0]);
    }
    else {
      if (!PyList_Check(swig_obj[0])) {
        PyErr_SetString(PyExc_ValueError, "Expecting a list");
        return NULL;
      }
      si = PyList_Size(swig_obj[0]);
      //arg1 = (double *) malloc((si)*sizeof(double));
      arg1 = new double[si];
      for (i = 0; i < si; i++) {
        PyObject *s = PyList_GetItem(swig_obj[0],i);
        if (PyInt_Check(s)) {
          arg1[i] = (double)PyFloat_AsDouble(s);
        } else if (PyFloat_Check(s)) {
          arg1[i] = (double)PyFloat_AsDouble(s);
        } else {
          delete[] arg1;
          PyErr_SetString(PyExc_ValueError, "List items must be integer/float");
          return NULL;
        }
      }
    }
    
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LUFactors" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (mfem::LUFactors *)new mfem::LUFactors(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__LUFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LUFactors(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LUFactors", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LUFactors__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      if (SWIG_ConvertPtr(argv[0], (void **) &_v, SWIGTYPE_p_double, 1) != -1){
        _v = 1;
      }
      else if (PyList_Check(argv[0])){
        _v = 1;
      }
      else if (PyArray_Check(argv[0])){
        _v = 1;
      }
      else {
        _v = 0;
      }
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LUFactors__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LUFactors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::LUFactors::LUFactors()\n"
    "    mfem::LUFactors::LUFactors(double *,int *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LUFactors_Factor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  double arg3 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"TOL",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:LUFactors_Factor", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_Factor" "', argument " "1"" of type '" "mfem::LUFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LUFactors_Factor" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (bool)(arg1)->Factor(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_Det(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LUFactors_Det", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_Det" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (double)((mfem::LUFactors const *)arg1)->Det(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_Mult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:LUFactors_Mult", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_Mult" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_Mult" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::LUFactors const *)arg1)->Mult(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_LSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:LUFactors_LSolve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_LSolve" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_LSolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::LUFactors const *)arg1)->LSolve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_USolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:LUFactors_USolve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_USolve" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_USolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::LUFactors const *)arg1)->USolve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_Solve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:LUFactors_Solve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_Solve" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_Solve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::LUFactors const *)arg1)->Solve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_RightSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:LUFactors_RightSolve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_RightSolve" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_RightSolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::LUFactors const *)arg1)->RightSolve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_GetInverseMatrix(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:LUFactors_GetInverseMatrix", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_GetInverseMatrix" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LUFactors_GetInverseMatrix" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::LUFactors const *)arg1)->GetInverseMatrix(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_SubMult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char * kwnames[] = {
    (char *)"m",  (char *)"n",  (char *)"r",  (char *)"A21",  (char *)"X1",  (char *)"X2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOO:LUFactors_SubMult", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_SubMult" "', argument " "4"" of type '" "double const *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LUFactors_SubMult" "', argument " "5"" of type '" "double const *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LUFactors_SubMult" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      mfem::LUFactors::SubMult(arg1,arg2,arg3,(double const *)arg4,(double const *)arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_BlockFactor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"A12",  (char *)"A21",  (char *)"A22",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOO:LUFactors_BlockFactor", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_BlockFactor" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LUFactors_BlockFactor" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LUFactors_BlockFactor" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LUFactors_BlockFactor" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ((mfem::LUFactors const *)arg1)->BlockFactor(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_BlockForwSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"r",  (char *)"L21",  (char *)"B1",  (char *)"B2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOOO:LUFactors_BlockForwSolve", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_BlockForwSolve" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LUFactors_BlockForwSolve" "', argument " "5"" of type '" "double const *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LUFactors_BlockForwSolve" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "LUFactors_BlockForwSolve" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      ((mfem::LUFactors const *)arg1)->BlockForwSolve(arg2,arg3,arg4,(double const *)arg5,arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LUFactors_BlockBackSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"r",  (char *)"U12",  (char *)"X2",  (char *)"Y1",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOOOO:LUFactors_BlockBackSolve", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LUFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LUFactors_BlockBackSolve" "', argument " "1"" of type '" "mfem::LUFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "LUFactors_BlockBackSolve" "', argument " "5"" of type '" "double const *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "LUFactors_BlockBackSolve" "', argument " "6"" of type '" "double const *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "LUFactors_BlockBackSolve" "', argument " "7"" of type '" "double *""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      ((mfem::LUFactors const *)arg1)->BlockBackSolve(arg2,arg3,arg4,(double const *)arg5,(double const *)arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LUFactors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LUFactors *arg1 = (mfem::LUFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LUFactors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LUFactors" "', argument " "1"" of type '" "mfem::LUFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LUFactors * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LUFactors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__LUFactors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LUFactors_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CholeskyFactors__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::CholeskyFactors *)new mfem::CholeskyFactors(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CholeskyFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CholeskyFactors__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  mfem::CholeskyFactors *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int i, si;
    if (SWIG_ConvertPtr(swig_obj[0], (void **) &arg1, SWIGTYPE_p_double, 0|0) != -1){
      
    }
    else if (PyArray_Check(swig_obj[0])){
      arg1 = (double *) PyArray_DATA((PyArrayObject *)swig_obj[0]);
      //     arg1 = (double *) PyArray_DATA(swig_obj[0]);
    }
    else {
      if (!PyList_Check(swig_obj[0])) {
        PyErr_SetString(PyExc_ValueError, "Expecting a list");
        return NULL;
      }
      si = PyList_Size(swig_obj[0]);
      //arg1 = (double *) malloc((si)*sizeof(double));
      arg1 = new double[si];
      for (i = 0; i < si; i++) {
        PyObject *s = PyList_GetItem(swig_obj[0],i);
        if (PyInt_Check(s)) {
          arg1[i] = (double)PyFloat_AsDouble(s);
        } else if (PyFloat_Check(s)) {
          arg1[i] = (double)PyFloat_AsDouble(s);
        } else {
          delete[] arg1;
          PyErr_SetString(PyExc_ValueError, "List items must be integer/float");
          return NULL;
        }
      }
    }
    
  }
  {
    try {
      result = (mfem::CholeskyFactors *)new mfem::CholeskyFactors(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CholeskyFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CholeskyFactors(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CholeskyFactors", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_CholeskyFactors__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      if (SWIG_ConvertPtr(argv[0], (void **) &_v, SWIGTYPE_p_double, 1) != -1){
        _v = 1;
      }
      else if (PyList_Check(argv[0])){
        _v = 1;
      }
      else if (PyArray_Check(argv[0])){
        _v = 1;
      }
      else {
        _v = 0;
      }
    }
    if (_v) {
      return _wrap_new_CholeskyFactors__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CholeskyFactors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::CholeskyFactors::CholeskyFactors()\n"
    "    mfem::CholeskyFactors::CholeskyFactors(double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_Factor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  double arg3 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"TOL",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:CholeskyFactors_Factor", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_Factor" "', argument " "1"" of type '" "mfem::CholeskyFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CholeskyFactors_Factor" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = (bool)(arg1)->Factor(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_Det(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CholeskyFactors_Det", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_Det" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (double)((mfem::CholeskyFactors const *)arg1)->Det(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_LMult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CholeskyFactors_LMult", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_LMult" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CholeskyFactors_LMult" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->LMult(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_UMult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CholeskyFactors_UMult", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_UMult" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CholeskyFactors_UMult" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->UMult(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_LSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CholeskyFactors_LSolve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_LSolve" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CholeskyFactors_LSolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->LSolve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_USolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CholeskyFactors_USolve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_USolve" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CholeskyFactors_USolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->USolve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_Solve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CholeskyFactors_Solve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_Solve" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CholeskyFactors_Solve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->Solve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_RightSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"n",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:CholeskyFactors_RightSolve", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_RightSolve" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CholeskyFactors_RightSolve" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->RightSolve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CholeskyFactors_GetInverseMatrix(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"m",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:CholeskyFactors_GetInverseMatrix", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CholeskyFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CholeskyFactors_GetInverseMatrix" "', argument " "1"" of type '" "mfem::CholeskyFactors const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CholeskyFactors_GetInverseMatrix" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::CholeskyFactors const *)arg1)->GetInverseMatrix(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CholeskyFactors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CholeskyFactors *arg1 = (mfem::CholeskyFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CholeskyFactors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CholeskyFactors" "', argument " "1"" of type '" "mfem::CholeskyFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CholeskyFactors * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CholeskyFactors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CholeskyFactors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CholeskyFactors_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DenseMatrixInverse__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 = (bool) false ;
  bool val1 ;
  int ecode1 = 0 ;
  mfem::DenseMatrixInverse *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 1)) SWIG_fail;
  if (swig_obj[0]) {
    ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DenseMatrixInverse" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  {
    try {
      result = (mfem::DenseMatrixInverse *)new mfem::DenseMatrixInverse(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrixInverse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrixInverse__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = 0 ;
  bool arg2 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mfem::DenseMatrixInverse *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseMatrixInverse" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DenseMatrixInverse" "', argument " "1"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DenseMatrixInverse" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (mfem::DenseMatrixInverse *)new mfem::DenseMatrixInverse((mfem::DenseMatrix const &)*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrixInverse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrixInverse__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrix *arg1 = (mfem::DenseMatrix *) 0 ;
  bool arg2 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mfem::DenseMatrixInverse *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseMatrixInverse" "', argument " "1"" of type '" "mfem::DenseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrix * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DenseMatrixInverse" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (mfem::DenseMatrixInverse *)new mfem::DenseMatrixInverse((mfem::DenseMatrix const *)arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrixInverse, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseMatrixInverse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DenseMatrixInverse", 0, 2, argv))) SWIG_fail;
  --argc;
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc <= 0) {
      return _wrap_new_DenseMatrixInverse__SWIG_0(self, argc, argv);
    }
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DenseMatrixInverse__SWIG_0(self, argc, argv);
    }
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_DenseMatrixInverse__SWIG_1(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DenseMatrixInverse__SWIG_1(self, argc, argv);
      }
    }
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_DenseMatrixInverse__SWIG_2(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DenseMatrixInverse__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DenseMatrixInverse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrixInverse::DenseMatrixInverse(bool)\n"
    "    mfem::DenseMatrixInverse::DenseMatrixInverse(mfem::DenseMatrix const &,bool)\n"
    "    mfem::DenseMatrixInverse::DenseMatrixInverse(mfem::DenseMatrix const *,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Size" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  {
    try {
      result = (int)((mfem::DenseMatrixInverse const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Factor__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Factor" "', argument " "1"" of type '" "mfem::DenseMatrixInverse *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  {
    try {
      (arg1)->Factor(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Factor__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Factor" "', argument " "1"" of type '" "mfem::DenseMatrixInverse *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_Factor" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_Factor" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      (arg1)->Factor((mfem::DenseMatrix const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Factor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrixInverse_Factor", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrixInverse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseMatrixInverse_Factor__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrixInverse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrixInverse_Factor__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrixInverse_Factor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrixInverse::Factor()\n"
    "    mfem::DenseMatrixInverse::Factor(mfem::DenseMatrix const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_SetOperator(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  mfem::Operator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"op",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrixInverse_SetOperator", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_SetOperator" "', argument " "1"" of type '" "mfem::DenseMatrixInverse *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Operator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_SetOperator" "', argument " "2"" of type '" "mfem::Operator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_SetOperator" "', argument " "2"" of type '" "mfem::Operator const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Operator * >(argp2);
  {
    try {
      (arg1)->SetOperator((mfem::Operator const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Mult__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Mult" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "double const *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrixInverse_Mult" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::DenseMatrixInverse const *)arg1)->Mult((double const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Mult__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Mult" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrixInverse_Mult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_Mult" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      ((mfem::DenseMatrixInverse const *)arg1)->Mult((mfem::Vector const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Mult__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Mult" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "mfem::DenseMatrix const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseMatrixInverse_Mult" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_Mult" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      ((mfem::DenseMatrixInverse const *)arg1)->Mult((mfem::DenseMatrix const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Mult__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Mult" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_Mult" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      ((mfem::DenseMatrixInverse const *)arg1)->Mult(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Mult(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseMatrixInverse_Mult", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrixInverse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseMatrixInverse_Mult__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrixInverse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrixInverse_Mult__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrixInverse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrixInverse_Mult__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseMatrixInverse, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DenseMatrixInverse_Mult__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseMatrixInverse_Mult'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseMatrixInverse::Mult(double const *,double *) const\n"
    "    mfem::DenseMatrixInverse::Mult(mfem::Vector const &,mfem::Vector &) const\n"
    "    mfem::DenseMatrixInverse::Mult(mfem::DenseMatrix const &,mfem::DenseMatrix &) const\n"
    "    mfem::DenseMatrixInverse::Mult(mfem::DenseMatrix &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_GetInverseMatrix(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Ainv",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseMatrixInverse_GetInverseMatrix", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_GetInverseMatrix" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseMatrixInverse_GetInverseMatrix" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseMatrixInverse_GetInverseMatrix" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  {
    try {
      ((mfem::DenseMatrixInverse const *)arg1)->GetInverseMatrix(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_Det(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_Det" "', argument " "1"" of type '" "mfem::DenseMatrixInverse const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  {
    try {
      result = (double)((mfem::DenseMatrixInverse const *)arg1)->Det(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseMatrixInverse_TestInversion(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseMatrixInverse_TestInversion" "', argument " "1"" of type '" "mfem::DenseMatrixInverse *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  {
    try {
      (arg1)->TestInversion(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DenseMatrixInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseMatrixInverse *arg1 = (mfem::DenseMatrixInverse *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseMatrixInverse, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DenseMatrixInverse" "', argument " "1"" of type '" "mfem::DenseMatrixInverse *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseMatrixInverse * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DenseMatrixInverse_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DenseMatrixInverse, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DenseMatrixInverse_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DenseTensor__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::DenseTensor *)new mfem::DenseTensor(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseTensor__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  mfem::DenseTensor *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (mfem::DenseTensor *)new mfem::DenseTensor(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseTensor__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseTensor *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseTensor" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    try {
      result = (mfem::DenseTensor *)new mfem::DenseTensor(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseTensor__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  mfem::MemoryType arg4 ;
  mfem::DenseTensor *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    PyObject* k = PyObject_GetAttrString(swig_obj[3], "value");
    int i = (int)PyLong_AsLong(k);
    arg4 = static_cast< mfem::MemoryType >(i);
  }
  {
    try {
      result = (mfem::DenseTensor *)new mfem::DenseTensor(arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseTensor__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseTensor *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__DenseTensor,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DenseTensor" "', argument " "1"" of type '" "mfem::DenseTensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DenseTensor" "', argument " "1"" of type '" "mfem::DenseTensor const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (mfem::DenseTensor *)new mfem::DenseTensor((mfem::DenseTensor const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DenseTensor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DenseTensor", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DenseTensor__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DenseTensor__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_new_DenseTensor__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_new_DenseTensor__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            _v = 0;
            PyObject* module = PyImport_ImportModule("enum");
            if (!module){
              _v = 0;
            } else {
              PyObject* cls = PyObject_GetAttrString(module, "IntEnum");
              if (!cls){
                _v = 0;            
              } else {
                int check = PyObject_IsInstance(argv[3], cls);
                if (check) {
                  _v = 1;
                }
                Py_DECREF(cls);	 
              }
              Py_DECREF(module);
            }
          }
          if (_v) {
            return _wrap_new_DenseTensor__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DenseTensor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::DenseTensor()\n"
    "    mfem::DenseTensor::DenseTensor(int,int,int)\n"
    "    mfem::DenseTensor::DenseTensor(double *,int,int,int)\n"
    "    mfem::DenseTensor::DenseTensor(int,int,int,mfem::MemoryType)\n"
    "    mfem::DenseTensor::DenseTensor(mfem::DenseTensor const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor_SizeI(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_SizeI" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (int)((mfem::DenseTensor const *)arg1)->SizeI(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_SizeJ(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_SizeJ" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (int)((mfem::DenseTensor const *)arg1)->SizeJ(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_SizeK(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_SizeK" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (int)((mfem::DenseTensor const *)arg1)->SizeK(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_TotalSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_TotalSize" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (int)((mfem::DenseTensor const *)arg1)->TotalSize(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_SetSize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  mfem::MemoryType arg5 = (mfem::MemoryType) mfem::MemoryType::PRESERVE ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  (char *)"k",  (char *)"mt_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|O:DenseTensor_SetSize", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_SetSize" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DenseTensor_SetSize" "', argument " "5"" of type '" "mfem::MemoryType""'");
    } 
    arg5 = static_cast< mfem::MemoryType >(val5);
  }
  {
    try {
      (arg1)->SetSize(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_UseExternalData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ext_data",  (char *)"i",  (char *)"j",  (char *)"k",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:DenseTensor_UseExternalData", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_UseExternalData" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseTensor_UseExternalData" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(obj4);
  }
  {
    try {
      (arg1)->UseExternalData(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___call____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___call__" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::DenseMatrix *) &(arg1)->operator ()(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___call____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___call__" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::DenseMatrix *) &((mfem::DenseTensor const *)arg1)->operator ()(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___call____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___call__" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    try {
      result = (double *) &(arg1)->operator ()(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___call____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___call__" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    try {
      result = (double *) &((mfem::DenseTensor const *)arg1)->operator ()(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseTensor___call__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseTensor___call____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseTensor___call____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_DenseTensor___call____SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_DenseTensor___call____SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseTensor___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::operator ()(int)\n"
    "    mfem::DenseTensor::operator ()(int) const\n"
    "    mfem::DenseTensor::operator ()(int,int,int)\n"
    "    mfem::DenseTensor::operator ()(int,int,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetData__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_GetData" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (double *)(arg1)->GetData(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetData__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_GetData" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (double *)((mfem::DenseTensor const *)arg1)->GetData(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseTensor_GetData", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseTensor_GetData__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseTensor_GetData__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseTensor_GetData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::GetData(int)\n"
    "    mfem::DenseTensor::GetData(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Data__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Data" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (double *)(arg1)->Data(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Data__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Data" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (double *)((mfem::DenseTensor const *)arg1)->Data(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Data(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseTensor_Data", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseTensor_Data__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseTensor_Data__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseTensor_Data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::Data()\n"
    "    mfem::DenseTensor::Data() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetMemory__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Memory< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_GetMemory" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (mfem::Memory< double > *) &(arg1)->GetMemory(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MemoryT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetMemory__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Memory< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_GetMemory" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (mfem::Memory< double > *) &((mfem::DenseTensor const *)arg1)->GetMemory(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__MemoryT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetMemory(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseTensor_GetMemory", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseTensor_GetMemory__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DenseTensor_GetMemory__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseTensor_GetMemory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::GetMemory()\n"
    "    mfem::DenseTensor::GetMemory() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor_AddMult(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  mfem::Table *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  mfem::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"elem_dof",  (char *)"x",  (char *)"y",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:DenseTensor_AddMult", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_AddMult" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Table,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseTensor_AddMult" "', argument " "2"" of type '" "mfem::Table const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseTensor_AddMult" "', argument " "2"" of type '" "mfem::Table const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Table * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DenseTensor_AddMult" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseTensor_AddMult" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DenseTensor_AddMult" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseTensor_AddMult" "', argument " "4"" of type '" "mfem::Vector &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Vector * >(argp4);
  {
    try {
      ((mfem::DenseTensor const *)arg1)->AddMult((mfem::Table const &)*arg2,(mfem::Vector const &)*arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Clear" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      (arg1)->Clear(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_MemoryUsage(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_MemoryUsage" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = ((mfem::DenseTensor const *)arg1)->MemoryUsage(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Read(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"on_dev",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:DenseTensor_Read", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Read" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseTensor_Read" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (double *)((mfem::DenseTensor const *)arg1)->Read(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_HostRead(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_HostRead" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (double *)((mfem::DenseTensor const *)arg1)->HostRead(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Write(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"on_dev",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:DenseTensor_Write", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Write" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseTensor_Write" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (double *)(arg1)->Write(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_HostWrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_HostWrite" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (double *)(arg1)->HostWrite(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_ReadWrite(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"on_dev",  NULL 
  };
  double *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:DenseTensor_ReadWrite", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_ReadWrite" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseTensor_ReadWrite" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (double *)(arg1)->ReadWrite(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_HostReadWrite(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_HostReadWrite" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (double *)(arg1)->HostReadWrite(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Swap(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  mfem::DenseTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"t",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:DenseTensor_Swap", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Swap" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseTensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseTensor_Swap" "', argument " "2"" of type '" "mfem::DenseTensor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseTensor_Swap" "', argument " "2"" of type '" "mfem::DenseTensor &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseTensor * >(argp2);
  {
    try {
      (arg1)->Swap(*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DenseTensor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DenseTensor" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Assign__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Assign" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DenseTensor_Assign" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      mfem_DenseTensor_Assign__SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Assign__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  mfem::DenseTensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Assign" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseTensor,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DenseTensor_Assign" "', argument " "2"" of type '" "mfem::DenseTensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DenseTensor_Assign" "', argument " "2"" of type '" "mfem::DenseTensor const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseTensor * >(argp2);
  {
    try {
      mfem_DenseTensor_Assign__SWIG_1(arg1,(mfem::DenseTensor const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Assign__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_Assign" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  arg2 = swig_obj[1];
  {
    try {
      mfem_DenseTensor_Assign__SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_Assign(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseTensor_Assign", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__DenseTensor, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DenseTensor_Assign__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DenseTensor_Assign__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_DenseTensor_Assign__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseTensor_Assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::Assign(double const)\n"
    "    mfem::DenseTensor::Assign(mfem::DenseTensor const &)\n"
    "    mfem::DenseTensor::Assign(PyObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___getitem__" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    try {
      result = (double)mfem_DenseTensor___getitem____SWIG_0((mfem::DenseTensor const *)arg1,arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::DenseMatrix *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___getitem__" "', argument " "1"" of type '" "mfem::DenseTensor const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::DenseMatrix *) &mfem_DenseTensor___getitem____SWIG_1((mfem::DenseTensor const *)arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DenseMatrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DenseTensor___getitem__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_DenseTensor___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__DenseTensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_DenseTensor___getitem____SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DenseTensor___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::DenseTensor::__getitem__(int const,int const,int const) const\n"
    "    mfem::DenseTensor::__getitem__(int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DenseTensor___setitem__(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"j",  (char *)"k",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:DenseTensor___setitem__", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor___setitem__" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DenseTensor___setitem__" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      mfem_DenseTensor___setitem__(arg1,arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DenseTensor_GetDataArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = (mfem::DenseTensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DenseTensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DenseTensor_GetDataArray" "', argument " "1"" of type '" "mfem::DenseTensor *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  {
    try {
      result = (PyObject *)mfem_DenseTensor_GetDataArray(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DenseTensor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DenseTensor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DenseTensor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_BatchLUFactor(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = 0 ;
  mfem::Array< int > *arg2 = 0 ;
  double arg3 = (double) (double)0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"Mlu",  (char *)"P",  (char *)"TOL",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:BatchLUFactor", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseTensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BatchLUFactor" "', argument " "1"" of type '" "mfem::DenseTensor &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BatchLUFactor" "', argument " "1"" of type '" "mfem::DenseTensor &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BatchLUFactor" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BatchLUFactor" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BatchLUFactor" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      mfem::BatchLUFactor(*arg1,*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BatchLUSolve(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::DenseTensor *arg1 = 0 ;
  mfem::Array< int > *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"Mlu",  (char *)"P",  (char *)"X",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:BatchLUSolve", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__DenseTensor,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BatchLUSolve" "', argument " "1"" of type '" "mfem::DenseTensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BatchLUSolve" "', argument " "1"" of type '" "mfem::DenseTensor const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::DenseTensor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BatchLUSolve" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BatchLUSolve" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BatchLUSolve" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BatchLUSolve" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      mfem::BatchLUSolve((mfem::DenseTensor const &)*arg1,(mfem::Array< int > const &)*arg2,*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }    
    //catch (...){
    //  SWIG_fail;
    //}
    //    catch (Swig::DirectorMethodException &e) { SWIG_fail; }
    //    catch (std::exception &e) { SWIG_fail; }    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "DenseMatrix_UseExternalData", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_UseExternalData, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_UseExternalData(DenseMatrix self, double * d, int h, int w)"},
	 { "DenseMatrix_Reset", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Reset, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Reset(DenseMatrix self, double * d, int h, int w)"},
	 { "DenseMatrix_ClearExternalData", _wrap_DenseMatrix_ClearExternalData, METH_O, "DenseMatrix_ClearExternalData(DenseMatrix self)"},
	 { "DenseMatrix_Clear", _wrap_DenseMatrix_Clear, METH_O, "DenseMatrix_Clear(DenseMatrix self)"},
	 { "DenseMatrix_Size", _wrap_DenseMatrix_Size, METH_O, "DenseMatrix_Size(DenseMatrix self) -> int"},
	 { "DenseMatrix_SetSize", _wrap_DenseMatrix_SetSize, METH_VARARGS, "\n"
		"DenseMatrix_SetSize(DenseMatrix self, int s)\n"
		"DenseMatrix_SetSize(DenseMatrix self, int h, int w)\n"
		""},
	 { "DenseMatrix_Data", _wrap_DenseMatrix_Data, METH_O, "DenseMatrix_Data(DenseMatrix self) -> double *"},
	 { "DenseMatrix_GetData", _wrap_DenseMatrix_GetData, METH_O, "DenseMatrix_GetData(DenseMatrix self) -> double *"},
	 { "DenseMatrix_GetMemory", _wrap_DenseMatrix_GetMemory, METH_VARARGS, "\n"
		"DenseMatrix_GetMemory(DenseMatrix self) -> mfem::Memory< double >\n"
		"DenseMatrix_GetMemory(DenseMatrix self) -> mfem::Memory< double > const &\n"
		""},
	 { "DenseMatrix_OwnsData", _wrap_DenseMatrix_OwnsData, METH_O, "DenseMatrix_OwnsData(DenseMatrix self) -> bool"},
	 { "DenseMatrix___call__", _wrap_DenseMatrix___call__, METH_VARARGS, "\n"
		"DenseMatrix___call__(DenseMatrix self, int i, int j) -> double\n"
		"DenseMatrix___call__(DenseMatrix self, int i, int j) -> double const &\n"
		""},
	 { "DenseMatrix___mul__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___mul__, METH_VARARGS|METH_KEYWORDS, "DenseMatrix___mul__(DenseMatrix self, DenseMatrix m) -> double"},
	 { "DenseMatrix_Trace", _wrap_DenseMatrix_Trace, METH_O, "DenseMatrix_Trace(DenseMatrix self) -> double"},
	 { "DenseMatrix_Elem", _wrap_DenseMatrix_Elem, METH_VARARGS, "\n"
		"DenseMatrix_Elem(DenseMatrix self, int i, int j) -> double\n"
		"DenseMatrix_Elem(DenseMatrix self, int i, int j) -> double const &\n"
		""},
	 { "DenseMatrix_Mult", _wrap_DenseMatrix_Mult, METH_VARARGS, "\n"
		"DenseMatrix_Mult(DenseMatrix self, double const * x, double * y)\n"
		"DenseMatrix_Mult(DenseMatrix self, double const * x, Vector y)\n"
		"DenseMatrix_Mult(DenseMatrix self, Vector x, double * y)\n"
		"DenseMatrix_Mult(DenseMatrix self, Vector x, Vector y)\n"
		""},
	 { "DenseMatrix_MultTranspose", _wrap_DenseMatrix_MultTranspose, METH_VARARGS, "\n"
		"DenseMatrix_MultTranspose(DenseMatrix self, double const * x, double * y)\n"
		"DenseMatrix_MultTranspose(DenseMatrix self, double const * x, Vector y)\n"
		"DenseMatrix_MultTranspose(DenseMatrix self, Vector x, double * y)\n"
		"DenseMatrix_MultTranspose(DenseMatrix self, Vector x, Vector y)\n"
		""},
	 { "DenseMatrix_AddMult", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMult, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_AddMult(DenseMatrix self, Vector x, Vector y, double const a=1.0)"},
	 { "DenseMatrix_AddMultTranspose", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMultTranspose, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_AddMultTranspose(DenseMatrix self, Vector x, Vector y, double const a=1.0)"},
	 { "DenseMatrix_AddMult_a", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMult_a, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_AddMult_a(DenseMatrix self, double a, Vector x, Vector y)"},
	 { "DenseMatrix_AddMultTranspose_a", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMultTranspose_a, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_AddMultTranspose_a(DenseMatrix self, double a, Vector x, Vector y)"},
	 { "DenseMatrix_LeftScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_LeftScaling, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_LeftScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InvLeftScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_InvLeftScaling, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_InvLeftScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_RightScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_RightScaling, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_RightScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InvRightScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_InvRightScaling, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_InvRightScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_SymmetricScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_SymmetricScaling, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_SymmetricScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InvSymmetricScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_InvSymmetricScaling, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_InvSymmetricScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InnerProduct", _wrap_DenseMatrix_InnerProduct, METH_VARARGS, "\n"
		"DenseMatrix_InnerProduct(DenseMatrix self, double const * x, double const * y) -> double\n"
		"DenseMatrix_InnerProduct(DenseMatrix self, Vector x, Vector y) -> double\n"
		""},
	 { "DenseMatrix_Inverse", _wrap_DenseMatrix_Inverse, METH_O, "DenseMatrix_Inverse(DenseMatrix self) -> MatrixInverse"},
	 { "DenseMatrix_Invert", _wrap_DenseMatrix_Invert, METH_O, "DenseMatrix_Invert(DenseMatrix self)"},
	 { "DenseMatrix_SquareRootInverse", _wrap_DenseMatrix_SquareRootInverse, METH_O, "DenseMatrix_SquareRootInverse(DenseMatrix self)"},
	 { "DenseMatrix_Det", _wrap_DenseMatrix_Det, METH_O, "DenseMatrix_Det(DenseMatrix self) -> double"},
	 { "DenseMatrix_Weight", _wrap_DenseMatrix_Weight, METH_O, "DenseMatrix_Weight(DenseMatrix self) -> double"},
	 { "DenseMatrix_Set", _wrap_DenseMatrix_Set, METH_VARARGS, "\n"
		"DenseMatrix_Set(DenseMatrix self, double alpha, double const * A)\n"
		"DenseMatrix_Set(DenseMatrix self, double alpha, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_Add", _wrap_DenseMatrix_Add, METH_VARARGS, "\n"
		"DenseMatrix_Add(DenseMatrix self, double const c, DenseMatrix A)\n"
		"DenseMatrix_Add(DenseMatrix self, double const c, double const * A)\n"
		""},
	 { "DenseMatrix___iadd__", _wrap_DenseMatrix___iadd__, METH_VARARGS, "\n"
		"DenseMatrix___iadd__(DenseMatrix self, double const * m) -> DenseMatrix\n"
		"DenseMatrix___iadd__(DenseMatrix self, DenseMatrix m) -> DenseMatrix\n"
		""},
	 { "DenseMatrix___isub__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___isub__, METH_VARARGS|METH_KEYWORDS, "DenseMatrix___isub__(DenseMatrix self, DenseMatrix m) -> DenseMatrix"},
	 { "DenseMatrix___imul__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___imul__, METH_VARARGS|METH_KEYWORDS, "DenseMatrix___imul__(DenseMatrix self, double c) -> DenseMatrix"},
	 { "DenseMatrix_Neg", _wrap_DenseMatrix_Neg, METH_O, "DenseMatrix_Neg(DenseMatrix self)"},
	 { "DenseMatrix_Norm2", _wrap_DenseMatrix_Norm2, METH_VARARGS, "\n"
		"DenseMatrix_Norm2(DenseMatrix self, double * v)\n"
		"DenseMatrix_Norm2(DenseMatrix self, Vector v)\n"
		""},
	 { "DenseMatrix_MaxMaxNorm", _wrap_DenseMatrix_MaxMaxNorm, METH_O, "DenseMatrix_MaxMaxNorm(DenseMatrix self) -> double"},
	 { "DenseMatrix_FNorm", _wrap_DenseMatrix_FNorm, METH_O, "DenseMatrix_FNorm(DenseMatrix self) -> double"},
	 { "DenseMatrix_FNorm2", _wrap_DenseMatrix_FNorm2, METH_O, "DenseMatrix_FNorm2(DenseMatrix self) -> double"},
	 { "DenseMatrix_Eigenvalues", _wrap_DenseMatrix_Eigenvalues, METH_VARARGS, "\n"
		"DenseMatrix_Eigenvalues(DenseMatrix self, Vector ev)\n"
		"DenseMatrix_Eigenvalues(DenseMatrix self, Vector ev, DenseMatrix evect)\n"
		"DenseMatrix_Eigenvalues(DenseMatrix self, DenseMatrix b, Vector ev)\n"
		"DenseMatrix_Eigenvalues(DenseMatrix self, DenseMatrix b, Vector ev, DenseMatrix evect)\n"
		""},
	 { "DenseMatrix_Eigensystem", _wrap_DenseMatrix_Eigensystem, METH_VARARGS, "\n"
		"DenseMatrix_Eigensystem(DenseMatrix self, Vector ev, DenseMatrix evect)\n"
		"DenseMatrix_Eigensystem(DenseMatrix self, DenseMatrix b, Vector ev, DenseMatrix evect)\n"
		""},
	 { "DenseMatrix_SingularValues", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_SingularValues, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_SingularValues(DenseMatrix self, Vector sv)"},
	 { "DenseMatrix_Rank", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Rank, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Rank(DenseMatrix self, double tol) -> int"},
	 { "DenseMatrix_CalcSingularvalue", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CalcSingularvalue, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_CalcSingularvalue(DenseMatrix self, int const i) -> double"},
	 { "DenseMatrix_CalcEigenvalues", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CalcEigenvalues, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_CalcEigenvalues(DenseMatrix self, double * _lambda, double * vec)"},
	 { "DenseMatrix_GetRow", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetRow, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GetRow(DenseMatrix self, int r, Vector row)"},
	 { "DenseMatrix_GetColumn", _wrap_DenseMatrix_GetColumn, METH_VARARGS, "\n"
		"DenseMatrix_GetColumn(DenseMatrix self, int c, Vector col)\n"
		"DenseMatrix_GetColumn(DenseMatrix self, int col) -> double\n"
		"DenseMatrix_GetColumn(DenseMatrix self, int col) -> double const *\n"
		""},
	 { "DenseMatrix_GetColumnReference", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetColumnReference, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GetColumnReference(DenseMatrix self, int c, Vector col)"},
	 { "DenseMatrix_SetRow", _wrap_DenseMatrix_SetRow, METH_VARARGS, "\n"
		"DenseMatrix_SetRow(DenseMatrix self, int r, double const * row)\n"
		"DenseMatrix_SetRow(DenseMatrix self, int r, Vector row)\n"
		"DenseMatrix_SetRow(DenseMatrix self, int row, double value)\n"
		""},
	 { "DenseMatrix_SetCol", _wrap_DenseMatrix_SetCol, METH_VARARGS, "\n"
		"DenseMatrix_SetCol(DenseMatrix self, int c, double const * col)\n"
		"DenseMatrix_SetCol(DenseMatrix self, int c, Vector col)\n"
		"DenseMatrix_SetCol(DenseMatrix self, int col, double value)\n"
		""},
	 { "DenseMatrix_GetDiag", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetDiag, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GetDiag(DenseMatrix self, Vector d)"},
	 { "DenseMatrix_Getl1Diag", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Getl1Diag, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Getl1Diag(DenseMatrix self, Vector l)"},
	 { "DenseMatrix_GetRowSums", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetRowSums, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GetRowSums(DenseMatrix self, Vector l)"},
	 { "DenseMatrix_Diag", _wrap_DenseMatrix_Diag, METH_VARARGS, "\n"
		"DenseMatrix_Diag(DenseMatrix self, double c, int n)\n"
		"DenseMatrix_Diag(DenseMatrix self, double * diag, int n)\n"
		""},
	 { "DenseMatrix_Transpose", _wrap_DenseMatrix_Transpose, METH_VARARGS, "\n"
		"DenseMatrix_Transpose(DenseMatrix self)\n"
		"DenseMatrix_Transpose(DenseMatrix self, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_Symmetrize", _wrap_DenseMatrix_Symmetrize, METH_O, "DenseMatrix_Symmetrize(DenseMatrix self)"},
	 { "DenseMatrix_Lump", _wrap_DenseMatrix_Lump, METH_O, "DenseMatrix_Lump(DenseMatrix self)"},
	 { "DenseMatrix_GradToCurl", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GradToCurl, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GradToCurl(DenseMatrix self, DenseMatrix curl)"},
	 { "DenseMatrix_GradToVectorCurl2D", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GradToVectorCurl2D, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GradToVectorCurl2D(DenseMatrix self, DenseMatrix curl)"},
	 { "DenseMatrix_GradToDiv", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GradToDiv, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GradToDiv(DenseMatrix self, Vector div)"},
	 { "DenseMatrix_CopyRows", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyRows, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_CopyRows(DenseMatrix self, DenseMatrix A, int row1, int row2)"},
	 { "DenseMatrix_CopyCols", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyCols, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_CopyCols(DenseMatrix self, DenseMatrix A, int col1, int col2)"},
	 { "DenseMatrix_CopyMNt", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyMNt, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_CopyMNt(DenseMatrix self, DenseMatrix A, int row_offset, int col_offset)"},
	 { "DenseMatrix_CopyMN", _wrap_DenseMatrix_CopyMN, METH_VARARGS, "\n"
		"DenseMatrix_CopyMN(DenseMatrix self, DenseMatrix A, int m, int n, int Aro, int Aco)\n"
		"DenseMatrix_CopyMN(DenseMatrix self, DenseMatrix A, int row_offset, int col_offset)\n"
		"DenseMatrix_CopyMN(DenseMatrix self, DenseMatrix A, int m, int n, int Aro, int Aco, int row_offset, int col_offset)\n"
		""},
	 { "DenseMatrix_CopyMNDiag", _wrap_DenseMatrix_CopyMNDiag, METH_VARARGS, "\n"
		"DenseMatrix_CopyMNDiag(DenseMatrix self, double c, int n, int row_offset, int col_offset)\n"
		"DenseMatrix_CopyMNDiag(DenseMatrix self, double * diag, int n, int row_offset, int col_offset)\n"
		""},
	 { "DenseMatrix_CopyExceptMN", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyExceptMN, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_CopyExceptMN(DenseMatrix self, DenseMatrix A, int m, int n)"},
	 { "DenseMatrix_AddMatrix", _wrap_DenseMatrix_AddMatrix, METH_VARARGS, "\n"
		"DenseMatrix_AddMatrix(DenseMatrix self, DenseMatrix A, int ro, int co)\n"
		"DenseMatrix_AddMatrix(DenseMatrix self, double a, DenseMatrix A, int ro, int co)\n"
		""},
	 { "DenseMatrix_GetSubMatrix", _wrap_DenseMatrix_GetSubMatrix, METH_VARARGS, "\n"
		"DenseMatrix_GetSubMatrix(DenseMatrix self, intArray idx, DenseMatrix A)\n"
		"DenseMatrix_GetSubMatrix(DenseMatrix self, intArray idx_i, intArray idx_j, DenseMatrix A)\n"
		"DenseMatrix_GetSubMatrix(DenseMatrix self, int ibeg, int iend, DenseMatrix A)\n"
		"DenseMatrix_GetSubMatrix(DenseMatrix self, int ibeg, int iend, int jbeg, int jend, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_SetSubMatrix", _wrap_DenseMatrix_SetSubMatrix, METH_VARARGS, "\n"
		"DenseMatrix_SetSubMatrix(DenseMatrix self, intArray idx, DenseMatrix A)\n"
		"DenseMatrix_SetSubMatrix(DenseMatrix self, intArray idx_i, intArray idx_j, DenseMatrix A)\n"
		"DenseMatrix_SetSubMatrix(DenseMatrix self, int ibeg, DenseMatrix A)\n"
		"DenseMatrix_SetSubMatrix(DenseMatrix self, int ibeg, int jbeg, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_AddSubMatrix", _wrap_DenseMatrix_AddSubMatrix, METH_VARARGS, "\n"
		"DenseMatrix_AddSubMatrix(DenseMatrix self, intArray idx, DenseMatrix A)\n"
		"DenseMatrix_AddSubMatrix(DenseMatrix self, intArray idx_i, intArray idx_j, DenseMatrix A)\n"
		"DenseMatrix_AddSubMatrix(DenseMatrix self, int ibeg, DenseMatrix A)\n"
		"DenseMatrix_AddSubMatrix(DenseMatrix self, int ibeg, int jbeg, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_AddToVector", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddToVector, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_AddToVector(DenseMatrix self, int offset, Vector v)"},
	 { "DenseMatrix_GetFromVector", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetFromVector, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_GetFromVector(DenseMatrix self, int offset, Vector v)"},
	 { "DenseMatrix_AdjustDofDirection", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AdjustDofDirection, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_AdjustDofDirection(DenseMatrix self, intArray dofs)"},
	 { "DenseMatrix_Threshold", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Threshold, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Threshold(DenseMatrix self, double eps)"},
	 { "DenseMatrix_CheckFinite", _wrap_DenseMatrix_CheckFinite, METH_O, "DenseMatrix_CheckFinite(DenseMatrix self) -> int"},
	 { "DenseMatrix_TestInversion", _wrap_DenseMatrix_TestInversion, METH_O, "DenseMatrix_TestInversion(DenseMatrix self)"},
	 { "DenseMatrix_MemoryUsage", _wrap_DenseMatrix_MemoryUsage, METH_O, "DenseMatrix_MemoryUsage(DenseMatrix self) -> std::size_t"},
	 { "DenseMatrix_Read", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Read, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Read(DenseMatrix self, bool on_dev=True) -> double const *"},
	 { "DenseMatrix_HostRead", _wrap_DenseMatrix_HostRead, METH_O, "DenseMatrix_HostRead(DenseMatrix self) -> double const *"},
	 { "DenseMatrix_Write", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Write, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Write(DenseMatrix self, bool on_dev=True) -> double *"},
	 { "DenseMatrix_HostWrite", _wrap_DenseMatrix_HostWrite, METH_O, "DenseMatrix_HostWrite(DenseMatrix self) -> double *"},
	 { "DenseMatrix_ReadWrite", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_ReadWrite, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_ReadWrite(DenseMatrix self, bool on_dev=True) -> double *"},
	 { "DenseMatrix_HostReadWrite", _wrap_DenseMatrix_HostReadWrite, METH_O, "DenseMatrix_HostReadWrite(DenseMatrix self) -> double *"},
	 { "DenseMatrix_Swap", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Swap, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_Swap(DenseMatrix self, DenseMatrix other)"},
	 { "delete_DenseMatrix", _wrap_delete_DenseMatrix, METH_O, "delete_DenseMatrix(DenseMatrix self)"},
	 { "new_DenseMatrix", _wrap_new_DenseMatrix, METH_VARARGS, "\n"
		"DenseMatrix()\n"
		"DenseMatrix(DenseMatrix arg1)\n"
		"DenseMatrix(int s)\n"
		"DenseMatrix(int m, int n)\n"
		"DenseMatrix(DenseMatrix mat, char ch)\n"
		"DenseMatrix(double * d, int h, int w)\n"
		"new_DenseMatrix(PyObject * numpymat) -> DenseMatrix\n"
		""},
	 { "DenseMatrix_Assign", _wrap_DenseMatrix_Assign, METH_VARARGS, "\n"
		"DenseMatrix_Assign(DenseMatrix self, double const v)\n"
		"DenseMatrix_Assign(DenseMatrix self, DenseMatrix m)\n"
		"DenseMatrix_Assign(DenseMatrix self, PyObject * numpymat)\n"
		""},
	 { "DenseMatrix___getitem__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___getitem__, METH_VARARGS|METH_KEYWORDS, "DenseMatrix___getitem__(DenseMatrix self, int const i, int const j) -> double const"},
	 { "DenseMatrix___setitem__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___setitem__, METH_VARARGS|METH_KEYWORDS, "DenseMatrix___setitem__(DenseMatrix self, int i, int j, double const v)"},
	 { "DenseMatrix_GetDataArray", _wrap_DenseMatrix_GetDataArray, METH_O, "DenseMatrix_GetDataArray(DenseMatrix self) -> PyObject *"},
	 { "DenseMatrix_Print", _wrap_DenseMatrix_Print, METH_VARARGS, "\n"
		"DenseMatrix_Print(DenseMatrix self, std::ostream & out=out, int width_=4)\n"
		"DenseMatrix_Print(DenseMatrix self, char const * file, int precision=16)\n"
		""},
	 { "DenseMatrix_PrintGZ", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_PrintGZ, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_PrintGZ(DenseMatrix self, char const * file, int precision=16)"},
	 { "DenseMatrix_PrintT", _wrap_DenseMatrix_PrintT, METH_VARARGS, "\n"
		"DenseMatrix_PrintT(DenseMatrix self, std::ostream & out=out, int width_=4)\n"
		"DenseMatrix_PrintT(DenseMatrix self, char const * file, int precision=16)\n"
		""},
	 { "DenseMatrix_PrintTGZ", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_PrintTGZ, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_PrintTGZ(DenseMatrix self, char const * file, int precision=16)"},
	 { "DenseMatrix_PrintMatlab", _wrap_DenseMatrix_PrintMatlab, METH_VARARGS, "\n"
		"DenseMatrix_PrintMatlab(DenseMatrix self, std::ostream & out=out)\n"
		"DenseMatrix_PrintMatlab(DenseMatrix self, char const * file, int precision=16)\n"
		""},
	 { "DenseMatrix_PrintMatlabGZ", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_PrintMatlabGZ, METH_VARARGS|METH_KEYWORDS, "DenseMatrix_PrintMatlabGZ(DenseMatrix self, char const * file, int precision=16)"},
	 { "DenseMatrix_swigregister", DenseMatrix_swigregister, METH_O, NULL},
	 { "DenseMatrix_swiginit", DenseMatrix_swiginit, METH_VARARGS, NULL},
	 { "LinearSolve", (PyCFunction)(void(*)(void))_wrap_LinearSolve, METH_VARARGS|METH_KEYWORDS, "LinearSolve(DenseMatrix A, double * X, double TOL=1.e-9) -> bool"},
	 { "AddMult", (PyCFunction)(void(*)(void))_wrap_AddMult, METH_VARARGS|METH_KEYWORDS, "AddMult(DenseMatrix b, DenseMatrix c, DenseMatrix a)"},
	 { "AddMult_a", (PyCFunction)(void(*)(void))_wrap_AddMult_a, METH_VARARGS|METH_KEYWORDS, "AddMult_a(double alpha, DenseMatrix b, DenseMatrix c, DenseMatrix a)"},
	 { "CalcAdjugate", (PyCFunction)(void(*)(void))_wrap_CalcAdjugate, METH_VARARGS|METH_KEYWORDS, "CalcAdjugate(DenseMatrix a, DenseMatrix adja)"},
	 { "CalcAdjugateTranspose", (PyCFunction)(void(*)(void))_wrap_CalcAdjugateTranspose, METH_VARARGS|METH_KEYWORDS, "CalcAdjugateTranspose(DenseMatrix a, DenseMatrix adjat)"},
	 { "CalcInverse", (PyCFunction)(void(*)(void))_wrap_CalcInverse, METH_VARARGS|METH_KEYWORDS, "CalcInverse(DenseMatrix a, DenseMatrix inva)"},
	 { "CalcInverseTranspose", (PyCFunction)(void(*)(void))_wrap_CalcInverseTranspose, METH_VARARGS|METH_KEYWORDS, "CalcInverseTranspose(DenseMatrix a, DenseMatrix inva)"},
	 { "CalcOrtho", (PyCFunction)(void(*)(void))_wrap_CalcOrtho, METH_VARARGS|METH_KEYWORDS, "CalcOrtho(DenseMatrix J, Vector n)"},
	 { "MultAAt", (PyCFunction)(void(*)(void))_wrap_MultAAt, METH_VARARGS|METH_KEYWORDS, "MultAAt(DenseMatrix a, DenseMatrix aat)"},
	 { "MultADAt", (PyCFunction)(void(*)(void))_wrap_MultADAt, METH_VARARGS|METH_KEYWORDS, "MultADAt(DenseMatrix A, Vector D, DenseMatrix ADAt)"},
	 { "AddMultADAt", (PyCFunction)(void(*)(void))_wrap_AddMultADAt, METH_VARARGS|METH_KEYWORDS, "AddMultADAt(DenseMatrix A, Vector D, DenseMatrix ADAt)"},
	 { "MultABt", (PyCFunction)(void(*)(void))_wrap_MultABt, METH_VARARGS|METH_KEYWORDS, "MultABt(DenseMatrix A, DenseMatrix B, DenseMatrix ABt)"},
	 { "MultADBt", (PyCFunction)(void(*)(void))_wrap_MultADBt, METH_VARARGS|METH_KEYWORDS, "MultADBt(DenseMatrix A, Vector D, DenseMatrix B, DenseMatrix ADBt)"},
	 { "AddMultABt", (PyCFunction)(void(*)(void))_wrap_AddMultABt, METH_VARARGS|METH_KEYWORDS, "AddMultABt(DenseMatrix A, DenseMatrix B, DenseMatrix ABt)"},
	 { "AddMultADBt", (PyCFunction)(void(*)(void))_wrap_AddMultADBt, METH_VARARGS|METH_KEYWORDS, "AddMultADBt(DenseMatrix A, Vector D, DenseMatrix B, DenseMatrix ADBt)"},
	 { "AddMult_a_ABt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_ABt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_ABt(double a, DenseMatrix A, DenseMatrix B, DenseMatrix ABt)"},
	 { "MultAtB", (PyCFunction)(void(*)(void))_wrap_MultAtB, METH_VARARGS|METH_KEYWORDS, "MultAtB(DenseMatrix A, DenseMatrix B, DenseMatrix AtB)"},
	 { "AddMult_a_AAt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_AAt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_AAt(double a, DenseMatrix A, DenseMatrix AAt)"},
	 { "Mult_a_AAt", (PyCFunction)(void(*)(void))_wrap_Mult_a_AAt, METH_VARARGS|METH_KEYWORDS, "Mult_a_AAt(double a, DenseMatrix A, DenseMatrix AAt)"},
	 { "MultVVt", (PyCFunction)(void(*)(void))_wrap_MultVVt, METH_VARARGS|METH_KEYWORDS, "MultVVt(Vector v, DenseMatrix vvt)"},
	 { "MultVWt", (PyCFunction)(void(*)(void))_wrap_MultVWt, METH_VARARGS|METH_KEYWORDS, "MultVWt(Vector v, Vector w, DenseMatrix VWt)"},
	 { "AddMultVWt", (PyCFunction)(void(*)(void))_wrap_AddMultVWt, METH_VARARGS|METH_KEYWORDS, "AddMultVWt(Vector v, Vector w, DenseMatrix VWt)"},
	 { "AddMultVVt", (PyCFunction)(void(*)(void))_wrap_AddMultVVt, METH_VARARGS|METH_KEYWORDS, "AddMultVVt(Vector v, DenseMatrix VWt)"},
	 { "AddMult_a_VWt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_VWt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_VWt(double const a, Vector v, Vector w, DenseMatrix VWt)"},
	 { "AddMult_a_VVt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_VVt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_VVt(double const a, Vector v, DenseMatrix VVt)"},
	 { "Factors_data_set", _wrap_Factors_data_set, METH_VARARGS, "Factors_data_set(Factors self, double * data)"},
	 { "Factors_data_get", _wrap_Factors_data_get, METH_O, "Factors_data_get(Factors self) -> double *"},
	 { "new_Factors", _wrap_new_Factors, METH_VARARGS, "\n"
		"Factors()\n"
		"new_Factors(double * data_) -> Factors\n"
		""},
	 { "Factors_Factor", (PyCFunction)(void(*)(void))_wrap_Factors_Factor, METH_VARARGS|METH_KEYWORDS, "Factors_Factor(Factors self, int m, double TOL=0.0) -> bool"},
	 { "Factors_Det", (PyCFunction)(void(*)(void))_wrap_Factors_Det, METH_VARARGS|METH_KEYWORDS, "Factors_Det(Factors self, int m) -> double"},
	 { "Factors_Solve", (PyCFunction)(void(*)(void))_wrap_Factors_Solve, METH_VARARGS|METH_KEYWORDS, "Factors_Solve(Factors self, int m, int n, double * X)"},
	 { "Factors_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_Factors_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "Factors_GetInverseMatrix(Factors self, int m, double * X)"},
	 { "delete_Factors", _wrap_delete_Factors, METH_O, "delete_Factors(Factors self)"},
	 { "Factors_swigregister", Factors_swigregister, METH_O, NULL},
	 { "Factors_swiginit", Factors_swiginit, METH_VARARGS, NULL},
	 { "LUFactors_ipiv_set", _wrap_LUFactors_ipiv_set, METH_VARARGS, "LUFactors_ipiv_set(LUFactors self, int * ipiv)"},
	 { "LUFactors_ipiv_get", _wrap_LUFactors_ipiv_get, METH_O, "LUFactors_ipiv_get(LUFactors self) -> int *"},
	 { "new_LUFactors", _wrap_new_LUFactors, METH_VARARGS, "\n"
		"LUFactors()\n"
		"new_LUFactors(double * data_, int * ipiv_) -> LUFactors\n"
		""},
	 { "LUFactors_Factor", (PyCFunction)(void(*)(void))_wrap_LUFactors_Factor, METH_VARARGS|METH_KEYWORDS, "LUFactors_Factor(LUFactors self, int m, double TOL=0.0) -> bool"},
	 { "LUFactors_Det", (PyCFunction)(void(*)(void))_wrap_LUFactors_Det, METH_VARARGS|METH_KEYWORDS, "LUFactors_Det(LUFactors self, int m) -> double"},
	 { "LUFactors_Mult", (PyCFunction)(void(*)(void))_wrap_LUFactors_Mult, METH_VARARGS|METH_KEYWORDS, "LUFactors_Mult(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_LSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_LSolve, METH_VARARGS|METH_KEYWORDS, "LUFactors_LSolve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_USolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_USolve, METH_VARARGS|METH_KEYWORDS, "LUFactors_USolve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_Solve", (PyCFunction)(void(*)(void))_wrap_LUFactors_Solve, METH_VARARGS|METH_KEYWORDS, "LUFactors_Solve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_RightSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_RightSolve, METH_VARARGS|METH_KEYWORDS, "LUFactors_RightSolve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_LUFactors_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "LUFactors_GetInverseMatrix(LUFactors self, int m, double * X)"},
	 { "LUFactors_SubMult", (PyCFunction)(void(*)(void))_wrap_LUFactors_SubMult, METH_VARARGS|METH_KEYWORDS, "LUFactors_SubMult(int m, int n, int r, double const * A21, double const * X1, double * X2)"},
	 { "LUFactors_BlockFactor", (PyCFunction)(void(*)(void))_wrap_LUFactors_BlockFactor, METH_VARARGS|METH_KEYWORDS, "LUFactors_BlockFactor(LUFactors self, int m, int n, double * A12, double * A21, double * A22)"},
	 { "LUFactors_BlockForwSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_BlockForwSolve, METH_VARARGS|METH_KEYWORDS, "LUFactors_BlockForwSolve(LUFactors self, int m, int n, int r, double const * L21, double * B1, double * B2)"},
	 { "LUFactors_BlockBackSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_BlockBackSolve, METH_VARARGS|METH_KEYWORDS, "LUFactors_BlockBackSolve(LUFactors self, int m, int n, int r, double const * U12, double const * X2, double * Y1)"},
	 { "delete_LUFactors", _wrap_delete_LUFactors, METH_O, "delete_LUFactors(LUFactors self)"},
	 { "LUFactors_swigregister", LUFactors_swigregister, METH_O, NULL},
	 { "LUFactors_swiginit", LUFactors_swiginit, METH_VARARGS, NULL},
	 { "new_CholeskyFactors", _wrap_new_CholeskyFactors, METH_VARARGS, "\n"
		"CholeskyFactors()\n"
		"new_CholeskyFactors(double * data_) -> CholeskyFactors\n"
		""},
	 { "CholeskyFactors_Factor", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_Factor, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_Factor(CholeskyFactors self, int m, double TOL=0.0) -> bool"},
	 { "CholeskyFactors_Det", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_Det, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_Det(CholeskyFactors self, int m) -> double"},
	 { "CholeskyFactors_LMult", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_LMult, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_LMult(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_UMult", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_UMult, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_UMult(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_LSolve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_LSolve, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_LSolve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_USolve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_USolve, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_USolve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_Solve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_Solve, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_Solve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_RightSolve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_RightSolve, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_RightSolve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "CholeskyFactors_GetInverseMatrix(CholeskyFactors self, int m, double * X)"},
	 { "delete_CholeskyFactors", _wrap_delete_CholeskyFactors, METH_O, "delete_CholeskyFactors(CholeskyFactors self)"},
	 { "CholeskyFactors_swigregister", CholeskyFactors_swigregister, METH_O, NULL},
	 { "CholeskyFactors_swiginit", CholeskyFactors_swiginit, METH_VARARGS, NULL},
	 { "new_DenseMatrixInverse", _wrap_new_DenseMatrixInverse, METH_VARARGS, "\n"
		"DenseMatrixInverse(bool spd_=False)\n"
		"DenseMatrixInverse(DenseMatrix mat, bool spd_=False)\n"
		"new_DenseMatrixInverse(DenseMatrix mat, bool spd_=False) -> DenseMatrixInverse\n"
		""},
	 { "DenseMatrixInverse_Size", _wrap_DenseMatrixInverse_Size, METH_O, "DenseMatrixInverse_Size(DenseMatrixInverse self) -> int"},
	 { "DenseMatrixInverse_Factor", _wrap_DenseMatrixInverse_Factor, METH_VARARGS, "\n"
		"DenseMatrixInverse_Factor(DenseMatrixInverse self)\n"
		"DenseMatrixInverse_Factor(DenseMatrixInverse self, DenseMatrix mat)\n"
		""},
	 { "DenseMatrixInverse_SetOperator", (PyCFunction)(void(*)(void))_wrap_DenseMatrixInverse_SetOperator, METH_VARARGS|METH_KEYWORDS, "DenseMatrixInverse_SetOperator(DenseMatrixInverse self, Operator op)"},
	 { "DenseMatrixInverse_Mult", _wrap_DenseMatrixInverse_Mult, METH_VARARGS, "\n"
		"DenseMatrixInverse_Mult(DenseMatrixInverse self, double const * x, double * y)\n"
		"DenseMatrixInverse_Mult(DenseMatrixInverse self, Vector x, Vector y)\n"
		"DenseMatrixInverse_Mult(DenseMatrixInverse self, DenseMatrix B, DenseMatrix X)\n"
		"DenseMatrixInverse_Mult(DenseMatrixInverse self, DenseMatrix X)\n"
		""},
	 { "DenseMatrixInverse_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_DenseMatrixInverse_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "DenseMatrixInverse_GetInverseMatrix(DenseMatrixInverse self, DenseMatrix Ainv)"},
	 { "DenseMatrixInverse_Det", _wrap_DenseMatrixInverse_Det, METH_O, "DenseMatrixInverse_Det(DenseMatrixInverse self) -> double"},
	 { "DenseMatrixInverse_TestInversion", _wrap_DenseMatrixInverse_TestInversion, METH_O, "DenseMatrixInverse_TestInversion(DenseMatrixInverse self)"},
	 { "delete_DenseMatrixInverse", _wrap_delete_DenseMatrixInverse, METH_O, "delete_DenseMatrixInverse(DenseMatrixInverse self)"},
	 { "DenseMatrixInverse_swigregister", DenseMatrixInverse_swigregister, METH_O, NULL},
	 { "DenseMatrixInverse_swiginit", DenseMatrixInverse_swiginit, METH_VARARGS, NULL},
	 { "new_DenseTensor", _wrap_new_DenseTensor, METH_VARARGS, "\n"
		"DenseTensor()\n"
		"DenseTensor(int i, int j, int k)\n"
		"DenseTensor(double * d, int i, int j, int k)\n"
		"DenseTensor(int i, int j, int k, mfem::MemoryType mt)\n"
		"new_DenseTensor(DenseTensor other) -> DenseTensor\n"
		""},
	 { "DenseTensor_SizeI", _wrap_DenseTensor_SizeI, METH_O, "DenseTensor_SizeI(DenseTensor self) -> int"},
	 { "DenseTensor_SizeJ", _wrap_DenseTensor_SizeJ, METH_O, "DenseTensor_SizeJ(DenseTensor self) -> int"},
	 { "DenseTensor_SizeK", _wrap_DenseTensor_SizeK, METH_O, "DenseTensor_SizeK(DenseTensor self) -> int"},
	 { "DenseTensor_TotalSize", _wrap_DenseTensor_TotalSize, METH_O, "DenseTensor_TotalSize(DenseTensor self) -> int"},
	 { "DenseTensor_SetSize", (PyCFunction)(void(*)(void))_wrap_DenseTensor_SetSize, METH_VARARGS|METH_KEYWORDS, "DenseTensor_SetSize(DenseTensor self, int i, int j, int k, mfem::MemoryType mt_=PRESERVE)"},
	 { "DenseTensor_UseExternalData", (PyCFunction)(void(*)(void))_wrap_DenseTensor_UseExternalData, METH_VARARGS|METH_KEYWORDS, "DenseTensor_UseExternalData(DenseTensor self, double * ext_data, int i, int j, int k)"},
	 { "DenseTensor___call__", _wrap_DenseTensor___call__, METH_VARARGS, "\n"
		"DenseTensor___call__(DenseTensor self, int k) -> DenseMatrix\n"
		"DenseTensor___call__(DenseTensor self, int k) -> DenseMatrix\n"
		"DenseTensor___call__(DenseTensor self, int i, int j, int k) -> double\n"
		"DenseTensor___call__(DenseTensor self, int i, int j, int k) -> double const &\n"
		""},
	 { "DenseTensor_GetData", _wrap_DenseTensor_GetData, METH_VARARGS, "\n"
		"DenseTensor_GetData(DenseTensor self, int k) -> double\n"
		"DenseTensor_GetData(DenseTensor self, int k) -> double const *\n"
		""},
	 { "DenseTensor_Data", _wrap_DenseTensor_Data, METH_VARARGS, "\n"
		"DenseTensor_Data(DenseTensor self) -> double\n"
		"DenseTensor_Data(DenseTensor self) -> double const *\n"
		""},
	 { "DenseTensor_GetMemory", _wrap_DenseTensor_GetMemory, METH_VARARGS, "\n"
		"DenseTensor_GetMemory(DenseTensor self) -> mfem::Memory< double >\n"
		"DenseTensor_GetMemory(DenseTensor self) -> mfem::Memory< double > const &\n"
		""},
	 { "DenseTensor_AddMult", (PyCFunction)(void(*)(void))_wrap_DenseTensor_AddMult, METH_VARARGS|METH_KEYWORDS, "DenseTensor_AddMult(DenseTensor self, mfem::Table const & elem_dof, Vector x, Vector y)"},
	 { "DenseTensor_Clear", _wrap_DenseTensor_Clear, METH_O, "DenseTensor_Clear(DenseTensor self)"},
	 { "DenseTensor_MemoryUsage", _wrap_DenseTensor_MemoryUsage, METH_O, "DenseTensor_MemoryUsage(DenseTensor self) -> std::size_t"},
	 { "DenseTensor_Read", (PyCFunction)(void(*)(void))_wrap_DenseTensor_Read, METH_VARARGS|METH_KEYWORDS, "DenseTensor_Read(DenseTensor self, bool on_dev=True) -> double const *"},
	 { "DenseTensor_HostRead", _wrap_DenseTensor_HostRead, METH_O, "DenseTensor_HostRead(DenseTensor self) -> double const *"},
	 { "DenseTensor_Write", (PyCFunction)(void(*)(void))_wrap_DenseTensor_Write, METH_VARARGS|METH_KEYWORDS, "DenseTensor_Write(DenseTensor self, bool on_dev=True) -> double *"},
	 { "DenseTensor_HostWrite", _wrap_DenseTensor_HostWrite, METH_O, "DenseTensor_HostWrite(DenseTensor self) -> double *"},
	 { "DenseTensor_ReadWrite", (PyCFunction)(void(*)(void))_wrap_DenseTensor_ReadWrite, METH_VARARGS|METH_KEYWORDS, "DenseTensor_ReadWrite(DenseTensor self, bool on_dev=True) -> double *"},
	 { "DenseTensor_HostReadWrite", _wrap_DenseTensor_HostReadWrite, METH_O, "DenseTensor_HostReadWrite(DenseTensor self) -> double *"},
	 { "DenseTensor_Swap", (PyCFunction)(void(*)(void))_wrap_DenseTensor_Swap, METH_VARARGS|METH_KEYWORDS, "DenseTensor_Swap(DenseTensor self, DenseTensor t)"},
	 { "delete_DenseTensor", _wrap_delete_DenseTensor, METH_O, "delete_DenseTensor(DenseTensor self)"},
	 { "DenseTensor_Assign", _wrap_DenseTensor_Assign, METH_VARARGS, "\n"
		"DenseTensor_Assign(DenseTensor self, double const c)\n"
		"DenseTensor_Assign(DenseTensor self, DenseTensor m)\n"
		"DenseTensor_Assign(DenseTensor self, PyObject * numpymat)\n"
		""},
	 { "DenseTensor___getitem__", _wrap_DenseTensor___getitem__, METH_VARARGS, "\n"
		"DenseTensor___getitem__(DenseTensor self, int const i, int const j, int const k) -> double const\n"
		"DenseTensor___getitem__(DenseTensor self, int const k) -> DenseMatrix\n"
		""},
	 { "DenseTensor___setitem__", (PyCFunction)(void(*)(void))_wrap_DenseTensor___setitem__, METH_VARARGS|METH_KEYWORDS, "DenseTensor___setitem__(DenseTensor self, int i, int j, int k, double const v)"},
	 { "DenseTensor_GetDataArray", _wrap_DenseTensor_GetDataArray, METH_O, "DenseTensor_GetDataArray(DenseTensor self) -> PyObject *"},
	 { "DenseTensor_swigregister", DenseTensor_swigregister, METH_O, NULL},
	 { "DenseTensor_swiginit", DenseTensor_swiginit, METH_VARARGS, NULL},
	 { "BatchLUFactor", (PyCFunction)(void(*)(void))_wrap_BatchLUFactor, METH_VARARGS|METH_KEYWORDS, "BatchLUFactor(DenseTensor Mlu, intArray P, double const TOL=0.0)"},
	 { "BatchLUSolve", (PyCFunction)(void(*)(void))_wrap_BatchLUSolve, METH_VARARGS|METH_KEYWORDS, "BatchLUSolve(DenseTensor Mlu, intArray P, Vector X)"},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "DenseMatrix_UseExternalData", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_UseExternalData, METH_VARARGS|METH_KEYWORDS, "UseExternalData(DenseMatrix self, double * d, int h, int w)"},
	 { "DenseMatrix_Reset", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Reset, METH_VARARGS|METH_KEYWORDS, "Reset(DenseMatrix self, double * d, int h, int w)"},
	 { "DenseMatrix_ClearExternalData", _wrap_DenseMatrix_ClearExternalData, METH_O, "ClearExternalData(DenseMatrix self)"},
	 { "DenseMatrix_Clear", _wrap_DenseMatrix_Clear, METH_O, "Clear(DenseMatrix self)"},
	 { "DenseMatrix_Size", _wrap_DenseMatrix_Size, METH_O, "Size(DenseMatrix self) -> int"},
	 { "DenseMatrix_SetSize", _wrap_DenseMatrix_SetSize, METH_VARARGS, "\n"
		"SetSize(DenseMatrix self, int s)\n"
		"SetSize(DenseMatrix self, int h, int w)\n"
		""},
	 { "DenseMatrix_Data", _wrap_DenseMatrix_Data, METH_O, "Data(DenseMatrix self) -> double *"},
	 { "DenseMatrix_GetData", _wrap_DenseMatrix_GetData, METH_O, "GetData(DenseMatrix self) -> double *"},
	 { "DenseMatrix_GetMemory", _wrap_DenseMatrix_GetMemory, METH_VARARGS, "\n"
		"GetMemory(DenseMatrix self) -> mfem::Memory< double >\n"
		"GetMemory(DenseMatrix self) -> mfem::Memory< double > const &\n"
		""},
	 { "DenseMatrix_OwnsData", _wrap_DenseMatrix_OwnsData, METH_O, "OwnsData(DenseMatrix self) -> bool"},
	 { "DenseMatrix___call__", _wrap_DenseMatrix___call__, METH_VARARGS, "\n"
		"__call__(DenseMatrix self, int i, int j) -> double\n"
		"__call__(DenseMatrix self, int i, int j) -> double const &\n"
		""},
	 { "DenseMatrix___mul__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___mul__, METH_VARARGS|METH_KEYWORDS, "__mul__(DenseMatrix self, DenseMatrix m) -> double"},
	 { "DenseMatrix_Trace", _wrap_DenseMatrix_Trace, METH_O, "Trace(DenseMatrix self) -> double"},
	 { "DenseMatrix_Elem", _wrap_DenseMatrix_Elem, METH_VARARGS, "\n"
		"Elem(DenseMatrix self, int i, int j) -> double\n"
		"Elem(DenseMatrix self, int i, int j) -> double const &\n"
		""},
	 { "DenseMatrix_Mult", _wrap_DenseMatrix_Mult, METH_VARARGS, "\n"
		"Mult(DenseMatrix self, double const * x, double * y)\n"
		"Mult(DenseMatrix self, double const * x, Vector y)\n"
		"Mult(DenseMatrix self, Vector x, double * y)\n"
		"Mult(DenseMatrix self, Vector x, Vector y)\n"
		""},
	 { "DenseMatrix_MultTranspose", _wrap_DenseMatrix_MultTranspose, METH_VARARGS, "\n"
		"MultTranspose(DenseMatrix self, double const * x, double * y)\n"
		"MultTranspose(DenseMatrix self, double const * x, Vector y)\n"
		"MultTranspose(DenseMatrix self, Vector x, double * y)\n"
		"MultTranspose(DenseMatrix self, Vector x, Vector y)\n"
		""},
	 { "DenseMatrix_AddMult", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMult, METH_VARARGS|METH_KEYWORDS, "AddMult(DenseMatrix self, Vector x, Vector y, double const a=1.0)"},
	 { "DenseMatrix_AddMultTranspose", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMultTranspose, METH_VARARGS|METH_KEYWORDS, "AddMultTranspose(DenseMatrix self, Vector x, Vector y, double const a=1.0)"},
	 { "DenseMatrix_AddMult_a", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMult_a, METH_VARARGS|METH_KEYWORDS, "AddMult_a(DenseMatrix self, double a, Vector x, Vector y)"},
	 { "DenseMatrix_AddMultTranspose_a", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddMultTranspose_a, METH_VARARGS|METH_KEYWORDS, "AddMultTranspose_a(DenseMatrix self, double a, Vector x, Vector y)"},
	 { "DenseMatrix_LeftScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_LeftScaling, METH_VARARGS|METH_KEYWORDS, "LeftScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InvLeftScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_InvLeftScaling, METH_VARARGS|METH_KEYWORDS, "InvLeftScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_RightScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_RightScaling, METH_VARARGS|METH_KEYWORDS, "RightScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InvRightScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_InvRightScaling, METH_VARARGS|METH_KEYWORDS, "InvRightScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_SymmetricScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_SymmetricScaling, METH_VARARGS|METH_KEYWORDS, "SymmetricScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InvSymmetricScaling", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_InvSymmetricScaling, METH_VARARGS|METH_KEYWORDS, "InvSymmetricScaling(DenseMatrix self, Vector s)"},
	 { "DenseMatrix_InnerProduct", _wrap_DenseMatrix_InnerProduct, METH_VARARGS, "\n"
		"InnerProduct(DenseMatrix self, double const * x, double const * y) -> double\n"
		"InnerProduct(DenseMatrix self, Vector x, Vector y) -> double\n"
		""},
	 { "DenseMatrix_Inverse", _wrap_DenseMatrix_Inverse, METH_O, "Inverse(DenseMatrix self) -> MatrixInverse"},
	 { "DenseMatrix_Invert", _wrap_DenseMatrix_Invert, METH_O, "Invert(DenseMatrix self)"},
	 { "DenseMatrix_SquareRootInverse", _wrap_DenseMatrix_SquareRootInverse, METH_O, "SquareRootInverse(DenseMatrix self)"},
	 { "DenseMatrix_Det", _wrap_DenseMatrix_Det, METH_O, "Det(DenseMatrix self) -> double"},
	 { "DenseMatrix_Weight", _wrap_DenseMatrix_Weight, METH_O, "Weight(DenseMatrix self) -> double"},
	 { "DenseMatrix_Set", _wrap_DenseMatrix_Set, METH_VARARGS, "\n"
		"Set(DenseMatrix self, double alpha, double const * A)\n"
		"Set(DenseMatrix self, double alpha, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_Add", _wrap_DenseMatrix_Add, METH_VARARGS, "\n"
		"Add(DenseMatrix self, double const c, DenseMatrix A)\n"
		"Add(DenseMatrix self, double const c, double const * A)\n"
		""},
	 { "DenseMatrix___iadd__", _wrap_DenseMatrix___iadd__, METH_VARARGS, "\n"
		"__iadd__(DenseMatrix self, double const * m) -> DenseMatrix\n"
		"__iadd__(DenseMatrix self, DenseMatrix m) -> DenseMatrix\n"
		""},
	 { "DenseMatrix___isub__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___isub__, METH_VARARGS|METH_KEYWORDS, "__isub__(DenseMatrix self, DenseMatrix m) -> DenseMatrix"},
	 { "DenseMatrix___imul__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___imul__, METH_VARARGS|METH_KEYWORDS, "__imul__(DenseMatrix self, double c) -> DenseMatrix"},
	 { "DenseMatrix_Neg", _wrap_DenseMatrix_Neg, METH_O, "Neg(DenseMatrix self)"},
	 { "DenseMatrix_Norm2", _wrap_DenseMatrix_Norm2, METH_VARARGS, "\n"
		"Norm2(DenseMatrix self, double * v)\n"
		"Norm2(DenseMatrix self, Vector v)\n"
		""},
	 { "DenseMatrix_MaxMaxNorm", _wrap_DenseMatrix_MaxMaxNorm, METH_O, "MaxMaxNorm(DenseMatrix self) -> double"},
	 { "DenseMatrix_FNorm", _wrap_DenseMatrix_FNorm, METH_O, "FNorm(DenseMatrix self) -> double"},
	 { "DenseMatrix_FNorm2", _wrap_DenseMatrix_FNorm2, METH_O, "FNorm2(DenseMatrix self) -> double"},
	 { "DenseMatrix_Eigenvalues", _wrap_DenseMatrix_Eigenvalues, METH_VARARGS, "\n"
		"Eigenvalues(DenseMatrix self, Vector ev)\n"
		"Eigenvalues(DenseMatrix self, Vector ev, DenseMatrix evect)\n"
		"Eigenvalues(DenseMatrix self, DenseMatrix b, Vector ev)\n"
		"Eigenvalues(DenseMatrix self, DenseMatrix b, Vector ev, DenseMatrix evect)\n"
		""},
	 { "DenseMatrix_Eigensystem", _wrap_DenseMatrix_Eigensystem, METH_VARARGS, "\n"
		"Eigensystem(DenseMatrix self, Vector ev, DenseMatrix evect)\n"
		"Eigensystem(DenseMatrix self, DenseMatrix b, Vector ev, DenseMatrix evect)\n"
		""},
	 { "DenseMatrix_SingularValues", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_SingularValues, METH_VARARGS|METH_KEYWORDS, "SingularValues(DenseMatrix self, Vector sv)"},
	 { "DenseMatrix_Rank", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Rank, METH_VARARGS|METH_KEYWORDS, "Rank(DenseMatrix self, double tol) -> int"},
	 { "DenseMatrix_CalcSingularvalue", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CalcSingularvalue, METH_VARARGS|METH_KEYWORDS, "CalcSingularvalue(DenseMatrix self, int const i) -> double"},
	 { "DenseMatrix_CalcEigenvalues", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CalcEigenvalues, METH_VARARGS|METH_KEYWORDS, "CalcEigenvalues(DenseMatrix self, double * _lambda, double * vec)"},
	 { "DenseMatrix_GetRow", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetRow, METH_VARARGS|METH_KEYWORDS, "GetRow(DenseMatrix self, int r, Vector row)"},
	 { "DenseMatrix_GetColumn", _wrap_DenseMatrix_GetColumn, METH_VARARGS, "\n"
		"GetColumn(DenseMatrix self, int c, Vector col)\n"
		"GetColumn(DenseMatrix self, int col) -> double\n"
		"GetColumn(DenseMatrix self, int col) -> double const *\n"
		""},
	 { "DenseMatrix_GetColumnReference", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetColumnReference, METH_VARARGS|METH_KEYWORDS, "GetColumnReference(DenseMatrix self, int c, Vector col)"},
	 { "DenseMatrix_SetRow", _wrap_DenseMatrix_SetRow, METH_VARARGS, "\n"
		"SetRow(DenseMatrix self, int r, double const * row)\n"
		"SetRow(DenseMatrix self, int r, Vector row)\n"
		"SetRow(DenseMatrix self, int row, double value)\n"
		""},
	 { "DenseMatrix_SetCol", _wrap_DenseMatrix_SetCol, METH_VARARGS, "\n"
		"SetCol(DenseMatrix self, int c, double const * col)\n"
		"SetCol(DenseMatrix self, int c, Vector col)\n"
		"SetCol(DenseMatrix self, int col, double value)\n"
		""},
	 { "DenseMatrix_GetDiag", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetDiag, METH_VARARGS|METH_KEYWORDS, "GetDiag(DenseMatrix self, Vector d)"},
	 { "DenseMatrix_Getl1Diag", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Getl1Diag, METH_VARARGS|METH_KEYWORDS, "Getl1Diag(DenseMatrix self, Vector l)"},
	 { "DenseMatrix_GetRowSums", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetRowSums, METH_VARARGS|METH_KEYWORDS, "GetRowSums(DenseMatrix self, Vector l)"},
	 { "DenseMatrix_Diag", _wrap_DenseMatrix_Diag, METH_VARARGS, "\n"
		"Diag(DenseMatrix self, double c, int n)\n"
		"Diag(DenseMatrix self, double * diag, int n)\n"
		""},
	 { "DenseMatrix_Transpose", _wrap_DenseMatrix_Transpose, METH_VARARGS, "\n"
		"Transpose(DenseMatrix self)\n"
		"Transpose(DenseMatrix self, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_Symmetrize", _wrap_DenseMatrix_Symmetrize, METH_O, "Symmetrize(DenseMatrix self)"},
	 { "DenseMatrix_Lump", _wrap_DenseMatrix_Lump, METH_O, "Lump(DenseMatrix self)"},
	 { "DenseMatrix_GradToCurl", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GradToCurl, METH_VARARGS|METH_KEYWORDS, "GradToCurl(DenseMatrix self, DenseMatrix curl)"},
	 { "DenseMatrix_GradToVectorCurl2D", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GradToVectorCurl2D, METH_VARARGS|METH_KEYWORDS, "GradToVectorCurl2D(DenseMatrix self, DenseMatrix curl)"},
	 { "DenseMatrix_GradToDiv", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GradToDiv, METH_VARARGS|METH_KEYWORDS, "GradToDiv(DenseMatrix self, Vector div)"},
	 { "DenseMatrix_CopyRows", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyRows, METH_VARARGS|METH_KEYWORDS, "CopyRows(DenseMatrix self, DenseMatrix A, int row1, int row2)"},
	 { "DenseMatrix_CopyCols", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyCols, METH_VARARGS|METH_KEYWORDS, "CopyCols(DenseMatrix self, DenseMatrix A, int col1, int col2)"},
	 { "DenseMatrix_CopyMNt", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyMNt, METH_VARARGS|METH_KEYWORDS, "CopyMNt(DenseMatrix self, DenseMatrix A, int row_offset, int col_offset)"},
	 { "DenseMatrix_CopyMN", _wrap_DenseMatrix_CopyMN, METH_VARARGS, "\n"
		"CopyMN(DenseMatrix self, DenseMatrix A, int m, int n, int Aro, int Aco)\n"
		"CopyMN(DenseMatrix self, DenseMatrix A, int row_offset, int col_offset)\n"
		"CopyMN(DenseMatrix self, DenseMatrix A, int m, int n, int Aro, int Aco, int row_offset, int col_offset)\n"
		""},
	 { "DenseMatrix_CopyMNDiag", _wrap_DenseMatrix_CopyMNDiag, METH_VARARGS, "\n"
		"CopyMNDiag(DenseMatrix self, double c, int n, int row_offset, int col_offset)\n"
		"CopyMNDiag(DenseMatrix self, double * diag, int n, int row_offset, int col_offset)\n"
		""},
	 { "DenseMatrix_CopyExceptMN", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_CopyExceptMN, METH_VARARGS|METH_KEYWORDS, "CopyExceptMN(DenseMatrix self, DenseMatrix A, int m, int n)"},
	 { "DenseMatrix_AddMatrix", _wrap_DenseMatrix_AddMatrix, METH_VARARGS, "\n"
		"AddMatrix(DenseMatrix self, DenseMatrix A, int ro, int co)\n"
		"AddMatrix(DenseMatrix self, double a, DenseMatrix A, int ro, int co)\n"
		""},
	 { "DenseMatrix_GetSubMatrix", _wrap_DenseMatrix_GetSubMatrix, METH_VARARGS, "\n"
		"GetSubMatrix(DenseMatrix self, intArray idx, DenseMatrix A)\n"
		"GetSubMatrix(DenseMatrix self, intArray idx_i, intArray idx_j, DenseMatrix A)\n"
		"GetSubMatrix(DenseMatrix self, int ibeg, int iend, DenseMatrix A)\n"
		"GetSubMatrix(DenseMatrix self, int ibeg, int iend, int jbeg, int jend, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_SetSubMatrix", _wrap_DenseMatrix_SetSubMatrix, METH_VARARGS, "\n"
		"SetSubMatrix(DenseMatrix self, intArray idx, DenseMatrix A)\n"
		"SetSubMatrix(DenseMatrix self, intArray idx_i, intArray idx_j, DenseMatrix A)\n"
		"SetSubMatrix(DenseMatrix self, int ibeg, DenseMatrix A)\n"
		"SetSubMatrix(DenseMatrix self, int ibeg, int jbeg, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_AddSubMatrix", _wrap_DenseMatrix_AddSubMatrix, METH_VARARGS, "\n"
		"AddSubMatrix(DenseMatrix self, intArray idx, DenseMatrix A)\n"
		"AddSubMatrix(DenseMatrix self, intArray idx_i, intArray idx_j, DenseMatrix A)\n"
		"AddSubMatrix(DenseMatrix self, int ibeg, DenseMatrix A)\n"
		"AddSubMatrix(DenseMatrix self, int ibeg, int jbeg, DenseMatrix A)\n"
		""},
	 { "DenseMatrix_AddToVector", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AddToVector, METH_VARARGS|METH_KEYWORDS, "AddToVector(DenseMatrix self, int offset, Vector v)"},
	 { "DenseMatrix_GetFromVector", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_GetFromVector, METH_VARARGS|METH_KEYWORDS, "GetFromVector(DenseMatrix self, int offset, Vector v)"},
	 { "DenseMatrix_AdjustDofDirection", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_AdjustDofDirection, METH_VARARGS|METH_KEYWORDS, "AdjustDofDirection(DenseMatrix self, intArray dofs)"},
	 { "DenseMatrix_Threshold", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Threshold, METH_VARARGS|METH_KEYWORDS, "Threshold(DenseMatrix self, double eps)"},
	 { "DenseMatrix_CheckFinite", _wrap_DenseMatrix_CheckFinite, METH_O, "CheckFinite(DenseMatrix self) -> int"},
	 { "DenseMatrix_TestInversion", _wrap_DenseMatrix_TestInversion, METH_O, "TestInversion(DenseMatrix self)"},
	 { "DenseMatrix_MemoryUsage", _wrap_DenseMatrix_MemoryUsage, METH_O, "MemoryUsage(DenseMatrix self) -> std::size_t"},
	 { "DenseMatrix_Read", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Read, METH_VARARGS|METH_KEYWORDS, "Read(DenseMatrix self, bool on_dev=True) -> double const *"},
	 { "DenseMatrix_HostRead", _wrap_DenseMatrix_HostRead, METH_O, "HostRead(DenseMatrix self) -> double const *"},
	 { "DenseMatrix_Write", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Write, METH_VARARGS|METH_KEYWORDS, "Write(DenseMatrix self, bool on_dev=True) -> double *"},
	 { "DenseMatrix_HostWrite", _wrap_DenseMatrix_HostWrite, METH_O, "HostWrite(DenseMatrix self) -> double *"},
	 { "DenseMatrix_ReadWrite", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_ReadWrite, METH_VARARGS|METH_KEYWORDS, "ReadWrite(DenseMatrix self, bool on_dev=True) -> double *"},
	 { "DenseMatrix_HostReadWrite", _wrap_DenseMatrix_HostReadWrite, METH_O, "HostReadWrite(DenseMatrix self) -> double *"},
	 { "DenseMatrix_Swap", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_Swap, METH_VARARGS|METH_KEYWORDS, "Swap(DenseMatrix self, DenseMatrix other)"},
	 { "delete_DenseMatrix", _wrap_delete_DenseMatrix, METH_O, "delete_DenseMatrix(DenseMatrix self)"},
	 { "new_DenseMatrix", _wrap_new_DenseMatrix, METH_VARARGS, "\n"
		"DenseMatrix()\n"
		"DenseMatrix(DenseMatrix arg1)\n"
		"DenseMatrix(int s)\n"
		"DenseMatrix(int m, int n)\n"
		"DenseMatrix(DenseMatrix mat, char ch)\n"
		"DenseMatrix(double * d, int h, int w)\n"
		"new_DenseMatrix(PyObject * numpymat) -> DenseMatrix\n"
		""},
	 { "DenseMatrix_Assign", _wrap_DenseMatrix_Assign, METH_VARARGS, "\n"
		"Assign(DenseMatrix self, double const v)\n"
		"Assign(DenseMatrix self, DenseMatrix m)\n"
		"Assign(DenseMatrix self, PyObject * numpymat)\n"
		""},
	 { "DenseMatrix___getitem__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___getitem__, METH_VARARGS|METH_KEYWORDS, "__getitem__(DenseMatrix self, int const i, int const j) -> double const"},
	 { "DenseMatrix___setitem__", (PyCFunction)(void(*)(void))_wrap_DenseMatrix___setitem__, METH_VARARGS|METH_KEYWORDS, "__setitem__(DenseMatrix self, int i, int j, double const v)"},
	 { "DenseMatrix_GetDataArray", _wrap_DenseMatrix_GetDataArray, METH_O, "GetDataArray(DenseMatrix self) -> PyObject *"},
	 { "DenseMatrix_Print", _wrap_DenseMatrix_Print, METH_VARARGS, "\n"
		"Print(DenseMatrix self, std::ostream & out=out, int width_=4)\n"
		"Print(DenseMatrix self, char const * file, int precision=16)\n"
		""},
	 { "DenseMatrix_PrintGZ", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_PrintGZ, METH_VARARGS|METH_KEYWORDS, "PrintGZ(DenseMatrix self, char const * file, int precision=16)"},
	 { "DenseMatrix_PrintT", _wrap_DenseMatrix_PrintT, METH_VARARGS, "\n"
		"PrintT(DenseMatrix self, std::ostream & out=out, int width_=4)\n"
		"PrintT(DenseMatrix self, char const * file, int precision=16)\n"
		""},
	 { "DenseMatrix_PrintTGZ", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_PrintTGZ, METH_VARARGS|METH_KEYWORDS, "PrintTGZ(DenseMatrix self, char const * file, int precision=16)"},
	 { "DenseMatrix_PrintMatlab", _wrap_DenseMatrix_PrintMatlab, METH_VARARGS, "\n"
		"PrintMatlab(DenseMatrix self, std::ostream & out=out)\n"
		"PrintMatlab(DenseMatrix self, char const * file, int precision=16)\n"
		""},
	 { "DenseMatrix_PrintMatlabGZ", (PyCFunction)(void(*)(void))_wrap_DenseMatrix_PrintMatlabGZ, METH_VARARGS|METH_KEYWORDS, "PrintMatlabGZ(DenseMatrix self, char const * file, int precision=16)"},
	 { "DenseMatrix_swigregister", DenseMatrix_swigregister, METH_O, NULL},
	 { "DenseMatrix_swiginit", DenseMatrix_swiginit, METH_VARARGS, NULL},
	 { "LinearSolve", (PyCFunction)(void(*)(void))_wrap_LinearSolve, METH_VARARGS|METH_KEYWORDS, "LinearSolve(DenseMatrix A, double * X, double TOL=1.e-9) -> bool"},
	 { "AddMult", (PyCFunction)(void(*)(void))_wrap_AddMult, METH_VARARGS|METH_KEYWORDS, "AddMult(DenseMatrix b, DenseMatrix c, DenseMatrix a)"},
	 { "AddMult_a", (PyCFunction)(void(*)(void))_wrap_AddMult_a, METH_VARARGS|METH_KEYWORDS, "AddMult_a(double alpha, DenseMatrix b, DenseMatrix c, DenseMatrix a)"},
	 { "CalcAdjugate", (PyCFunction)(void(*)(void))_wrap_CalcAdjugate, METH_VARARGS|METH_KEYWORDS, "CalcAdjugate(DenseMatrix a, DenseMatrix adja)"},
	 { "CalcAdjugateTranspose", (PyCFunction)(void(*)(void))_wrap_CalcAdjugateTranspose, METH_VARARGS|METH_KEYWORDS, "CalcAdjugateTranspose(DenseMatrix a, DenseMatrix adjat)"},
	 { "CalcInverse", (PyCFunction)(void(*)(void))_wrap_CalcInverse, METH_VARARGS|METH_KEYWORDS, "CalcInverse(DenseMatrix a, DenseMatrix inva)"},
	 { "CalcInverseTranspose", (PyCFunction)(void(*)(void))_wrap_CalcInverseTranspose, METH_VARARGS|METH_KEYWORDS, "CalcInverseTranspose(DenseMatrix a, DenseMatrix inva)"},
	 { "CalcOrtho", (PyCFunction)(void(*)(void))_wrap_CalcOrtho, METH_VARARGS|METH_KEYWORDS, "CalcOrtho(DenseMatrix J, Vector n)"},
	 { "MultAAt", (PyCFunction)(void(*)(void))_wrap_MultAAt, METH_VARARGS|METH_KEYWORDS, "MultAAt(DenseMatrix a, DenseMatrix aat)"},
	 { "MultADAt", (PyCFunction)(void(*)(void))_wrap_MultADAt, METH_VARARGS|METH_KEYWORDS, "MultADAt(DenseMatrix A, Vector D, DenseMatrix ADAt)"},
	 { "AddMultADAt", (PyCFunction)(void(*)(void))_wrap_AddMultADAt, METH_VARARGS|METH_KEYWORDS, "AddMultADAt(DenseMatrix A, Vector D, DenseMatrix ADAt)"},
	 { "MultABt", (PyCFunction)(void(*)(void))_wrap_MultABt, METH_VARARGS|METH_KEYWORDS, "MultABt(DenseMatrix A, DenseMatrix B, DenseMatrix ABt)"},
	 { "MultADBt", (PyCFunction)(void(*)(void))_wrap_MultADBt, METH_VARARGS|METH_KEYWORDS, "MultADBt(DenseMatrix A, Vector D, DenseMatrix B, DenseMatrix ADBt)"},
	 { "AddMultABt", (PyCFunction)(void(*)(void))_wrap_AddMultABt, METH_VARARGS|METH_KEYWORDS, "AddMultABt(DenseMatrix A, DenseMatrix B, DenseMatrix ABt)"},
	 { "AddMultADBt", (PyCFunction)(void(*)(void))_wrap_AddMultADBt, METH_VARARGS|METH_KEYWORDS, "AddMultADBt(DenseMatrix A, Vector D, DenseMatrix B, DenseMatrix ADBt)"},
	 { "AddMult_a_ABt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_ABt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_ABt(double a, DenseMatrix A, DenseMatrix B, DenseMatrix ABt)"},
	 { "MultAtB", (PyCFunction)(void(*)(void))_wrap_MultAtB, METH_VARARGS|METH_KEYWORDS, "MultAtB(DenseMatrix A, DenseMatrix B, DenseMatrix AtB)"},
	 { "AddMult_a_AAt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_AAt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_AAt(double a, DenseMatrix A, DenseMatrix AAt)"},
	 { "Mult_a_AAt", (PyCFunction)(void(*)(void))_wrap_Mult_a_AAt, METH_VARARGS|METH_KEYWORDS, "Mult_a_AAt(double a, DenseMatrix A, DenseMatrix AAt)"},
	 { "MultVVt", (PyCFunction)(void(*)(void))_wrap_MultVVt, METH_VARARGS|METH_KEYWORDS, "MultVVt(Vector v, DenseMatrix vvt)"},
	 { "MultVWt", (PyCFunction)(void(*)(void))_wrap_MultVWt, METH_VARARGS|METH_KEYWORDS, "MultVWt(Vector v, Vector w, DenseMatrix VWt)"},
	 { "AddMultVWt", (PyCFunction)(void(*)(void))_wrap_AddMultVWt, METH_VARARGS|METH_KEYWORDS, "AddMultVWt(Vector v, Vector w, DenseMatrix VWt)"},
	 { "AddMultVVt", (PyCFunction)(void(*)(void))_wrap_AddMultVVt, METH_VARARGS|METH_KEYWORDS, "AddMultVVt(Vector v, DenseMatrix VWt)"},
	 { "AddMult_a_VWt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_VWt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_VWt(double const a, Vector v, Vector w, DenseMatrix VWt)"},
	 { "AddMult_a_VVt", (PyCFunction)(void(*)(void))_wrap_AddMult_a_VVt, METH_VARARGS|METH_KEYWORDS, "AddMult_a_VVt(double const a, Vector v, DenseMatrix VVt)"},
	 { "Factors_data_set", _wrap_Factors_data_set, METH_VARARGS, "Factors_data_set(Factors self, double * data)"},
	 { "Factors_data_get", _wrap_Factors_data_get, METH_O, "Factors_data_get(Factors self) -> double *"},
	 { "new_Factors", _wrap_new_Factors, METH_VARARGS, "\n"
		"Factors()\n"
		"new_Factors(double * data_) -> Factors\n"
		""},
	 { "Factors_Factor", (PyCFunction)(void(*)(void))_wrap_Factors_Factor, METH_VARARGS|METH_KEYWORDS, "Factor(Factors self, int m, double TOL=0.0) -> bool"},
	 { "Factors_Det", (PyCFunction)(void(*)(void))_wrap_Factors_Det, METH_VARARGS|METH_KEYWORDS, "Det(Factors self, int m) -> double"},
	 { "Factors_Solve", (PyCFunction)(void(*)(void))_wrap_Factors_Solve, METH_VARARGS|METH_KEYWORDS, "Solve(Factors self, int m, int n, double * X)"},
	 { "Factors_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_Factors_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "GetInverseMatrix(Factors self, int m, double * X)"},
	 { "delete_Factors", _wrap_delete_Factors, METH_O, "delete_Factors(Factors self)"},
	 { "Factors_swigregister", Factors_swigregister, METH_O, NULL},
	 { "Factors_swiginit", Factors_swiginit, METH_VARARGS, NULL},
	 { "LUFactors_ipiv_set", _wrap_LUFactors_ipiv_set, METH_VARARGS, "LUFactors_ipiv_set(LUFactors self, int * ipiv)"},
	 { "LUFactors_ipiv_get", _wrap_LUFactors_ipiv_get, METH_O, "LUFactors_ipiv_get(LUFactors self) -> int *"},
	 { "new_LUFactors", _wrap_new_LUFactors, METH_VARARGS, "\n"
		"LUFactors()\n"
		"new_LUFactors(double * data_, int * ipiv_) -> LUFactors\n"
		""},
	 { "LUFactors_Factor", (PyCFunction)(void(*)(void))_wrap_LUFactors_Factor, METH_VARARGS|METH_KEYWORDS, "Factor(LUFactors self, int m, double TOL=0.0) -> bool"},
	 { "LUFactors_Det", (PyCFunction)(void(*)(void))_wrap_LUFactors_Det, METH_VARARGS|METH_KEYWORDS, "Det(LUFactors self, int m) -> double"},
	 { "LUFactors_Mult", (PyCFunction)(void(*)(void))_wrap_LUFactors_Mult, METH_VARARGS|METH_KEYWORDS, "Mult(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_LSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_LSolve, METH_VARARGS|METH_KEYWORDS, "LSolve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_USolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_USolve, METH_VARARGS|METH_KEYWORDS, "USolve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_Solve", (PyCFunction)(void(*)(void))_wrap_LUFactors_Solve, METH_VARARGS|METH_KEYWORDS, "Solve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_RightSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_RightSolve, METH_VARARGS|METH_KEYWORDS, "RightSolve(LUFactors self, int m, int n, double * X)"},
	 { "LUFactors_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_LUFactors_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "GetInverseMatrix(LUFactors self, int m, double * X)"},
	 { "LUFactors_SubMult", (PyCFunction)(void(*)(void))_wrap_LUFactors_SubMult, METH_VARARGS|METH_KEYWORDS, "SubMult(int m, int n, int r, double const * A21, double const * X1, double * X2)"},
	 { "LUFactors_BlockFactor", (PyCFunction)(void(*)(void))_wrap_LUFactors_BlockFactor, METH_VARARGS|METH_KEYWORDS, "BlockFactor(LUFactors self, int m, int n, double * A12, double * A21, double * A22)"},
	 { "LUFactors_BlockForwSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_BlockForwSolve, METH_VARARGS|METH_KEYWORDS, "BlockForwSolve(LUFactors self, int m, int n, int r, double const * L21, double * B1, double * B2)"},
	 { "LUFactors_BlockBackSolve", (PyCFunction)(void(*)(void))_wrap_LUFactors_BlockBackSolve, METH_VARARGS|METH_KEYWORDS, "BlockBackSolve(LUFactors self, int m, int n, int r, double const * U12, double const * X2, double * Y1)"},
	 { "delete_LUFactors", _wrap_delete_LUFactors, METH_O, "delete_LUFactors(LUFactors self)"},
	 { "LUFactors_swigregister", LUFactors_swigregister, METH_O, NULL},
	 { "LUFactors_swiginit", LUFactors_swiginit, METH_VARARGS, NULL},
	 { "new_CholeskyFactors", _wrap_new_CholeskyFactors, METH_VARARGS, "\n"
		"CholeskyFactors()\n"
		"new_CholeskyFactors(double * data_) -> CholeskyFactors\n"
		""},
	 { "CholeskyFactors_Factor", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_Factor, METH_VARARGS|METH_KEYWORDS, "Factor(CholeskyFactors self, int m, double TOL=0.0) -> bool"},
	 { "CholeskyFactors_Det", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_Det, METH_VARARGS|METH_KEYWORDS, "Det(CholeskyFactors self, int m) -> double"},
	 { "CholeskyFactors_LMult", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_LMult, METH_VARARGS|METH_KEYWORDS, "LMult(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_UMult", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_UMult, METH_VARARGS|METH_KEYWORDS, "UMult(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_LSolve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_LSolve, METH_VARARGS|METH_KEYWORDS, "LSolve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_USolve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_USolve, METH_VARARGS|METH_KEYWORDS, "USolve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_Solve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_Solve, METH_VARARGS|METH_KEYWORDS, "Solve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_RightSolve", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_RightSolve, METH_VARARGS|METH_KEYWORDS, "RightSolve(CholeskyFactors self, int m, int n, double * X)"},
	 { "CholeskyFactors_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_CholeskyFactors_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "GetInverseMatrix(CholeskyFactors self, int m, double * X)"},
	 { "delete_CholeskyFactors", _wrap_delete_CholeskyFactors, METH_O, "delete_CholeskyFactors(CholeskyFactors self)"},
	 { "CholeskyFactors_swigregister", CholeskyFactors_swigregister, METH_O, NULL},
	 { "CholeskyFactors_swiginit", CholeskyFactors_swiginit, METH_VARARGS, NULL},
	 { "new_DenseMatrixInverse", _wrap_new_DenseMatrixInverse, METH_VARARGS, "\n"
		"DenseMatrixInverse(bool spd_=False)\n"
		"DenseMatrixInverse(DenseMatrix mat, bool spd_=False)\n"
		"new_DenseMatrixInverse(DenseMatrix mat, bool spd_=False) -> DenseMatrixInverse\n"
		""},
	 { "DenseMatrixInverse_Size", _wrap_DenseMatrixInverse_Size, METH_O, "Size(DenseMatrixInverse self) -> int"},
	 { "DenseMatrixInverse_Factor", _wrap_DenseMatrixInverse_Factor, METH_VARARGS, "\n"
		"Factor(DenseMatrixInverse self)\n"
		"Factor(DenseMatrixInverse self, DenseMatrix mat)\n"
		""},
	 { "DenseMatrixInverse_SetOperator", (PyCFunction)(void(*)(void))_wrap_DenseMatrixInverse_SetOperator, METH_VARARGS|METH_KEYWORDS, "SetOperator(DenseMatrixInverse self, Operator op)"},
	 { "DenseMatrixInverse_Mult", _wrap_DenseMatrixInverse_Mult, METH_VARARGS, "\n"
		"Mult(DenseMatrixInverse self, double const * x, double * y)\n"
		"Mult(DenseMatrixInverse self, Vector x, Vector y)\n"
		"Mult(DenseMatrixInverse self, DenseMatrix B, DenseMatrix X)\n"
		"Mult(DenseMatrixInverse self, DenseMatrix X)\n"
		""},
	 { "DenseMatrixInverse_GetInverseMatrix", (PyCFunction)(void(*)(void))_wrap_DenseMatrixInverse_GetInverseMatrix, METH_VARARGS|METH_KEYWORDS, "GetInverseMatrix(DenseMatrixInverse self, DenseMatrix Ainv)"},
	 { "DenseMatrixInverse_Det", _wrap_DenseMatrixInverse_Det, METH_O, "Det(DenseMatrixInverse self) -> double"},
	 { "DenseMatrixInverse_TestInversion", _wrap_DenseMatrixInverse_TestInversion, METH_O, "TestInversion(DenseMatrixInverse self)"},
	 { "delete_DenseMatrixInverse", _wrap_delete_DenseMatrixInverse, METH_O, "delete_DenseMatrixInverse(DenseMatrixInverse self)"},
	 { "DenseMatrixInverse_swigregister", DenseMatrixInverse_swigregister, METH_O, NULL},
	 { "DenseMatrixInverse_swiginit", DenseMatrixInverse_swiginit, METH_VARARGS, NULL},
	 { "new_DenseTensor", _wrap_new_DenseTensor, METH_VARARGS, "\n"
		"DenseTensor()\n"
		"DenseTensor(int i, int j, int k)\n"
		"DenseTensor(double * d, int i, int j, int k)\n"
		"DenseTensor(int i, int j, int k, mfem::MemoryType mt)\n"
		"new_DenseTensor(DenseTensor other) -> DenseTensor\n"
		""},
	 { "DenseTensor_SizeI", _wrap_DenseTensor_SizeI, METH_O, "SizeI(DenseTensor self) -> int"},
	 { "DenseTensor_SizeJ", _wrap_DenseTensor_SizeJ, METH_O, "SizeJ(DenseTensor self) -> int"},
	 { "DenseTensor_SizeK", _wrap_DenseTensor_SizeK, METH_O, "SizeK(DenseTensor self) -> int"},
	 { "DenseTensor_TotalSize", _wrap_DenseTensor_TotalSize, METH_O, "TotalSize(DenseTensor self) -> int"},
	 { "DenseTensor_SetSize", (PyCFunction)(void(*)(void))_wrap_DenseTensor_SetSize, METH_VARARGS|METH_KEYWORDS, "SetSize(DenseTensor self, int i, int j, int k, mfem::MemoryType mt_=PRESERVE)"},
	 { "DenseTensor_UseExternalData", (PyCFunction)(void(*)(void))_wrap_DenseTensor_UseExternalData, METH_VARARGS|METH_KEYWORDS, "UseExternalData(DenseTensor self, double * ext_data, int i, int j, int k)"},
	 { "DenseTensor___call__", _wrap_DenseTensor___call__, METH_VARARGS, "\n"
		"__call__(DenseTensor self, int k) -> DenseMatrix\n"
		"__call__(DenseTensor self, int k) -> DenseMatrix\n"
		"__call__(DenseTensor self, int i, int j, int k) -> double\n"
		"__call__(DenseTensor self, int i, int j, int k) -> double const &\n"
		""},
	 { "DenseTensor_GetData", _wrap_DenseTensor_GetData, METH_VARARGS, "\n"
		"GetData(DenseTensor self, int k) -> double\n"
		"GetData(DenseTensor self, int k) -> double const *\n"
		""},
	 { "DenseTensor_Data", _wrap_DenseTensor_Data, METH_VARARGS, "\n"
		"Data(DenseTensor self) -> double\n"
		"Data(DenseTensor self) -> double const *\n"
		""},
	 { "DenseTensor_GetMemory", _wrap_DenseTensor_GetMemory, METH_VARARGS, "\n"
		"GetMemory(DenseTensor self) -> mfem::Memory< double >\n"
		"GetMemory(DenseTensor self) -> mfem::Memory< double > const &\n"
		""},
	 { "DenseTensor_AddMult", (PyCFunction)(void(*)(void))_wrap_DenseTensor_AddMult, METH_VARARGS|METH_KEYWORDS, "AddMult(DenseTensor self, mfem::Table const & elem_dof, Vector x, Vector y)"},
	 { "DenseTensor_Clear", _wrap_DenseTensor_Clear, METH_O, "Clear(DenseTensor self)"},
	 { "DenseTensor_MemoryUsage", _wrap_DenseTensor_MemoryUsage, METH_O, "MemoryUsage(DenseTensor self) -> std::size_t"},
	 { "DenseTensor_Read", (PyCFunction)(void(*)(void))_wrap_DenseTensor_Read, METH_VARARGS|METH_KEYWORDS, "Read(DenseTensor self, bool on_dev=True) -> double const *"},
	 { "DenseTensor_HostRead", _wrap_DenseTensor_HostRead, METH_O, "HostRead(DenseTensor self) -> double const *"},
	 { "DenseTensor_Write", (PyCFunction)(void(*)(void))_wrap_DenseTensor_Write, METH_VARARGS|METH_KEYWORDS, "Write(DenseTensor self, bool on_dev=True) -> double *"},
	 { "DenseTensor_HostWrite", _wrap_DenseTensor_HostWrite, METH_O, "HostWrite(DenseTensor self) -> double *"},
	 { "DenseTensor_ReadWrite", (PyCFunction)(void(*)(void))_wrap_DenseTensor_ReadWrite, METH_VARARGS|METH_KEYWORDS, "ReadWrite(DenseTensor self, bool on_dev=True) -> double *"},
	 { "DenseTensor_HostReadWrite", _wrap_DenseTensor_HostReadWrite, METH_O, "HostReadWrite(DenseTensor self) -> double *"},
	 { "DenseTensor_Swap", (PyCFunction)(void(*)(void))_wrap_DenseTensor_Swap, METH_VARARGS|METH_KEYWORDS, "Swap(DenseTensor self, DenseTensor t)"},
	 { "delete_DenseTensor", _wrap_delete_DenseTensor, METH_O, "delete_DenseTensor(DenseTensor self)"},
	 { "DenseTensor_Assign", _wrap_DenseTensor_Assign, METH_VARARGS, "\n"
		"Assign(DenseTensor self, double const c)\n"
		"Assign(DenseTensor self, DenseTensor m)\n"
		"Assign(DenseTensor self, PyObject * numpymat)\n"
		""},
	 { "DenseTensor___getitem__", _wrap_DenseTensor___getitem__, METH_VARARGS, "\n"
		"__getitem__(DenseTensor self, int const i, int const j, int const k) -> double const\n"
		"__getitem__(DenseTensor self, int const k) -> DenseMatrix\n"
		""},
	 { "DenseTensor___setitem__", (PyCFunction)(void(*)(void))_wrap_DenseTensor___setitem__, METH_VARARGS|METH_KEYWORDS, "__setitem__(DenseTensor self, int i, int j, int k, double const v)"},
	 { "DenseTensor_GetDataArray", _wrap_DenseTensor_GetDataArray, METH_O, "GetDataArray(DenseTensor self) -> PyObject *"},
	 { "DenseTensor_swigregister", DenseTensor_swigregister, METH_O, NULL},
	 { "DenseTensor_swiginit", DenseTensor_swiginit, METH_VARARGS, NULL},
	 { "BatchLUFactor", (PyCFunction)(void(*)(void))_wrap_BatchLUFactor, METH_VARARGS|METH_KEYWORDS, "BatchLUFactor(DenseTensor Mlu, intArray P, double const TOL=0.0)"},
	 { "BatchLUSolve", (PyCFunction)(void(*)(void))_wrap_BatchLUSolve, METH_VARARGS|METH_KEYWORDS, "BatchLUSolve(DenseTensor Mlu, intArray P, Vector X)"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_mfem__CholeskyFactorsTo_p_mfem__Factors(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Factors *)  ((mfem::CholeskyFactors *) x));
}
static void *_p_mfem__LUFactorsTo_p_mfem__Factors(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Factors *)  ((mfem::LUFactors *) x));
}
static void *_p_mfem__AbstractSparseMatrixTo_p_mfem__Matrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Matrix *)  ((mfem::AbstractSparseMatrix *) x));
}
static void *_p_mfem__DenseMatrixTo_p_mfem__Matrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Matrix *)  ((mfem::DenseMatrix *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__MatrixInverse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixInverse *)  ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__AbstractSparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::AbstractSparseMatrix *) x));
}
static void *_p_mfem__ConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ConstrainedOperator *) x));
}
static void *_p_mfem__DenseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseMatrix *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__IdentityOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::IdentityOperator *) x));
}
static void *_p_mfem__MatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Matrix *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *) ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__ProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ProductOperator *) x));
}
static void *_p_mfem__PyOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::PyOperatorBase *) x));
}
static void *_p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase *) x));
}
static void *_p_mfem__RAPOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RAPOperator *) x));
}
static void *_p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RectangularConstrainedOperator *) x));
}
static void *_p_mfem__ScaledOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ScaledOperator *) x));
}
static void *_p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator *) x));
}
static void *_p_mfem__SolverTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Solver *) x));
}
static void *_p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator *) x));
}
static void *_p_mfem__TimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TimeDependentOperator *) x));
}
static void *_p_mfem__TransposeOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TransposeOperator *) x));
}
static void *_p_mfem__TripleProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TripleProductOperator *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *)  ((mfem::MatrixInverse *) x));
}
static void *_p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::AbstractSparseMatrix **) x));
}
static void *_p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ConstrainedOperator **) x));
}
static void *_p_p_mfem__DenseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseMatrix **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::IdentityOperator **) x));
}
static void *_p_p_mfem__MatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Matrix **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *) ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__ProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ProductOperator **) x));
}
static void *_p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::PyOperatorBase **) x));
}
static void *_p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase **) x));
}
static void *_p_p_mfem__RAPOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RAPOperator **) x));
}
static void *_p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RectangularConstrainedOperator **) x));
}
static void *_p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ScaledOperator **) x));
}
static void *_p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator **) x));
}
static void *_p_p_mfem__SolverTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Solver **) x));
}
static void *_p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator **) x));
}
static void *_p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TimeDependentOperator **) x));
}
static void *_p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TransposeOperator **) x));
}
static void *_p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TripleProductOperator **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **)  ((mfem::MatrixInverse **) x));
}
static swig_type_info _swigt__p_PyMFEM__wFILE = {"_p_PyMFEM__wFILE", "PyMFEM::wFILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_int_t = {"_p_mfem__ArrayT_int_t", "mfem::Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CholeskyFactors = {"_p_mfem__CholeskyFactors", "mfem::CholeskyFactors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrix = {"_p_mfem__DenseMatrix", "mfem::DenseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrixInverse = {"_p_mfem__DenseMatrixInverse", "mfem::DenseMatrixInverse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DenseTensor = {"_p_mfem__DenseTensor", "mfem::DenseTensor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Factors = {"_p_mfem__Factors", "mfem::Factors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__LUFactors = {"_p_mfem__LUFactors", "mfem::LUFactors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Matrix = {"_p_mfem__Matrix", "mfem::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__AbstractSparseMatrix = {"_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixInverse = {"_p_mfem__MatrixInverse", "mfem::MatrixInverse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MemoryT_double_t = {"_p_mfem__MemoryT_double_t", "mfem::Memory< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Operator = {"_p_mfem__Operator", "mfem::Operator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ConstrainedOperator = {"_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IdentityOperator = {"_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ProductOperator = {"_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyOperatorBase = {"_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyTimeDependentOperatorBase = {"_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RAPOperator = {"_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RectangularConstrainedOperator = {"_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScaledOperator = {"_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SecondOrderTimeDependentOperator = {"_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentAdjointOperator = {"_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentOperator = {"_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransposeOperator = {"_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TripleProductOperator = {"_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Solver = {"_p_mfem__Solver", "mfem::Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Table = {"_p_mfem__Table", "mfem::Table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Vector = {"_p_mfem__Vector", "mfem::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Operator = {"_p_p_mfem__Operator", "mfem::Operator **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__AbstractSparseMatrix = {"_p_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConstrainedOperator = {"_p_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrix = {"_p_p_mfem__DenseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrixInverse = {"_p_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__IdentityOperator = {"_p_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Matrix = {"_p_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__MatrixInverse = {"_p_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ProductOperator = {"_p_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyOperatorBase = {"_p_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyTimeDependentOperatorBase = {"_p_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RAPOperator = {"_p_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RectangularConstrainedOperator = {"_p_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ScaledOperator = {"_p_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SecondOrderTimeDependentOperator = {"_p_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentAdjointOperator = {"_p_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentOperator = {"_p_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TransposeOperator = {"_p_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TripleProductOperator = {"_p_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Solver = {"_p_p_mfem__Solver", "mfem::Solver **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Vector = {"_p_p_mfem__Vector", "mfem::Vector **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_PyMFEM__wFILE,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_mfem__AbstractSparseMatrix,
  &_swigt__p_mfem__ArrayT_int_t,
  &_swigt__p_mfem__CholeskyFactors,
  &_swigt__p_mfem__ConstrainedOperator,
  &_swigt__p_mfem__DenseMatrix,
  &_swigt__p_mfem__DenseMatrixInverse,
  &_swigt__p_mfem__DenseTensor,
  &_swigt__p_mfem__Factors,
  &_swigt__p_mfem__IdentityOperator,
  &_swigt__p_mfem__LUFactors,
  &_swigt__p_mfem__Matrix,
  &_swigt__p_mfem__MatrixInverse,
  &_swigt__p_mfem__MemoryT_double_t,
  &_swigt__p_mfem__Operator,
  &_swigt__p_mfem__ProductOperator,
  &_swigt__p_mfem__PyOperatorBase,
  &_swigt__p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_mfem__RAPOperator,
  &_swigt__p_mfem__RectangularConstrainedOperator,
  &_swigt__p_mfem__ScaledOperator,
  &_swigt__p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_mfem__Solver,
  &_swigt__p_mfem__Table,
  &_swigt__p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_mfem__TimeDependentOperator,
  &_swigt__p_mfem__TransposeOperator,
  &_swigt__p_mfem__TripleProductOperator,
  &_swigt__p_mfem__Vector,
  &_swigt__p_p_mfem__AbstractSparseMatrix,
  &_swigt__p_p_mfem__ConstrainedOperator,
  &_swigt__p_p_mfem__DenseMatrix,
  &_swigt__p_p_mfem__DenseMatrixInverse,
  &_swigt__p_p_mfem__IdentityOperator,
  &_swigt__p_p_mfem__Matrix,
  &_swigt__p_p_mfem__MatrixInverse,
  &_swigt__p_p_mfem__Operator,
  &_swigt__p_p_mfem__ProductOperator,
  &_swigt__p_p_mfem__PyOperatorBase,
  &_swigt__p_p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_p_mfem__RAPOperator,
  &_swigt__p_p_mfem__RectangularConstrainedOperator,
  &_swigt__p_p_mfem__ScaledOperator,
  &_swigt__p_p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_p_mfem__Solver,
  &_swigt__p_p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_p_mfem__TimeDependentOperator,
  &_swigt__p_p_mfem__TransposeOperator,
  &_swigt__p_p_mfem__TripleProductOperator,
  &_swigt__p_p_mfem__Vector,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_PyMFEM__wFILE[] = {  {&_swigt__p_PyMFEM__wFILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_int_t[] = {  {&_swigt__p_mfem__ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CholeskyFactors[] = {  {&_swigt__p_mfem__CholeskyFactors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrix[] = {  {&_swigt__p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrixInverse[] = {  {&_swigt__p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseTensor[] = {  {&_swigt__p_mfem__DenseTensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Factors[] = {  {&_swigt__p_mfem__Factors, 0, 0, 0},  {&_swigt__p_mfem__CholeskyFactors, _p_mfem__CholeskyFactorsTo_p_mfem__Factors, 0, 0},  {&_swigt__p_mfem__LUFactors, _p_mfem__LUFactorsTo_p_mfem__Factors, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LUFactors[] = {  {&_swigt__p_mfem__LUFactors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Matrix[] = {  {&_swigt__p_mfem__Matrix, 0, 0, 0},  {&_swigt__p_mfem__AbstractSparseMatrix, _p_mfem__AbstractSparseMatrixTo_p_mfem__Matrix, 0, 0},  {&_swigt__p_mfem__DenseMatrix, _p_mfem__DenseMatrixTo_p_mfem__Matrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixInverse[] = {  {&_swigt__p_mfem__MatrixInverse, 0, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__MatrixInverse, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MemoryT_double_t[] = {  {&_swigt__p_mfem__MemoryT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstrainedOperator[] = {{&_swigt__p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityOperator[] = {{&_swigt__p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductOperator[] = {{&_swigt__p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyOperatorBase[] = {{&_swigt__p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RAPOperator[] = {{&_swigt__p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScaledOperator[] = {{&_swigt__p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentOperator[] = {{&_swigt__p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeOperator[] = {{&_swigt__p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TripleProductOperator[] = {{&_swigt__p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Operator[] = {  {&_swigt__p_mfem__Operator, 0, 0, 0},  {&_swigt__p_mfem__AbstractSparseMatrix, _p_mfem__AbstractSparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ConstrainedOperator, _p_mfem__ConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrix, _p_mfem__DenseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__IdentityOperator, _p_mfem__IdentityOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Matrix, _p_mfem__MatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ProductOperator, _p_mfem__ProductOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyOperatorBase, _p_mfem__PyOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyTimeDependentOperatorBase, _p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RAPOperator, _p_mfem__RAPOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RectangularConstrainedOperator, _p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ScaledOperator, _p_mfem__ScaledOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SecondOrderTimeDependentOperator, _p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Solver, _p_mfem__SolverTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentAdjointOperator, _p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentOperator, _p_mfem__TimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TransposeOperator, _p_mfem__TransposeOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TripleProductOperator, _p_mfem__TripleProductOperatorTo_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Solver[] = {  {&_swigt__p_mfem__Solver, 0, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Solver, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Table[] = {  {&_swigt__p_mfem__Table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Vector[] = {  {&_swigt__p_mfem__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConstrainedOperator[] = {{&_swigt__p_p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrix[] = {{&_swigt__p_p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrixInverse[] = {{&_swigt__p_p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IdentityOperator[] = {{&_swigt__p_p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Matrix[] = {{&_swigt__p_p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__MatrixInverse[] = {{&_swigt__p_p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ProductOperator[] = {{&_swigt__p_p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyOperatorBase[] = {{&_swigt__p_p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RAPOperator[] = {{&_swigt__p_p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ScaledOperator[] = {{&_swigt__p_p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentOperator[] = {{&_swigt__p_p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TransposeOperator[] = {{&_swigt__p_p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TripleProductOperator[] = {{&_swigt__p_p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Operator[] = {  {&_swigt__p_p_mfem__Operator, 0, 0, 0},  {&_swigt__p_p_mfem__AbstractSparseMatrix, _p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ConstrainedOperator, _p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrix, _p_p_mfem__DenseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__IdentityOperator, _p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Matrix, _p_p_mfem__MatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ProductOperator, _p_p_mfem__ProductOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyOperatorBase, _p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyTimeDependentOperatorBase, _p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RAPOperator, _p_p_mfem__RAPOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RectangularConstrainedOperator, _p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ScaledOperator, _p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, _p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Solver, _p_p_mfem__SolverTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentAdjointOperator, _p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentOperator, _p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TransposeOperator, _p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TripleProductOperator, _p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Solver[] = {  {&_swigt__p_p_mfem__Solver, 0, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Vector[] = {  {&_swigt__p_p_mfem__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_PyMFEM__wFILE,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_mfem__AbstractSparseMatrix,
  _swigc__p_mfem__ArrayT_int_t,
  _swigc__p_mfem__CholeskyFactors,
  _swigc__p_mfem__ConstrainedOperator,
  _swigc__p_mfem__DenseMatrix,
  _swigc__p_mfem__DenseMatrixInverse,
  _swigc__p_mfem__DenseTensor,
  _swigc__p_mfem__Factors,
  _swigc__p_mfem__IdentityOperator,
  _swigc__p_mfem__LUFactors,
  _swigc__p_mfem__Matrix,
  _swigc__p_mfem__MatrixInverse,
  _swigc__p_mfem__MemoryT_double_t,
  _swigc__p_mfem__Operator,
  _swigc__p_mfem__ProductOperator,
  _swigc__p_mfem__PyOperatorBase,
  _swigc__p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_mfem__RAPOperator,
  _swigc__p_mfem__RectangularConstrainedOperator,
  _swigc__p_mfem__ScaledOperator,
  _swigc__p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_mfem__Solver,
  _swigc__p_mfem__Table,
  _swigc__p_mfem__TimeDependentAdjointOperator,
  _swigc__p_mfem__TimeDependentOperator,
  _swigc__p_mfem__TransposeOperator,
  _swigc__p_mfem__TripleProductOperator,
  _swigc__p_mfem__Vector,
  _swigc__p_p_mfem__AbstractSparseMatrix,
  _swigc__p_p_mfem__ConstrainedOperator,
  _swigc__p_p_mfem__DenseMatrix,
  _swigc__p_p_mfem__DenseMatrixInverse,
  _swigc__p_p_mfem__IdentityOperator,
  _swigc__p_p_mfem__Matrix,
  _swigc__p_p_mfem__MatrixInverse,
  _swigc__p_p_mfem__Operator,
  _swigc__p_p_mfem__ProductOperator,
  _swigc__p_p_mfem__PyOperatorBase,
  _swigc__p_p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_p_mfem__RAPOperator,
  _swigc__p_p_mfem__RectangularConstrainedOperator,
  _swigc__p_p_mfem__ScaledOperator,
  _swigc__p_p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_p_mfem__Solver,
  _swigc__p_p_mfem__TimeDependentAdjointOperator,
  _swigc__p_p_mfem__TimeDependentOperator,
  _swigc__p_p_mfem__TransposeOperator,
  _swigc__p_p_mfem__TripleProductOperator,
  _swigc__p_p_mfem__Vector,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "LUFactors_ipiv_base",SWIG_From_int(static_cast< int >(mfem::LUFactors::ipiv_base)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}


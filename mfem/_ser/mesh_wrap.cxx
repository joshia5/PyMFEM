/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#define PY_SSIZE_T_CLEAN



#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE__input swig_types[0]
#define SWIGTYPE_p_MatrixNumbaCoefficient swig_types[1]
#define SWIGTYPE_p_PyMFEM__wFILE swig_types[2]
#define SWIGTYPE_p_RefCoord swig_types[3]
#define SWIGTYPE_p_ScalarNumbaCoefficient swig_types[4]
#define SWIGTYPE_p_VectorNumbaCoefficient swig_types[5]
#define SWIGTYPE_p_allocator_type swig_types[6]
#define SWIGTYPE_p_bool swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_difference_type swig_types[9]
#define SWIGTYPE_p_double swig_types[10]
#define SWIGTYPE_p_f_r_q_const__mfem__Vector_r_mfem__Vector__void swig_types[11]
#define SWIGTYPE_p_hex_t swig_types[12]
#define SWIGTYPE_p_int swig_types[13]
#define SWIGTYPE_p_mfem__AbstractSparseMatrix swig_types[14]
#define SWIGTYPE_p_mfem__ArrayT_double_t swig_types[15]
#define SWIGTYPE_p_mfem__ArrayT_int_t swig_types[16]
#define SWIGTYPE_p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t swig_types[17]
#define SWIGTYPE_p_mfem__ArrayT_mfem__GeometricFactors_p_t swig_types[18]
#define SWIGTYPE_p_mfem__ArrayT_mfem__Geometry__Type_t swig_types[19]
#define SWIGTYPE_p_mfem__ArrayT_mfem__IntegrationPoint_t swig_types[20]
#define SWIGTYPE_p_mfem__ArrayT_mfem__KnotVector_p_t swig_types[21]
#define SWIGTYPE_p_mfem__ArrayT_mfem__Refinement_t swig_types[22]
#define SWIGTYPE_p_mfem__ArrayT_mfem__Vector_p_t swig_types[23]
#define SWIGTYPE_p_mfem__BiCubic2DFiniteElement swig_types[24]
#define SWIGTYPE_p_mfem__BiLinear2DFiniteElement swig_types[25]
#define SWIGTYPE_p_mfem__BiQuad2DFiniteElement swig_types[26]
#define SWIGTYPE_p_mfem__BiQuadPos2DFiniteElement swig_types[27]
#define SWIGTYPE_p_mfem__CoarseFineTransformations swig_types[28]
#define SWIGTYPE_p_mfem__Coefficient swig_types[29]
#define SWIGTYPE_p_mfem__CoefficientVector swig_types[30]
#define SWIGTYPE_p_mfem__ConformingFaceRestriction swig_types[31]
#define SWIGTYPE_p_mfem__ConstantCoefficient swig_types[32]
#define SWIGTYPE_p_mfem__ConstrainedOperator swig_types[33]
#define SWIGTYPE_p_mfem__ConvectionIntegrator swig_types[34]
#define SWIGTYPE_p_mfem__CrossCrossCoefficient swig_types[35]
#define SWIGTYPE_p_mfem__CrouzeixRaviartFiniteElement swig_types[36]
#define SWIGTYPE_p_mfem__CrouzeixRaviartQuadFiniteElement swig_types[37]
#define SWIGTYPE_p_mfem__Cubic1DFiniteElement swig_types[38]
#define SWIGTYPE_p_mfem__Cubic2DFiniteElement swig_types[39]
#define SWIGTYPE_p_mfem__Cubic3DFiniteElement swig_types[40]
#define SWIGTYPE_p_mfem__CurlGridFunctionCoefficient swig_types[41]
#define SWIGTYPE_p_mfem__DGTraceIntegrator swig_types[42]
#define SWIGTYPE_p_mfem__DSTable swig_types[43]
#define SWIGTYPE_p_mfem__DeltaCoefficient swig_types[44]
#define SWIGTYPE_p_mfem__DenseMatrix swig_types[45]
#define SWIGTYPE_p_mfem__DenseMatrixInverse swig_types[46]
#define SWIGTYPE_p_mfem__DenseSymmetricMatrix swig_types[47]
#define SWIGTYPE_p_mfem__DeterminantCoefficient swig_types[48]
#define SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient swig_types[49]
#define SWIGTYPE_p_mfem__Element swig_types[50]
#define SWIGTYPE_p_mfem__ElementRestriction swig_types[51]
#define SWIGTYPE_p_mfem__ElementRestrictionOperator swig_types[52]
#define SWIGTYPE_p_mfem__ElementTransformation swig_types[53]
#define SWIGTYPE_p_mfem__ExtrudeCoefficient swig_types[54]
#define SWIGTYPE_p_mfem__FaceElementTransformations swig_types[55]
#define SWIGTYPE_p_mfem__FaceGeometricFactors swig_types[56]
#define SWIGTYPE_p_mfem__FaceRestriction swig_types[57]
#define SWIGTYPE_p_mfem__FiniteElement swig_types[58]
#define SWIGTYPE_p_mfem__FiniteElementSpace swig_types[59]
#define SWIGTYPE_p_mfem__FunctionCoefficient swig_types[60]
#define SWIGTYPE_p_mfem__GaussBiLinear2DFiniteElement swig_types[61]
#define SWIGTYPE_p_mfem__GaussBiQuad2DFiniteElement swig_types[62]
#define SWIGTYPE_p_mfem__GaussLinear2DFiniteElement swig_types[63]
#define SWIGTYPE_p_mfem__GaussQuad2DFiniteElement swig_types[64]
#define SWIGTYPE_p_mfem__GeometricFactors swig_types[65]
#define SWIGTYPE_p_mfem__GradientGridFunctionCoefficient swig_types[66]
#define SWIGTYPE_p_mfem__GridFunction swig_types[67]
#define SWIGTYPE_p_mfem__GridFunctionCoefficient swig_types[68]
#define SWIGTYPE_p_mfem__H1Pos_HexahedronElement swig_types[69]
#define SWIGTYPE_p_mfem__H1Pos_QuadrilateralElement swig_types[70]
#define SWIGTYPE_p_mfem__H1Pos_SegmentElement swig_types[71]
#define SWIGTYPE_p_mfem__H1Pos_TetrahedronElement swig_types[72]
#define SWIGTYPE_p_mfem__H1Pos_TriangleElement swig_types[73]
#define SWIGTYPE_p_mfem__H1Pos_WedgeElement swig_types[74]
#define SWIGTYPE_p_mfem__H1Ser_QuadrilateralElement swig_types[75]
#define SWIGTYPE_p_mfem__H1_HexahedronElement swig_types[76]
#define SWIGTYPE_p_mfem__H1_QuadrilateralElement swig_types[77]
#define SWIGTYPE_p_mfem__H1_SegmentElement swig_types[78]
#define SWIGTYPE_p_mfem__H1_TetrahedronElement swig_types[79]
#define SWIGTYPE_p_mfem__H1_TriangleElement swig_types[80]
#define SWIGTYPE_p_mfem__H1_WedgeElement swig_types[81]
#define SWIGTYPE_p_mfem__IdentityMatrixCoefficient swig_types[82]
#define SWIGTYPE_p_mfem__IdentityOperator swig_types[83]
#define SWIGTYPE_p_mfem__InnerProductCoefficient swig_types[84]
#define SWIGTYPE_p_mfem__IntegrationPoint swig_types[85]
#define SWIGTYPE_p_mfem__IntegrationRule swig_types[86]
#define SWIGTYPE_p_mfem__InverseElementTransformation swig_types[87]
#define SWIGTYPE_p_mfem__InverseMatrixCoefficient swig_types[88]
#define SWIGTYPE_p_mfem__IsoparametricTransformation swig_types[89]
#define SWIGTYPE_p_mfem__L2ElementRestriction swig_types[90]
#define SWIGTYPE_p_mfem__L2FaceRestriction swig_types[91]
#define SWIGTYPE_p_mfem__L2Pos_HexahedronElement swig_types[92]
#define SWIGTYPE_p_mfem__L2Pos_QuadrilateralElement swig_types[93]
#define SWIGTYPE_p_mfem__L2Pos_SegmentElement swig_types[94]
#define SWIGTYPE_p_mfem__L2Pos_TetrahedronElement swig_types[95]
#define SWIGTYPE_p_mfem__L2Pos_TriangleElement swig_types[96]
#define SWIGTYPE_p_mfem__L2Pos_WedgeElement swig_types[97]
#define SWIGTYPE_p_mfem__L2_FECollection swig_types[98]
#define SWIGTYPE_p_mfem__L2_HexahedronElement swig_types[99]
#define SWIGTYPE_p_mfem__L2_QuadrilateralElement swig_types[100]
#define SWIGTYPE_p_mfem__L2_SegmentElement swig_types[101]
#define SWIGTYPE_p_mfem__L2_TetrahedronElement swig_types[102]
#define SWIGTYPE_p_mfem__L2_TriangleElement swig_types[103]
#define SWIGTYPE_p_mfem__L2_WedgeElement swig_types[104]
#define SWIGTYPE_p_mfem__Lagrange1DFiniteElement swig_types[105]
#define SWIGTYPE_p_mfem__LagrangeHexFiniteElement swig_types[106]
#define SWIGTYPE_p_mfem__Linear1DFiniteElement swig_types[107]
#define SWIGTYPE_p_mfem__Linear2DFiniteElement swig_types[108]
#define SWIGTYPE_p_mfem__Linear3DFiniteElement swig_types[109]
#define SWIGTYPE_p_mfem__LinearForm swig_types[110]
#define SWIGTYPE_p_mfem__LinearPyramidFiniteElement swig_types[111]
#define SWIGTYPE_p_mfem__LinearWedgeFiniteElement swig_types[112]
#define SWIGTYPE_p_mfem__Matrix swig_types[113]
#define SWIGTYPE_p_mfem__MatrixArrayCoefficient swig_types[114]
#define SWIGTYPE_p_mfem__MatrixCoefficient swig_types[115]
#define SWIGTYPE_p_mfem__MatrixConstantCoefficient swig_types[116]
#define SWIGTYPE_p_mfem__MatrixFunctionCoefficient swig_types[117]
#define SWIGTYPE_p_mfem__MatrixInverse swig_types[118]
#define SWIGTYPE_p_mfem__MatrixProductCoefficient swig_types[119]
#define SWIGTYPE_p_mfem__MatrixPyCoefficientBase swig_types[120]
#define SWIGTYPE_p_mfem__MatrixRestrictedCoefficient swig_types[121]
#define SWIGTYPE_p_mfem__MatrixSumCoefficient swig_types[122]
#define SWIGTYPE_p_mfem__MatrixVectorProductCoefficient swig_types[123]
#define SWIGTYPE_p_mfem__Mesh swig_types[124]
#define SWIGTYPE_p_mfem__Mesh__FaceInformation swig_types[125]
#define SWIGTYPE_p_mfem__NCL2FaceRestriction swig_types[126]
#define SWIGTYPE_p_mfem__NCMesh swig_types[127]
#define SWIGTYPE_p_mfem__ND_HexahedronElement swig_types[128]
#define SWIGTYPE_p_mfem__ND_QuadrilateralElement swig_types[129]
#define SWIGTYPE_p_mfem__ND_R1D_PointElement swig_types[130]
#define SWIGTYPE_p_mfem__ND_R1D_SegmentElement swig_types[131]
#define SWIGTYPE_p_mfem__ND_R2D_FiniteElement swig_types[132]
#define SWIGTYPE_p_mfem__ND_R2D_QuadrilateralElement swig_types[133]
#define SWIGTYPE_p_mfem__ND_R2D_SegmentElement swig_types[134]
#define SWIGTYPE_p_mfem__ND_R2D_TriangleElement swig_types[135]
#define SWIGTYPE_p_mfem__ND_SegmentElement swig_types[136]
#define SWIGTYPE_p_mfem__ND_TetrahedronElement swig_types[137]
#define SWIGTYPE_p_mfem__ND_TriangleElement swig_types[138]
#define SWIGTYPE_p_mfem__ND_WedgeElement swig_types[139]
#define SWIGTYPE_p_mfem__NURBS1DFiniteElement swig_types[140]
#define SWIGTYPE_p_mfem__NURBS2DFiniteElement swig_types[141]
#define SWIGTYPE_p_mfem__NURBS3DFiniteElement swig_types[142]
#define SWIGTYPE_p_mfem__NURBSExtension swig_types[143]
#define SWIGTYPE_p_mfem__NURBSFiniteElement swig_types[144]
#define SWIGTYPE_p_mfem__Nedelec1HexFiniteElement swig_types[145]
#define SWIGTYPE_p_mfem__Nedelec1PyrFiniteElement swig_types[146]
#define SWIGTYPE_p_mfem__Nedelec1TetFiniteElement swig_types[147]
#define SWIGTYPE_p_mfem__Nedelec1WdgFiniteElement swig_types[148]
#define SWIGTYPE_p_mfem__NodalFiniteElement swig_types[149]
#define SWIGTYPE_p_mfem__NodalTensorFiniteElement swig_types[150]
#define SWIGTYPE_p_mfem__NodeExtrudeCoefficient swig_types[151]
#define SWIGTYPE_p_mfem__NormalizedVectorCoefficient swig_types[152]
#define SWIGTYPE_p_mfem__Operator swig_types[153]
#define SWIGTYPE_p_mfem__OperatorHandle swig_types[154]
#define SWIGTYPE_p_mfem__OutStream swig_types[155]
#define SWIGTYPE_p_mfem__OuterProductCoefficient swig_types[156]
#define SWIGTYPE_p_mfem__P0HexFiniteElement swig_types[157]
#define SWIGTYPE_p_mfem__P0PyrFiniteElement swig_types[158]
#define SWIGTYPE_p_mfem__P0QuadFiniteElement swig_types[159]
#define SWIGTYPE_p_mfem__P0SegmentFiniteElement swig_types[160]
#define SWIGTYPE_p_mfem__P0TetFiniteElement swig_types[161]
#define SWIGTYPE_p_mfem__P0TriangleFiniteElement swig_types[162]
#define SWIGTYPE_p_mfem__P0WdgFiniteElement swig_types[163]
#define SWIGTYPE_p_mfem__P1OnQuadFiniteElement swig_types[164]
#define SWIGTYPE_p_mfem__P1SegmentFiniteElement swig_types[165]
#define SWIGTYPE_p_mfem__P1TetNonConfFiniteElement swig_types[166]
#define SWIGTYPE_p_mfem__P2SegmentFiniteElement swig_types[167]
#define SWIGTYPE_p_mfem__PWCoefficient swig_types[168]
#define SWIGTYPE_p_mfem__PWConstCoefficient swig_types[169]
#define SWIGTYPE_p_mfem__PWMatrixCoefficient swig_types[170]
#define SWIGTYPE_p_mfem__PWVectorCoefficient swig_types[171]
#define SWIGTYPE_p_mfem__PointFiniteElement swig_types[172]
#define SWIGTYPE_p_mfem__PositiveFiniteElement swig_types[173]
#define SWIGTYPE_p_mfem__PositiveTensorFiniteElement swig_types[174]
#define SWIGTYPE_p_mfem__PowerCoefficient swig_types[175]
#define SWIGTYPE_p_mfem__ProductCoefficient swig_types[176]
#define SWIGTYPE_p_mfem__ProductOperator swig_types[177]
#define SWIGTYPE_p_mfem__PyCoefficientBase swig_types[178]
#define SWIGTYPE_p_mfem__PyOperatorBase swig_types[179]
#define SWIGTYPE_p_mfem__PyTimeDependentOperatorBase swig_types[180]
#define SWIGTYPE_p_mfem__Quad1DFiniteElement swig_types[181]
#define SWIGTYPE_p_mfem__Quad2DFiniteElement swig_types[182]
#define SWIGTYPE_p_mfem__QuadPos1DFiniteElement swig_types[183]
#define SWIGTYPE_p_mfem__Quadratic3DFiniteElement swig_types[184]
#define SWIGTYPE_p_mfem__QuadratureFunction swig_types[185]
#define SWIGTYPE_p_mfem__QuadratureFunctionCoefficient swig_types[186]
#define SWIGTYPE_p_mfem__RAPOperator swig_types[187]
#define SWIGTYPE_p_mfem__RT0HexFiniteElement swig_types[188]
#define SWIGTYPE_p_mfem__RT0PyrFiniteElement swig_types[189]
#define SWIGTYPE_p_mfem__RT0QuadFiniteElement swig_types[190]
#define SWIGTYPE_p_mfem__RT0TetFiniteElement swig_types[191]
#define SWIGTYPE_p_mfem__RT0TriangleFiniteElement swig_types[192]
#define SWIGTYPE_p_mfem__RT0WdgFiniteElement swig_types[193]
#define SWIGTYPE_p_mfem__RT1HexFiniteElement swig_types[194]
#define SWIGTYPE_p_mfem__RT1QuadFiniteElement swig_types[195]
#define SWIGTYPE_p_mfem__RT1TriangleFiniteElement swig_types[196]
#define SWIGTYPE_p_mfem__RT2QuadFiniteElement swig_types[197]
#define SWIGTYPE_p_mfem__RT2TriangleFiniteElement swig_types[198]
#define SWIGTYPE_p_mfem__RT_HexahedronElement swig_types[199]
#define SWIGTYPE_p_mfem__RT_QuadrilateralElement swig_types[200]
#define SWIGTYPE_p_mfem__RT_R1D_SegmentElement swig_types[201]
#define SWIGTYPE_p_mfem__RT_R2D_FiniteElement swig_types[202]
#define SWIGTYPE_p_mfem__RT_R2D_QuadrilateralElement swig_types[203]
#define SWIGTYPE_p_mfem__RT_R2D_SegmentElement swig_types[204]
#define SWIGTYPE_p_mfem__RT_R2D_TriangleElement swig_types[205]
#define SWIGTYPE_p_mfem__RT_TetrahedronElement swig_types[206]
#define SWIGTYPE_p_mfem__RT_TriangleElement swig_types[207]
#define SWIGTYPE_p_mfem__RT_WedgeElement swig_types[208]
#define SWIGTYPE_p_mfem__RatioCoefficient swig_types[209]
#define SWIGTYPE_p_mfem__RectangularConstrainedOperator swig_types[210]
#define SWIGTYPE_p_mfem__RefinedBiLinear2DFiniteElement swig_types[211]
#define SWIGTYPE_p_mfem__RefinedLinear1DFiniteElement swig_types[212]
#define SWIGTYPE_p_mfem__RefinedLinear2DFiniteElement swig_types[213]
#define SWIGTYPE_p_mfem__RefinedLinear3DFiniteElement swig_types[214]
#define SWIGTYPE_p_mfem__RefinedTriLinear3DFiniteElement swig_types[215]
#define SWIGTYPE_p_mfem__Refinement swig_types[216]
#define SWIGTYPE_p_mfem__RestrictedCoefficient swig_types[217]
#define SWIGTYPE_p_mfem__RotTriLinearHexFiniteElement swig_types[218]
#define SWIGTYPE_p_mfem__STable swig_types[219]
#define SWIGTYPE_p_mfem__ScalarFiniteElement swig_types[220]
#define SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient swig_types[221]
#define SWIGTYPE_p_mfem__ScalarVectorProductCoefficient swig_types[222]
#define SWIGTYPE_p_mfem__ScaledOperator swig_types[223]
#define SWIGTYPE_p_mfem__SecondOrderTimeDependentOperator swig_types[224]
#define SWIGTYPE_p_mfem__Solver swig_types[225]
#define SWIGTYPE_p_mfem__SparseMatrix swig_types[226]
#define SWIGTYPE_p_mfem__SumCoefficient swig_types[227]
#define SWIGTYPE_p_mfem__SymmetricMatrixCoefficient swig_types[228]
#define SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient swig_types[229]
#define SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient swig_types[230]
#define SWIGTYPE_p_mfem__Table swig_types[231]
#define SWIGTYPE_p_mfem__TimeDependentAdjointOperator swig_types[232]
#define SWIGTYPE_p_mfem__TimeDependentOperator swig_types[233]
#define SWIGTYPE_p_mfem__TransformedCoefficient swig_types[234]
#define SWIGTYPE_p_mfem__TransposeMatrixCoefficient swig_types[235]
#define SWIGTYPE_p_mfem__TransposeOperator swig_types[236]
#define SWIGTYPE_p_mfem__TriLinear3DFiniteElement swig_types[237]
#define SWIGTYPE_p_mfem__TripleProductOperator swig_types[238]
#define SWIGTYPE_p_mfem__Vector swig_types[239]
#define SWIGTYPE_p_mfem__VectorArrayCoefficient swig_types[240]
#define SWIGTYPE_p_mfem__VectorCoefficient swig_types[241]
#define SWIGTYPE_p_mfem__VectorConstantCoefficient swig_types[242]
#define SWIGTYPE_p_mfem__VectorCrossProductCoefficient swig_types[243]
#define SWIGTYPE_p_mfem__VectorDeltaCoefficient swig_types[244]
#define SWIGTYPE_p_mfem__VectorFiniteElement swig_types[245]
#define SWIGTYPE_p_mfem__VectorFunctionCoefficient swig_types[246]
#define SWIGTYPE_p_mfem__VectorGridFunctionCoefficient swig_types[247]
#define SWIGTYPE_p_mfem__VectorPyCoefficientBase swig_types[248]
#define SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient swig_types[249]
#define SWIGTYPE_p_mfem__VectorRestrictedCoefficient swig_types[250]
#define SWIGTYPE_p_mfem__VectorRotProductCoefficient swig_types[251]
#define SWIGTYPE_p_mfem__VectorSumCoefficient swig_types[252]
#define SWIGTYPE_p_mfem__VectorTensorFiniteElement swig_types[253]
#define SWIGTYPE_p_mfem__Vertex swig_types[254]
#define SWIGTYPE_p_p_mfem__AbstractSparseMatrix swig_types[255]
#define SWIGTYPE_p_p_mfem__CoefficientVector swig_types[256]
#define SWIGTYPE_p_p_mfem__ConformingFaceRestriction swig_types[257]
#define SWIGTYPE_p_p_mfem__ConstrainedOperator swig_types[258]
#define SWIGTYPE_p_p_mfem__DenseMatrix swig_types[259]
#define SWIGTYPE_p_p_mfem__DenseMatrixInverse swig_types[260]
#define SWIGTYPE_p_p_mfem__DenseSymmetricMatrix swig_types[261]
#define SWIGTYPE_p_p_mfem__Element swig_types[262]
#define SWIGTYPE_p_p_mfem__ElementRestriction swig_types[263]
#define SWIGTYPE_p_p_mfem__ElementRestrictionOperator swig_types[264]
#define SWIGTYPE_p_p_mfem__FaceRestriction swig_types[265]
#define SWIGTYPE_p_p_mfem__FiniteElementSpace swig_types[266]
#define SWIGTYPE_p_p_mfem__GridFunction swig_types[267]
#define SWIGTYPE_p_p_mfem__IdentityOperator swig_types[268]
#define SWIGTYPE_p_p_mfem__IntegrationRule swig_types[269]
#define SWIGTYPE_p_p_mfem__L2ElementRestriction swig_types[270]
#define SWIGTYPE_p_p_mfem__L2FaceRestriction swig_types[271]
#define SWIGTYPE_p_p_mfem__LinearForm swig_types[272]
#define SWIGTYPE_p_p_mfem__Matrix swig_types[273]
#define SWIGTYPE_p_p_mfem__MatrixInverse swig_types[274]
#define SWIGTYPE_p_p_mfem__Mesh swig_types[275]
#define SWIGTYPE_p_p_mfem__NCL2FaceRestriction swig_types[276]
#define SWIGTYPE_p_p_mfem__Operator swig_types[277]
#define SWIGTYPE_p_p_mfem__ProductOperator swig_types[278]
#define SWIGTYPE_p_p_mfem__PyOperatorBase swig_types[279]
#define SWIGTYPE_p_p_mfem__PyTimeDependentOperatorBase swig_types[280]
#define SWIGTYPE_p_p_mfem__RAPOperator swig_types[281]
#define SWIGTYPE_p_p_mfem__RectangularConstrainedOperator swig_types[282]
#define SWIGTYPE_p_p_mfem__ScaledOperator swig_types[283]
#define SWIGTYPE_p_p_mfem__SecondOrderTimeDependentOperator swig_types[284]
#define SWIGTYPE_p_p_mfem__Solver swig_types[285]
#define SWIGTYPE_p_p_mfem__SparseMatrix swig_types[286]
#define SWIGTYPE_p_p_mfem__TimeDependentAdjointOperator swig_types[287]
#define SWIGTYPE_p_p_mfem__TimeDependentOperator swig_types[288]
#define SWIGTYPE_p_p_mfem__TransposeOperator swig_types[289]
#define SWIGTYPE_p_p_mfem__TripleProductOperator swig_types[290]
#define SWIGTYPE_p_p_mfem__Vector swig_types[291]
#define SWIGTYPE_p_pri_t swig_types[292]
#define SWIGTYPE_p_pyr_t swig_types[293]
#define SWIGTYPE_p_quad_t swig_types[294]
#define SWIGTYPE_p_seg_t swig_types[295]
#define SWIGTYPE_p_size_type swig_types[296]
#define SWIGTYPE_p_std__ostream swig_types[297]
#define SWIGTYPE_p_tet_t swig_types[298]
#define SWIGTYPE_p_tri_t swig_types[299]
#define SWIGTYPE_p_value_type swig_types[300]
static swig_type_info *swig_types[302];
static swig_module_info swig_module = {swig_types, 301, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _mesh.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__mesh

#else
#  define SWIG_init    init_mesh

#endif
#define SWIG_name    "_mesh"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>
#include <sstream>
#include <fstream>
#include <limits>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include "mfem.hpp"
#include "numpy/arrayobject.h"
#include "pyoperator.hpp"
#include "../common/pycoefficient.hpp"
#include "../common/io_stream.hpp"


#include <string>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


#include <memory>


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


#include <stddef.h>


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits< mfem::Vector > {
      typedef pointer_category category;
      static const char* type_name() { return"mfem::Vector"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< mfem::Vector, std::allocator< mfem::Vector > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "mfem::Vector" "," "std::allocator< mfem::Vector >" " >";
	  }
	};
      }
    

  #define SWIG_From_double   PyFloat_FromDouble 


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN mfem::Mesh *new_mfem_Mesh__SWIG_13(int nx,int ny,int nz,char const *type,bool generate_edges=0,double sx=1.0,double sy=1.0,double sz=1.0,bool sfc_ordering=true){
     mfem::Mesh *mesh;

     if (std::strcmp(type, "TETRAHEDRON") == 0) {
         mesh = new mfem::Mesh(nx, ny, nz, mfem::Element::TETRAHEDRON,
                               generate_edges, sx, sy, sz);

     }
     else if (std::strcmp(type, "HEXAHEDRON") == 0) {
         mesh = new mfem::Mesh(nx, ny, nz, mfem::Element::HEXAHEDRON,
                               generate_edges, sx, sy, sz);

     }
     else {
         return NULL;
     }
     return mesh;
   }
SWIGINTERN mfem::Mesh *new_mfem_Mesh__SWIG_14(int nx,int ny,char const *type,bool generate_edges=0,double sx=1.0,double sy=1.0,bool sfc_ordering=true){
     mfem::Mesh *mesh;
     if (std::strcmp(type, "TRIANGLE") == 0) {
         mesh = new mfem::Mesh(nx, ny, mfem::Element::TRIANGLE,
                               generate_edges, sx, sy);

     }
     else if (std::strcmp(type, "QUADRILATERAL") == 0) {
         mesh = new mfem::Mesh(nx, ny, mfem::Element::QUADRILATERAL,
                               generate_edges, sx, sy);

     }
     else {
         return NULL;
     }
     return mesh;
   }
SWIGINTERN PyObject *mfem_Mesh_MakeMerged(PyObject *tuple_or_list){
     PyObject *input = tuple_or_list;
     bool is_tuple = false;

     if (PyList_Check(input)) {
       is_tuple = false;
     }
     else if (PyTuple_Check(input)) {
       is_tuple = true;
     }
     else {
       PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple");
       return NULL;
     }

     int size = (is_tuple) ? PyTuple_Size(input) : PyList_Size(input);

     mfem::Mesh *mesh_array[size];
     mfem::Mesh *tmp_ptr;

     swig_type_info *ty = SWIGTYPE_p_mfem__Mesh;

     for (int i = 0; i < size; i++) {
       PyObject *s = is_tuple ? PyTuple_GetItem(input, i) : PyList_GetItem(input,i);
       if (!SWIG_IsOK(SWIG_ConvertPtr(s, (void **)&tmp_ptr, ty, 0|0))) {
         PyErr_SetString(PyExc_ValueError, "List items must be mfem::Mesh *");
         return NULL;
       } else {
         mesh_array[i] = tmp_ptr;
       }
     }
     mfem::Mesh *mesh = new mfem::Mesh(mesh_array, size);
     int own = 1;
     return SWIG_NewPointerObj(SWIG_as_voidptr(mesh), ty, own);
   }
SWIGINTERN void mfem_Mesh_PrintToFile(mfem::Mesh const *self,char const *mesh_file,int const precision){
        std::cerr << "\nWarning Deprecated : Use Print(filename) insteead of SaveToFile \n";
        std::ofstream mesh_ofs(mesh_file);
        mesh_ofs.precision(precision);
        self->Print(mesh_ofs);
   }
SWIGINTERN PyObject *mfem_Mesh_WriteToStream(mfem::Mesh const *self,PyObject *StringIO){
      PyObject* module = PyImport_ImportModule("io");
      if (!module){
         PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
         return (PyObject *) NULL;
      }
      PyObject* cls = PyObject_GetAttrString(module, "StringIO");
      if (!cls){
         PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
         return (PyObject *) NULL;
      }
      int check = PyObject_IsInstance(StringIO, cls);
      Py_DECREF(module);
      if (! check){
         PyErr_SetString(PyExc_TypeError, "First argument must be IOString");
         return (PyObject *) NULL;
      }
      std::ostringstream stream;
      self->Print(stream);
      std::string str =  stream.str();
      const char* s = str.c_str();
      const int n = str.length();
      PyObject *ret = PyObject_CallMethod(StringIO, "write", "s#", s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
         PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
         return (PyObject *) NULL;
      }
      return ret;
   }
SWIGINTERN PyObject *mfem_Mesh_GetAttributeArray(mfem::Mesh const *self){
     int i;
     npy_intp dims[] = {self->GetNE()};
     PyObject *array = PyArray_SimpleNew(1, dims, NPY_INT);
     int *x    = (int *)PyArray_DATA(reinterpret_cast<PyArrayObject *>(array));
     for (i = 0; i < self->GetNE() ; i++){
       x[i] = (int)(self->GetElement(i)->GetAttribute());
     }
     return array;
   }
SWIGINTERN PyObject *mfem_Mesh_GetVertexArray__SWIG_0(mfem::Mesh const *self,int i){
     int L = self->SpaceDimension();
     int n;
     const double *v = self->GetVertex(i);
     npy_intp dims[] = {L};
     return  PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (double *)v);
   }
SWIGINTERN PyObject *mfem_Mesh_GetVertexArray__SWIG_1(mfem::Mesh const *self){
     int L = self->SpaceDimension();
     int NV = self->GetNV();
     const double *data;
     npy_intp dims[] = {L};

     PyObject *list = PyTuple_New(NV);
     for (int i = 0; i < NV; i++) {
          data = self->GetVertex(i);
          PyObject *array = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (double *)data);
          PyTuple_SetItem(list, i, array);
     }
     return list;
   }
SWIGINTERN PyObject *mfem_Mesh_GetBdrElementFace__SWIG_1(mfem::Mesh const *self,int i){
     int a;
     int b;
     PyObject *o;

     if (i >= self->GetNBE()){
        return Py_BuildValue("");
     }
     self->GetBdrElementFace(i, &a, &b);
     o = Py_BuildValue("(ii)", a, b);
     return o;
   }
SWIGINTERN PyObject *mfem_Mesh_GetBdrAttributeArray(mfem::Mesh const *self){
     int i;
     npy_intp dims[] = {self->GetNBE()};
     PyObject *array = PyArray_SimpleNew(1, dims, NPY_INT);
     int *x    = (int *)PyArray_DATA(reinterpret_cast<PyArrayObject *>(array));
     for (i = 0; i < self->GetNBE() ; i++){
       x[i] = (int)(self->GetBdrElement(i)->GetAttribute());
     }
     return array;
   }
SWIGINTERN PyObject *mfem_Mesh_GetBdrArray(mfem::Mesh const *self,int idx){

     int i;
     int c = 0;
     for (i = 0; i < self->GetNBE() ; i++){
       if (self->GetBdrElement(i)->GetAttribute() == idx){c++;}
     }
     npy_intp dims[] = {c};
     PyObject *array = PyArray_SimpleNew(1, dims, NPY_INT);
     int *x    = (int *)PyArray_DATA(reinterpret_cast<PyArrayObject *>(array));
     c = 0;
     for (i = 0; i < self -> GetNBE() ; i++){
       if (self->GetBdrElement(i)->GetAttribute() == idx){
         x[c] = (int)i;
         c++;
       }
     }
     return array;
   }
SWIGINTERN PyObject *mfem_Mesh_GetDomainArray(mfem::Mesh const *self,int idx){

     int i;
     int c = 0;
     for (i = 0; i < self->GetNE() ; i++){
       if (self->GetElement(i)->GetAttribute() == idx){c++;}
     }
     npy_intp dims[] = {c};
     PyObject *array = PyArray_SimpleNew(1, dims, NPY_INT);
     int *x    = (int *)PyArray_DATA(reinterpret_cast<PyArrayObject *>(array));
     c = 0;
     for (i = 0; i < self -> GetNE() ; i++){
       if (self->GetElement(i)->GetAttribute() == idx){
         x[c] = (int)i;
         c++;
       }
     }
     return array;
   }
SWIGINTERN PyObject *mfem_Mesh_GetElementCenterArray(mfem::Mesh *self,int idx){
     int i;
     mfem::Vector v;

     self->GetElementCenter(idx, v);

     npy_intp dims[] = {v.Size()};
     PyObject *array = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
     double *x    = (double *)PyArray_DATA(reinterpret_cast<PyArrayObject *>(array));
     for (i = 0; i < v.Size() ; i++){
         x[i] = v[i];
     }
     return array;
   }
SWIGINTERN double mfem_Mesh_GetScaledJacobian(mfem::Mesh *self,int i,int sd=2){
    // compute scaled Jacobian
    //   i : element index
    //   sd: subdivision
    //   https://github.com/mfem/mfem/pull/1835/files
    //
    double attr = mfem::infinity();
    mfem::DenseMatrix J(self->Dimension());

    mfem::Geometry::Type geom = self->GetElementBaseGeometry(i);
    mfem::ElementTransformation *T = self->GetElementTransformation(i);

    mfem::RefinedGeometry *RefG = mfem::GlobGeometryRefiner.Refine(geom, sd, 1);
    mfem::IntegrationRule &ir = RefG->RefPts;

    // For each element, find the minimal scaled Jacobian in a
    // lattice of points with the given subdivision factor.

    for (int j = 0; j < ir.GetNPoints(); j++)
      {
        T->SetIntPoint(&ir.IntPoint(j));
        mfem::Geometries.JacToPerfJac(geom, T->Jacobian(), J);

        // Jacobian determinant
        double sJ = J.Det();

        for (int k = 0; k < J.Width(); k++)
          {
            mfem::Vector col;
            J.GetColumnReference(k, col);
            // Scale by column norms
            sJ /= col.Norml2();
          }

        attr = fmin(sJ, attr);
      }
    return attr;
  }
SWIGINTERN PyObject *mfem_Mesh_IsElementOnPlaneArray(mfem::Mesh *self,PyObject *aa,PyObject *bb,PyObject *cc,PyObject *dd){
    /*
    return Boolean numpy array to indicate which element is on the plane
    defined by ax + by + cz + d = 0
    */
    double a = PyFloat_AsDouble(aa);
    double b = PyFloat_AsDouble(bb);
    double c = PyFloat_AsDouble(cc);
    double d = PyFloat_AsDouble(dd);
    /*
    return Boolean numpy array to indicate which element is on the plane
    defined by ax + by + cz + d = 0
    */
    mfem::Array<int> inodes;
    int nele = self -> GetNE();
    double *ptx;
    npy_intp dims[] = {nele};
    PyObject *array = PyArray_SimpleNew(1, dims, NPY_BOOL);
    if (self -> SpaceDimension() != 3  || self -> Dimension() != 3){
         PyErr_SetString(PyExc_TypeError, "dim and sdim must be 3");
         return (PyObject *) NULL;
    }
    bool *x    = (bool *)PyArray_DATA(reinterpret_cast<PyArrayObject *>(array));
    bool check, check2;

    for (int k = 0; k < self -> GetNE(); k++){
      self-> GetElementVertices(k, inodes);
      ptx = self -> GetVertex(inodes[0]);
      check = (ptx[0]*a + ptx[1]*b + ptx[2]*c + d >=0);
      x[k] = false;
      for (int j=0; j < inodes.Size(); j++){
        ptx = self -> GetVertex(inodes[j]);
        check2 = (ptx[0]*a + ptx[1]*b + ptx[2]*c + d >=0);
        if (check != check2){
          x[k] = true;
          break;
        }
      }
    }
    return array;
  }
SWIGINTERN void mfem_Mesh_PrintInfo__SWIG_1(mfem::Mesh *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> PrintInfo(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_Mesh_PrintInfoGZ(mfem::Mesh *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> PrintInfo(*ofile);
  delete ofile;
  }
SWIGINTERN void mfem_Mesh_Print__SWIG_1(mfem::Mesh *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> Print(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_Mesh_PrintGZ(mfem::Mesh *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> Print(*ofile);
  delete ofile;
  }
SWIGINTERN void mfem_Mesh_PrintXG__SWIG_1(mfem::Mesh *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> PrintXG(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_Mesh_PrintXGGZ(mfem::Mesh *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> PrintXG(*ofile);
  delete ofile;
  }
SWIGINTERN void mfem_Mesh_PrintVTK__SWIG_2(mfem::Mesh *self,char const *file,int precision=16){
  std::ofstream ofile(file);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile.precision(precision);  
  self -> PrintVTK(ofile);
  ofile.close();
  }
SWIGINTERN void mfem_Mesh_PrintVTKGZ(mfem::Mesh *self,char const *file,int precision=16){
  mfem::ofgzstream *ofile = new mfem::ofgzstream(file, true);
  if (!ofile)
     {
        std::cerr << "\nCan not produce output file: " << file << '\n' << std::endl;
        return;
      }
  ofile ->precision(precision);  
  self -> PrintVTK(*ofile);
  delete ofile;
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mesh_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_Mesh_attributes_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Array< int > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_attributes_get" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  result = (mfem::Array< int > *)& ((arg1)->attributes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ArrayT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_bdr_attributes_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Array< int > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_bdr_attributes_get" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  result = (mfem::Array< int > *)& ((arg1)->bdr_attributes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ArrayT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_NURBSext_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::NURBSExtension *arg2 = (mfem::NURBSExtension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Mesh_NURBSext_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_NURBSext_set" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__NURBSExtension, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_NURBSext_set" "', argument " "2"" of type '" "mfem::NURBSExtension *""'"); 
  }
  arg2 = reinterpret_cast< mfem::NURBSExtension * >(argp2);
  if (arg1) (arg1)->NURBSext = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_NURBSext_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::NURBSExtension *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_NURBSext_get" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  result = (mfem::NURBSExtension *) ((arg1)->NURBSext);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__NURBSExtension, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ncmesh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::NCMesh *arg2 = (mfem::NCMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Mesh_ncmesh_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ncmesh_set" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__NCMesh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_ncmesh_set" "', argument " "2"" of type '" "mfem::NCMesh *""'"); 
  }
  arg2 = reinterpret_cast< mfem::NCMesh * >(argp2);
  if (arg1) (arg1)->ncmesh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ncmesh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::NCMesh *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ncmesh_get" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  result = (mfem::NCMesh *) ((arg1)->ncmesh);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__NCMesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_geom_factors_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< mfem::GeometricFactors * > *arg2 = (mfem::Array< mfem::GeometricFactors * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Mesh_geom_factors_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_geom_factors_set" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__ArrayT_mfem__GeometricFactors_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_geom_factors_set" "', argument " "2"" of type '" "mfem::Array< mfem::GeometricFactors * > *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< mfem::GeometricFactors * > * >(argp2);
  if (arg1) (arg1)->geom_factors = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_geom_factors_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Array< mfem::GeometricFactors * > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_geom_factors_get" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  result = (mfem::Array< mfem::GeometricFactors * > *)& ((arg1)->geom_factors);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ArrayT_mfem__GeometricFactors_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_face_geom_factors_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< mfem::FaceGeometricFactors * > *arg2 = (mfem::Array< mfem::FaceGeometricFactors * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Mesh_face_geom_factors_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_face_geom_factors_set" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_face_geom_factors_set" "', argument " "2"" of type '" "mfem::Array< mfem::FaceGeometricFactors * > *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< mfem::FaceGeometricFactors * > * >(argp2);
  if (arg1) (arg1)->face_geom_factors = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_face_geom_factors_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Array< mfem::FaceGeometricFactors * > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_face_geom_factors_get" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  result = (mfem::Array< mfem::FaceGeometricFactors * > *)& ((arg1)->face_geom_factors);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_Mesh_remove_unused_vertices_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""mfem::Mesh::remove_unused_vertices""' of type '""bool""'");
    }
    mfem::Mesh::remove_unused_vertices = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Mesh_remove_unused_vertices_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(mfem::Mesh::remove_unused_vertices));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Mesh_remove_unused_vertices_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Mesh_remove_unused_vertices_get();
}


SWIGINTERN PyObject *_wrap_Mesh_remove_unused_vertices_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  
  res = Swig_var_Mesh_remove_unused_vertices_set(args);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "mfem::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mesh" "', argument " "1"" of type '" "mfem::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Mesh" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh((mfem::Mesh const &)*arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unique_ptr< mfem::Mesh > rvrdeleter1 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_RELEASE |  0 );
  if (!SWIG_IsOK(res1)) {
    if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "mfem::Mesh &&""'");
    } else {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "mfem::Mesh &&""'"); 
    }
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mesh" "', argument " "1"" of type '" "mfem::Mesh &&""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  rvrdeleter1.reset(arg1);
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh((mfem::Mesh &&)*arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_LoadFromFile(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 1 ;
  bool arg4 = (bool) true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"filename",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  SwigValueWrapper< mfem::Mesh > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_LoadFromFile", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_LoadFromFile" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_LoadFromFile" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = mfem::Mesh::LoadFromFile((char const *)arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeCartesian1D(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 = (double) 1.0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"n",  (char *)"sx",  NULL 
  };
  SwigValueWrapper< mfem::Mesh > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:Mesh_MakeCartesian1D", kwnames, &obj0, &obj1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_MakeCartesian1D" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = mfem::Mesh::MakeCartesian1D(arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeCartesian2D(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  mfem::Element::Type arg3 ;
  bool arg4 = (bool) false ;
  double arg5 = (double) 1.0 ;
  double arg6 = (double) 1.0 ;
  bool arg7 = (bool) true ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char * kwnames[] = {
    (char *)"nx",  (char *)"ny",  (char *)"type",  (char *)"generate_edges",  (char *)"sx",  (char *)"sy",  (char *)"sfc_ordering",  NULL 
  };
  SwigValueWrapper< mfem::Mesh > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|OOOO:Mesh_MakeCartesian2D", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_MakeCartesian2D" "', argument " "3"" of type '" "mfem::Element::Type""'");
  } 
  arg3 = static_cast< mfem::Element::Type >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_MakeCartesian2D" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_MakeCartesian2D" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_double(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Mesh_MakeCartesian2D" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_bool(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Mesh_MakeCartesian2D" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  {
    try {
      result = mfem::Mesh::MakeCartesian2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeCartesian3D(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  mfem::Element::Type arg4 ;
  double arg5 = (double) 1.0 ;
  double arg6 = (double) 1.0 ;
  double arg7 = (double) 1.0 ;
  bool arg8 = (bool) true ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char * kwnames[] = {
    (char *)"nx",  (char *)"ny",  (char *)"nz",  (char *)"type",  (char *)"sx",  (char *)"sy",  (char *)"sz",  (char *)"sfc_ordering",  NULL 
  };
  SwigValueWrapper< mfem::Mesh > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|OOOO:Mesh_MakeCartesian3D", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6, &obj7)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_MakeCartesian3D" "', argument " "4"" of type '" "mfem::Element::Type""'");
  } 
  arg4 = static_cast< mfem::Element::Type >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_MakeCartesian3D" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_double(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Mesh_MakeCartesian3D" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_double(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Mesh_MakeCartesian3D" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_bool(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Mesh_MakeCartesian3D" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
  }
  {
    try {
      result = mfem::Mesh::MakeCartesian3D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeRefined__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< mfem::Mesh > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Mesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MakeRefined" "', argument " "1"" of type '" "mfem::Mesh &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MakeRefined" "', argument " "1"" of type '" "mfem::Mesh &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = mfem::Mesh::MakeRefined(*arg1,arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeRefined__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = 0 ;
  mfem::Array< int > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SwigValueWrapper< mfem::Mesh > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__Mesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MakeRefined" "', argument " "1"" of type '" "mfem::Mesh &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MakeRefined" "', argument " "1"" of type '" "mfem::Mesh &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_MakeRefined" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MakeRefined" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = mfem::Mesh::MakeRefined(*arg1,(mfem::Array< int > const &)*arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeRefined(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_MakeRefined", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_MakeRefined__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_MakeRefined__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_MakeRefined'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::MakeRefined(mfem::Mesh &,int,int)\n"
    "    mfem::Mesh::MakeRefined(mfem::Mesh &,mfem::Array< int > const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeSimplicial(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"orig_mesh",  NULL 
  };
  SwigValueWrapper< mfem::Mesh > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:Mesh_MakeSimplicial", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MakeSimplicial" "', argument " "1"" of type '" "mfem::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MakeSimplicial" "', argument " "1"" of type '" "mfem::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = mfem::Mesh::MakeSimplicial((mfem::Mesh const &)*arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MakePeriodic(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"orig_mesh",  (char *)"v2v",  NULL 
  };
  SwigValueWrapper< mfem::Mesh > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_MakePeriodic", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_mfem__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MakePeriodic" "', argument " "1"" of type '" "mfem::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MakePeriodic" "', argument " "1"" of type '" "mfem::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_MakePeriodic" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MakePeriodic" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = mfem::Mesh::MakePeriodic((mfem::Mesh const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh(result)), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_CreatePeriodicVertexMapping(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::vector< mfem::Vector,std::allocator< mfem::Vector > > *arg2 = 0 ;
  double arg3 = (double) 1e-8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"translations",  (char *)"tol",  NULL 
  };
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_CreatePeriodicVertexMapping", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_CreatePeriodicVertexMapping" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    std::vector< mfem::Vector,std::allocator< mfem::Vector > > *ptr = (std::vector< mfem::Vector,std::allocator< mfem::Vector > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_CreatePeriodicVertexMapping" "', argument " "2"" of type '" "std::vector< mfem::Vector,std::allocator< mfem::Vector > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_CreatePeriodicVertexMapping" "', argument " "2"" of type '" "std::vector< mfem::Vector,std::allocator< mfem::Vector > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_CreatePeriodicVertexMapping" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  {
    try {
      result = ((mfem::Mesh const *)arg1)->CreatePeriodicVertexMapping((std::vector< mfem::Vector,std::allocator< mfem::Vector > > const &)*arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  mfem::Geometry::Type arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  mfem::Geometry::Type arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int arg11 ;
  int arg12 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 11) || (nobjs > 12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Mesh" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mesh" "', argument " "4"" of type '" "mfem::Geometry::Type""'");
  } 
  arg4 = static_cast< mfem::Geometry::Type >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Mesh" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg6 = PyArray_PyIntAsInt(swig_obj[5]);
  }
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_Mesh" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Mesh" "', argument " "8"" of type '" "mfem::Geometry::Type""'");
  } 
  arg8 = static_cast< mfem::Geometry::Type >(val8);
  res9 = SWIG_ConvertPtr(swig_obj[8], &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_Mesh" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = reinterpret_cast< int * >(argp9);
  {
    if ((PyArray_PyIntAsInt(swig_obj[9]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg10 = PyArray_PyIntAsInt(swig_obj[9]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[10]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg11 = PyArray_PyIntAsInt(swig_obj[10]);
  }
  if (swig_obj[11]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[11]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg12 = PyArray_PyIntAsInt(swig_obj[11]);
    }
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) -1 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_NewElement(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  NULL 
  };
  mfem::Element *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_NewElement", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_NewElement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Element *)(arg1)->NewElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddVertex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double arg2 ;
  double arg3 = (double) 0.0 ;
  double arg4 = (double) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddVertex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_AddVertex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_AddVertex" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_AddVertex" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = (int)(arg1)->AddVertex(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddVertex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Vector *temp_vec2 ;
  double *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddVertex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_double, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_vec2, SWIGTYPE_p_mfem__Vector, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISFLOAT(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *double/Vector/numpy float array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(float)\n";	     
            arg2 = (double *) PyArray_DATA((PyArrayObject *)swig_obj[1]);	     
          }
        } else {
          //std::cout << "Calling Vector::GetData\n";
          arg2 = temp_vec2 -> GetData();
        }
      } else {
        // const (
        //std::cout << "Using const double\n";      
        arg2 = temp_ptr2;
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }      
      //std::cout << "Using List\n";    
      arg2 = new double [l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);      
        if (PyInt_Check(s)) {
          arg2[i] = (double)PyFloat_AsDouble(s);
        } else if (PyFloat_Check(s)) {
          arg2[i] = (double)PyFloat_AsDouble(s);
        } else {
          delete[] arg2;      
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer/float");
          return NULL;
        }
      }
    }
  }
  {
    try {
      result = (int)(arg1)->AddVertex((double const *)arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddVertex__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddVertex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddVertex" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_AddVertex" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      result = (int)(arg1)->AddVertex((mfem::Vector const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddVertex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddVertex", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_AddVertex__SWIG_2(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (PyFloat_Check(argv[1])){
          _v = 1;
        } else {
          _v = 0;
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddVertex__SWIG_0(self, argc, argv);
        }
        {
          if (PyFloat_Check(argv[2])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_AddVertex__SWIG_0(self, argc, argv);
          }
          {
            if (PyFloat_Check(argv[3])){
              _v = 1;
            } else {
              _v = 0;
            }
          }
          if (_v) {
            return _wrap_Mesh_AddVertex__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_double, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])){
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__Vector, 0 |0) == -1) {
              PyErr_Clear();
              if (!PyArray_Check(argv[1]) || !PyArray_ISFLOAT(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy float array
              }
            } else {
              _v = 1;  // accept vector
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const double*
        }
      }
      if (_v) {
        return _wrap_Mesh_AddVertex__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddVertex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddVertex(double,double,double)\n"
    "    mfem::Mesh::AddVertex(double const *)\n"
    "    mfem::Mesh::AddVertex(mfem::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddVertexParents(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"p1",  (char *)"p2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_AddVertexParents", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddVertexParents" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      (arg1)->AddVertexParents(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddSegment__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddSegment" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddSegment(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddSegment__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddSegment" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddSegment((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddSegment(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddSegment", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddSegment__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddSegment__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_AddSegment__SWIG_0(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_Mesh_AddSegment__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddSegment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddSegment(int,int,int)\n"
    "    mfem::Mesh::AddSegment(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTriangle__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddTriangle" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddTriangle(arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTriangle__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddTriangle" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddTriangle((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTriangle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddTriangle", 0, 5, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddTriangle__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddTriangle__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_AddTriangle__SWIG_0(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_Mesh_AddTriangle__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddTriangle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddTriangle(int,int,int,int)\n"
    "    mfem::Mesh::AddTriangle(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTri(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vi",  (char *)"attr",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_AddTri", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddTri" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1) && !PyTuple_Check(obj1)) {
      if (SWIG_ConvertPtr(obj1, (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(obj1, (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(obj1) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(obj1))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)obj1);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(obj1)) {
        is_tuple2 = true;
        l = PyTuple_Size(obj1);      
      } else {
        l = PyList_Size(obj1);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(obj1, i) : PyList_GetItem(obj1,i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (int)(arg1)->AddTri((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddQuad__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddQuad" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  if (swig_obj[5]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg6 = PyArray_PyIntAsInt(swig_obj[5]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddQuad(arg2,arg3,arg4,arg5,arg6);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddQuad__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddQuad" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddQuad((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddQuad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddQuad", 0, 6, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddQuad__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddQuad__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 5) && (argc <= 6)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Mesh_AddQuad__SWIG_0(self, argc, argv);
              }
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                return _wrap_Mesh_AddQuad__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddQuad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddQuad(int,int,int,int,int)\n"
    "    mfem::Mesh::AddQuad(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTet__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddTet" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  if (swig_obj[5]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg6 = PyArray_PyIntAsInt(swig_obj[5]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddTet(arg2,arg3,arg4,arg5,arg6);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTet__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddTet" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddTet((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddTet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddTet", 0, 6, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddTet__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddTet__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 5) && (argc <= 6)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Mesh_AddTet__SWIG_0(self, argc, argv);
              }
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                return _wrap_Mesh_AddTet__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddTet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddTet(int,int,int,int,int)\n"
    "    mfem::Mesh::AddTet(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddWedge__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 7) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddWedge" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg6 = PyArray_PyIntAsInt(swig_obj[5]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[6]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg7 = PyArray_PyIntAsInt(swig_obj[6]);
  }
  if (swig_obj[7]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[7]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg8 = PyArray_PyIntAsInt(swig_obj[7]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddWedge(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddWedge__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddWedge" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddWedge((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddWedge(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddWedge", 0, 8, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddWedge__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddWedge__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 7) && (argc <= 8)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                {
                  if ((PyArray_PyIntAsInt(argv[6]) == -1) && PyErr_Occurred()) {
                    PyErr_Clear();
                    _v = 0;
                  } else {
                    _v = 1;    
                  }
                }
                if (_v) {
                  if (argc <= 7) {
                    return _wrap_Mesh_AddWedge__SWIG_0(self, argc, argv);
                  }
                  {
                    if ((PyArray_PyIntAsInt(argv[7]) == -1) && PyErr_Occurred()) {
                      PyErr_Clear();
                      _v = 0;
                    } else {
                      _v = 1;    
                    }
                  }
                  if (_v) {
                    return _wrap_Mesh_AddWedge__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddWedge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddWedge(int,int,int,int,int,int,int)\n"
    "    mfem::Mesh::AddWedge(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddPyramid__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 6) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddPyramid" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg6 = PyArray_PyIntAsInt(swig_obj[5]);
  }
  if (swig_obj[6]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[6]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg7 = PyArray_PyIntAsInt(swig_obj[6]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddPyramid(arg2,arg3,arg4,arg5,arg6,arg7);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddPyramid__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddPyramid" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddPyramid((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddPyramid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddPyramid", 0, 7, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddPyramid__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddPyramid__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 6) && (argc <= 7)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                if (argc <= 6) {
                  return _wrap_Mesh_AddPyramid__SWIG_0(self, argc, argv);
                }
                {
                  if ((PyArray_PyIntAsInt(argv[6]) == -1) && PyErr_Occurred()) {
                    PyErr_Clear();
                    _v = 0;
                  } else {
                    _v = 1;    
                  }
                }
                if (_v) {
                  return _wrap_Mesh_AddPyramid__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddPyramid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddPyramid(int,int,int,int,int,int)\n"
    "    mfem::Mesh::AddPyramid(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddHex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 9) || (nobjs > 10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddHex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg6 = PyArray_PyIntAsInt(swig_obj[5]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[6]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg7 = PyArray_PyIntAsInt(swig_obj[6]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[7]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg8 = PyArray_PyIntAsInt(swig_obj[7]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[8]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg9 = PyArray_PyIntAsInt(swig_obj[8]);
  }
  if (swig_obj[9]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[9]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg10 = PyArray_PyIntAsInt(swig_obj[9]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddHex(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddHex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddHex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddHex((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddHex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddHex", 0, 10, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddHex__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddHex__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 9) && (argc <= 10)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                {
                  if ((PyArray_PyIntAsInt(argv[6]) == -1) && PyErr_Occurred()) {
                    PyErr_Clear();
                    _v = 0;
                  } else {
                    _v = 1;    
                  }
                }
                if (_v) {
                  {
                    if ((PyArray_PyIntAsInt(argv[7]) == -1) && PyErr_Occurred()) {
                      PyErr_Clear();
                      _v = 0;
                    } else {
                      _v = 1;    
                    }
                  }
                  if (_v) {
                    {
                      if ((PyArray_PyIntAsInt(argv[8]) == -1) && PyErr_Occurred()) {
                        PyErr_Clear();
                        _v = 0;
                      } else {
                        _v = 1;    
                      }
                    }
                    if (_v) {
                      if (argc <= 9) {
                        return _wrap_Mesh_AddHex__SWIG_0(self, argc, argv);
                      }
                      {
                        if ((PyArray_PyIntAsInt(argv[9]) == -1) && PyErr_Occurred()) {
                          PyErr_Clear();
                          _v = 0;
                        } else {
                          _v = 1;    
                        }
                      }
                      if (_v) {
                        return _wrap_Mesh_AddHex__SWIG_0(self, argc, argv);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddHex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddHex(int,int,int,int,int,int,int,int,int)\n"
    "    mfem::Mesh::AddHex(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddHexAsTets(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vi",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_AddHexAsTets", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddHexAsTets" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1) && !PyTuple_Check(obj1)) {
      if (SWIG_ConvertPtr(obj1, (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(obj1, (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(obj1) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(obj1))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)obj1);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(obj1)) {
        is_tuple2 = true;
        l = PyTuple_Size(obj1);      
      } else {
        l = PyList_Size(obj1);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(obj1, i) : PyList_GetItem(obj1,i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      (arg1)->AddHexAsTets((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddHexAsWedges(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vi",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_AddHexAsWedges", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddHexAsWedges" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1) && !PyTuple_Check(obj1)) {
      if (SWIG_ConvertPtr(obj1, (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(obj1, (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(obj1) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(obj1))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)obj1);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(obj1)) {
        is_tuple2 = true;
        l = PyTuple_Size(obj1);      
      } else {
        l = PyList_Size(obj1);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(obj1, i) : PyList_GetItem(obj1,i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      (arg1)->AddHexAsWedges((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddHexAsPyramids(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vi",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_AddHexAsPyramids", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddHexAsPyramids" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1) && !PyTuple_Check(obj1)) {
      if (SWIG_ConvertPtr(obj1, (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(obj1, (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(obj1) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(obj1))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)obj1);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(obj1)) {
        is_tuple2 = true;
        l = PyTuple_Size(obj1);      
      } else {
        l = PyList_Size(obj1);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(obj1, i) : PyList_GetItem(obj1,i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      (arg1)->AddHexAsPyramids((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddElement(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Element *arg2 = (mfem::Element *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"elem",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_AddElement", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddElement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__Element, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddElement" "', argument " "2"" of type '" "mfem::Element *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Element * >(argp2);
  {
    try {
      result = (int)(arg1)->AddElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrElement(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Element *arg2 = (mfem::Element *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"elem",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_AddBdrElement", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrElement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__Element, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_AddBdrElement" "', argument " "2"" of type '" "mfem::Element *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Element * >(argp2);
  {
    try {
      result = (int)(arg1)->AddBdrElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrSegment__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrSegment" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrSegment(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrSegment__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrSegment" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrSegment((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrSegment(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddBdrSegment", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddBdrSegment__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddBdrSegment__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_AddBdrSegment__SWIG_0(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_Mesh_AddBdrSegment__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddBdrSegment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddBdrSegment(int,int,int)\n"
    "    mfem::Mesh::AddBdrSegment(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrTriangle__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrTriangle" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrTriangle(arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrTriangle__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrTriangle" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrTriangle((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrTriangle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddBdrTriangle", 0, 5, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddBdrTriangle__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddBdrTriangle__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 5)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_AddBdrTriangle__SWIG_0(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_Mesh_AddBdrTriangle__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddBdrTriangle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddBdrTriangle(int,int,int,int)\n"
    "    mfem::Mesh::AddBdrTriangle(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrQuad__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 5) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrQuad" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(swig_obj[3]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(swig_obj[4]);
  }
  if (swig_obj[5]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg6 = PyArray_PyIntAsInt(swig_obj[5]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrQuad(arg2,arg3,arg4,arg5,arg6);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrQuad__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrQuad" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(swig_obj[1]) && !PyTuple_Check(swig_obj[1])) {
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(swig_obj[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(swig_obj[1]))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)swig_obj[1]);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(swig_obj[1])) {
        is_tuple2 = true;
        l = PyTuple_Size(swig_obj[1]);      
      } else {
        l = PyList_Size(swig_obj[1]);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(swig_obj[1], i) : PyList_GetItem(swig_obj[1],i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrQuad((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrQuad(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_AddBdrQuad", 0, 6, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyList_Check(argv[1]) && !PyTuple_Check(argv[1])) {
            PyErr_Clear();
            if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
              if (!PyArray_Check(argv[1]) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(argv[1]))){
                _v = 0;	      
              } else {
                _v = 1;  // accept numpy int array
              }
            } else {
              _v = 1;  // accept array <int>
            }
          } else {
            _v = 1;  // acccept list/tuple
          }
        } else {
          _v = 1;     // accept const int*
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_AddBdrQuad__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_AddBdrQuad__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 5) && (argc <= 6)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Mesh_AddBdrQuad__SWIG_0(self, argc, argv);
              }
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                return _wrap_Mesh_AddBdrQuad__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_AddBdrQuad'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::AddBdrQuad(int,int,int,int,int)\n"
    "    mfem::Mesh::AddBdrQuad(int const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrQuadAsTriangles(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Array< int > *temp_arr2 ;
  int *temp_ptr2 ;
  bool is_allocated2 = false ;
  bool is_tuple2 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vi",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_AddBdrQuadAsTriangles", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrQuadAsTriangles" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int i;
    if (!PyList_Check(obj1) && !PyTuple_Check(obj1)) {
      if (SWIG_ConvertPtr(obj1, (void **) &temp_ptr2, SWIGTYPE_p_int, 0 |0) == -1) {
        if (SWIG_ConvertPtr(obj1, (void **) &temp_arr2, SWIGTYPE_p_mfem__ArrayT_int_t, 0 |0) == -1) {
          if (!PyArray_Check(obj1) || !PyArray_ISINTEGER(reinterpret_cast<PyArrayObject *>(obj1))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *int/Vector/numpy int array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(int)\n";	     
            arg2 = (int *) PyArray_DATA((PyArrayObject *)obj1);
            //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";
          }	 
        } else {
          //std::cout << "Calling Array<int>::GetData\n";
          arg2 = temp_arr2 -> GetData();
          //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	 
        }
      } else {
        // const (
        //std::cout << "Using const int\n";      
        arg2 = temp_ptr2;
        //std::cout << arg2[0] << " " << arg2[1] << " " << arg2[2] << "\n";	       
      }
    } else {
      int l = 0;
      if (PyTuple_Check(obj1)) {
        is_tuple2 = true;
        l = PyTuple_Size(obj1);      
      } else {
        l = PyList_Size(obj1);
      }
      //arg2 = (int *) malloc((l)*sizeof(int));
      arg2 = new int[l];
      is_allocated2 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple2) ? PyTuple_GetItem(obj1, i) : PyList_GetItem(obj1,i);
        if (PyInt_Check(s)) {
          arg2[i] = (int)PyInt_AsLong(s);
        } else if ((PyArray_PyIntAsInt(s) != -1) || !PyErr_Occurred()) {
          arg2[i] = PyArray_PyIntAsInt(s);
        } else {
          delete[] arg2;
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer");
          return NULL;
        }
      }
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      (arg1)->AddBdrQuadAsTriangles((int const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated2)
    {
      delete[] arg2;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_AddBdrPoint(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"v",  (char *)"attr",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_AddBdrPoint", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_AddBdrPoint" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (int)(arg1)->AddBdrPoint(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GenerateBoundaryElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GenerateBoundaryElements" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->GenerateBoundaryElements();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeTriMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_FinalizeTriMesh", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeTriMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_FinalizeTriMesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->FinalizeTriMesh(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeQuadMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_FinalizeQuadMesh", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeQuadMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_FinalizeQuadMesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->FinalizeQuadMesh(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeTetMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_FinalizeTetMesh", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeTetMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_FinalizeTetMesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->FinalizeTetMesh(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeWedgeMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_FinalizeWedgeMesh", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeWedgeMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_FinalizeWedgeMesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->FinalizeWedgeMesh(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeHexMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  bool arg4 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_FinalizeHexMesh", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeHexMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_FinalizeHexMesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->FinalizeHexMesh(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  bool arg3 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OO:Mesh_FinalizeMesh", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_FinalizeMesh" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->FinalizeMesh(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FinalizeTopology(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"generate_bdr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:Mesh_FinalizeTopology", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FinalizeTopology" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_FinalizeTopology" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      (arg1)->FinalizeTopology(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Finalize(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  bool arg2 = (bool) false ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OO:Mesh_Finalize", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Finalize" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_Finalize" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_Finalize" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->Finalize(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetAttributes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetAttributes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->SetAttributes();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetGeckoElementOrdering(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  int arg3 = (int) 4 ;
  int arg4 = (int) 4 ;
  int arg5 = (int) 2 ;
  int arg6 = (int) 0 ;
  bool arg7 = (bool) false ;
  double arg8 = (double) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ordering",  (char *)"iterations",  (char *)"window",  (char *)"period",  (char *)"seed",  (char *)"verbose",  (char *)"time_limit",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OOOOOO:Mesh_GetGeckoElementOrdering", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6, &obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetGeckoElementOrdering" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetGeckoElementOrdering" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetGeckoElementOrdering" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  if (obj4) {
    {
      if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(obj4);
    }
  }
  if (obj5) {
    {
      if ((PyArray_PyIntAsInt(obj5) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg6 = PyArray_PyIntAsInt(obj5);
    }
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_bool(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Mesh_GetGeckoElementOrdering" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_double(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Mesh_GetGeckoElementOrdering" "', argument " "8"" of type '" "double""'");
    } 
    arg8 = static_cast< double >(val8);
  }
  {
    try {
      result = (double)(arg1)->GetGeckoElementOrdering(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetHilbertElementOrdering(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ordering",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetHilbertElementOrdering", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetHilbertElementOrdering" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetHilbertElementOrdering" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetHilbertElementOrdering" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    try {
      (arg1)->GetHilbertElementOrdering(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ReorderElements(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  bool arg3 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ordering",  (char *)"reorder_vertices",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_ReorderElements", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ReorderElements" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_ReorderElements" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_ReorderElements" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_ReorderElements" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->ReorderElements((mfem::Array< int > const &)*arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  mfem::Element::Type arg4 ;
  bool arg5 = (bool) false ;
  double arg6 = (double) 1.0 ;
  double arg7 = (double) 1.0 ;
  double arg8 = (double) 1.0 ;
  bool arg9 = (bool) true ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 9)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mesh" "', argument " "4"" of type '" "mfem::Element::Type""'");
  } 
  arg4 = static_cast< mfem::Element::Type >(val4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Mesh" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Mesh" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Mesh" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (swig_obj[7]) {
    ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Mesh" "', argument " "8"" of type '" "double""'");
    } 
    arg8 = static_cast< double >(val8);
  }
  if (swig_obj[8]) {
    ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Mesh" "', argument " "9"" of type '" "bool""'");
    } 
    arg9 = static_cast< bool >(val9);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  mfem::Element::Type arg3 ;
  bool arg4 = (bool) false ;
  double arg5 = (double) 1.0 ;
  double arg6 = (double) 1.0 ;
  bool arg7 = (bool) true ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 7)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Mesh" "', argument " "3"" of type '" "mfem::Element::Type""'");
  } 
  arg3 = static_cast< mfem::Element::Type >(val3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Mesh" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Mesh" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Mesh" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 = (double) 1.0 ;
  double val2 ;
  int ecode2 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  if (swig_obj[1]) {
    ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Mesh" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_9(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 1 ;
  bool arg4 = (bool) true ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  if (swig_obj[1]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(swig_obj[1]);
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh((char const *)arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_10(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 1 ;
  bool arg4 = (bool) true ;
  PyMFEM::wFILE *temp1 = 0 ;
  std::ifstream in_txt1 ;
  mfem::ifgzstream *in_gz1 = 0 ;
  std::istringstream *stream1 = 0 ;
  Py_ssize_t len1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 4)) SWIG_fail;
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(swig_obj[0], (void **) &temp1, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(swig_obj[0]) && !PyUnicode_Check(swig_obj[0])) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(swig_obj[0], cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        
        PyObject *input_str = PyObject_CallMethod(swig_obj[0], "getvalue", NULL);
        if (PyErr_Occurred()) {
          PyErr_SetString(PyExc_RuntimeError, "Can not read from StringIO");
          return NULL;
        }
        
        char *buf = nullptr;
        PyObject *str = PyUnicode_AsUTF8String(input_str);	 
        PyBytes_AsStringAndSize(str, &buf, &len1);
        stream1 = new std::istringstream(buf);
        Py_DECREF(str);
        Py_DECREF(input_str);	 
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(swig_obj[0], "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp1 = new PyMFEM::wFILE(filename, 8, true);
        Py_DECREF(str);
      }
    }
    if (stream1 == 0){
      /*
            if (temp1->isGZ()){
        	 in_gz1 = new mfem::ifgzstream(temp1->getFilename());
               arg1 = in_gz1;
            } else {
        	 in_txt1.open(temp1->getFilename(), std::ifstream::in);
               in_txt1.precision(temp1->getPrecision());
               arg1 = &in_txt1;
            }
           */
      /* this will auto-detect the input file type */
      in_gz1 = new mfem::ifgzstream(temp1->getFilename());
      arg1 = in_gz1;
      
      if (temp1->isTemporary()){
        delete temp1;
      }
    } else {
      arg1 = stream1;
    }
  }
  if (swig_obj[1]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(swig_obj[1]);
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(*arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  {
    if (!stream1) {
      if (temp1) {
        in_txt1.close();
      }
      if (in_gz1){
        delete in_gz1;
      }
    }  
  }
  return resultobj;
fail:
  {
    if (!stream1) {
      if (temp1) {
        in_txt1.close();
      }
      if (in_gz1){
        delete in_gz1;
      }
    }  
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_11(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh **arg1 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "mfem::Mesh *[]""'"); 
  } 
  arg1 = reinterpret_cast< mfem::Mesh ** >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_12(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (mfem::Mesh *)new mfem::Mesh(arg1,arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Load(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::istream *arg2 = 0 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 1 ;
  bool arg5 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ifstream in_txt2 ;
  mfem::ifgzstream *in_gz2 = 0 ;
  std::istringstream *stream2 = 0 ;
  Py_ssize_t len2 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"input",  (char *)"generate_edges",  (char *)"refine",  (char *)"fix_orientation",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OOO:Mesh_Load", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Load" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(obj1, (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(obj1) && !PyUnicode_Check(obj1)) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(obj1, cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        
        PyObject *input_str = PyObject_CallMethod(obj1, "getvalue", NULL);
        if (PyErr_Occurred()) {
          PyErr_SetString(PyExc_RuntimeError, "Can not read from StringIO");
          return NULL;
        }
        
        char *buf = nullptr;
        PyObject *str = PyUnicode_AsUTF8String(input_str);	 
        PyBytes_AsStringAndSize(str, &buf, &len2);
        stream2 = new std::istringstream(buf);
        Py_DECREF(str);
        Py_DECREF(input_str);	 
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(obj1, "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp2 = new PyMFEM::wFILE(filename, 8, true);
        Py_DECREF(str);
      }
    }
    if (stream2 == 0){
      /*
            if (temp2->isGZ()){
        	 in_gz2 = new mfem::ifgzstream(temp2->getFilename());
               arg2 = in_gz2;
            } else {
        	 in_txt2.open(temp2->getFilename(), std::ifstream::in);
               in_txt2.precision(temp2->getPrecision());
               arg2 = &in_txt2;
            }
           */
      /* this will auto-detect the input file type */
      in_gz2 = new mfem::ifgzstream(temp2->getFilename());
      arg2 = in_gz2;
      
      if (temp2->isTemporary()){
        delete temp2;
      }
    } else {
      arg2 = stream2;
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_Load" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      (arg1)->Load(*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (!stream2) {
      if (temp2) {
        in_txt2.close();
      }
      if (in_gz2){
        delete in_gz2;
      }
    }  
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        in_txt2.close();
      }
      if (in_gz2){
        delete in_gz2;
      }
    }  
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Clear" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->Clear();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MeshGenerator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MeshGenerator" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)(arg1)->MeshGenerator();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNV(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNV" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNV();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNE" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNE();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNBE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNBE" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNBE();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNEdges(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNEdges" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNEdges();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNFaces(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNFaces" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNFaces();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNumFaces(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNumFaces" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNumFaces();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNumFacesWithGhost(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNumFacesWithGhost" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNumFacesWithGhost();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNFbyType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::FaceType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"type",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetNFbyType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNFbyType" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_GetNFbyType" "', argument " "2"" of type '" "mfem::FaceType""'");
  } 
  arg2 = static_cast< mfem::FaceType >(val2);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNFbyType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ReduceInt(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"value",  NULL 
  };
  long long result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_ReduceInt", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ReduceInt" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (long long)((mfem::Mesh const *)arg1)->ReduceInt(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetGlobalNE(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetGlobalNE" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (long long)((mfem::Mesh const *)arg1)->GetGlobalNE();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertexToVertexTable(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::DSTable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"arg2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetVertexToVertexTable", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertexToVertexTable" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DSTable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetVertexToVertexTable" "', argument " "2"" of type '" "mfem::DSTable &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetVertexToVertexTable" "', argument " "2"" of type '" "mfem::DSTable &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DSTable * >(argp2);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetVertexToVertexTable(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetGeometricFactors(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::IntegrationRule *arg2 = 0 ;
  int arg3 ;
  mfem::MemoryType arg4 = (mfem::MemoryType) mfem::MemoryType::DEFAULT ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ir",  (char *)"flags",  (char *)"d_mt",  NULL 
  };
  mfem::GeometricFactors *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:Mesh_GetGeometricFactors", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetGeometricFactors" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetGeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetGeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_GetGeometricFactors" "', argument " "4"" of type '" "mfem::MemoryType""'");
    } 
    arg4 = static_cast< mfem::MemoryType >(val4);
  }
  {
    try {
      result = (mfem::GeometricFactors *)(arg1)->GetGeometricFactors((mfem::IntegrationRule const &)*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceGeometricFactors(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::IntegrationRule *arg2 = 0 ;
  int arg3 ;
  mfem::FaceType arg4 ;
  mfem::MemoryType arg5 = (mfem::MemoryType) mfem::MemoryType::DEFAULT ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ir",  (char *)"flags",  (char *)"type",  (char *)"d_mt",  NULL 
  };
  mfem::FaceGeometricFactors *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|O:Mesh_GetFaceGeometricFactors", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceGeometricFactors" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetFaceGeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetFaceGeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_GetFaceGeometricFactors" "', argument " "4"" of type '" "mfem::FaceType""'");
  } 
  arg4 = static_cast< mfem::FaceType >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_GetFaceGeometricFactors" "', argument " "5"" of type '" "mfem::MemoryType""'");
    } 
    arg5 = static_cast< mfem::MemoryType >(val5);
  }
  {
    try {
      result = (mfem::FaceGeometricFactors *)(arg1)->GetFaceGeometricFactors((mfem::IntegrationRule const &)*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_DeleteGeometricFactors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_DeleteGeometricFactors" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->DeleteGeometricFactors();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_NodesUpdated(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_NodesUpdated" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->NodesUpdated();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_EulerNumber(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_EulerNumber" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->EulerNumber();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_EulerNumber2D(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_EulerNumber2D" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->EulerNumber2D();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Dimension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Dimension" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->Dimension();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SpaceDimension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SpaceDimension" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->SpaceDimension();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertex" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (double *)((mfem::Mesh const *)arg1)->GetVertex(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (double *)(arg1)->GetVertex(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetVertex", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetVertex__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetVertex__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetVertex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetVertex(int) const\n"
    "    mfem::Mesh::GetVertex(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  (char *)"elem_vtx",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetElementData", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementData" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementData" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementData" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetElementData" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementData" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< int > * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetElementData(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_HasBoundaryElements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_HasBoundaryElements" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (bool)((mfem::Mesh const *)arg1)->HasBoundaryElements();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  (char *)"bdr_elem_vtx",  (char *)"bdr_attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetBdrElementData", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementData" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementData" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementData" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetBdrElementData" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementData" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< int > * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrElementData(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ChangeVertexDataOwnership(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  bool arg4 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vertices",  (char *)"len_vertices",  (char *)"zerocopy",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:Mesh_ChangeVertexDataOwnership", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ChangeVertexDataOwnership" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_ChangeVertexDataOwnership" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_ChangeVertexDataOwnership" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      (arg1)->ChangeVertexDataOwnership(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Element **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementsArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Element **)((mfem::Mesh const *)arg1)->GetElementsArray();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Element *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElement" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::Element *)((mfem::Mesh const *)arg1)->GetElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Element *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::Element *)(arg1)->GetElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetElement", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetElement__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetElement__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetElement(int) const\n"
    "    mfem::Mesh::GetElement(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Element *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElement" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::Element *)((mfem::Mesh const *)arg1)->GetBdrElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Element *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::Element *)(arg1)->GetBdrElement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetBdrElement", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetBdrElement__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetBdrElement__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetBdrElement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetBdrElement(int) const\n"
    "    mfem::Mesh::GetBdrElement(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFace(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Element *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetFace", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFace" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Element *)((mfem::Mesh const *)arg1)->GetFace(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Element, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetFaceGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetFaceGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetElementGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetElementGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrElementGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetBdrElementGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceBaseGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetFaceBaseGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceBaseGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetFaceBaseGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementBaseGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetElementBaseGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementBaseGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetElementBaseGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementBaseGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrElementBaseGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementBaseGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetBdrElementBaseGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_HasGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_HasGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_HasGeometry" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_HasGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (bool)((mfem::Mesh const *)arg1)->HasGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNumGeometries(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetNumGeometries", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNumGeometries" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetNumGeometries(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetGeometries(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< mfem::Geometry::Type > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  (char *)"el_geoms",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetGeometries", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetGeometries" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_mfem__Geometry__Type_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetGeometries" "', argument " "3"" of type '" "mfem::Array< mfem::Geometry::Type > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetGeometries" "', argument " "3"" of type '" "mfem::Array< mfem::Geometry::Type > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< mfem::Geometry::Type > * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetGeometries(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetElementVertices", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementVertices" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetElementVertices(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"v",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetBdrElementVertices", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementVertices" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrElementVertices(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementEdges(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"edges",  (char *)"cor",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetElementEdges", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementEdges" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementEdges" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementEdges" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetElementEdges" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementEdges" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< int > * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetElementEdges(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementEdges(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"edges",  (char *)"cor",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetBdrElementEdges", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementEdges" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementEdges" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementEdges" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetBdrElementEdges" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementEdges" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< int > * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrElementEdges(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceEdges(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"edges",  (char *)"o",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetFaceEdges", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceEdges" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetFaceEdges" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetFaceEdges" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetFaceEdges" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetFaceEdges" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< int > * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetFaceEdges(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"vert",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetFaceVertices", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceVertices" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetFaceVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetFaceVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetFaceVertices(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetEdgeVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"vert",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetEdgeVertices", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetEdgeVertices" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetEdgeVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetEdgeVertices" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetEdgeVertices(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceEdgeTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceEdgeTable" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *)((mfem::Mesh const *)arg1)->GetFaceEdgeTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetEdgeVertexTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetEdgeVertexTable" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *)((mfem::Mesh const *)arg1)->GetEdgeVertexTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementFaces(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"faces",  (char *)"ori",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetElementFaces", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementFaces" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementFaces" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementFaces" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetElementFaces" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementFaces" "', argument " "4"" of type '" "mfem::Array< int > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< int > * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetElementFaces(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FindFaceNeighbors(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"elem",  NULL 
  };
  mfem::Array< int > result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_FindFaceNeighbors", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FindFaceNeighbors" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = ((mfem::Mesh const *)arg1)->FindFaceNeighbors(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Array< int >(result)), SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementFace__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementFace" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementFace" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetBdrElementFace" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrElementFace(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementEdgeIndex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrElementEdgeIndex", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementEdgeIndex" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetBdrElementEdgeIndex(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementAdjacentElement(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"bdr_el",  (char *)"el",  (char *)"info",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetBdrElementAdjacentElement", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementAdjacentElement" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementAdjacentElement" "', argument " "3"" of type '" "int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementAdjacentElement" "', argument " "3"" of type '" "int &""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetBdrElementAdjacentElement" "', argument " "4"" of type '" "int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementAdjacentElement" "', argument " "4"" of type '" "int &""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrElementAdjacentElement(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementAdjacentElement2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"bdr_el",  (char *)"el",  (char *)"info",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetBdrElementAdjacentElement2", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementAdjacentElement2" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementAdjacentElement2" "', argument " "3"" of type '" "int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementAdjacentElement2" "', argument " "3"" of type '" "int &""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetBdrElementAdjacentElement2" "', argument " "4"" of type '" "int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrElementAdjacentElement2" "', argument " "4"" of type '" "int &""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrElementAdjacentElement2(arg2,*arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Element::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetElementType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementType" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Element::Type)((mfem::Mesh const *)arg1)->GetElementType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  mfem::Element::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrElementType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementType" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Element::Type)((mfem::Mesh const *)arg1)->GetBdrElementType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPointMatrix(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"pointmat",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetPointMatrix", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetPointMatrix" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetPointMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetPointMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetPointMatrix(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrPointMatrix(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::DenseMatrix *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"pointmat",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetBdrPointMatrix", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrPointMatrix" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrPointMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBdrPointMatrix" "', argument " "3"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg3 = reinterpret_cast< mfem::DenseMatrix * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetBdrPointMatrix(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetTransformationFEforElementType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Element::Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"arg1",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:Mesh_GetTransformationFEforElementType", kwnames, &obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Mesh_GetTransformationFEforElementType" "', argument " "1"" of type '" "mfem::Element::Type""'");
  } 
  arg1 = static_cast< mfem::Element::Type >(val1);
  {
    try {
      result = (mfem::FiniteElement *)mfem::Mesh::GetTransformationFEforElementType(arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementTransformation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::IsoparametricTransformation *arg3 = (mfem::IsoparametricTransformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__IsoparametricTransformation, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementTransformation" "', argument " "3"" of type '" "mfem::IsoparametricTransformation *""'"); 
  }
  arg3 = reinterpret_cast< mfem::IsoparametricTransformation * >(argp3);
  {
    try {
      (arg1)->GetElementTransformation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementTransformation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::ElementTransformation *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::ElementTransformation *)(arg1)->GetElementTransformation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ElementTransformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementTransformation__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  mfem::IsoparametricTransformation *arg4 = (mfem::IsoparametricTransformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementTransformation" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementTransformation" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_mfem__IsoparametricTransformation, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetElementTransformation" "', argument " "4"" of type '" "mfem::IsoparametricTransformation *""'"); 
  }
  arg4 = reinterpret_cast< mfem::IsoparametricTransformation * >(argp4);
  {
    try {
      (arg1)->GetElementTransformation(arg2,(mfem::Vector const &)*arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementTransformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetElementTransformation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetElementTransformation__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__IsoparametricTransformation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Mesh_GetElementTransformation__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_mfem__IsoparametricTransformation, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Mesh_GetElementTransformation__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetElementTransformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetElementTransformation(int,mfem::IsoparametricTransformation *)\n"
    "    mfem::Mesh::GetElementTransformation(int)\n"
    "    mfem::Mesh::GetElementTransformation(int,mfem::Vector const &,mfem::IsoparametricTransformation *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementTransformation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::ElementTransformation *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::ElementTransformation *)(arg1)->GetBdrElementTransformation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ElementTransformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementTransformation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::IsoparametricTransformation *arg3 = (mfem::IsoparametricTransformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__IsoparametricTransformation, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBdrElementTransformation" "', argument " "3"" of type '" "mfem::IsoparametricTransformation *""'"); 
  }
  arg3 = reinterpret_cast< mfem::IsoparametricTransformation * >(argp3);
  {
    try {
      (arg1)->GetBdrElementTransformation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementTransformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetBdrElementTransformation", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetBdrElementTransformation__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__IsoparametricTransformation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Mesh_GetBdrElementTransformation__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetBdrElementTransformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetBdrElementTransformation(int)\n"
    "    mfem::Mesh::GetBdrElementTransformation(int,mfem::IsoparametricTransformation *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceTransformation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::IsoparametricTransformation *arg3 = (mfem::IsoparametricTransformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__IsoparametricTransformation, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetFaceTransformation" "', argument " "3"" of type '" "mfem::IsoparametricTransformation *""'"); 
  }
  arg3 = reinterpret_cast< mfem::IsoparametricTransformation * >(argp3);
  {
    try {
      (arg1)->GetFaceTransformation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetLocalFaceTransformation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  mfem::IsoparametricTransformation *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"face_type",  (char *)"elem_type",  (char *)"Transf",  (char *)"info",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:Mesh_GetLocalFaceTransformation", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetLocalFaceTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__IsoparametricTransformation,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetLocalFaceTransformation" "', argument " "4"" of type '" "mfem::IsoparametricTransformation &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetLocalFaceTransformation" "', argument " "4"" of type '" "mfem::IsoparametricTransformation &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IsoparametricTransformation * >(argp4);
  {
    if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg5 = PyArray_PyIntAsInt(obj4);
  }
  {
    try {
      (arg1)->GetLocalFaceTransformation(arg2,arg3,*arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceTransformation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::ElementTransformation *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::ElementTransformation *)(arg1)->GetFaceTransformation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ElementTransformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceTransformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetFaceTransformation", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetFaceTransformation__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__IsoparametricTransformation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Mesh_GetFaceTransformation__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetFaceTransformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetFaceTransformation(int,mfem::IsoparametricTransformation *)\n"
    "    mfem::Mesh::GetFaceTransformation(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetEdgeTransformation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::IsoparametricTransformation *arg3 = (mfem::IsoparametricTransformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetEdgeTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_mfem__IsoparametricTransformation, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetEdgeTransformation" "', argument " "3"" of type '" "mfem::IsoparametricTransformation *""'"); 
  }
  arg3 = reinterpret_cast< mfem::IsoparametricTransformation * >(argp3);
  {
    try {
      (arg1)->GetEdgeTransformation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetEdgeTransformation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::ElementTransformation *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetEdgeTransformation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (mfem::ElementTransformation *)(arg1)->GetEdgeTransformation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ElementTransformation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetEdgeTransformation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetEdgeTransformation", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetEdgeTransformation__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__IsoparametricTransformation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Mesh_GetEdgeTransformation__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetEdgeTransformation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetEdgeTransformation(int,mfem::IsoparametricTransformation *)\n"
    "    mfem::Mesh::GetEdgeTransformation(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceElementTransformations(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 = (int) 31 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"FaceNo",  (char *)"mask",  NULL 
  };
  mfem::FaceElementTransformations *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_GetFaceElementTransformations", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceElementTransformations" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (mfem::FaceElementTransformations *)(arg1)->GetFaceElementTransformations(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FaceElementTransformations, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetInteriorFaceTransformations(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"FaceNo",  NULL 
  };
  mfem::FaceElementTransformations *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetInteriorFaceTransformations", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetInteriorFaceTransformations" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FaceElementTransformations *)(arg1)->GetInteriorFaceTransformations(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FaceElementTransformations, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrFaceTransformations(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"BdrElemNo",  NULL 
  };
  mfem::FaceElementTransformations *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrFaceTransformations", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrFaceTransformations" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FaceElementTransformations *)(arg1)->GetBdrFaceTransformations(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FaceElementTransformations, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrFace(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"BdrElemNo",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrFace", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrFace" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetBdrFace(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FaceIsInterior(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"FaceNo",  NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_FaceIsInterior", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FaceIsInterior" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (bool)((mfem::Mesh const *)arg1)->FaceIsInterior(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceInformation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"f",  NULL 
  };
  mfem::Mesh::FaceInformation result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetFaceInformation", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceInformation" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = ((mfem::Mesh const *)arg1)->GetFaceInformation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Mesh::FaceInformation(result)), SWIGTYPE_p_mfem__Mesh__FaceInformation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceElements(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Face",  (char *)"Elem1",  (char *)"Elem2",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:Mesh_GetFaceElements", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceElements" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetFaceElements" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetFaceElements" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetFaceElements(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceInfos__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceInfos" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetFaceInfos" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetFaceInfos" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetFaceInfos(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceInfos__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceInfos" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetFaceInfos" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetFaceInfos" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Mesh_GetFaceInfos" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetFaceInfos(arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceInfos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetFaceInfos", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Mesh_GetFaceInfos__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Mesh_GetFaceInfos__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetFaceInfos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetFaceInfos(int,int *,int *) const\n"
    "    mfem::Mesh::GetFaceInfos(int,int *,int *,int *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceGeometryType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Face",  NULL 
  };
  mfem::Geometry::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetFaceGeometryType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceGeometryType" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Geometry::Type)((mfem::Mesh const *)arg1)->GetFaceGeometryType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceElementType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Face",  NULL 
  };
  mfem::Element::Type result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetFaceElementType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceElementType" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::Element::Type)((mfem::Mesh const *)arg1)->GetFaceElementType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceToBdrElMap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Array< int > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceToBdrElMap" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = ((mfem::Mesh const *)arg1)->GetFaceToBdrElMap();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj((new mfem::Array< int >(result)), SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_CheckElementOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"fix_it",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:Mesh_CheckElementOrientation", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_CheckElementOrientation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_CheckElementOrientation" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (int)(arg1)->CheckElementOrientation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_CheckBdrElementOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  bool arg2 = (bool) true ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"fix_it",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:Mesh_CheckBdrElementOrientation", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_CheckBdrElementOrientation" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_CheckBdrElementOrientation" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      result = (int)(arg1)->CheckBdrElementOrientation(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetAttribute", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetAttribute" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetAttribute(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_SetAttribute", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetAttribute" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      (arg1)->SetAttribute(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrAttribute", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrAttribute" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetBdrAttribute(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetBdrAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_SetBdrAttribute", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetBdrAttribute" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      (arg1)->SetBdrAttribute(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPatchAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetPatchAttribute", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetPatchAttribute" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetPatchAttribute(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetPatchAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_SetPatchAttribute", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetPatchAttribute" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      (arg1)->SetPatchAttribute(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetPatchBdrAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetPatchBdrAttribute", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetPatchBdrAttribute" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::Mesh const *)arg1)->GetPatchBdrAttribute(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetPatchBdrAttribute(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_SetPatchBdrAttribute", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetPatchBdrAttribute" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      (arg1)->SetPatchBdrAttribute(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ElementToElementTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ElementToElementTable" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *) &(arg1)->ElementToElementTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ElementToFaceTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ElementToFaceTable" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *) &((mfem::Mesh const *)arg1)->ElementToFaceTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ElementToEdgeTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ElementToEdgeTable" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *) &((mfem::Mesh const *)arg1)->ElementToEdgeTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertexToElementTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertexToElementTable" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *)(arg1)->GetVertexToElementTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetFaceToElementTable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Table *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetFaceToElementTable" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Table *)((mfem::Mesh const *)arg1)->GetFaceToElementTable();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Table, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ReorientTetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ReorientTetMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->ReorientTetMesh();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_CartesianPartitioning(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nxyz",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_CartesianPartitioning", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_CartesianPartitioning" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_CartesianPartitioning" "', argument " "2"" of type '" "int []""'"); 
  } 
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (int *)(arg1)->CartesianPartitioning(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GeneratePartitioning(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nparts",  (char *)"part_method",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_GeneratePartitioning", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GeneratePartitioning" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (int *)(arg1)->GeneratePartitioning(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_CheckPartitioning(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"partitioning_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_CheckPartitioning", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_CheckPartitioning" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_CheckPartitioning" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      (arg1)->CheckPartitioning(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_CheckDisplacements(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"displacements",  (char *)"tmax",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_CheckDisplacements", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_CheckDisplacements" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_CheckDisplacements" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_CheckDisplacements" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_CheckDisplacements" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_CheckDisplacements" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->CheckDisplacements((mfem::Vector const &)*arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MoveVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"displacements",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_MoveVertices", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MoveVertices" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_MoveVertices" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MoveVertices" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->MoveVertices((mfem::Vector const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vert_coord",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetVertices", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertices" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetVertices" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetVertices" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetVertices(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetVertices(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vert_coord",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_SetVertices", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetVertices" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_SetVertices" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_SetVertices" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetVertices((mfem::Vector const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNode(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"coord",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetNode", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNode" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetNode" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetNode(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetNode(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::Vector *temp_vec3 ;
  double *temp_ptr3 ;
  bool is_allocated3 = false ;
  bool is_tuple3 = false ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"coord",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_SetNode", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetNode" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    int i;
    if (!PyList_Check(obj2) && !PyTuple_Check(obj2)) {
      if (SWIG_ConvertPtr(obj2, (void **) &temp_ptr3, SWIGTYPE_p_double, 0 |0) == -1) {
        if (SWIG_ConvertPtr(obj2, (void **) &temp_vec3, SWIGTYPE_p_mfem__Vector, 0 |0) == -1) {
          if (!PyArray_Check(obj2) || !PyArray_ISFLOAT(reinterpret_cast<PyArrayObject *>(obj2))){
            PyErr_SetString(PyExc_ValueError, "Expecting a list/tuple/const *double/Vector/numpy float array");
            return NULL;
          } else {
            //std::cout << "Calling numpy data(float)\n";	     
            arg3 = (double *) PyArray_DATA((PyArrayObject *)obj2);	     
          }
        } else {
          //std::cout << "Calling Vector::GetData\n";
          arg3 = temp_vec3 -> GetData();
        }
      } else {
        // const (
        //std::cout << "Using const double\n";      
        arg3 = temp_ptr3;
      }
    } else {
      int l = 0;
      if (PyTuple_Check(obj2)) {
        is_tuple3 = true;
        l = PyTuple_Size(obj2);      
      } else {
        l = PyList_Size(obj2);
      }      
      //std::cout << "Using List\n";    
      arg3 = new double [l];
      is_allocated3 = true;
      for (i = 0; i < l; i++) {
        PyObject *s = (is_tuple3) ? PyTuple_GetItem(obj2, i) : PyList_GetItem(obj2,i);      
        if (PyInt_Check(s)) {
          arg3[i] = (double)PyFloat_AsDouble(s);
        } else if (PyFloat_Check(s)) {
          arg3[i] = (double)PyFloat_AsDouble(s);
        } else {
          delete[] arg3;      
          PyErr_SetString(PyExc_ValueError, "List/Tuple items must be integer/float");
          return NULL;
        }
      }
    }
  }
  {
    try {
      (arg1)->SetNode(arg2,(double const *)arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_allocated3)
    {
      delete[] arg3;
    }
  }
  return resultobj;
fail:
  {
    if (is_allocated3)
    {
      delete[] arg3;
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_MoveNodes(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"displacements",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_MoveNodes", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_MoveNodes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_MoveNodes" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_MoveNodes" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->MoveNodes((mfem::Vector const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodes__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodes" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetNodes" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetNodes" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetNodes(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetNodes(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"node_coord",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_SetNodes", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetNodes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_SetNodes" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_SetNodes" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  {
    try {
      (arg1)->SetNodes((mfem::Vector const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodes__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::GridFunction *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)(arg1)->GetNodes();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodes__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::GridFunction *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodes" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::GridFunction *)((mfem::Mesh const *)arg1)->GetNodes();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_OwnsNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_OwnsNodes" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (bool)((mfem::Mesh const *)arg1)->OwnsNodes();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetNodesOwner(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nodes_owner",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_SetNodesOwner", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetNodesOwner" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_SetNodesOwner" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->SetNodesOwner(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_NewNodes(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::GridFunction *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nodes",  (char *)"make_owner",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_NewNodes", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_NewNodes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__GridFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_NewNodes" "', argument " "2"" of type '" "mfem::GridFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_NewNodes" "', argument " "2"" of type '" "mfem::GridFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_NewNodes" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->NewNodes(*arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SwapNodes(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::GridFunction **arg2 = 0 ;
  int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mfem::GridFunction *Pnodes2 ;
  int own_nodes3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nodes",  (char *)"own_nodes_",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_SwapNodes", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SwapNodes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int res2 = 0;
    res2 = SWIG_ConvertPtr(obj1, (void **) &Pnodes2, SWIGTYPE_p_mfem__GridFunction, 0);
    if (!SWIG_IsOK(res2)){
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_SwapNodes" "', argument " "2"" of type '" "*mfem::GridFunction""'");
    }
    arg2 = &Pnodes2;
  }
  {
    own_nodes3 = (int)PyInt_AsLong(obj2);
    arg3 = &own_nodes3;
  }
  {
    try {
      (arg1)->SwapNodes(*arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    Py_XDECREF(resultobj);
    resultobj = PyList_New(0);
    if (*arg2){
      // return None if Nodes is NULL
      resultobj = SWIG_Python_AppendOutput(resultobj, Py_None);
    } else {
      resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj(SWIG_as_voidptr(*arg2), SWIGTYPE_p_mfem__GridFunction, 0 |  0 ));
    }
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, PyLong_FromLong((long)*arg3));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodes__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::GridFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodes" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__GridFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetNodes" "', argument " "2"" of type '" "mfem::GridFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetNodes" "', argument " "2"" of type '" "mfem::GridFunction &""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  {
    try {
      ((mfem::Mesh const *)arg1)->GetNodes(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodes(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetNodes", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh_GetNodes__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh_GetNodes__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__GridFunction, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_GetNodes__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_GetNodes__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetNodes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetNodes(mfem::Vector &) const\n"
    "    mfem::Mesh::GetNodes()\n"
    "    mfem::Mesh::GetNodes() const\n"
    "    mfem::Mesh::GetNodes(mfem::GridFunction &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_SetNodalFESpace(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::FiniteElementSpace *arg2 = (mfem::FiniteElementSpace *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nfes",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_SetNodalFESpace", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetNodalFESpace" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__FiniteElementSpace, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_SetNodalFESpace" "', argument " "2"" of type '" "mfem::FiniteElementSpace *""'"); 
  }
  arg2 = reinterpret_cast< mfem::FiniteElementSpace * >(argp2);
  {
    try {
      (arg1)->SetNodalFESpace(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetNodalGridFunction(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::GridFunction *arg2 = (mfem::GridFunction *) 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"nodes",  (char *)"make_owner",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_SetNodalGridFunction", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetNodalGridFunction" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__GridFunction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_SetNodalGridFunction" "', argument " "2"" of type '" "mfem::GridFunction *""'"); 
  }
  arg2 = reinterpret_cast< mfem::GridFunction * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_SetNodalGridFunction" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      (arg1)->SetNodalGridFunction(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetNodalFESpace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementSpace *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetNodalFESpace" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::FiniteElementSpace *)((mfem::Mesh const *)arg1)->GetNodalFESpace();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementSpace, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_EnsureNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_EnsureNodes" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->EnsureNodes();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_SetCurvature(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  bool arg3 = (bool) false ;
  int arg4 = (int) -1 ;
  int arg5 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"order",  (char *)"discont",  (char *)"space_dim",  (char *)"ordering",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OOO:Mesh_SetCurvature", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_SetCurvature" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_SetCurvature" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  if (obj4) {
    {
      if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(obj4);
    }
  }
  {
    try {
      (arg1)->SetCurvature(arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_UniformRefinement(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"ref_algo",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:Mesh_UniformRefinement", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_UniformRefinement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  {
    try {
      (arg1)->UniformRefinement(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GeneralRefinement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< mfem::Refinement > *arg2 = 0 ;
  int arg3 = (int) -1 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GeneralRefinement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_mfem__Refinement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GeneralRefinement" "', argument " "2"" of type '" "mfem::Array< mfem::Refinement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GeneralRefinement" "', argument " "2"" of type '" "mfem::Array< mfem::Refinement > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< mfem::Refinement > * >(argp2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      (arg1)->GeneralRefinement((mfem::Array< mfem::Refinement > const &)*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GeneralRefinement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  int arg3 = (int) -1 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GeneralRefinement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GeneralRefinement" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GeneralRefinement" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      (arg1)->GeneralRefinement((mfem::Array< int > const &)*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GeneralRefinement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GeneralRefinement", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_mfem__Refinement_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_GeneralRefinement__SWIG_0(self, argc, argv);
        }
        {
          _v = PyInt_Check(argv[2]) ? 1 : 0;
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_GeneralRefinement__SWIG_0(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_Mesh_GeneralRefinement__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_int_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_GeneralRefinement__SWIG_1(self, argc, argv);
        }
        {
          _v = PyInt_Check(argv[2]) ? 1 : 0;
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_GeneralRefinement__SWIG_1(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_Mesh_GeneralRefinement__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GeneralRefinement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GeneralRefinement(mfem::Array< mfem::Refinement > const &,int,int)\n"
    "    mfem::Mesh::GeneralRefinement(mfem::Array< int > const &,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_RandomRefinement(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double arg2 ;
  bool arg3 = (bool) false ;
  int arg4 = (int) -1 ;
  int arg5 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"prob",  (char *)"aniso",  (char *)"nonconforming",  (char *)"nc_limit",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OOO:Mesh_RandomRefinement", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RandomRefinement" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_RandomRefinement" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_RandomRefinement" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  if (obj4) {
    {
      if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(obj4);
    }
  }
  {
    try {
      (arg1)->RandomRefinement(arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RefineAtVertex(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vertex *arg2 = 0 ;
  double arg3 = (double) 0.0 ;
  int arg4 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"vert",  (char *)"eps",  (char *)"nonconforming",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:Mesh_RefineAtVertex", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RefineAtVertex" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_RefineAtVertex" "', argument " "2"" of type '" "mfem::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_RefineAtVertex" "', argument " "2"" of type '" "mfem::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vertex * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_RefineAtVertex" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      (arg1)->RefineAtVertex((mfem::Vertex const &)*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RefineByError__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< double > *arg2 = 0 ;
  double arg3 ;
  int arg4 = (int) -1 ;
  int arg5 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RefineByError" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_RefineByError" "', argument " "2"" of type '" "mfem::Array< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_RefineByError" "', argument " "2"" of type '" "mfem::Array< double > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< double > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_RefineByError" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (bool)(arg1)->RefineByError((mfem::Array< double > const &)*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RefineByError__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  int arg4 = (int) -1 ;
  int arg5 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RefineByError" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_RefineByError" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_RefineByError" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_RefineByError" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (bool)(arg1)->RefineByError((mfem::Vector const &)*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RefineByError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_RefineByError", 0, 5, argv))) SWIG_fail;
  --argc;
  if ((argc >= 3) && (argc <= 5)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__ArrayT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if (PyFloat_Check(argv[2])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_RefineByError__SWIG_0(self, argc, argv);
          }
          {
            _v = PyInt_Check(argv[3]) ? 1 : 0;
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_RefineByError__SWIG_0(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_Mesh_RefineByError__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if (PyFloat_Check(argv[2])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_RefineByError__SWIG_1(self, argc, argv);
          }
          {
            _v = PyInt_Check(argv[3]) ? 1 : 0;
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_RefineByError__SWIG_1(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_Mesh_RefineByError__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_RefineByError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::RefineByError(mfem::Array< double > const &,double,int,int)\n"
    "    mfem::Mesh::RefineByError(mfem::Vector const &,double,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_DerefineByError__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< double > *arg2 = 0 ;
  double arg3 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_DerefineByError" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_DerefineByError" "', argument " "2"" of type '" "mfem::Array< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_DerefineByError" "', argument " "2"" of type '" "mfem::Array< double > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< double > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_DerefineByError" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (bool)(arg1)->DerefineByError(*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_DerefineByError__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  double arg3 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_DerefineByError" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_DerefineByError" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_DerefineByError" "', argument " "2"" of type '" "mfem::Vector const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_DerefineByError" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  {
    try {
      result = (bool)(arg1)->DerefineByError((mfem::Vector const &)*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_DerefineByError(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_DerefineByError", 0, 5, argv))) SWIG_fail;
  --argc;
  if ((argc >= 3) && (argc <= 5)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__ArrayT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if (PyFloat_Check(argv[2])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_DerefineByError__SWIG_0(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_DerefineByError__SWIG_0(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_Mesh_DerefineByError__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if (PyFloat_Check(argv[2])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_DerefineByError__SWIG_1(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_DerefineByError__SWIG_1(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_Mesh_DerefineByError__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_DerefineByError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::DerefineByError(mfem::Array< double > &,double,int,int)\n"
    "    mfem::Mesh::DerefineByError(mfem::Vector const &,double,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_KnotInsert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< mfem::KnotVector * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_KnotInsert" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_mfem__KnotVector_p_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_KnotInsert" "', argument " "2"" of type '" "mfem::Array< mfem::KnotVector * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_KnotInsert" "', argument " "2"" of type '" "mfem::Array< mfem::KnotVector * > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< mfem::KnotVector * > * >(argp2);
  {
    try {
      (arg1)->KnotInsert(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_KnotInsert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< mfem::Vector * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_KnotInsert" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__ArrayT_mfem__Vector_p_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_KnotInsert" "', argument " "2"" of type '" "mfem::Array< mfem::Vector * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_KnotInsert" "', argument " "2"" of type '" "mfem::Array< mfem::Vector * > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< mfem::Vector * > * >(argp2);
  {
    try {
      (arg1)->KnotInsert(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_KnotInsert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_KnotInsert", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__ArrayT_mfem__KnotVector_p_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_KnotInsert__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__ArrayT_mfem__Vector_p_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_KnotInsert__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_KnotInsert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::KnotInsert(mfem::Array< mfem::KnotVector * > &)\n"
    "    mfem::Mesh::KnotInsert(mfem::Array< mfem::Vector * > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_DegreeElevate(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"rel_degree",  (char *)"degree",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_DegreeElevate", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_DegreeElevate" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      (arg1)->DegreeElevate(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_EnsureNCMesh(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  bool arg2 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"simplices_nonconforming",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:Mesh_EnsureNCMesh", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_EnsureNCMesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_EnsureNCMesh" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      (arg1)->EnsureNCMesh(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Conforming(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Conforming" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (bool)((mfem::Mesh const *)arg1)->Conforming();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Nonconforming(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Nonconforming" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (bool)((mfem::Mesh const *)arg1)->Nonconforming();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetRefinementTransforms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::CoarseFineTransformations *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetRefinementTransforms" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::CoarseFineTransformations *) &(arg1)->GetRefinementTransforms();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CoarseFineTransformations, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetLastOperation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Mesh::Operation result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetLastOperation" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (mfem::Mesh::Operation)((mfem::Mesh const *)arg1)->GetLastOperation();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetSequence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetSequence" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (long)((mfem::Mesh const *)arg1)->GetSequence();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintXG__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::ostream &arg2_defvalue = mfem::out ;
  std::ostream *arg2 = (std::ostream *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintXG" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (swig_obj[1]) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(swig_obj[1], cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io2=swig_obj[1];
          stream2 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(swig_obj[1], "precision")){
            PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream2->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp2 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream2 == 0){
        if (temp2->isSTDOUT() == 1) {
          arg2 = &std::cout;
        } else if (temp2->isGZ()){
          out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
          arg2 = out_gz2;	     
        } else {
          out_txt2.open(temp2->getFilename());
          out_txt2.precision(temp2->getPrecision());
          arg2 = &out_txt2;
        }
      } else {
        arg2 = stream2;
      }
    }
  }
  {
    try {
      ((mfem::Mesh const *)arg1)->PrintXG(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Print__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::ostream &arg2_defvalue = mfem::out ;
  std::ostream *arg2 = (std::ostream *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Print" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (swig_obj[1]) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(swig_obj[1], cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io2=swig_obj[1];
          stream2 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(swig_obj[1], "precision")){
            PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream2->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp2 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream2 == 0){
        if (temp2->isSTDOUT() == 1) {
          arg2 = &std::cout;
        } else if (temp2->isGZ()){
          out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
          arg2 = out_gz2;	     
        } else {
          out_txt2.open(temp2->getFilename());
          out_txt2.precision(temp2->getPrecision());
          arg2 = &out_txt2;
        }
      } else {
        arg2 = stream2;
      }
    }
  }
  {
    try {
      ((mfem::Mesh const *)arg1)->Print(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Save(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"fname",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_Save", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Save" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_Save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      ((mfem::Mesh const *)arg1)->Save((char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTK__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintVTK" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(swig_obj[1], cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io2=swig_obj[1];
        stream2 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(swig_obj[1], "precision")){
          PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream2->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp2 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream2 == 0){
      if (temp2->isSTDOUT() == 1) {
        arg2 = &std::cout;
      } else if (temp2->isGZ()){
        out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
        arg2 = out_gz2;	     
      } else {
        out_txt2.open(temp2->getFilename());
        out_txt2.precision(temp2->getPrecision());
        arg2 = &out_txt2;
      }
    } else {
      arg2 = stream2;
    }
  }
  {
    try {
      (arg1)->PrintVTK(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTK__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintVTK" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(swig_obj[1], cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io2=swig_obj[1];
        stream2 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(swig_obj[1], "precision")){
          PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream2->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp2 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream2 == 0){
      if (temp2->isSTDOUT() == 1) {
        arg2 = &std::cout;
      } else if (temp2->isGZ()){
        out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
        arg2 = out_gz2;	     
      } else {
        out_txt2.open(temp2->getFilename());
        out_txt2.precision(temp2->getPrecision());
        arg2 = &out_txt2;
      }
    } else {
      arg2 = stream2;
    }
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      (arg1)->PrintVTK(*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTU__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 = (int) 1 ;
  mfem::VTKFormat arg4 = (mfem::VTKFormat) mfem::VTKFormat::ASCII ;
  bool arg5 = (bool) false ;
  int arg6 = (int) 0 ;
  bool arg7 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintVTU" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(swig_obj[1], cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io2=swig_obj[1];
        stream2 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(swig_obj[1], "precision")){
          PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream2->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp2 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream2 == 0){
      if (temp2->isSTDOUT() == 1) {
        arg2 = &std::cout;
      } else if (temp2->isGZ()){
        out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
        arg2 = out_gz2;	     
      } else {
        out_txt2.open(temp2->getFilename());
        out_txt2.precision(temp2->getPrecision());
        arg2 = &out_txt2;
      }
    } else {
      arg2 = stream2;
    }
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_PrintVTU" "', argument " "4"" of type '" "mfem::VTKFormat""'");
    } 
    arg4 = static_cast< mfem::VTKFormat >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_PrintVTU" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  if (swig_obj[5]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[5]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg6 = PyArray_PyIntAsInt(swig_obj[5]);
    }
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Mesh_PrintVTU" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  {
    try {
      (arg1)->PrintVTU(*arg2,arg3,arg4,arg5,arg6,arg7);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTU__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::string arg2 ;
  mfem::VTKFormat arg3 = (mfem::VTKFormat) mfem::VTKFormat::ASCII ;
  bool arg4 = (bool) false ;
  int arg5 = (int) 0 ;
  bool arg6 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintVTU" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Mesh_PrintVTU" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (swig_obj[2]) {
    ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_PrintVTU" "', argument " "3"" of type '" "mfem::VTKFormat""'");
    } 
    arg3 = static_cast< mfem::VTKFormat >(val3);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_PrintVTU" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (swig_obj[4]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[4]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(swig_obj[4]);
    }
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Mesh_PrintVTU" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
  }
  {
    try {
      (arg1)->PrintVTU(arg2,arg3,arg4,arg5,arg6);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTU(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_PrintVTU", 0, 7, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 6)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_PrintVTU__SWIG_1(self, argc, argv);
        }
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_PrintVTU__SWIG_1(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_PrintVTU__SWIG_1(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Mesh_PrintVTU__SWIG_1(self, argc, argv);
              }
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Mesh_PrintVTU__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if ((argc >= 2) && (argc <= 7)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_PrintVTU__SWIG_0(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_PrintVTU__SWIG_0(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_Mesh_PrintVTU__SWIG_0(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_Mesh_PrintVTU__SWIG_0(self, argc, argv);
              }
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                if (argc <= 6) {
                  return _wrap_Mesh_PrintVTU__SWIG_0(self, argc, argv);
                }
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Mesh_PrintVTU__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_PrintVTU'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::PrintVTU(std::ostream &,int,mfem::VTKFormat,bool,int,bool)\n"
    "    mfem::Mesh::PrintVTU(std::string,mfem::VTKFormat,bool,int,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintBdrVTU(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::string arg2 ;
  mfem::VTKFormat arg3 = (mfem::VTKFormat) mfem::VTKFormat::ASCII ;
  bool arg4 = (bool) false ;
  int arg5 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"fname",  (char *)"format",  (char *)"high_order_output",  (char *)"compression_level",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OOO:Mesh_PrintBdrVTU", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintBdrVTU" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Mesh_PrintBdrVTU" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_PrintBdrVTU" "', argument " "3"" of type '" "mfem::VTKFormat""'");
    } 
    arg3 = static_cast< mfem::VTKFormat >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_PrintBdrVTU" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      if ((PyArray_PyIntAsInt(obj4) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg5 = PyArray_PyIntAsInt(obj4);
    }
  }
  {
    try {
      (arg1)->PrintBdrVTU(arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementColoring(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Array< int > *arg2 = 0 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"colors",  (char *)"el0",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_GetElementColoring", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementColoring" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetElementColoring" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementColoring" "', argument " "2"" of type '" "mfem::Array< int > &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      (arg1)->GetElementColoring(*arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintWithPartitioning(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  std::ostream *arg3 = 0 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyMFEM::wFILE *temp3 = 0 ;
  std::ofstream out_txt3 ;
  mfem::ofgzstream *out_gz3 = 0 ;
  PyObject *string_io3 = 0 ;
  std::ostringstream *stream3 = 0 ;
  PyObject *ret3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"partitioning",  (char *)"os",  (char *)"elem_attr",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:Mesh_PrintWithPartitioning", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintWithPartitioning" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintWithPartitioning" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(obj2, (void **) &temp3, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(obj2) && !PyUnicode_Check(obj2)) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(obj2, cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io3=obj2;
        stream3 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(obj2, "precision")){
          PyObject *attr = PyObject_GetAttrString(obj2, "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream3->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(obj2, "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp3 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream3 == 0){
      if (temp3->isSTDOUT() == 1) {
        arg3 = &std::cout;
      } else if (temp3->isGZ()){
        out_gz3 = new mfem::ofgzstream(temp3->getFilename(), true);
        arg3 = out_gz3;	     
      } else {
        out_txt3.open(temp3->getFilename());
        out_txt3.precision(temp3->getPrecision());
        arg3 = &out_txt3;
      }
    } else {
      arg3 = stream3;
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      ((mfem::Mesh const *)arg1)->PrintWithPartitioning(arg2,*arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream3) {
      std::string str =  stream3->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret3 = PyObject_CallMethod(string_io3, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream3;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret3;    
    }
  }
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintElementsWithPartitioning(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int *arg2 = (int *) 0 ;
  std::ostream *arg3 = 0 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyMFEM::wFILE *temp3 = 0 ;
  std::ofstream out_txt3 ;
  mfem::ofgzstream *out_gz3 = 0 ;
  PyObject *string_io3 = 0 ;
  std::ostringstream *stream3 = 0 ;
  PyObject *ret3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"partitioning",  (char *)"out",  (char *)"interior_faces",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:Mesh_PrintElementsWithPartitioning", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintElementsWithPartitioning" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintElementsWithPartitioning" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(obj2, (void **) &temp3, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(obj2) && !PyUnicode_Check(obj2)) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(obj2, cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io3=obj2;
        stream3 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(obj2, "precision")){
          PyObject *attr = PyObject_GetAttrString(obj2, "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream3->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(obj2, "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp3 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream3 == 0){
      if (temp3->isSTDOUT() == 1) {
        arg3 = &std::cout;
      } else if (temp3->isGZ()){
        out_gz3 = new mfem::ofgzstream(temp3->getFilename(), true);
        arg3 = out_gz3;	     
      } else {
        out_txt3.open(temp3->getFilename());
        out_txt3.precision(temp3->getPrecision());
        arg3 = &out_txt3;
      }
    } else {
      arg3 = stream3;
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      (arg1)->PrintElementsWithPartitioning(arg2,*arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream3) {
      std::string str =  stream3->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret3 = PyObject_CallMethod(string_io3, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream3;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret3;    
    }
  }
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintSurfaces(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Table *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyMFEM::wFILE *temp3 = 0 ;
  std::ofstream out_txt3 ;
  mfem::ofgzstream *out_gz3 = 0 ;
  PyObject *string_io3 = 0 ;
  std::ostringstream *stream3 = 0 ;
  PyObject *ret3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Aface_face",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_PrintSurfaces", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintSurfaces" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Table,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintSurfaces" "', argument " "2"" of type '" "mfem::Table const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_PrintSurfaces" "', argument " "2"" of type '" "mfem::Table const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Table * >(argp2);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(obj2, (void **) &temp3, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(obj2) && !PyUnicode_Check(obj2)) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(obj2, cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io3=obj2;
        stream3 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(obj2, "precision")){
          PyObject *attr = PyObject_GetAttrString(obj2, "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream3->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(obj2, "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp3 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream3 == 0){
      if (temp3->isSTDOUT() == 1) {
        arg3 = &std::cout;
      } else if (temp3->isGZ()){
        out_gz3 = new mfem::ofgzstream(temp3->getFilename(), true);
        arg3 = out_gz3;	     
      } else {
        out_txt3.open(temp3->getFilename());
        out_txt3.precision(temp3->getPrecision());
        arg3 = &out_txt3;
      }
    } else {
      arg3 = stream3;
    }
  }
  {
    try {
      ((mfem::Mesh const *)arg1)->PrintSurfaces((mfem::Table const &)*arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream3) {
      std::string str =  stream3->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret3 = PyObject_CallMethod(string_io3, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream3;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret3;    
    }
  }
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ScaleSubdomains(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"sf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_ScaleSubdomains", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ScaleSubdomains" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_ScaleSubdomains" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->ScaleSubdomains(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_ScaleElements(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"sf",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_ScaleElements", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_ScaleElements" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_ScaleElements" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->ScaleElements(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Transform__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void (*arg2)(mfem::Vector const &,mfem::Vector &) = (void (*)(mfem::Vector const &,mfem::Vector &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Transform" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_q_const__mfem__Vector_r_mfem__Vector__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "Mesh_Transform" "', argument " "2"" of type '" "void (*)(mfem::Vector const &,mfem::Vector &)""'"); 
    }
  }
  {
    try {
      (arg1)->Transform(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Transform__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::VectorCoefficient *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Transform" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__VectorCoefficient,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_Transform" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_Transform" "', argument " "2"" of type '" "mfem::VectorCoefficient &""'"); 
  }
  arg2 = reinterpret_cast< mfem::VectorCoefficient * >(argp2);
  {
    try {
      (arg1)->Transform(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Transform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_Transform", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_q_const__mfem__Vector_r_mfem__Vector__void);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_Transform__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__VectorCoefficient, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_Transform__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_Transform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::Transform(void (*)(mfem::Vector const &,mfem::Vector &))\n"
    "    mfem::Mesh::Transform(mfem::VectorCoefficient &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveUnusedVertices(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RemoveUnusedVertices" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->RemoveUnusedVertices();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_RemoveInternalBoundaries(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_RemoveInternalBoundaries" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      (arg1)->RemoveInternalBoundaries();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementSize" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      result = (double)(arg1)->GetElementSize(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementSize__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementSize" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementSize" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementSize" "', argument " "3"" of type '" "mfem::Vector const &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      result = (double)(arg1)->GetElementSize(arg2,(mfem::Vector const &)*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetElementSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_GetElementSize__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_GetElementSize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Mesh_GetElementSize__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetElementSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetElementSize(int,int)\n"
    "    mfem::Mesh::GetElementSize(int,mfem::Vector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementVolume(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetElementVolume", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementVolume" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (double)(arg1)->GetElementVolume(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  mfem::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"center",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_GetElementCenter", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementCenter" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetElementCenter" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetElementCenter" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  {
    try {
      (arg1)->GetElementCenter(arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBoundingBox(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::Vector *arg3 = 0 ;
  int arg4 = (int) 2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"min",  (char *)"max",  (char *)"ref",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:Mesh_GetBoundingBox", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBoundingBox" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetBoundingBox" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBoundingBox" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetBoundingBox" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetBoundingBox" "', argument " "3"" of type '" "mfem::Vector &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      (arg1)->GetBoundingBox(*arg2,*arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetCharacteristics(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  mfem::Vector *arg6 = (mfem::Vector *) NULL ;
  mfem::Vector *arg7 = (mfem::Vector *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"h_min",  (char *)"h_max",  (char *)"kappa_min",  (char *)"kappa_max",  (char *)"Vh",  (char *)"Vk",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO|OO:Mesh_GetCharacteristics", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5, &obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetCharacteristics" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_GetCharacteristics" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetCharacteristics" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_GetCharacteristics" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetCharacteristics" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_GetCharacteristics" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetCharacteristics" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Mesh_GetCharacteristics" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_GetCharacteristics" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  if (obj5) {
    res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_mfem__Vector, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Mesh_GetCharacteristics" "', argument " "6"" of type '" "mfem::Vector *""'"); 
    }
    arg6 = reinterpret_cast< mfem::Vector * >(argp6);
  }
  if (obj6) {
    res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_mfem__Vector, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Mesh_GetCharacteristics" "', argument " "7"" of type '" "mfem::Vector *""'"); 
    }
    arg7 = reinterpret_cast< mfem::Vector * >(argp7);
  }
  {
    try {
      (arg1)->GetCharacteristics(*arg2,*arg3,*arg4,*arg5,arg6,arg7);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintElementsByGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  mfem::Array< int > *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyMFEM::wFILE *temp3 = 0 ;
  std::ofstream out_txt3 ;
  mfem::ofgzstream *out_gz3 = 0 ;
  PyObject *string_io3 = 0 ;
  std::ostringstream *stream3 = 0 ;
  PyObject *ret3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"dim",  (char *)"num_elems_by_geom",  (char *)"out",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_PrintElementsByGeometry", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__ArrayT_int_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintElementsByGeometry" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_PrintElementsByGeometry" "', argument " "2"" of type '" "mfem::Array< int > const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Array< int > * >(argp2);
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(obj2, (void **) &temp3, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(obj2) && !PyUnicode_Check(obj2)) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(obj2, cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io3=obj2;
        stream3 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(obj2, "precision")){
          PyObject *attr = PyObject_GetAttrString(obj2, "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream3->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(obj2, "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp3 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream3 == 0){
      if (temp3->isSTDOUT() == 1) {
        arg3 = &std::cout;
      } else if (temp3->isGZ()){
        out_gz3 = new mfem::ofgzstream(temp3->getFilename(), true);
        arg3 = out_gz3;	     
      } else {
        out_txt3.open(temp3->getFilename());
        out_txt3.precision(temp3->getPrecision());
        arg3 = &out_txt3;
      }
    } else {
      arg3 = stream3;
    }
  }
  {
    try {
      mfem::Mesh::PrintElementsByGeometry(arg1,(mfem::Array< int > const &)*arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream3) {
      std::string str =  stream3->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret3 = PyObject_CallMethod(string_io3, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream3;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret3;    
    }
  }
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream3) {
      if (temp3) {
        if (temp3->isSTDOUT() != 1) {
          if (out_txt3.is_open()){
            out_txt3.close();
          }
          if (out_gz3){
            delete out_gz3;
          }
        }
        if (temp3->isTemporary()){
          delete temp3;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintCharacteristics(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) NULL ;
  mfem::Vector *arg3 = (mfem::Vector *) NULL ;
  std::ostream &arg4_defvalue = mfem::out ;
  std::ostream *arg4 = (std::ostream *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyMFEM::wFILE *temp4 = 0 ;
  std::ofstream out_txt4 ;
  mfem::ofgzstream *out_gz4 = 0 ;
  PyObject *string_io4 = 0 ;
  std::ostringstream *stream4 = 0 ;
  PyObject *ret4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Vh",  (char *)"Vk",  (char *)"os",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OOO:Mesh_PrintCharacteristics", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintCharacteristics" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintCharacteristics" "', argument " "2"" of type '" "mfem::Vector *""'"); 
    }
    arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  }
  if (obj2) {
    res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_mfem__Vector, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_PrintCharacteristics" "', argument " "3"" of type '" "mfem::Vector *""'"); 
    }
    arg3 = reinterpret_cast< mfem::Vector * >(argp3);
  }
  if (obj3) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(obj3, (void **) &temp4, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(obj3) && !PyUnicode_Check(obj3)) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(obj3, cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io4=obj3;
          stream4 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(obj3, "precision")){
            PyObject *attr = PyObject_GetAttrString(obj3, "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream4->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(obj3, "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp4 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream4 == 0){
        if (temp4->isSTDOUT() == 1) {
          arg4 = &std::cout;
        } else if (temp4->isGZ()){
          out_gz4 = new mfem::ofgzstream(temp4->getFilename(), true);
          arg4 = out_gz4;	     
        } else {
          out_txt4.open(temp4->getFilename());
          out_txt4.precision(temp4->getPrecision());
          arg4 = &out_txt4;
        }
      } else {
        arg4 = stream4;
      }
    }
  }
  {
    try {
      (arg1)->PrintCharacteristics(arg2,arg3,*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream4) {
      std::string str =  stream4->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret4 = PyObject_CallMethod(string_io4, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream4;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret4;    
    }
  }
  {
    if (!stream4) {
      if (temp4) {
        if (temp4->isSTDOUT() != 1) {
          if (out_txt4.is_open()){
            out_txt4.close();
          }
          if (out_gz4){
            delete out_gz4;
          }
        }
        if (temp4->isTemporary()){
          delete temp4;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream4) {
      if (temp4) {
        if (temp4->isSTDOUT() != 1) {
          if (out_txt4.is_open()){
            out_txt4.close();
          }
          if (out_gz4){
            delete out_gz4;
          }
        }
        if (temp4->isTemporary()){
          delete temp4;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintInfo__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  std::ostream &arg2_defvalue = mfem::out ;
  std::ostream *arg2 = (std::ostream *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyMFEM::wFILE *temp2 = 0 ;
  std::ofstream out_txt2 ;
  mfem::ofgzstream *out_gz2 = 0 ;
  PyObject *string_io2 = 0 ;
  std::ostringstream *stream2 = 0 ;
  PyObject *ret2 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintInfo" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  if (swig_obj[1]) {
    {
      //  PyMFEM::wFILE or string argument or StringIO
      if (SWIG_ConvertPtr(swig_obj[1], (void **) &temp2, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
        if (!PyString_Check(swig_obj[1]) && !PyUnicode_Check(swig_obj[1])) {
          // not string, check if it is StringIO
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
            return NULL;
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
            return NULL;
          }      
          int check = PyObject_IsInstance(swig_obj[1], cls);
          Py_DECREF(module);
          if (! check){
            SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
            return NULL;
          }
          string_io2=swig_obj[1];
          stream2 = new std::ostringstream();
          int prec = 16;
          if (PyObject_HasAttrString(swig_obj[1], "precision")){
            PyObject *attr = PyObject_GetAttrString(swig_obj[1], "precision");
            prec = (int)PyLong_AsLong(attr);
            //std::cout << "setting prec" << prec << "\n";
          }
          stream2->precision(prec);
          
        } else {
          // if it is string, extract filename as char*
          PyObject* str = PyUnicode_AsEncodedString(swig_obj[1], "utf-8", "~E~");	
          const char* filename = PyBytes_AsString(str);
          temp2 = new PyMFEM::wFILE(filename, 16, true);
          Py_DECREF(str);	 
        }
      }
      
      if (stream2 == 0){
        if (temp2->isSTDOUT() == 1) {
          arg2 = &std::cout;
        } else if (temp2->isGZ()){
          out_gz2 = new mfem::ofgzstream(temp2->getFilename(), true);
          arg2 = out_gz2;	     
        } else {
          out_txt2.open(temp2->getFilename());
          out_txt2.precision(temp2->getPrecision());
          arg2 = &out_txt2;
        }
      } else {
        arg2 = stream2;
      }
    }
  }
  {
    try {
      (arg1)->PrintInfo(*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  {
    if (stream2) {
      std::string str =  stream2->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret2 = PyObject_CallMethod(string_io2, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream2;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret2;    
    }
  }
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream2) {
      if (temp2) {
        if (temp2->isSTDOUT() != 1) {
          if (out_txt2.is_open()){
            out_txt2.close();
          }
          if (out_gz2){
            delete out_gz2;
          }
        }
        if (temp2->isTemporary()){
          delete temp2;
        }
      }
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_FindPoints(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::Array< int > *arg3 = 0 ;
  mfem::Array< mfem::IntegrationPoint > *arg4 = 0 ;
  bool arg5 = (bool) true ;
  mfem::InverseElementTransformation *arg6 = (mfem::InverseElementTransformation *) NULL ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"point_mat",  (char *)"elem_ids",  (char *)"ips",  (char *)"warn",  (char *)"inv_trans",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|OO:Mesh_FindPoints", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4, &obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_FindPoints" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_FindPoints" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_FindPoints" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_FindPoints" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_FindPoints" "', argument " "3"" of type '" "mfem::Array< int > &""'"); 
  }
  arg3 = reinterpret_cast< mfem::Array< int > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_mfem__ArrayT_mfem__IntegrationPoint_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_FindPoints" "', argument " "4"" of type '" "mfem::Array< mfem::IntegrationPoint > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_FindPoints" "', argument " "4"" of type '" "mfem::Array< mfem::IntegrationPoint > &""'"); 
  }
  arg4 = reinterpret_cast< mfem::Array< mfem::IntegrationPoint > * >(argp4);
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_FindPoints" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  if (obj5) {
    res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_mfem__InverseElementTransformation, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Mesh_FindPoints" "', argument " "6"" of type '" "mfem::InverseElementTransformation *""'"); 
    }
    arg6 = reinterpret_cast< mfem::InverseElementTransformation * >(argp6);
  }
  {
    try {
      result = (int)(arg1)->FindPoints(*arg2,*arg3,*arg4,arg5,arg6);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Swap(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::Mesh *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"other",  (char *)"non_geometry",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_Swap", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Swap" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_Swap" "', argument " "2"" of type '" "mfem::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_Swap" "', argument " "2"" of type '" "mfem::Mesh &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Mesh * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_Swap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->Swap(*arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Mesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mesh" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_13(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 = (bool) 0 ;
  double arg6 = (double) 1.0 ;
  double arg7 = (double) 1.0 ;
  double arg8 = (double) 1.0 ;
  bool arg9 = (bool) true ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 9)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Mesh" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Mesh" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Mesh" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Mesh" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
  }
  if (swig_obj[7]) {
    ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Mesh" "', argument " "8"" of type '" "double""'");
    } 
    arg8 = static_cast< double >(val8);
  }
  if (swig_obj[8]) {
    ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Mesh" "', argument " "9"" of type '" "bool""'");
    } 
    arg9 = static_cast< bool >(val9);
  }
  {
    try {
      result = (mfem::Mesh *)new_mfem_Mesh__SWIG_13(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_14(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 = (bool) 0 ;
  double arg5 = (double) 1.0 ;
  double arg6 = (double) 1.0 ;
  bool arg7 = (bool) true ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  mfem::Mesh *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 7)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Mesh" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Mesh" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (swig_obj[4]) {
    ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Mesh" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  if (swig_obj[5]) {
    ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Mesh" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  if (swig_obj[6]) {
    ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Mesh" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  {
    try {
      result = (mfem::Mesh *)new_mfem_Mesh__SWIG_14(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[13] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Mesh", 0, 12, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Mesh__SWIG_1(self, argc, argv);
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Mesh__SWIG_2(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Mesh__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mesh__SWIG_3(self, argc, argv);
    }
  }
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Mesh__SWIG_8(self, argc, argv);
      }
      {
        if (PyFloat_Check(argv[1])){
          _v = 1;
        } else {
          _v = 0;
        }
      }
      if (_v) {
        return _wrap_new_Mesh__SWIG_8(self, argc, argv);
      }
    }
  }
  if ((argc >= 1) && (argc <= 4)) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Mesh__SWIG_9(self, argc, argv);
      }
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_Mesh__SWIG_9(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_Mesh__SWIG_9(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Mesh__SWIG_9(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 1) && (argc <= 4)) {
    int _v = 0;
    {
      void *ptr;
      //std::string *ptr2 = (std::string *)0;
      if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
        PyErr_Clear();
        if (!PyString_Check(argv[0]) && !PyUnicode_Check(argv[0])) {
          // not string
          _v = 1;	   	
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            _v = 0;	   
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            _v = 0;	   	   
          }      
          int check = PyObject_IsInstance(argv[0], cls);
          Py_DECREF(module);
          if (! check){
            _v = 0;	   	   	   
          }
        } else {
          _v = 1;
        }
      } else {
        _v = 1;
      }
    }
    if (_v) {
      if (argc <= 1) {
        return _wrap_new_Mesh__SWIG_10(self, argc, argv);
      }
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_Mesh__SWIG_10(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_Mesh__SWIG_10(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Mesh__SWIG_10(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_new_Mesh__SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_new_Mesh__SWIG_12(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 5)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_Mesh__SWIG_5(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_Mesh__SWIG_5(self, argc, argv);
            }
            {
              if ((PyArray_PyIntAsInt(argv[4]) == -1) && PyErr_Occurred()) {
                PyErr_Clear();
                _v = 0;
              } else {
                _v = 1;    
              }
            }
            if (_v) {
              return _wrap_new_Mesh__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 7)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_Mesh__SWIG_14(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_Mesh__SWIG_14(self, argc, argv);
            }
            {
              if (PyFloat_Check(argv[4])){
                _v = 1;
              } else {
                _v = 0;
              }
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_new_Mesh__SWIG_14(self, argc, argv);
              }
              {
                if (PyFloat_Check(argv[5])){
                  _v = 1;
                } else {
                  _v = 0;
                }
              }
              if (_v) {
                if (argc <= 6) {
                  return _wrap_new_Mesh__SWIG_14(self, argc, argv);
                }
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_Mesh__SWIG_14(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 7)) {
    int _v = 0;
    {
      _v = 0; // ignore this pattern
    }
    if (_v) {
      if (argc <= 3) {
        return _wrap_new_Mesh__SWIG_7(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[3], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 4) {
          return _wrap_new_Mesh__SWIG_7(self, argc, argv);
        }
        {
          if (PyFloat_Check(argv[4])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 5) {
            return _wrap_new_Mesh__SWIG_7(self, argc, argv);
          }
          {
            if (PyFloat_Check(argv[5])){
              _v = 1;
            } else {
              _v = 0;
            }
          }
          if (_v) {
            if (argc <= 6) {
              return _wrap_new_Mesh__SWIG_7(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_bool(argv[6], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Mesh__SWIG_7(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 9)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            if (argc <= 4) {
              return _wrap_new_Mesh__SWIG_13(self, argc, argv);
            }
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              if (argc <= 5) {
                return _wrap_new_Mesh__SWIG_13(self, argc, argv);
              }
              {
                if (PyFloat_Check(argv[5])){
                  _v = 1;
                } else {
                  _v = 0;
                }
              }
              if (_v) {
                if (argc <= 6) {
                  return _wrap_new_Mesh__SWIG_13(self, argc, argv);
                }
                {
                  if (PyFloat_Check(argv[6])){
                    _v = 1;
                  } else {
                    _v = 0;
                  }
                }
                if (_v) {
                  if (argc <= 7) {
                    return _wrap_new_Mesh__SWIG_13(self, argc, argv);
                  }
                  {
                    if (PyFloat_Check(argv[7])){
                      _v = 1;
                    } else {
                      _v = 0;
                    }
                  }
                  if (_v) {
                    if (argc <= 8) {
                      return _wrap_new_Mesh__SWIG_13(self, argc, argv);
                    }
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Mesh__SWIG_13(self, argc, argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((argc >= 4) && (argc <= 9)) {
    int _v = 0;
    {
      _v = 0; // ignore this pattern
    }
    if (_v) {
      if (argc <= 4) {
        return _wrap_new_Mesh__SWIG_6(self, argc, argv);
      }
      {
        int res = SWIG_AsVal_bool(argv[4], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 5) {
          return _wrap_new_Mesh__SWIG_6(self, argc, argv);
        }
        {
          if (PyFloat_Check(argv[5])){
            _v = 1;
          } else {
            _v = 0;
          }
        }
        if (_v) {
          if (argc <= 6) {
            return _wrap_new_Mesh__SWIG_6(self, argc, argv);
          }
          {
            if (PyFloat_Check(argv[6])){
              _v = 1;
            } else {
              _v = 0;
            }
          }
          if (_v) {
            if (argc <= 7) {
              return _wrap_new_Mesh__SWIG_6(self, argc, argv);
            }
            {
              if (PyFloat_Check(argv[7])){
                _v = 1;
              } else {
                _v = 0;
              }
            }
            if (_v) {
              if (argc <= 8) {
                return _wrap_new_Mesh__SWIG_6(self, argc, argv);
              }
              {
                int res = SWIG_AsVal_bool(argv[8], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_Mesh__SWIG_6(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if ((argc >= 11) && (argc <= 12)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                if ((PyArray_PyIntAsInt(argv[5]) == -1) && PyErr_Occurred()) {
                  PyErr_Clear();
                  _v = 0;
                } else {
                  _v = 1;    
                }
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_int, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_int, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        if ((PyArray_PyIntAsInt(argv[9]) == -1) && PyErr_Occurred()) {
                          PyErr_Clear();
                          _v = 0;
                        } else {
                          _v = 1;    
                        }
                      }
                      if (_v) {
                        {
                          if ((PyArray_PyIntAsInt(argv[10]) == -1) && PyErr_Occurred()) {
                            PyErr_Clear();
                            _v = 0;
                          } else {
                            _v = 1;    
                          }
                        }
                        if (_v) {
                          if (argc <= 11) {
                            return _wrap_new_Mesh__SWIG_4(self, argc, argv);
                          }
                          {
                            if ((PyArray_PyIntAsInt(argv[11]) == -1) && PyErr_Occurred()) {
                              PyErr_Clear();
                              _v = 0;
                            } else {
                              _v = 1;    
                            }
                          }
                          if (_v) {
                            return _wrap_new_Mesh__SWIG_4(self, argc, argv);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Mesh'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::Mesh()\n"
    "    mfem::Mesh::Mesh(mfem::Mesh const &,bool)\n"
    "    mfem::Mesh::Mesh(mfem::Mesh &&)\n"
    "    mfem::Mesh::Mesh(double *,int,int *,mfem::Geometry::Type,int *,int,int *,mfem::Geometry::Type,int *,int,int,int)\n"
    "    mfem::Mesh::Mesh(int,int,int,int,int)\n"
    "    mfem::Mesh::Mesh(int,int,int,mfem::Element::Type,bool,double,double,double,bool)\n"
    "    mfem::Mesh::Mesh(int,int,mfem::Element::Type,bool,double,double,bool)\n"
    "    mfem::Mesh::Mesh(int,double)\n"
    "    mfem::Mesh::Mesh(char const *,int,int,bool)\n"
    "    mfem::Mesh::Mesh(std::istream &,int,int,bool)\n"
    "    mfem::Mesh::Mesh(mfem::Mesh *[],int)\n"
    "    mfem::Mesh::Mesh(mfem::Mesh *,int,int)\n"
    "    mfem::Mesh::Mesh(int,int,int,char const *,bool,double,double,double,bool)\n"
    "    mfem::Mesh::Mesh(int,int,char const *,bool,double,double,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_MakeMerged(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"tuple_or_list",  NULL 
  };
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:Mesh_MakeMerged", kwnames, &obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (PyObject *)mfem_Mesh_MakeMerged(arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintToFile(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"mesh_file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Mesh_PrintToFile", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintToFile" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintToFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      mfem_Mesh_PrintToFile((mfem::Mesh const *)arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_WriteToStream(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"StringIO",  NULL 
  };
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_WriteToStream", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_WriteToStream" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)mfem_Mesh_WriteToStream((mfem::Mesh const *)arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetAttributeArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetAttributeArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (PyObject *)mfem_Mesh_GetAttributeArray((mfem::Mesh const *)arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertexArray__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertexArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (PyObject *)mfem_Mesh_GetVertexArray__SWIG_0((mfem::Mesh const *)arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertexArray__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetVertexArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (PyObject *)mfem_Mesh_GetVertexArray__SWIG_1((mfem::Mesh const *)arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetVertexArray(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetVertexArray", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh_GetVertexArray__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetVertexArray__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetVertexArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetVertexArray(int) const\n"
    "    mfem::Mesh::GetVertexArray() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementFace__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrElementFace" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  {
    try {
      result = (PyObject *)mfem_Mesh_GetBdrElementFace__SWIG_1((mfem::Mesh const *)arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrElementFace(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_GetBdrElementFace", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        return _wrap_Mesh_GetBdrElementFace__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Mesh_GetBdrElementFace__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_GetBdrElementFace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::GetBdrElementFace(int,int *,int *) const\n"
    "    mfem::Mesh::GetBdrElementFace(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrAttributeArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrAttributeArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    try {
      result = (PyObject *)mfem_Mesh_GetBdrAttributeArray((mfem::Mesh const *)arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetBdrArray(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"idx",  NULL 
  };
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetBdrArray", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetBdrArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (PyObject *)mfem_Mesh_GetBdrArray((mfem::Mesh const *)arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetDomainArray(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"idx",  NULL 
  };
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetDomainArray", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetDomainArray" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (PyObject *)mfem_Mesh_GetDomainArray((mfem::Mesh const *)arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetElementCenterArray(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"idx",  NULL 
  };
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Mesh_GetElementCenterArray", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetElementCenterArray" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (PyObject *)mfem_Mesh_GetElementCenterArray(arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_GetScaledJacobian(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  int arg3 = (int) 2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"i",  (char *)"sd",  NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_GetScaledJacobian", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_GetScaledJacobian" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (double)mfem_Mesh_GetScaledJacobian(arg1,arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_IsElementOnPlaneArray(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  PyObject *arg4 = (PyObject *) 0 ;
  PyObject *arg5 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"aa",  (char *)"bb",  (char *)"cc",  (char *)"dd",  NULL 
  };
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:Mesh_IsElementOnPlaneArray", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_IsElementOnPlaneArray" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  arg4 = obj3;
  arg5 = obj4;
  {
    try {
      result = (PyObject *)mfem_Mesh_IsElementOnPlaneArray(arg1,arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintInfo__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintInfo" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_Mesh_PrintInfo__SWIG_1(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_PrintInfo", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Mesh_PrintInfo__SWIG_0(self, argc, argv);
      }
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Mesh_PrintInfo__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_PrintInfo__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_PrintInfo__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_PrintInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::PrintInfo(std::ostream &)\n"
    "    mfem::Mesh::PrintInfo(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintInfoGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_PrintInfoGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintInfoGZ" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintInfoGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_Mesh_PrintInfoGZ(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Print__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_Print" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_Print" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_Mesh_Print__SWIG_1(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_Print(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_Print", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Mesh_Print__SWIG_0(self, argc, argv);
      }
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Mesh_Print__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_Print__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_Print__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_Print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::Print(std::ostream &) const\n"
    "    mfem::Mesh::Print(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_PrintGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintGZ" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_Mesh_PrintGZ(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintXG__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintXG" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintXG" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_Mesh_PrintXG__SWIG_1(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintXG(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_PrintXG", 0, 3, argv))) SWIG_fail;
  --argc;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_Mesh_PrintXG__SWIG_0(self, argc, argv);
      }
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Mesh_PrintXG__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_PrintXG__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_PrintXG__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_PrintXG'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::PrintXG(std::ostream &) const\n"
    "    mfem::Mesh::PrintXG(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintXGGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_PrintXGGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintXGGZ" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintXGGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_Mesh_PrintXGGZ(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTK__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintVTK" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintVTK" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  {
    try {
      mfem_Mesh_PrintVTK__SWIG_2(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTK(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Mesh_PrintVTK", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Mesh_PrintVTK__SWIG_0(self, argc, argv);
      }
    }
  }
  if ((argc >= 2) && (argc <= 3)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        if (argc <= 2) {
          return _wrap_Mesh_PrintVTK__SWIG_2(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_Mesh_PrintVTK__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void *ptr;
        //std::string *ptr2 = (std::string *)0;
        if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
          PyErr_Clear();
          if (!PyString_Check(argv[1]) && !PyUnicode_Check(argv[1])) {
            // not string
            _v = 1;	   	
            PyObject* module = PyImport_ImportModule("io");
            if (!module){
              _v = 0;	   
            }      
            PyObject* cls = PyObject_GetAttrString(module, "StringIO");
            if (!cls){
              _v = 0;	   	   
            }      
            int check = PyObject_IsInstance(argv[1], cls);
            Py_DECREF(module);
            if (! check){
              _v = 0;	   	   	   
            }
          } else {
            _v = 1;
          }
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_Mesh_PrintVTK__SWIG_1(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_Mesh_PrintVTK__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Mesh_PrintVTK'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::Mesh::PrintVTK(std::ostream &)\n"
    "    mfem::Mesh::PrintVTK(std::ostream &,int,int)\n"
    "    mfem::Mesh::PrintVTK(char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Mesh_PrintVTKGZ(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"file",  (char *)"precision",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:Mesh_PrintVTKGZ", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_PrintVTKGZ" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_PrintVTKGZ" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      mfem_Mesh_PrintVTKGZ(arg1,(char const *)arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *Mesh_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__Mesh, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Mesh_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  mfem::Mesh *arg2 = 0 ;
  PyMFEM::wFILE *temp1 = 0 ;
  std::ofstream out_txt1 ;
  mfem::ofgzstream *out_gz1 = 0 ;
  PyObject *string_io1 = 0 ;
  std::ostringstream *stream1 = 0 ;
  PyObject *ret1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(swig_obj[0], (void **) &temp1, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(swig_obj[0]) && !PyUnicode_Check(swig_obj[0])) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(swig_obj[0], cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io1=swig_obj[0];
        stream1 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(swig_obj[0], "precision")){
          PyObject *attr = PyObject_GetAttrString(swig_obj[0], "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream1->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(swig_obj[0], "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp1 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream1 == 0){
      if (temp1->isSTDOUT() == 1) {
        arg1 = &std::cout;
      } else if (temp1->isGZ()){
        out_gz1 = new mfem::ofgzstream(temp1->getFilename(), true);
        arg1 = out_gz1;	     
      } else {
        out_txt1.open(temp1->getFilename());
        out_txt1.precision(temp1->getPrecision());
        arg1 = &out_txt1;
      }
    } else {
      arg1 = stream1;
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Mesh,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "mfem::Mesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "mfem::Mesh const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Mesh * >(argp2);
  {
    try {
      result = (std::ostream *) &mfem::operator <<(*arg1,(mfem::Mesh const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  {
    if (stream1) {
      std::string str =  stream1->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret1 = PyObject_CallMethod(string_io1, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream1;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret1;    
    }
  }
  {
    if (!stream1) {
      if (temp1) {
        if (temp1->isSTDOUT() != 1) {
          if (out_txt1.is_open()){
            out_txt1.close();
          }
          if (out_gz1){
            delete out_gz1;
          }
        }
        if (temp1->isTemporary()){
          delete temp1;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream1) {
      if (temp1) {
        if (temp1->isSTDOUT() != 1) {
          if (out_txt1.is_open()){
            out_txt1.close();
          }
          if (out_gz1){
            delete out_gz1;
          }
        }
        if (temp1->isTemporary()){
          delete temp1;
        }
      }
    }
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_mesh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  mfem::Mesh *arg2 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GeometricFactors_mesh_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_mesh_set" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricFactors_mesh_set" "', argument " "2"" of type '" "mfem::Mesh const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Mesh * >(argp2);
  if (arg1) (arg1)->mesh = (mfem::Mesh const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_mesh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Mesh *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_mesh_get" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  result = (mfem::Mesh *) ((arg1)->mesh);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_IntRule_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  mfem::IntegrationRule *arg2 = (mfem::IntegrationRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GeometricFactors_IntRule_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_IntRule_set" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricFactors_IntRule_set" "', argument " "2"" of type '" "mfem::IntegrationRule const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  if (arg1) (arg1)->IntRule = (mfem::IntegrationRule const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_IntRule_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::IntegrationRule *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_IntRule_get" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  result = (mfem::IntegrationRule *) ((arg1)->IntRule);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__IntegrationRule, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_computed_factors_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GeometricFactors_computed_factors_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_computed_factors_set" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  if (arg1) (arg1)->computed_factors = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_computed_factors_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_computed_factors_get" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  result = (int) ((arg1)->computed_factors);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricFactors__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::IntegrationRule *arg2 = 0 ;
  int arg3 ;
  mfem::MemoryType arg4 = (mfem::MemoryType) mfem::MemoryType::DEFAULT ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mfem::GeometricFactors *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeometricFactors" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GeometricFactors" "', argument " "4"" of type '" "mfem::MemoryType""'");
    } 
    arg4 = static_cast< mfem::MemoryType >(val4);
  }
  {
    try {
      result = (mfem::GeometricFactors *)new mfem::GeometricFactors((mfem::Mesh const *)arg1,(mfem::IntegrationRule const &)*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GeometricFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricFactors__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::GridFunction *arg1 = 0 ;
  mfem::IntegrationRule *arg2 = 0 ;
  int arg3 ;
  mfem::MemoryType arg4 = (mfem::MemoryType) mfem::MemoryType::DEFAULT ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mfem::GeometricFactors *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_mfem__GridFunction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeometricFactors" "', argument " "1"" of type '" "mfem::GridFunction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeometricFactors" "', argument " "1"" of type '" "mfem::GridFunction const &""'"); 
  }
  arg1 = reinterpret_cast< mfem::GridFunction * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  if (swig_obj[3]) {
    ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GeometricFactors" "', argument " "4"" of type '" "mfem::MemoryType""'");
    } 
    arg4 = static_cast< mfem::MemoryType >(val4);
  }
  {
    try {
      result = (mfem::GeometricFactors *)new mfem::GeometricFactors((mfem::GridFunction const &)*arg1,(mfem::IntegrationRule const &)*arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GeometricFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GeometricFactors(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_GeometricFactors", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_GeometricFactors__SWIG_0(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GeometricFactors__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if ((argc >= 3) && (argc <= 4)) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_mfem__GridFunction, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_GeometricFactors__SWIG_1(self, argc, argv);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GeometricFactors__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_GeometricFactors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::GeometricFactors::GeometricFactors(mfem::Mesh const *,mfem::IntegrationRule const &,int,mfem::MemoryType)\n"
    "    mfem::GeometricFactors::GeometricFactors(mfem::GridFunction const &,mfem::IntegrationRule const &,int,mfem::MemoryType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_X_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GeometricFactors_X_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_X_set" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricFactors_X_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->X = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_X_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_X_get" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->X);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_J_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GeometricFactors_J_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_J_set" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricFactors_J_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->J = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_J_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_J_get" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->J);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_detJ_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GeometricFactors_detJ_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_detJ_set" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricFactors_detJ_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->detJ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricFactors_detJ_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricFactors_detJ_get" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->detJ);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeometricFactors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GeometricFactors *arg1 = (mfem::GeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GeometricFactors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeometricFactors" "', argument " "1"" of type '" "mfem::GeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GeometricFactors * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeometricFactors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__GeometricFactors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GeometricFactors_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FaceGeometricFactors_mesh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::Mesh *arg2 = (mfem::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_mesh_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_mesh_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceGeometricFactors_mesh_set" "', argument " "2"" of type '" "mfem::Mesh const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Mesh * >(argp2);
  if (arg1) (arg1)->mesh = (mfem::Mesh const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_mesh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Mesh *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_mesh_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::Mesh *) ((arg1)->mesh);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_IntRule_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::IntegrationRule *arg2 = (mfem::IntegrationRule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_IntRule_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_IntRule_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceGeometricFactors_IntRule_set" "', argument " "2"" of type '" "mfem::IntegrationRule const *""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  if (arg1) (arg1)->IntRule = (mfem::IntegrationRule const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_IntRule_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::IntegrationRule *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_IntRule_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::IntegrationRule *) ((arg1)->IntRule);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__IntegrationRule, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_computed_factors_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_computed_factors_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_computed_factors_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  if (arg1) (arg1)->computed_factors = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_computed_factors_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_computed_factors_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (int) ((arg1)->computed_factors);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_type_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::FaceType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_type_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_type_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FaceGeometricFactors_type_set" "', argument " "2"" of type '" "mfem::FaceType""'");
  } 
  arg2 = static_cast< mfem::FaceType >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_type_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FaceType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_type_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::FaceType) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceGeometricFactors(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  mfem::IntegrationRule *arg2 = 0 ;
  int arg3 ;
  mfem::FaceType arg4 ;
  mfem::MemoryType arg5 = (mfem::MemoryType) mfem::MemoryType::DEFAULT ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"mesh",  (char *)"ir",  (char *)"flags",  (char *)"type",  (char *)"d_mt",  NULL 
  };
  mfem::FaceGeometricFactors *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO|O:new_FaceGeometricFactors", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceGeometricFactors" "', argument " "1"" of type '" "mfem::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FaceGeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FaceGeometricFactors" "', argument " "2"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::IntegrationRule * >(argp2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FaceGeometricFactors" "', argument " "4"" of type '" "mfem::FaceType""'");
  } 
  arg4 = static_cast< mfem::FaceType >(val4);
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FaceGeometricFactors" "', argument " "5"" of type '" "mfem::MemoryType""'");
    } 
    arg5 = static_cast< mfem::MemoryType >(val5);
  }
  {
    try {
      result = (mfem::FaceGeometricFactors *)new mfem::FaceGeometricFactors((mfem::Mesh const *)arg1,(mfem::IntegrationRule const &)*arg2,arg3,arg4,arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FaceGeometricFactors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_X_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_X_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_X_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceGeometricFactors_X_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->X = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_X_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_X_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->X);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_J_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_J_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_J_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceGeometricFactors_J_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->J = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_J_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_J_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->J);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_detJ_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_detJ_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_detJ_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceGeometricFactors_detJ_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->detJ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_detJ_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_detJ_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->detJ);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_normal_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  mfem::Vector *arg2 = (mfem::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FaceGeometricFactors_normal_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_normal_set" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_mfem__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceGeometricFactors_normal_set" "', argument " "2"" of type '" "mfem::Vector *""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  if (arg1) (arg1)->normal = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceGeometricFactors_normal_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::Vector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceGeometricFactors_normal_get" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  result = (mfem::Vector *)& ((arg1)->normal);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FaceGeometricFactors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FaceGeometricFactors *arg1 = (mfem::FaceGeometricFactors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FaceGeometricFactors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FaceGeometricFactors" "', argument " "1"" of type '" "mfem::FaceGeometricFactors *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FaceGeometricFactors * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FaceGeometricFactors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__FaceGeometricFactors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FaceGeometricFactors_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_NodeExtrudeCoefficient_SetLayer(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NodeExtrudeCoefficient *arg1 = (mfem::NodeExtrudeCoefficient *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"l",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NodeExtrudeCoefficient_SetLayer", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NodeExtrudeCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeExtrudeCoefficient_SetLayer" "', argument " "1"" of type '" "mfem::NodeExtrudeCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NodeExtrudeCoefficient * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      (arg1)->SetLayer(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeExtrudeCoefficient_Eval__SWIG_0_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::NodeExtrudeCoefficient *arg1 = (mfem::NodeExtrudeCoefficient *) 0 ;
  mfem::DenseMatrix *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationRule *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NodeExtrudeCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "1"" of type '" "mfem::NodeExtrudeCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NodeExtrudeCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__DenseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "2"" of type '" "mfem::DenseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< mfem::DenseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationRule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationRule const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationRule * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationRule const &)*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeExtrudeCoefficient_Eval__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::NodeExtrudeCoefficient *arg1 = (mfem::NodeExtrudeCoefficient *) 0 ;
  mfem::Vector *arg2 = 0 ;
  mfem::ElementTransformation *arg3 = 0 ;
  mfem::IntegrationPoint *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NodeExtrudeCoefficient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "1"" of type '" "mfem::NodeExtrudeCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NodeExtrudeCoefficient * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "2"" of type '" "mfem::Vector &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_mfem__ElementTransformation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "3"" of type '" "mfem::ElementTransformation &""'"); 
  }
  arg3 = reinterpret_cast< mfem::ElementTransformation * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_mfem__IntegrationPoint,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeExtrudeCoefficient_Eval" "', argument " "4"" of type '" "mfem::IntegrationPoint const &""'"); 
  }
  arg4 = reinterpret_cast< mfem::IntegrationPoint * >(argp4);
  {
    try {
      (arg1)->Eval(*arg2,*arg3,(mfem::IntegrationPoint const &)*arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeExtrudeCoefficient_Eval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NodeExtrudeCoefficient_Eval", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__NodeExtrudeCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__DenseMatrix, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationRule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeExtrudeCoefficient_Eval__SWIG_0_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__NodeExtrudeCoefficient, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_mfem__Vector, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_mfem__ElementTransformation, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_mfem__IntegrationPoint, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeExtrudeCoefficient_Eval__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NodeExtrudeCoefficient_Eval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::NodeExtrudeCoefficient::Eval(mfem::DenseMatrix &,mfem::ElementTransformation &,mfem::IntegrationRule const &)\n"
    "    mfem::NodeExtrudeCoefficient::Eval(mfem::Vector &,mfem::ElementTransformation &,mfem::IntegrationPoint const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NodeExtrudeCoefficient(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NodeExtrudeCoefficient *arg1 = (mfem::NodeExtrudeCoefficient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NodeExtrudeCoefficient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeExtrudeCoefficient" "', argument " "1"" of type '" "mfem::NodeExtrudeCoefficient *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NodeExtrudeCoefficient * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeExtrudeCoefficient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__NodeExtrudeCoefficient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Extrude1D(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  double arg3 ;
  bool arg4 = (bool) (bool)false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"mesh",  (char *)"ny",  (char *)"sy",  (char *)"closed",  NULL 
  };
  mfem::Mesh *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO|O:Extrude1D", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Extrude1D" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Extrude1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Extrude1D" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    try {
      result = (mfem::Mesh *)mfem::Extrude1D(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Extrude2D(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Mesh *arg1 = (mfem::Mesh *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"mesh",  (char *)"nz",  (char *)"sz",  NULL 
  };
  mfem::Mesh *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Extrude2D", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Extrude2D" "', argument " "1"" of type '" "mfem::Mesh *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Mesh * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Extrude2D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (mfem::Mesh *)mfem::Extrude2D(arg1,arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShiftRight(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"a",  (char *)"b",  (char *)"c",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ShiftRight", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShiftRight" "', argument " "1"" of type '" "int &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShiftRight" "', argument " "1"" of type '" "int &""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShiftRight" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShiftRight" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShiftRight" "', argument " "3"" of type '" "int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShiftRight" "', argument " "3"" of type '" "int &""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      mfem::ShiftRight(*arg1,*arg2,*arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  mfem::Mesh::FaceInformation *arg2 = 0 ;
  PyMFEM::wFILE *temp1 = 0 ;
  std::ofstream out_txt1 ;
  mfem::ofgzstream *out_gz1 = 0 ;
  PyObject *string_io1 = 0 ;
  std::ostringstream *stream1 = 0 ;
  PyObject *ret1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::ostream *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    //  PyMFEM::wFILE or string argument or StringIO
    if (SWIG_ConvertPtr(swig_obj[0], (void **) &temp1, SWIGTYPE_p_PyMFEM__wFILE, 0 | 0) == -1) {
      if (!PyString_Check(swig_obj[0]) && !PyUnicode_Check(swig_obj[0])) {
        // not string, check if it is StringIO
        PyObject* module = PyImport_ImportModule("io");
        if (!module){
          PyErr_SetString(PyExc_RuntimeError, "Can not load io module");
          return NULL;
        }      
        PyObject* cls = PyObject_GetAttrString(module, "StringIO");
        if (!cls){
          PyErr_SetString(PyExc_RuntimeError, "Can not load StringIO");
          return NULL;
        }      
        int check = PyObject_IsInstance(swig_obj[0], cls);
        Py_DECREF(module);
        if (! check){
          SWIG_exception(SWIG_ValueError,"First argument must be string/wFILE/IOString");
          return NULL;
        }
        string_io1=swig_obj[0];
        stream1 = new std::ostringstream();
        int prec = 16;
        if (PyObject_HasAttrString(swig_obj[0], "precision")){
          PyObject *attr = PyObject_GetAttrString(swig_obj[0], "precision");
          prec = (int)PyLong_AsLong(attr);
          //std::cout << "setting prec" << prec << "\n";
        }
        stream1->precision(prec);
        
      } else {
        // if it is string, extract filename as char*
        PyObject* str = PyUnicode_AsEncodedString(swig_obj[0], "utf-8", "~E~");	
        const char* filename = PyBytes_AsString(str);
        temp1 = new PyMFEM::wFILE(filename, 16, true);
        Py_DECREF(str);	 
      }
    }
    
    if (stream1 == 0){
      if (temp1->isSTDOUT() == 1) {
        arg1 = &std::cout;
      } else if (temp1->isGZ()){
        out_gz1 = new mfem::ofgzstream(temp1->getFilename(), true);
        arg1 = out_gz1;	     
      } else {
        out_txt1.open(temp1->getFilename());
        out_txt1.precision(temp1->getPrecision());
        arg1 = &out_txt1;
      }
    } else {
      arg1 = stream1;
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_mfem__Mesh__FaceInformation,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "mfem::Mesh::FaceInformation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "mfem::Mesh::FaceInformation const &""'"); 
  }
  arg2 = reinterpret_cast< mfem::Mesh::FaceInformation * >(argp2);
  {
    try {
      result = (std::ostream *) &mfem::operator <<(*arg1,(mfem::Mesh::FaceInformation const &)*arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  {
    if (stream1) {
      std::string str =  stream1->str();
      const char* s = str.c_str();
      const int n = str.length();
      ret1 = PyObject_CallMethod(string_io1, "write", "s#",
        s, static_cast<Py_ssize_t>(n));
      if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError, "Error occured when writing IOString");
        return NULL;
      }
      delete stream1;
      Py_XDECREF(resultobj);   /* Blow away any previous result */
      resultobj = ret1;    
    }
  }
  {
    if (!stream1) {
      if (temp1) {
        if (temp1->isSTDOUT() != 1) {
          if (out_txt1.is_open()){
            out_txt1.close();
          }
          if (out_gz1){
            delete out_gz1;
          }
        }
        if (temp1->isTemporary()){
          delete temp1;
        }
      }
    }
  }
  return resultobj;
fail:
  {
    if (!stream1) {
      if (temp1) {
        if (temp1->isSTDOUT() != 1) {
          if (out_txt1.is_open()){
            out_txt1.close();
          }
          if (out_gz1){
            delete out_gz1;
          }
        }
        if (temp1->isTemporary()){
          delete temp1;
        }
      }
    }
  }
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "__lshift__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      //std::string *ptr2 = (std::string *)0;
      if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
        PyErr_Clear();
        if (!PyString_Check(argv[0]) && !PyUnicode_Check(argv[0])) {
          // not string
          _v = 1;	   	
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            _v = 0;	   
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            _v = 0;	   	   
          }      
          int check = PyObject_IsInstance(argv[0], cls);
          Py_DECREF(module);
          if (! check){
            _v = 0;	   	   	   
          }
        } else {
          _v = 1;
        }
      } else {
        _v = 1;
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Mesh, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      //std::string *ptr2 = (std::string *)0;
      if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_PyMFEM__wFILE, 0 |0) == -1) {
        PyErr_Clear();
        if (!PyString_Check(argv[0]) && !PyUnicode_Check(argv[0])) {
          // not string
          _v = 1;	   	
          PyObject* module = PyImport_ImportModule("io");
          if (!module){
            _v = 0;	   
          }      
          PyObject* cls = PyObject_GetAttrString(module, "StringIO");
          if (!cls){
            _v = 0;	   	   
          }      
          int check = PyObject_IsInstance(argv[0], cls);
          Py_DECREF(module);
          if (! check){
            _v = 0;	   	   	   
          }
        } else {
          _v = 1;
        }
      } else {
        _v = 1;
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_mfem__Mesh__FaceInformation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_4(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "Mesh_attributes_get", _wrap_Mesh_attributes_get, METH_O, "Mesh_attributes_get(Mesh self) -> intArray"},
	 { "Mesh_bdr_attributes_get", _wrap_Mesh_bdr_attributes_get, METH_O, "Mesh_bdr_attributes_get(Mesh self) -> intArray"},
	 { "Mesh_NURBSext_set", _wrap_Mesh_NURBSext_set, METH_VARARGS, "Mesh_NURBSext_set(Mesh self, mfem::NURBSExtension * NURBSext)"},
	 { "Mesh_NURBSext_get", _wrap_Mesh_NURBSext_get, METH_O, "Mesh_NURBSext_get(Mesh self) -> mfem::NURBSExtension *"},
	 { "Mesh_ncmesh_set", _wrap_Mesh_ncmesh_set, METH_VARARGS, "Mesh_ncmesh_set(Mesh self, NCMesh ncmesh)"},
	 { "Mesh_ncmesh_get", _wrap_Mesh_ncmesh_get, METH_O, "Mesh_ncmesh_get(Mesh self) -> NCMesh"},
	 { "Mesh_geom_factors_set", _wrap_Mesh_geom_factors_set, METH_VARARGS, "Mesh_geom_factors_set(Mesh self, mfem::Array< mfem::GeometricFactors * > * geom_factors)"},
	 { "Mesh_geom_factors_get", _wrap_Mesh_geom_factors_get, METH_O, "Mesh_geom_factors_get(Mesh self) -> mfem::Array< mfem::GeometricFactors * > *"},
	 { "Mesh_face_geom_factors_set", _wrap_Mesh_face_geom_factors_set, METH_VARARGS, "Mesh_face_geom_factors_set(Mesh self, mfem::Array< mfem::FaceGeometricFactors * > * face_geom_factors)"},
	 { "Mesh_face_geom_factors_get", _wrap_Mesh_face_geom_factors_get, METH_O, "Mesh_face_geom_factors_get(Mesh self) -> mfem::Array< mfem::FaceGeometricFactors * > *"},
	 { "Mesh_remove_unused_vertices_get", _wrap_Mesh_remove_unused_vertices_get, METH_VARARGS, NULL},
	 { "Mesh_remove_unused_vertices_set", _wrap_Mesh_remove_unused_vertices_set, METH_O, NULL},
	 { "Mesh_LoadFromFile", (PyCFunction)(void(*)(void))_wrap_Mesh_LoadFromFile, METH_VARARGS|METH_KEYWORDS, "Mesh_LoadFromFile(char const * filename, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh"},
	 { "Mesh_MakeCartesian1D", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeCartesian1D, METH_VARARGS|METH_KEYWORDS, "Mesh_MakeCartesian1D(int n, double sx=1.0) -> Mesh"},
	 { "Mesh_MakeCartesian2D", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeCartesian2D, METH_VARARGS|METH_KEYWORDS, "Mesh_MakeCartesian2D(int nx, int ny, mfem::Element::Type type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True) -> Mesh"},
	 { "Mesh_MakeCartesian3D", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeCartesian3D, METH_VARARGS|METH_KEYWORDS, "Mesh_MakeCartesian3D(int nx, int ny, int nz, mfem::Element::Type type, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True) -> Mesh"},
	 { "Mesh_MakeRefined", _wrap_Mesh_MakeRefined, METH_VARARGS, "\n"
		"Mesh_MakeRefined(Mesh orig_mesh, int ref_factor, int ref_type) -> Mesh\n"
		"Mesh_MakeRefined(Mesh orig_mesh, intArray ref_factors, int ref_type) -> Mesh\n"
		""},
	 { "Mesh_MakeSimplicial", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeSimplicial, METH_VARARGS|METH_KEYWORDS, "Mesh_MakeSimplicial(Mesh orig_mesh) -> Mesh"},
	 { "Mesh_MakePeriodic", (PyCFunction)(void(*)(void))_wrap_Mesh_MakePeriodic, METH_VARARGS|METH_KEYWORDS, "Mesh_MakePeriodic(Mesh orig_mesh, vector_int v2v) -> Mesh"},
	 { "Mesh_CreatePeriodicVertexMapping", (PyCFunction)(void(*)(void))_wrap_Mesh_CreatePeriodicVertexMapping, METH_VARARGS|METH_KEYWORDS, "Mesh_CreatePeriodicVertexMapping(Mesh self, vector_Vector translations, double tol=1e-8) -> vector_int"},
	 { "Mesh_NewElement", (PyCFunction)(void(*)(void))_wrap_Mesh_NewElement, METH_VARARGS|METH_KEYWORDS, "Mesh_NewElement(Mesh self, int geom) -> Element"},
	 { "Mesh_AddVertex", _wrap_Mesh_AddVertex, METH_VARARGS, "\n"
		"Mesh_AddVertex(Mesh self, double x, double y=0.0, double z=0.0) -> int\n"
		"Mesh_AddVertex(Mesh self, double const * coords) -> int\n"
		"Mesh_AddVertex(Mesh self, Vector coords) -> int\n"
		""},
	 { "Mesh_AddVertexParents", (PyCFunction)(void(*)(void))_wrap_Mesh_AddVertexParents, METH_VARARGS|METH_KEYWORDS, "Mesh_AddVertexParents(Mesh self, int i, int p1, int p2)"},
	 { "Mesh_AddSegment", _wrap_Mesh_AddSegment, METH_VARARGS, "\n"
		"Mesh_AddSegment(Mesh self, int v1, int v2, int attr=1) -> int\n"
		"Mesh_AddSegment(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddTriangle", _wrap_Mesh_AddTriangle, METH_VARARGS, "\n"
		"Mesh_AddTriangle(Mesh self, int v1, int v2, int v3, int attr=1) -> int\n"
		"Mesh_AddTriangle(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddTri", (PyCFunction)(void(*)(void))_wrap_Mesh_AddTri, METH_VARARGS|METH_KEYWORDS, "Mesh_AddTri(Mesh self, int const * vi, int attr=1) -> int"},
	 { "Mesh_AddQuad", _wrap_Mesh_AddQuad, METH_VARARGS, "\n"
		"Mesh_AddQuad(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int\n"
		"Mesh_AddQuad(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddTet", _wrap_Mesh_AddTet, METH_VARARGS, "\n"
		"Mesh_AddTet(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int\n"
		"Mesh_AddTet(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddWedge", _wrap_Mesh_AddWedge, METH_VARARGS, "\n"
		"Mesh_AddWedge(Mesh self, int v1, int v2, int v3, int v4, int v5, int v6, int attr=1) -> int\n"
		"Mesh_AddWedge(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddPyramid", _wrap_Mesh_AddPyramid, METH_VARARGS, "\n"
		"Mesh_AddPyramid(Mesh self, int v1, int v2, int v3, int v4, int v5, int attr=1) -> int\n"
		"Mesh_AddPyramid(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddHex", _wrap_Mesh_AddHex, METH_VARARGS, "\n"
		"Mesh_AddHex(Mesh self, int v1, int v2, int v3, int v4, int v5, int v6, int v7, int v8, int attr=1) -> int\n"
		"Mesh_AddHex(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddHexAsTets", (PyCFunction)(void(*)(void))_wrap_Mesh_AddHexAsTets, METH_VARARGS|METH_KEYWORDS, "Mesh_AddHexAsTets(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddHexAsWedges", (PyCFunction)(void(*)(void))_wrap_Mesh_AddHexAsWedges, METH_VARARGS|METH_KEYWORDS, "Mesh_AddHexAsWedges(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddHexAsPyramids", (PyCFunction)(void(*)(void))_wrap_Mesh_AddHexAsPyramids, METH_VARARGS|METH_KEYWORDS, "Mesh_AddHexAsPyramids(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddElement", (PyCFunction)(void(*)(void))_wrap_Mesh_AddElement, METH_VARARGS|METH_KEYWORDS, "Mesh_AddElement(Mesh self, Element elem) -> int"},
	 { "Mesh_AddBdrElement", (PyCFunction)(void(*)(void))_wrap_Mesh_AddBdrElement, METH_VARARGS|METH_KEYWORDS, "Mesh_AddBdrElement(Mesh self, Element elem) -> int"},
	 { "Mesh_AddBdrSegment", _wrap_Mesh_AddBdrSegment, METH_VARARGS, "\n"
		"Mesh_AddBdrSegment(Mesh self, int v1, int v2, int attr=1) -> int\n"
		"Mesh_AddBdrSegment(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddBdrTriangle", _wrap_Mesh_AddBdrTriangle, METH_VARARGS, "\n"
		"Mesh_AddBdrTriangle(Mesh self, int v1, int v2, int v3, int attr=1) -> int\n"
		"Mesh_AddBdrTriangle(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddBdrQuad", _wrap_Mesh_AddBdrQuad, METH_VARARGS, "\n"
		"Mesh_AddBdrQuad(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int\n"
		"Mesh_AddBdrQuad(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddBdrQuadAsTriangles", (PyCFunction)(void(*)(void))_wrap_Mesh_AddBdrQuadAsTriangles, METH_VARARGS|METH_KEYWORDS, "Mesh_AddBdrQuadAsTriangles(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddBdrPoint", (PyCFunction)(void(*)(void))_wrap_Mesh_AddBdrPoint, METH_VARARGS|METH_KEYWORDS, "Mesh_AddBdrPoint(Mesh self, int v, int attr=1) -> int"},
	 { "Mesh_GenerateBoundaryElements", _wrap_Mesh_GenerateBoundaryElements, METH_O, "Mesh_GenerateBoundaryElements(Mesh self)"},
	 { "Mesh_FinalizeTriMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeTriMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeTriMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeQuadMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeQuadMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeQuadMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeTetMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeTetMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeTetMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeWedgeMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeWedgeMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeWedgeMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeHexMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeHexMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeHexMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeMesh(Mesh self, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeTopology", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeTopology, METH_VARARGS|METH_KEYWORDS, "Mesh_FinalizeTopology(Mesh self, bool generate_bdr=True)"},
	 { "Mesh_Finalize", (PyCFunction)(void(*)(void))_wrap_Mesh_Finalize, METH_VARARGS|METH_KEYWORDS, "Mesh_Finalize(Mesh self, bool refine=False, bool fix_orientation=False)"},
	 { "Mesh_SetAttributes", _wrap_Mesh_SetAttributes, METH_O, "Mesh_SetAttributes(Mesh self)"},
	 { "Mesh_GetGeckoElementOrdering", (PyCFunction)(void(*)(void))_wrap_Mesh_GetGeckoElementOrdering, METH_VARARGS|METH_KEYWORDS, "Mesh_GetGeckoElementOrdering(Mesh self, intArray ordering, int iterations=4, int window=4, int period=2, int seed=0, bool verbose=False, double time_limit=0) -> double"},
	 { "Mesh_GetHilbertElementOrdering", (PyCFunction)(void(*)(void))_wrap_Mesh_GetHilbertElementOrdering, METH_VARARGS|METH_KEYWORDS, "Mesh_GetHilbertElementOrdering(Mesh self, intArray ordering)"},
	 { "Mesh_ReorderElements", (PyCFunction)(void(*)(void))_wrap_Mesh_ReorderElements, METH_VARARGS|METH_KEYWORDS, "Mesh_ReorderElements(Mesh self, intArray ordering, bool reorder_vertices=True)"},
	 { "Mesh_Load", (PyCFunction)(void(*)(void))_wrap_Mesh_Load, METH_VARARGS|METH_KEYWORDS, "Mesh_Load(Mesh self, std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True)"},
	 { "Mesh_Clear", _wrap_Mesh_Clear, METH_O, "Mesh_Clear(Mesh self)"},
	 { "Mesh_MeshGenerator", _wrap_Mesh_MeshGenerator, METH_O, "Mesh_MeshGenerator(Mesh self) -> int"},
	 { "Mesh_GetNV", _wrap_Mesh_GetNV, METH_O, "Mesh_GetNV(Mesh self) -> int"},
	 { "Mesh_GetNE", _wrap_Mesh_GetNE, METH_O, "Mesh_GetNE(Mesh self) -> int"},
	 { "Mesh_GetNBE", _wrap_Mesh_GetNBE, METH_O, "Mesh_GetNBE(Mesh self) -> int"},
	 { "Mesh_GetNEdges", _wrap_Mesh_GetNEdges, METH_O, "Mesh_GetNEdges(Mesh self) -> int"},
	 { "Mesh_GetNFaces", _wrap_Mesh_GetNFaces, METH_O, "Mesh_GetNFaces(Mesh self) -> int"},
	 { "Mesh_GetNumFaces", _wrap_Mesh_GetNumFaces, METH_O, "Mesh_GetNumFaces(Mesh self) -> int"},
	 { "Mesh_GetNumFacesWithGhost", _wrap_Mesh_GetNumFacesWithGhost, METH_O, "Mesh_GetNumFacesWithGhost(Mesh self) -> int"},
	 { "Mesh_GetNFbyType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetNFbyType, METH_VARARGS|METH_KEYWORDS, "Mesh_GetNFbyType(Mesh self, mfem::FaceType type) -> int"},
	 { "Mesh_ReduceInt", (PyCFunction)(void(*)(void))_wrap_Mesh_ReduceInt, METH_VARARGS|METH_KEYWORDS, "Mesh_ReduceInt(Mesh self, int value) -> long long"},
	 { "Mesh_GetGlobalNE", _wrap_Mesh_GetGlobalNE, METH_O, "Mesh_GetGlobalNE(Mesh self) -> long long"},
	 { "Mesh_GetVertexToVertexTable", (PyCFunction)(void(*)(void))_wrap_Mesh_GetVertexToVertexTable, METH_VARARGS|METH_KEYWORDS, "Mesh_GetVertexToVertexTable(Mesh self, DSTable arg2)"},
	 { "Mesh_GetGeometricFactors", (PyCFunction)(void(*)(void))_wrap_Mesh_GetGeometricFactors, METH_VARARGS|METH_KEYWORDS, "Mesh_GetGeometricFactors(Mesh self, IntegrationRule ir, int const flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors"},
	 { "Mesh_GetFaceGeometricFactors", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceGeometricFactors, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceGeometricFactors(Mesh self, IntegrationRule ir, int const flags, mfem::FaceType type, mfem::MemoryType d_mt=DEFAULT) -> FaceGeometricFactors"},
	 { "Mesh_DeleteGeometricFactors", _wrap_Mesh_DeleteGeometricFactors, METH_O, "Mesh_DeleteGeometricFactors(Mesh self)"},
	 { "Mesh_NodesUpdated", _wrap_Mesh_NodesUpdated, METH_O, "Mesh_NodesUpdated(Mesh self)"},
	 { "Mesh_EulerNumber", _wrap_Mesh_EulerNumber, METH_O, "Mesh_EulerNumber(Mesh self) -> int"},
	 { "Mesh_EulerNumber2D", _wrap_Mesh_EulerNumber2D, METH_O, "Mesh_EulerNumber2D(Mesh self) -> int"},
	 { "Mesh_Dimension", _wrap_Mesh_Dimension, METH_O, "Mesh_Dimension(Mesh self) -> int"},
	 { "Mesh_SpaceDimension", _wrap_Mesh_SpaceDimension, METH_O, "Mesh_SpaceDimension(Mesh self) -> int"},
	 { "Mesh_GetVertex", _wrap_Mesh_GetVertex, METH_VARARGS, "\n"
		"Mesh_GetVertex(Mesh self, int i) -> double const\n"
		"Mesh_GetVertex(Mesh self, int i) -> double *\n"
		""},
	 { "Mesh_GetElementData", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementData, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementData(Mesh self, int geom, intArray elem_vtx, intArray attr)"},
	 { "Mesh_HasBoundaryElements", _wrap_Mesh_HasBoundaryElements, METH_O, "Mesh_HasBoundaryElements(Mesh self) -> bool"},
	 { "Mesh_GetBdrElementData", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementData, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementData(Mesh self, int geom, intArray bdr_elem_vtx, intArray bdr_attr)"},
	 { "Mesh_ChangeVertexDataOwnership", (PyCFunction)(void(*)(void))_wrap_Mesh_ChangeVertexDataOwnership, METH_VARARGS|METH_KEYWORDS, "Mesh_ChangeVertexDataOwnership(Mesh self, double * vertices, int len_vertices, bool zerocopy=False)"},
	 { "Mesh_GetElementsArray", _wrap_Mesh_GetElementsArray, METH_O, "Mesh_GetElementsArray(Mesh self) -> mfem::Element const *const *"},
	 { "Mesh_GetElement", _wrap_Mesh_GetElement, METH_VARARGS, "\n"
		"Mesh_GetElement(Mesh self, int i) -> Element\n"
		"Mesh_GetElement(Mesh self, int i) -> Element\n"
		""},
	 { "Mesh_GetBdrElement", _wrap_Mesh_GetBdrElement, METH_VARARGS, "\n"
		"Mesh_GetBdrElement(Mesh self, int i) -> Element\n"
		"Mesh_GetBdrElement(Mesh self, int i) -> Element\n"
		""},
	 { "Mesh_GetFace", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFace, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFace(Mesh self, int i) -> Element"},
	 { "Mesh_GetFaceGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetElementGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetBdrElementGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetFaceBaseGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceBaseGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetElementBaseGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementBaseGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetBdrElementBaseGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementBaseGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_HasGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_HasGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_HasGeometry(Mesh self, mfem::Geometry::Type geom) -> bool"},
	 { "Mesh_GetNumGeometries", (PyCFunction)(void(*)(void))_wrap_Mesh_GetNumGeometries, METH_VARARGS|METH_KEYWORDS, "Mesh_GetNumGeometries(Mesh self, int dim) -> int"},
	 { "Mesh_GetGeometries", (PyCFunction)(void(*)(void))_wrap_Mesh_GetGeometries, METH_VARARGS|METH_KEYWORDS, "Mesh_GetGeometries(Mesh self, int dim, GeometryTypeArray el_geoms)"},
	 { "Mesh_GetElementVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementVertices(Mesh self, int i, intArray v)"},
	 { "Mesh_GetBdrElementVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementVertices(Mesh self, int i, intArray v)"},
	 { "Mesh_GetElementEdges", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementEdges, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementEdges(Mesh self, int i, intArray edges, intArray cor)"},
	 { "Mesh_GetBdrElementEdges", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementEdges, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementEdges(Mesh self, int i, intArray edges, intArray cor)"},
	 { "Mesh_GetFaceEdges", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceEdges, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceEdges(Mesh self, int i, intArray edges, intArray o)"},
	 { "Mesh_GetFaceVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceVertices(Mesh self, int i, intArray vert)"},
	 { "Mesh_GetEdgeVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetEdgeVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_GetEdgeVertices(Mesh self, int i, intArray vert)"},
	 { "Mesh_GetFaceEdgeTable", _wrap_Mesh_GetFaceEdgeTable, METH_O, "Mesh_GetFaceEdgeTable(Mesh self) -> Table"},
	 { "Mesh_GetEdgeVertexTable", _wrap_Mesh_GetEdgeVertexTable, METH_O, "Mesh_GetEdgeVertexTable(Mesh self) -> Table"},
	 { "Mesh_GetElementFaces", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementFaces, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementFaces(Mesh self, int i, intArray faces, intArray ori)"},
	 { "Mesh_FindFaceNeighbors", (PyCFunction)(void(*)(void))_wrap_Mesh_FindFaceNeighbors, METH_VARARGS|METH_KEYWORDS, "Mesh_FindFaceNeighbors(Mesh self, int const elem) -> intArray"},
	 { "Mesh_GetBdrElementEdgeIndex", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementEdgeIndex, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementEdgeIndex(Mesh self, int i) -> int"},
	 { "Mesh_GetBdrElementAdjacentElement", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementAdjacentElement, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementAdjacentElement(Mesh self, int bdr_el, int & el, int & info)"},
	 { "Mesh_GetBdrElementAdjacentElement2", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementAdjacentElement2, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementAdjacentElement2(Mesh self, int bdr_el, int & el, int & info)"},
	 { "Mesh_GetElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementType, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementType(Mesh self, int i) -> mfem::Element::Type"},
	 { "Mesh_GetBdrElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementType, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrElementType(Mesh self, int i) -> mfem::Element::Type"},
	 { "Mesh_GetPointMatrix", (PyCFunction)(void(*)(void))_wrap_Mesh_GetPointMatrix, METH_VARARGS|METH_KEYWORDS, "Mesh_GetPointMatrix(Mesh self, int i, DenseMatrix pointmat)"},
	 { "Mesh_GetBdrPointMatrix", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrPointMatrix, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrPointMatrix(Mesh self, int i, DenseMatrix pointmat)"},
	 { "Mesh_GetTransformationFEforElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetTransformationFEforElementType, METH_VARARGS|METH_KEYWORDS, "Mesh_GetTransformationFEforElementType(mfem::Element::Type arg1) -> FiniteElement"},
	 { "Mesh_GetElementTransformation", _wrap_Mesh_GetElementTransformation, METH_VARARGS, "\n"
		"Mesh_GetElementTransformation(Mesh self, int i, IsoparametricTransformation ElTr)\n"
		"Mesh_GetElementTransformation(Mesh self, int i) -> ElementTransformation\n"
		"Mesh_GetElementTransformation(Mesh self, int i, Vector nodes, IsoparametricTransformation ElTr)\n"
		""},
	 { "Mesh_GetBdrElementTransformation", _wrap_Mesh_GetBdrElementTransformation, METH_VARARGS, "\n"
		"Mesh_GetBdrElementTransformation(Mesh self, int i) -> ElementTransformation\n"
		"Mesh_GetBdrElementTransformation(Mesh self, int i, IsoparametricTransformation ElTr)\n"
		""},
	 { "Mesh_GetLocalFaceTransformation", (PyCFunction)(void(*)(void))_wrap_Mesh_GetLocalFaceTransformation, METH_VARARGS|METH_KEYWORDS, "Mesh_GetLocalFaceTransformation(Mesh self, int face_type, int elem_type, IsoparametricTransformation Transf, int info)"},
	 { "Mesh_GetFaceTransformation", _wrap_Mesh_GetFaceTransformation, METH_VARARGS, "\n"
		"Mesh_GetFaceTransformation(Mesh self, int i, IsoparametricTransformation FTr)\n"
		"Mesh_GetFaceTransformation(Mesh self, int FaceNo) -> ElementTransformation\n"
		""},
	 { "Mesh_GetEdgeTransformation", _wrap_Mesh_GetEdgeTransformation, METH_VARARGS, "\n"
		"Mesh_GetEdgeTransformation(Mesh self, int i, IsoparametricTransformation EdTr)\n"
		"Mesh_GetEdgeTransformation(Mesh self, int EdgeNo) -> ElementTransformation\n"
		""},
	 { "Mesh_GetFaceElementTransformations", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceElementTransformations, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceElementTransformations(Mesh self, int FaceNo, int mask=31) -> FaceElementTransformations"},
	 { "Mesh_GetInteriorFaceTransformations", (PyCFunction)(void(*)(void))_wrap_Mesh_GetInteriorFaceTransformations, METH_VARARGS|METH_KEYWORDS, "Mesh_GetInteriorFaceTransformations(Mesh self, int FaceNo) -> FaceElementTransformations"},
	 { "Mesh_GetBdrFaceTransformations", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrFaceTransformations, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrFaceTransformations(Mesh self, int BdrElemNo) -> FaceElementTransformations"},
	 { "Mesh_GetBdrFace", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrFace, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrFace(Mesh self, int BdrElemNo) -> int"},
	 { "Mesh_FaceIsInterior", (PyCFunction)(void(*)(void))_wrap_Mesh_FaceIsInterior, METH_VARARGS|METH_KEYWORDS, "Mesh_FaceIsInterior(Mesh self, int FaceNo) -> bool"},
	 { "Mesh_GetFaceInformation", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceInformation, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceInformation(Mesh self, int f) -> mfem::Mesh::FaceInformation"},
	 { "Mesh_GetFaceElements", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceElements, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceElements(Mesh self, int Face, int * Elem1, int * Elem2)"},
	 { "Mesh_GetFaceInfos", _wrap_Mesh_GetFaceInfos, METH_VARARGS, "\n"
		"Mesh_GetFaceInfos(Mesh self, int Face, int * Inf1, int * Inf2)\n"
		"Mesh_GetFaceInfos(Mesh self, int Face, int * Inf1, int * Inf2, int * NCFace)\n"
		""},
	 { "Mesh_GetFaceGeometryType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceGeometryType, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceGeometryType(Mesh self, int Face) -> mfem::Geometry::Type"},
	 { "Mesh_GetFaceElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceElementType, METH_VARARGS|METH_KEYWORDS, "Mesh_GetFaceElementType(Mesh self, int Face) -> mfem::Element::Type"},
	 { "Mesh_GetFaceToBdrElMap", _wrap_Mesh_GetFaceToBdrElMap, METH_O, "Mesh_GetFaceToBdrElMap(Mesh self) -> intArray"},
	 { "Mesh_CheckElementOrientation", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckElementOrientation, METH_VARARGS|METH_KEYWORDS, "Mesh_CheckElementOrientation(Mesh self, bool fix_it=True) -> int"},
	 { "Mesh_CheckBdrElementOrientation", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckBdrElementOrientation, METH_VARARGS|METH_KEYWORDS, "Mesh_CheckBdrElementOrientation(Mesh self, bool fix_it=True) -> int"},
	 { "Mesh_GetAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_GetAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_SetAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_GetBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetBdrAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_SetBdrAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_GetPatchAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetPatchAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_GetPatchAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetPatchAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetPatchAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_SetPatchAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_GetPatchBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetPatchBdrAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_GetPatchBdrAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetPatchBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetPatchBdrAttribute, METH_VARARGS|METH_KEYWORDS, "Mesh_SetPatchBdrAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_ElementToElementTable", _wrap_Mesh_ElementToElementTable, METH_O, "Mesh_ElementToElementTable(Mesh self) -> Table"},
	 { "Mesh_ElementToFaceTable", _wrap_Mesh_ElementToFaceTable, METH_O, "Mesh_ElementToFaceTable(Mesh self) -> Table"},
	 { "Mesh_ElementToEdgeTable", _wrap_Mesh_ElementToEdgeTable, METH_O, "Mesh_ElementToEdgeTable(Mesh self) -> Table"},
	 { "Mesh_GetVertexToElementTable", _wrap_Mesh_GetVertexToElementTable, METH_O, "Mesh_GetVertexToElementTable(Mesh self) -> Table"},
	 { "Mesh_GetFaceToElementTable", _wrap_Mesh_GetFaceToElementTable, METH_O, "Mesh_GetFaceToElementTable(Mesh self) -> Table"},
	 { "Mesh_ReorientTetMesh", _wrap_Mesh_ReorientTetMesh, METH_O, "Mesh_ReorientTetMesh(Mesh self)"},
	 { "Mesh_CartesianPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_CartesianPartitioning, METH_VARARGS|METH_KEYWORDS, "Mesh_CartesianPartitioning(Mesh self, int [] nxyz) -> int *"},
	 { "Mesh_GeneratePartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_GeneratePartitioning, METH_VARARGS|METH_KEYWORDS, "Mesh_GeneratePartitioning(Mesh self, int nparts, int part_method=1) -> int *"},
	 { "Mesh_CheckPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckPartitioning, METH_VARARGS|METH_KEYWORDS, "Mesh_CheckPartitioning(Mesh self, int * partitioning_)"},
	 { "Mesh_CheckDisplacements", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckDisplacements, METH_VARARGS|METH_KEYWORDS, "Mesh_CheckDisplacements(Mesh self, Vector displacements, double & tmax)"},
	 { "Mesh_MoveVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_MoveVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_MoveVertices(Mesh self, Vector displacements)"},
	 { "Mesh_GetVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_GetVertices(Mesh self, Vector vert_coord)"},
	 { "Mesh_SetVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_SetVertices, METH_VARARGS|METH_KEYWORDS, "Mesh_SetVertices(Mesh self, Vector vert_coord)"},
	 { "Mesh_GetNode", (PyCFunction)(void(*)(void))_wrap_Mesh_GetNode, METH_VARARGS|METH_KEYWORDS, "Mesh_GetNode(Mesh self, int i, double * coord)"},
	 { "Mesh_SetNode", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNode, METH_VARARGS|METH_KEYWORDS, "Mesh_SetNode(Mesh self, int i, double const * coord)"},
	 { "Mesh_MoveNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_MoveNodes, METH_VARARGS|METH_KEYWORDS, "Mesh_MoveNodes(Mesh self, Vector displacements)"},
	 { "Mesh_SetNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodes, METH_VARARGS|METH_KEYWORDS, "Mesh_SetNodes(Mesh self, Vector node_coord)"},
	 { "Mesh_OwnsNodes", _wrap_Mesh_OwnsNodes, METH_O, "Mesh_OwnsNodes(Mesh self) -> bool"},
	 { "Mesh_SetNodesOwner", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodesOwner, METH_VARARGS|METH_KEYWORDS, "Mesh_SetNodesOwner(Mesh self, bool nodes_owner)"},
	 { "Mesh_NewNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_NewNodes, METH_VARARGS|METH_KEYWORDS, "Mesh_NewNodes(Mesh self, GridFunction nodes, bool make_owner=False)"},
	 { "Mesh_SwapNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_SwapNodes, METH_VARARGS|METH_KEYWORDS, "Mesh_SwapNodes(Mesh self, mfem::GridFunction *& nodes, int & own_nodes_)"},
	 { "Mesh_GetNodes", _wrap_Mesh_GetNodes, METH_VARARGS, "\n"
		"Mesh_GetNodes(Mesh self, Vector node_coord)\n"
		"Mesh_GetNodes(Mesh self) -> GridFunction\n"
		"Mesh_GetNodes(Mesh self) -> GridFunction\n"
		"Mesh_GetNodes(Mesh self, GridFunction nodes)\n"
		""},
	 { "Mesh_SetNodalFESpace", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodalFESpace, METH_VARARGS|METH_KEYWORDS, "Mesh_SetNodalFESpace(Mesh self, FiniteElementSpace nfes)"},
	 { "Mesh_SetNodalGridFunction", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodalGridFunction, METH_VARARGS|METH_KEYWORDS, "Mesh_SetNodalGridFunction(Mesh self, GridFunction nodes, bool make_owner=False)"},
	 { "Mesh_GetNodalFESpace", _wrap_Mesh_GetNodalFESpace, METH_O, "Mesh_GetNodalFESpace(Mesh self) -> FiniteElementSpace"},
	 { "Mesh_EnsureNodes", _wrap_Mesh_EnsureNodes, METH_O, "Mesh_EnsureNodes(Mesh self)"},
	 { "Mesh_SetCurvature", (PyCFunction)(void(*)(void))_wrap_Mesh_SetCurvature, METH_VARARGS|METH_KEYWORDS, "Mesh_SetCurvature(Mesh self, int order, bool discont=False, int space_dim=-1, int ordering=1)"},
	 { "Mesh_UniformRefinement", (PyCFunction)(void(*)(void))_wrap_Mesh_UniformRefinement, METH_VARARGS|METH_KEYWORDS, "Mesh_UniformRefinement(Mesh self, int ref_algo=0)"},
	 { "Mesh_GeneralRefinement", _wrap_Mesh_GeneralRefinement, METH_VARARGS, "\n"
		"Mesh_GeneralRefinement(Mesh self, RefinementArray refinements, int nonconforming=-1, int nc_limit=0)\n"
		"Mesh_GeneralRefinement(Mesh self, intArray el_to_refine, int nonconforming=-1, int nc_limit=0)\n"
		""},
	 { "Mesh_RandomRefinement", (PyCFunction)(void(*)(void))_wrap_Mesh_RandomRefinement, METH_VARARGS|METH_KEYWORDS, "Mesh_RandomRefinement(Mesh self, double prob, bool aniso=False, int nonconforming=-1, int nc_limit=0)"},
	 { "Mesh_RefineAtVertex", (PyCFunction)(void(*)(void))_wrap_Mesh_RefineAtVertex, METH_VARARGS|METH_KEYWORDS, "Mesh_RefineAtVertex(Mesh self, Vertex vert, double eps=0.0, int nonconforming=-1)"},
	 { "Mesh_RefineByError", _wrap_Mesh_RefineByError, METH_VARARGS, "\n"
		"Mesh_RefineByError(Mesh self, doubleArray elem_error, double threshold, int nonconforming=-1, int nc_limit=0) -> bool\n"
		"Mesh_RefineByError(Mesh self, Vector elem_error, double threshold, int nonconforming=-1, int nc_limit=0) -> bool\n"
		""},
	 { "Mesh_DerefineByError", _wrap_Mesh_DerefineByError, METH_VARARGS, "\n"
		"Mesh_DerefineByError(Mesh self, doubleArray elem_error, double threshold, int nc_limit=0, int op=1) -> bool\n"
		"Mesh_DerefineByError(Mesh self, Vector elem_error, double threshold, int nc_limit=0, int op=1) -> bool\n"
		""},
	 { "Mesh_KnotInsert", _wrap_Mesh_KnotInsert, METH_VARARGS, "\n"
		"Mesh_KnotInsert(Mesh self, mfem::Array< mfem::KnotVector * > & kv)\n"
		"Mesh_KnotInsert(Mesh self, VectorPtrArray kv)\n"
		""},
	 { "Mesh_DegreeElevate", (PyCFunction)(void(*)(void))_wrap_Mesh_DegreeElevate, METH_VARARGS|METH_KEYWORDS, "Mesh_DegreeElevate(Mesh self, int rel_degree, int degree=16)"},
	 { "Mesh_EnsureNCMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_EnsureNCMesh, METH_VARARGS|METH_KEYWORDS, "Mesh_EnsureNCMesh(Mesh self, bool simplices_nonconforming=False)"},
	 { "Mesh_Conforming", _wrap_Mesh_Conforming, METH_O, "Mesh_Conforming(Mesh self) -> bool"},
	 { "Mesh_Nonconforming", _wrap_Mesh_Nonconforming, METH_O, "Mesh_Nonconforming(Mesh self) -> bool"},
	 { "Mesh_GetRefinementTransforms", _wrap_Mesh_GetRefinementTransforms, METH_O, "Mesh_GetRefinementTransforms(Mesh self) -> CoarseFineTransformations"},
	 { "Mesh_GetLastOperation", _wrap_Mesh_GetLastOperation, METH_O, "Mesh_GetLastOperation(Mesh self) -> mfem::Mesh::Operation"},
	 { "Mesh_GetSequence", _wrap_Mesh_GetSequence, METH_O, "Mesh_GetSequence(Mesh self) -> long"},
	 { "Mesh_Save", (PyCFunction)(void(*)(void))_wrap_Mesh_Save, METH_VARARGS|METH_KEYWORDS, "Mesh_Save(Mesh self, char const * fname, int precision=16)"},
	 { "Mesh_PrintVTU", _wrap_Mesh_PrintVTU, METH_VARARGS, "\n"
		"Mesh_PrintVTU(Mesh self, std::ostream & os, int ref=1, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0, bool bdr_elements=False)\n"
		"Mesh_PrintVTU(Mesh self, std::string fname, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0, bool bdr=False)\n"
		""},
	 { "Mesh_PrintBdrVTU", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintBdrVTU, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintBdrVTU(Mesh self, std::string fname, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0)"},
	 { "Mesh_GetElementColoring", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementColoring, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementColoring(Mesh self, intArray colors, int el0=0)"},
	 { "Mesh_PrintWithPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintWithPartitioning, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintWithPartitioning(Mesh self, int * partitioning, std::ostream & os, int elem_attr=0)"},
	 { "Mesh_PrintElementsWithPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintElementsWithPartitioning, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintElementsWithPartitioning(Mesh self, int * partitioning, std::ostream & out, int interior_faces=0)"},
	 { "Mesh_PrintSurfaces", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintSurfaces, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintSurfaces(Mesh self, Table Aface_face, std::ostream & out)"},
	 { "Mesh_ScaleSubdomains", (PyCFunction)(void(*)(void))_wrap_Mesh_ScaleSubdomains, METH_VARARGS|METH_KEYWORDS, "Mesh_ScaleSubdomains(Mesh self, double sf)"},
	 { "Mesh_ScaleElements", (PyCFunction)(void(*)(void))_wrap_Mesh_ScaleElements, METH_VARARGS|METH_KEYWORDS, "Mesh_ScaleElements(Mesh self, double sf)"},
	 { "Mesh_Transform", _wrap_Mesh_Transform, METH_VARARGS, "\n"
		"Mesh_Transform(Mesh self, void (*)(mfem::Vector const &,mfem::Vector &) f)\n"
		"Mesh_Transform(Mesh self, VectorCoefficient deformation)\n"
		""},
	 { "Mesh_RemoveUnusedVertices", _wrap_Mesh_RemoveUnusedVertices, METH_O, "Mesh_RemoveUnusedVertices(Mesh self)"},
	 { "Mesh_RemoveInternalBoundaries", _wrap_Mesh_RemoveInternalBoundaries, METH_O, "Mesh_RemoveInternalBoundaries(Mesh self)"},
	 { "Mesh_GetElementSize", _wrap_Mesh_GetElementSize, METH_VARARGS, "\n"
		"Mesh_GetElementSize(Mesh self, int i, int type=0) -> double\n"
		"Mesh_GetElementSize(Mesh self, int i, Vector dir) -> double\n"
		""},
	 { "Mesh_GetElementVolume", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementVolume, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementVolume(Mesh self, int i) -> double"},
	 { "Mesh_GetElementCenter", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementCenter, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementCenter(Mesh self, int i, Vector center)"},
	 { "Mesh_GetBoundingBox", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBoundingBox, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBoundingBox(Mesh self, Vector min, Vector max, int ref=2)"},
	 { "Mesh_GetCharacteristics", (PyCFunction)(void(*)(void))_wrap_Mesh_GetCharacteristics, METH_VARARGS|METH_KEYWORDS, "Mesh_GetCharacteristics(Mesh self, double & h_min, double & h_max, double & kappa_min, double & kappa_max, Vector Vh=None, Vector Vk=None)"},
	 { "Mesh_PrintElementsByGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintElementsByGeometry, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintElementsByGeometry(int dim, intArray num_elems_by_geom, std::ostream & out)"},
	 { "Mesh_PrintCharacteristics", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintCharacteristics, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintCharacteristics(Mesh self, Vector Vh=None, Vector Vk=None, std::ostream & os=out)"},
	 { "Mesh_FindPoints", (PyCFunction)(void(*)(void))_wrap_Mesh_FindPoints, METH_VARARGS|METH_KEYWORDS, "Mesh_FindPoints(Mesh self, DenseMatrix point_mat, intArray elem_ids, IntegrationPointArray ips, bool warn=True, InverseElementTransformation inv_trans=None) -> int"},
	 { "Mesh_Swap", (PyCFunction)(void(*)(void))_wrap_Mesh_Swap, METH_VARARGS|METH_KEYWORDS, "Mesh_Swap(Mesh self, Mesh other, bool non_geometry)"},
	 { "delete_Mesh", _wrap_delete_Mesh, METH_O, "delete_Mesh(Mesh self)"},
	 { "new_Mesh", _wrap_new_Mesh, METH_VARARGS, "\n"
		"Mesh()\n"
		"Mesh(Mesh mesh, bool copy_nodes=True)\n"
		"Mesh(Mesh mesh)\n"
		"Mesh(double * vertices, int num_vertices, int * element_indices, mfem::Geometry::Type element_type, int * element_attributes, int num_elements, int * boundary_indices, mfem::Geometry::Type boundary_type, int * boundary_attributes, int num_boundary_elements, int dimension, int space_dimension=-1)\n"
		"Mesh(int Dim_, int NVert, int NElem, int NBdrElem=0, int spaceDim_=-1)\n"
		"Mesh(int nx, int ny, int nz, mfem::Element::Type type, bool generate_edges=False, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True)\n"
		"Mesh(int nx, int ny, mfem::Element::Type type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True)\n"
		"Mesh(int n, double sx=1.0)\n"
		"Mesh(char const * filename, int generate_edges=0, int refine=1, bool fix_orientation=True)\n"
		"Mesh(std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True)\n"
		"Mesh(mfem::Mesh *[] mesh_array, int num_pieces)\n"
		"Mesh(Mesh orig_mesh, int ref_factor, int ref_type)\n"
		"Mesh(int nx, int ny, int nz, char const * type, bool generate_edges=False, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True)\n"
		"new_Mesh(int nx, int ny, char const * type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True) -> Mesh\n"
		""},
	 { "Mesh_MakeMerged", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeMerged, METH_VARARGS|METH_KEYWORDS, "Mesh_MakeMerged(PyObject * tuple_or_list) -> PyObject *"},
	 { "Mesh_PrintToFile", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintToFile, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintToFile(Mesh self, char const * mesh_file, int const precision)"},
	 { "Mesh_WriteToStream", (PyCFunction)(void(*)(void))_wrap_Mesh_WriteToStream, METH_VARARGS|METH_KEYWORDS, "Mesh_WriteToStream(Mesh self, PyObject * StringIO) -> PyObject *"},
	 { "Mesh_GetAttributeArray", _wrap_Mesh_GetAttributeArray, METH_O, "Mesh_GetAttributeArray(Mesh self) -> PyObject *"},
	 { "Mesh_GetVertexArray", _wrap_Mesh_GetVertexArray, METH_VARARGS, "\n"
		"Mesh_GetVertexArray(Mesh self, int i) -> PyObject\n"
		"Mesh_GetVertexArray(Mesh self) -> PyObject *\n"
		""},
	 { "Mesh_GetBdrElementFace", _wrap_Mesh_GetBdrElementFace, METH_VARARGS, "\n"
		"Mesh_GetBdrElementFace(Mesh self, int i, int * f, int * o)\n"
		"Mesh_GetBdrElementFace(Mesh self, int i) -> PyObject *\n"
		""},
	 { "Mesh_GetBdrAttributeArray", _wrap_Mesh_GetBdrAttributeArray, METH_O, "Mesh_GetBdrAttributeArray(Mesh self) -> PyObject *"},
	 { "Mesh_GetBdrArray", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrArray, METH_VARARGS|METH_KEYWORDS, "Mesh_GetBdrArray(Mesh self, int idx) -> PyObject *"},
	 { "Mesh_GetDomainArray", (PyCFunction)(void(*)(void))_wrap_Mesh_GetDomainArray, METH_VARARGS|METH_KEYWORDS, "Mesh_GetDomainArray(Mesh self, int idx) -> PyObject *"},
	 { "Mesh_GetElementCenterArray", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementCenterArray, METH_VARARGS|METH_KEYWORDS, "Mesh_GetElementCenterArray(Mesh self, int idx) -> PyObject *"},
	 { "Mesh_GetScaledJacobian", (PyCFunction)(void(*)(void))_wrap_Mesh_GetScaledJacobian, METH_VARARGS|METH_KEYWORDS, "Mesh_GetScaledJacobian(Mesh self, int i, int sd=2) -> double"},
	 { "Mesh_IsElementOnPlaneArray", (PyCFunction)(void(*)(void))_wrap_Mesh_IsElementOnPlaneArray, METH_VARARGS|METH_KEYWORDS, "Mesh_IsElementOnPlaneArray(Mesh self, PyObject * aa, PyObject * bb, PyObject * cc, PyObject * dd) -> PyObject *"},
	 { "Mesh_PrintInfo", _wrap_Mesh_PrintInfo, METH_VARARGS, "\n"
		"Mesh_PrintInfo(Mesh self, std::ostream & os=out)\n"
		"Mesh_PrintInfo(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintInfoGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintInfoGZ, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintInfoGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_Print", _wrap_Mesh_Print, METH_VARARGS, "\n"
		"Mesh_Print(Mesh self, std::ostream & os=out)\n"
		"Mesh_Print(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintGZ, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_PrintXG", _wrap_Mesh_PrintXG, METH_VARARGS, "\n"
		"Mesh_PrintXG(Mesh self, std::ostream & os=out)\n"
		"Mesh_PrintXG(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintXGGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintXGGZ, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintXGGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_PrintVTK", _wrap_Mesh_PrintVTK, METH_VARARGS, "\n"
		"Mesh_PrintVTK(Mesh self, std::ostream & os)\n"
		"Mesh_PrintVTK(Mesh self, std::ostream & os, int ref, int field_data=0)\n"
		"Mesh_PrintVTK(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintVTKGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintVTKGZ, METH_VARARGS|METH_KEYWORDS, "Mesh_PrintVTKGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_swigregister", Mesh_swigregister, METH_O, NULL},
	 { "Mesh_swiginit", Mesh_swiginit, METH_VARARGS, NULL},
	 { "GeometricFactors_mesh_set", _wrap_GeometricFactors_mesh_set, METH_VARARGS, "GeometricFactors_mesh_set(GeometricFactors self, Mesh mesh)"},
	 { "GeometricFactors_mesh_get", _wrap_GeometricFactors_mesh_get, METH_O, "GeometricFactors_mesh_get(GeometricFactors self) -> Mesh"},
	 { "GeometricFactors_IntRule_set", _wrap_GeometricFactors_IntRule_set, METH_VARARGS, "GeometricFactors_IntRule_set(GeometricFactors self, IntegrationRule IntRule)"},
	 { "GeometricFactors_IntRule_get", _wrap_GeometricFactors_IntRule_get, METH_O, "GeometricFactors_IntRule_get(GeometricFactors self) -> IntegrationRule"},
	 { "GeometricFactors_computed_factors_set", _wrap_GeometricFactors_computed_factors_set, METH_VARARGS, "GeometricFactors_computed_factors_set(GeometricFactors self, int computed_factors)"},
	 { "GeometricFactors_computed_factors_get", _wrap_GeometricFactors_computed_factors_get, METH_O, "GeometricFactors_computed_factors_get(GeometricFactors self) -> int"},
	 { "new_GeometricFactors", _wrap_new_GeometricFactors, METH_VARARGS, "\n"
		"GeometricFactors(Mesh mesh, IntegrationRule ir, int flags, mfem::MemoryType d_mt=DEFAULT)\n"
		"new_GeometricFactors(GridFunction nodes, IntegrationRule ir, int flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors\n"
		""},
	 { "GeometricFactors_X_set", _wrap_GeometricFactors_X_set, METH_VARARGS, "GeometricFactors_X_set(GeometricFactors self, Vector X)"},
	 { "GeometricFactors_X_get", _wrap_GeometricFactors_X_get, METH_O, "GeometricFactors_X_get(GeometricFactors self) -> Vector"},
	 { "GeometricFactors_J_set", _wrap_GeometricFactors_J_set, METH_VARARGS, "GeometricFactors_J_set(GeometricFactors self, Vector J)"},
	 { "GeometricFactors_J_get", _wrap_GeometricFactors_J_get, METH_O, "GeometricFactors_J_get(GeometricFactors self) -> Vector"},
	 { "GeometricFactors_detJ_set", _wrap_GeometricFactors_detJ_set, METH_VARARGS, "GeometricFactors_detJ_set(GeometricFactors self, Vector detJ)"},
	 { "GeometricFactors_detJ_get", _wrap_GeometricFactors_detJ_get, METH_O, "GeometricFactors_detJ_get(GeometricFactors self) -> Vector"},
	 { "delete_GeometricFactors", _wrap_delete_GeometricFactors, METH_O, "delete_GeometricFactors(GeometricFactors self)"},
	 { "GeometricFactors_swigregister", GeometricFactors_swigregister, METH_O, NULL},
	 { "GeometricFactors_swiginit", GeometricFactors_swiginit, METH_VARARGS, NULL},
	 { "FaceGeometricFactors_mesh_set", _wrap_FaceGeometricFactors_mesh_set, METH_VARARGS, "FaceGeometricFactors_mesh_set(FaceGeometricFactors self, Mesh mesh)"},
	 { "FaceGeometricFactors_mesh_get", _wrap_FaceGeometricFactors_mesh_get, METH_O, "FaceGeometricFactors_mesh_get(FaceGeometricFactors self) -> Mesh"},
	 { "FaceGeometricFactors_IntRule_set", _wrap_FaceGeometricFactors_IntRule_set, METH_VARARGS, "FaceGeometricFactors_IntRule_set(FaceGeometricFactors self, IntegrationRule IntRule)"},
	 { "FaceGeometricFactors_IntRule_get", _wrap_FaceGeometricFactors_IntRule_get, METH_O, "FaceGeometricFactors_IntRule_get(FaceGeometricFactors self) -> IntegrationRule"},
	 { "FaceGeometricFactors_computed_factors_set", _wrap_FaceGeometricFactors_computed_factors_set, METH_VARARGS, "FaceGeometricFactors_computed_factors_set(FaceGeometricFactors self, int computed_factors)"},
	 { "FaceGeometricFactors_computed_factors_get", _wrap_FaceGeometricFactors_computed_factors_get, METH_O, "FaceGeometricFactors_computed_factors_get(FaceGeometricFactors self) -> int"},
	 { "FaceGeometricFactors_type_set", _wrap_FaceGeometricFactors_type_set, METH_VARARGS, "FaceGeometricFactors_type_set(FaceGeometricFactors self, mfem::FaceType type)"},
	 { "FaceGeometricFactors_type_get", _wrap_FaceGeometricFactors_type_get, METH_O, "FaceGeometricFactors_type_get(FaceGeometricFactors self) -> mfem::FaceType"},
	 { "new_FaceGeometricFactors", (PyCFunction)(void(*)(void))_wrap_new_FaceGeometricFactors, METH_VARARGS|METH_KEYWORDS, "new_FaceGeometricFactors(Mesh mesh, IntegrationRule ir, int flags, mfem::FaceType type, mfem::MemoryType d_mt=DEFAULT) -> FaceGeometricFactors"},
	 { "FaceGeometricFactors_X_set", _wrap_FaceGeometricFactors_X_set, METH_VARARGS, "FaceGeometricFactors_X_set(FaceGeometricFactors self, Vector X)"},
	 { "FaceGeometricFactors_X_get", _wrap_FaceGeometricFactors_X_get, METH_O, "FaceGeometricFactors_X_get(FaceGeometricFactors self) -> Vector"},
	 { "FaceGeometricFactors_J_set", _wrap_FaceGeometricFactors_J_set, METH_VARARGS, "FaceGeometricFactors_J_set(FaceGeometricFactors self, Vector J)"},
	 { "FaceGeometricFactors_J_get", _wrap_FaceGeometricFactors_J_get, METH_O, "FaceGeometricFactors_J_get(FaceGeometricFactors self) -> Vector"},
	 { "FaceGeometricFactors_detJ_set", _wrap_FaceGeometricFactors_detJ_set, METH_VARARGS, "FaceGeometricFactors_detJ_set(FaceGeometricFactors self, Vector detJ)"},
	 { "FaceGeometricFactors_detJ_get", _wrap_FaceGeometricFactors_detJ_get, METH_O, "FaceGeometricFactors_detJ_get(FaceGeometricFactors self) -> Vector"},
	 { "FaceGeometricFactors_normal_set", _wrap_FaceGeometricFactors_normal_set, METH_VARARGS, "FaceGeometricFactors_normal_set(FaceGeometricFactors self, Vector normal)"},
	 { "FaceGeometricFactors_normal_get", _wrap_FaceGeometricFactors_normal_get, METH_O, "FaceGeometricFactors_normal_get(FaceGeometricFactors self) -> Vector"},
	 { "delete_FaceGeometricFactors", _wrap_delete_FaceGeometricFactors, METH_O, "delete_FaceGeometricFactors(FaceGeometricFactors self)"},
	 { "FaceGeometricFactors_swigregister", FaceGeometricFactors_swigregister, METH_O, NULL},
	 { "FaceGeometricFactors_swiginit", FaceGeometricFactors_swiginit, METH_VARARGS, NULL},
	 { "NodeExtrudeCoefficient_SetLayer", (PyCFunction)(void(*)(void))_wrap_NodeExtrudeCoefficient_SetLayer, METH_VARARGS|METH_KEYWORDS, "NodeExtrudeCoefficient_SetLayer(NodeExtrudeCoefficient self, int const l)"},
	 { "NodeExtrudeCoefficient_Eval", _wrap_NodeExtrudeCoefficient_Eval, METH_VARARGS, "\n"
		"NodeExtrudeCoefficient_Eval(NodeExtrudeCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"NodeExtrudeCoefficient_Eval(NodeExtrudeCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_NodeExtrudeCoefficient", _wrap_delete_NodeExtrudeCoefficient, METH_O, "delete_NodeExtrudeCoefficient(NodeExtrudeCoefficient self)"},
	 { "NodeExtrudeCoefficient_swigregister", NodeExtrudeCoefficient_swigregister, METH_O, NULL},
	 { "Extrude1D", (PyCFunction)(void(*)(void))_wrap_Extrude1D, METH_VARARGS|METH_KEYWORDS, "Extrude1D(Mesh mesh, int const ny, double const sy, bool const closed=False) -> Mesh"},
	 { "Extrude2D", (PyCFunction)(void(*)(void))_wrap_Extrude2D, METH_VARARGS|METH_KEYWORDS, "Extrude2D(Mesh mesh, int const nz, double const sz) -> Mesh"},
	 { "ShiftRight", (PyCFunction)(void(*)(void))_wrap_ShiftRight, METH_VARARGS|METH_KEYWORDS, "ShiftRight(int & a, int & b, int & c)"},
	 { "__lshift__", _wrap___lshift__, METH_VARARGS, "\n"
		"__lshift__(std::ostream & os, SparseMatrix mat) -> std::ostream\n"
		"__lshift__(std::ostream & out, GridFunction sol) -> std::ostream\n"
		"__lshift__(std::ostream & out, mfem::QuadratureFunction const & qf) -> std::ostream\n"
		"__lshift__(std::ostream & out, Mesh mesh) -> std::ostream\n"
		"__lshift__(std::ostream & os, mfem::Mesh::FaceInformation const & info) -> std::ostream &\n"
		""},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "Mesh_attributes_get", _wrap_Mesh_attributes_get, METH_O, "Mesh_attributes_get(Mesh self) -> intArray"},
	 { "Mesh_bdr_attributes_get", _wrap_Mesh_bdr_attributes_get, METH_O, "Mesh_bdr_attributes_get(Mesh self) -> intArray"},
	 { "Mesh_NURBSext_set", _wrap_Mesh_NURBSext_set, METH_VARARGS, "Mesh_NURBSext_set(Mesh self, mfem::NURBSExtension * NURBSext)"},
	 { "Mesh_NURBSext_get", _wrap_Mesh_NURBSext_get, METH_O, "Mesh_NURBSext_get(Mesh self) -> mfem::NURBSExtension *"},
	 { "Mesh_ncmesh_set", _wrap_Mesh_ncmesh_set, METH_VARARGS, "Mesh_ncmesh_set(Mesh self, NCMesh ncmesh)"},
	 { "Mesh_ncmesh_get", _wrap_Mesh_ncmesh_get, METH_O, "Mesh_ncmesh_get(Mesh self) -> NCMesh"},
	 { "Mesh_geom_factors_set", _wrap_Mesh_geom_factors_set, METH_VARARGS, "Mesh_geom_factors_set(Mesh self, mfem::Array< mfem::GeometricFactors * > * geom_factors)"},
	 { "Mesh_geom_factors_get", _wrap_Mesh_geom_factors_get, METH_O, "Mesh_geom_factors_get(Mesh self) -> mfem::Array< mfem::GeometricFactors * > *"},
	 { "Mesh_face_geom_factors_set", _wrap_Mesh_face_geom_factors_set, METH_VARARGS, "Mesh_face_geom_factors_set(Mesh self, mfem::Array< mfem::FaceGeometricFactors * > * face_geom_factors)"},
	 { "Mesh_face_geom_factors_get", _wrap_Mesh_face_geom_factors_get, METH_O, "Mesh_face_geom_factors_get(Mesh self) -> mfem::Array< mfem::FaceGeometricFactors * > *"},
	 { "Mesh_remove_unused_vertices_get", _wrap_Mesh_remove_unused_vertices_get, METH_VARARGS, NULL},
	 { "Mesh_remove_unused_vertices_set", _wrap_Mesh_remove_unused_vertices_set, METH_O, NULL},
	 { "Mesh_LoadFromFile", (PyCFunction)(void(*)(void))_wrap_Mesh_LoadFromFile, METH_VARARGS|METH_KEYWORDS, "LoadFromFile(char const * filename, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh"},
	 { "Mesh_MakeCartesian1D", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeCartesian1D, METH_VARARGS|METH_KEYWORDS, "MakeCartesian1D(int n, double sx=1.0) -> Mesh"},
	 { "Mesh_MakeCartesian2D", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeCartesian2D, METH_VARARGS|METH_KEYWORDS, "MakeCartesian2D(int nx, int ny, mfem::Element::Type type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True) -> Mesh"},
	 { "Mesh_MakeCartesian3D", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeCartesian3D, METH_VARARGS|METH_KEYWORDS, "MakeCartesian3D(int nx, int ny, int nz, mfem::Element::Type type, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True) -> Mesh"},
	 { "Mesh_MakeRefined", _wrap_Mesh_MakeRefined, METH_VARARGS, "\n"
		"MakeRefined(Mesh orig_mesh, int ref_factor, int ref_type) -> Mesh\n"
		"MakeRefined(Mesh orig_mesh, intArray ref_factors, int ref_type) -> Mesh\n"
		""},
	 { "Mesh_MakeSimplicial", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeSimplicial, METH_VARARGS|METH_KEYWORDS, "MakeSimplicial(Mesh orig_mesh) -> Mesh"},
	 { "Mesh_MakePeriodic", (PyCFunction)(void(*)(void))_wrap_Mesh_MakePeriodic, METH_VARARGS|METH_KEYWORDS, "MakePeriodic(Mesh orig_mesh, vector_int v2v) -> Mesh"},
	 { "Mesh_CreatePeriodicVertexMapping", (PyCFunction)(void(*)(void))_wrap_Mesh_CreatePeriodicVertexMapping, METH_VARARGS|METH_KEYWORDS, "CreatePeriodicVertexMapping(Mesh self, vector_Vector translations, double tol=1e-8) -> vector_int"},
	 { "Mesh_NewElement", (PyCFunction)(void(*)(void))_wrap_Mesh_NewElement, METH_VARARGS|METH_KEYWORDS, "NewElement(Mesh self, int geom) -> Element"},
	 { "Mesh_AddVertex", _wrap_Mesh_AddVertex, METH_VARARGS, "\n"
		"AddVertex(Mesh self, double x, double y=0.0, double z=0.0) -> int\n"
		"AddVertex(Mesh self, double const * coords) -> int\n"
		"AddVertex(Mesh self, Vector coords) -> int\n"
		""},
	 { "Mesh_AddVertexParents", (PyCFunction)(void(*)(void))_wrap_Mesh_AddVertexParents, METH_VARARGS|METH_KEYWORDS, "AddVertexParents(Mesh self, int i, int p1, int p2)"},
	 { "Mesh_AddSegment", _wrap_Mesh_AddSegment, METH_VARARGS, "\n"
		"AddSegment(Mesh self, int v1, int v2, int attr=1) -> int\n"
		"AddSegment(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddTriangle", _wrap_Mesh_AddTriangle, METH_VARARGS, "\n"
		"AddTriangle(Mesh self, int v1, int v2, int v3, int attr=1) -> int\n"
		"AddTriangle(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddTri", (PyCFunction)(void(*)(void))_wrap_Mesh_AddTri, METH_VARARGS|METH_KEYWORDS, "AddTri(Mesh self, int const * vi, int attr=1) -> int"},
	 { "Mesh_AddQuad", _wrap_Mesh_AddQuad, METH_VARARGS, "\n"
		"AddQuad(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int\n"
		"AddQuad(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddTet", _wrap_Mesh_AddTet, METH_VARARGS, "\n"
		"AddTet(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int\n"
		"AddTet(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddWedge", _wrap_Mesh_AddWedge, METH_VARARGS, "\n"
		"AddWedge(Mesh self, int v1, int v2, int v3, int v4, int v5, int v6, int attr=1) -> int\n"
		"AddWedge(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddPyramid", _wrap_Mesh_AddPyramid, METH_VARARGS, "\n"
		"AddPyramid(Mesh self, int v1, int v2, int v3, int v4, int v5, int attr=1) -> int\n"
		"AddPyramid(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddHex", _wrap_Mesh_AddHex, METH_VARARGS, "\n"
		"AddHex(Mesh self, int v1, int v2, int v3, int v4, int v5, int v6, int v7, int v8, int attr=1) -> int\n"
		"AddHex(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddHexAsTets", (PyCFunction)(void(*)(void))_wrap_Mesh_AddHexAsTets, METH_VARARGS|METH_KEYWORDS, "AddHexAsTets(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddHexAsWedges", (PyCFunction)(void(*)(void))_wrap_Mesh_AddHexAsWedges, METH_VARARGS|METH_KEYWORDS, "AddHexAsWedges(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddHexAsPyramids", (PyCFunction)(void(*)(void))_wrap_Mesh_AddHexAsPyramids, METH_VARARGS|METH_KEYWORDS, "AddHexAsPyramids(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddElement", (PyCFunction)(void(*)(void))_wrap_Mesh_AddElement, METH_VARARGS|METH_KEYWORDS, "AddElement(Mesh self, Element elem) -> int"},
	 { "Mesh_AddBdrElement", (PyCFunction)(void(*)(void))_wrap_Mesh_AddBdrElement, METH_VARARGS|METH_KEYWORDS, "AddBdrElement(Mesh self, Element elem) -> int"},
	 { "Mesh_AddBdrSegment", _wrap_Mesh_AddBdrSegment, METH_VARARGS, "\n"
		"AddBdrSegment(Mesh self, int v1, int v2, int attr=1) -> int\n"
		"AddBdrSegment(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddBdrTriangle", _wrap_Mesh_AddBdrTriangle, METH_VARARGS, "\n"
		"AddBdrTriangle(Mesh self, int v1, int v2, int v3, int attr=1) -> int\n"
		"AddBdrTriangle(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddBdrQuad", _wrap_Mesh_AddBdrQuad, METH_VARARGS, "\n"
		"AddBdrQuad(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int\n"
		"AddBdrQuad(Mesh self, int const * vi, int attr=1) -> int\n"
		""},
	 { "Mesh_AddBdrQuadAsTriangles", (PyCFunction)(void(*)(void))_wrap_Mesh_AddBdrQuadAsTriangles, METH_VARARGS|METH_KEYWORDS, "AddBdrQuadAsTriangles(Mesh self, int const * vi, int attr=1)"},
	 { "Mesh_AddBdrPoint", (PyCFunction)(void(*)(void))_wrap_Mesh_AddBdrPoint, METH_VARARGS|METH_KEYWORDS, "AddBdrPoint(Mesh self, int v, int attr=1) -> int"},
	 { "Mesh_GenerateBoundaryElements", _wrap_Mesh_GenerateBoundaryElements, METH_O, "GenerateBoundaryElements(Mesh self)"},
	 { "Mesh_FinalizeTriMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeTriMesh, METH_VARARGS|METH_KEYWORDS, "FinalizeTriMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeQuadMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeQuadMesh, METH_VARARGS|METH_KEYWORDS, "FinalizeQuadMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeTetMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeTetMesh, METH_VARARGS|METH_KEYWORDS, "FinalizeTetMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeWedgeMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeWedgeMesh, METH_VARARGS|METH_KEYWORDS, "FinalizeWedgeMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeHexMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeHexMesh, METH_VARARGS|METH_KEYWORDS, "FinalizeHexMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeMesh, METH_VARARGS|METH_KEYWORDS, "FinalizeMesh(Mesh self, int refine=0, bool fix_orientation=True)"},
	 { "Mesh_FinalizeTopology", (PyCFunction)(void(*)(void))_wrap_Mesh_FinalizeTopology, METH_VARARGS|METH_KEYWORDS, "FinalizeTopology(Mesh self, bool generate_bdr=True)"},
	 { "Mesh_Finalize", (PyCFunction)(void(*)(void))_wrap_Mesh_Finalize, METH_VARARGS|METH_KEYWORDS, "Finalize(Mesh self, bool refine=False, bool fix_orientation=False)"},
	 { "Mesh_SetAttributes", _wrap_Mesh_SetAttributes, METH_O, "SetAttributes(Mesh self)"},
	 { "Mesh_GetGeckoElementOrdering", (PyCFunction)(void(*)(void))_wrap_Mesh_GetGeckoElementOrdering, METH_VARARGS|METH_KEYWORDS, "GetGeckoElementOrdering(Mesh self, intArray ordering, int iterations=4, int window=4, int period=2, int seed=0, bool verbose=False, double time_limit=0) -> double"},
	 { "Mesh_GetHilbertElementOrdering", (PyCFunction)(void(*)(void))_wrap_Mesh_GetHilbertElementOrdering, METH_VARARGS|METH_KEYWORDS, "GetHilbertElementOrdering(Mesh self, intArray ordering)"},
	 { "Mesh_ReorderElements", (PyCFunction)(void(*)(void))_wrap_Mesh_ReorderElements, METH_VARARGS|METH_KEYWORDS, "ReorderElements(Mesh self, intArray ordering, bool reorder_vertices=True)"},
	 { "Mesh_Load", (PyCFunction)(void(*)(void))_wrap_Mesh_Load, METH_VARARGS|METH_KEYWORDS, "Load(Mesh self, std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True)"},
	 { "Mesh_Clear", _wrap_Mesh_Clear, METH_O, "Clear(Mesh self)"},
	 { "Mesh_MeshGenerator", _wrap_Mesh_MeshGenerator, METH_O, "MeshGenerator(Mesh self) -> int"},
	 { "Mesh_GetNV", _wrap_Mesh_GetNV, METH_O, "GetNV(Mesh self) -> int"},
	 { "Mesh_GetNE", _wrap_Mesh_GetNE, METH_O, "GetNE(Mesh self) -> int"},
	 { "Mesh_GetNBE", _wrap_Mesh_GetNBE, METH_O, "GetNBE(Mesh self) -> int"},
	 { "Mesh_GetNEdges", _wrap_Mesh_GetNEdges, METH_O, "GetNEdges(Mesh self) -> int"},
	 { "Mesh_GetNFaces", _wrap_Mesh_GetNFaces, METH_O, "GetNFaces(Mesh self) -> int"},
	 { "Mesh_GetNumFaces", _wrap_Mesh_GetNumFaces, METH_O, "GetNumFaces(Mesh self) -> int"},
	 { "Mesh_GetNumFacesWithGhost", _wrap_Mesh_GetNumFacesWithGhost, METH_O, "GetNumFacesWithGhost(Mesh self) -> int"},
	 { "Mesh_GetNFbyType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetNFbyType, METH_VARARGS|METH_KEYWORDS, "GetNFbyType(Mesh self, mfem::FaceType type) -> int"},
	 { "Mesh_ReduceInt", (PyCFunction)(void(*)(void))_wrap_Mesh_ReduceInt, METH_VARARGS|METH_KEYWORDS, "ReduceInt(Mesh self, int value) -> long long"},
	 { "Mesh_GetGlobalNE", _wrap_Mesh_GetGlobalNE, METH_O, "GetGlobalNE(Mesh self) -> long long"},
	 { "Mesh_GetVertexToVertexTable", (PyCFunction)(void(*)(void))_wrap_Mesh_GetVertexToVertexTable, METH_VARARGS|METH_KEYWORDS, "GetVertexToVertexTable(Mesh self, DSTable arg2)"},
	 { "Mesh_GetGeometricFactors", (PyCFunction)(void(*)(void))_wrap_Mesh_GetGeometricFactors, METH_VARARGS|METH_KEYWORDS, "GetGeometricFactors(Mesh self, IntegrationRule ir, int const flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors"},
	 { "Mesh_GetFaceGeometricFactors", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceGeometricFactors, METH_VARARGS|METH_KEYWORDS, "GetFaceGeometricFactors(Mesh self, IntegrationRule ir, int const flags, mfem::FaceType type, mfem::MemoryType d_mt=DEFAULT) -> FaceGeometricFactors"},
	 { "Mesh_DeleteGeometricFactors", _wrap_Mesh_DeleteGeometricFactors, METH_O, "DeleteGeometricFactors(Mesh self)"},
	 { "Mesh_NodesUpdated", _wrap_Mesh_NodesUpdated, METH_O, "NodesUpdated(Mesh self)"},
	 { "Mesh_EulerNumber", _wrap_Mesh_EulerNumber, METH_O, "EulerNumber(Mesh self) -> int"},
	 { "Mesh_EulerNumber2D", _wrap_Mesh_EulerNumber2D, METH_O, "EulerNumber2D(Mesh self) -> int"},
	 { "Mesh_Dimension", _wrap_Mesh_Dimension, METH_O, "Dimension(Mesh self) -> int"},
	 { "Mesh_SpaceDimension", _wrap_Mesh_SpaceDimension, METH_O, "SpaceDimension(Mesh self) -> int"},
	 { "Mesh_GetVertex", _wrap_Mesh_GetVertex, METH_VARARGS, "\n"
		"GetVertex(Mesh self, int i) -> double const\n"
		"GetVertex(Mesh self, int i) -> double *\n"
		""},
	 { "Mesh_GetElementData", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementData, METH_VARARGS|METH_KEYWORDS, "GetElementData(Mesh self, int geom, intArray elem_vtx, intArray attr)"},
	 { "Mesh_HasBoundaryElements", _wrap_Mesh_HasBoundaryElements, METH_O, "HasBoundaryElements(Mesh self) -> bool"},
	 { "Mesh_GetBdrElementData", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementData, METH_VARARGS|METH_KEYWORDS, "GetBdrElementData(Mesh self, int geom, intArray bdr_elem_vtx, intArray bdr_attr)"},
	 { "Mesh_ChangeVertexDataOwnership", (PyCFunction)(void(*)(void))_wrap_Mesh_ChangeVertexDataOwnership, METH_VARARGS|METH_KEYWORDS, "ChangeVertexDataOwnership(Mesh self, double * vertices, int len_vertices, bool zerocopy=False)"},
	 { "Mesh_GetElementsArray", _wrap_Mesh_GetElementsArray, METH_O, "GetElementsArray(Mesh self) -> mfem::Element const *const *"},
	 { "Mesh_GetElement", _wrap_Mesh_GetElement, METH_VARARGS, "\n"
		"GetElement(Mesh self, int i) -> Element\n"
		"GetElement(Mesh self, int i) -> Element\n"
		""},
	 { "Mesh_GetBdrElement", _wrap_Mesh_GetBdrElement, METH_VARARGS, "\n"
		"GetBdrElement(Mesh self, int i) -> Element\n"
		"GetBdrElement(Mesh self, int i) -> Element\n"
		""},
	 { "Mesh_GetFace", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFace, METH_VARARGS|METH_KEYWORDS, "GetFace(Mesh self, int i) -> Element"},
	 { "Mesh_GetFaceGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceGeometry, METH_VARARGS|METH_KEYWORDS, "GetFaceGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetElementGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementGeometry, METH_VARARGS|METH_KEYWORDS, "GetElementGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetBdrElementGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementGeometry, METH_VARARGS|METH_KEYWORDS, "GetBdrElementGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetFaceBaseGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceBaseGeometry, METH_VARARGS|METH_KEYWORDS, "GetFaceBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetElementBaseGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementBaseGeometry, METH_VARARGS|METH_KEYWORDS, "GetElementBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_GetBdrElementBaseGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementBaseGeometry, METH_VARARGS|METH_KEYWORDS, "GetBdrElementBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"},
	 { "Mesh_HasGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_HasGeometry, METH_VARARGS|METH_KEYWORDS, "HasGeometry(Mesh self, mfem::Geometry::Type geom) -> bool"},
	 { "Mesh_GetNumGeometries", (PyCFunction)(void(*)(void))_wrap_Mesh_GetNumGeometries, METH_VARARGS|METH_KEYWORDS, "GetNumGeometries(Mesh self, int dim) -> int"},
	 { "Mesh_GetGeometries", (PyCFunction)(void(*)(void))_wrap_Mesh_GetGeometries, METH_VARARGS|METH_KEYWORDS, "GetGeometries(Mesh self, int dim, GeometryTypeArray el_geoms)"},
	 { "Mesh_GetElementVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementVertices, METH_VARARGS|METH_KEYWORDS, "GetElementVertices(Mesh self, int i, intArray v)"},
	 { "Mesh_GetBdrElementVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementVertices, METH_VARARGS|METH_KEYWORDS, "GetBdrElementVertices(Mesh self, int i, intArray v)"},
	 { "Mesh_GetElementEdges", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementEdges, METH_VARARGS|METH_KEYWORDS, "GetElementEdges(Mesh self, int i, intArray edges, intArray cor)"},
	 { "Mesh_GetBdrElementEdges", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementEdges, METH_VARARGS|METH_KEYWORDS, "GetBdrElementEdges(Mesh self, int i, intArray edges, intArray cor)"},
	 { "Mesh_GetFaceEdges", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceEdges, METH_VARARGS|METH_KEYWORDS, "GetFaceEdges(Mesh self, int i, intArray edges, intArray o)"},
	 { "Mesh_GetFaceVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceVertices, METH_VARARGS|METH_KEYWORDS, "GetFaceVertices(Mesh self, int i, intArray vert)"},
	 { "Mesh_GetEdgeVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetEdgeVertices, METH_VARARGS|METH_KEYWORDS, "GetEdgeVertices(Mesh self, int i, intArray vert)"},
	 { "Mesh_GetFaceEdgeTable", _wrap_Mesh_GetFaceEdgeTable, METH_O, "GetFaceEdgeTable(Mesh self) -> Table"},
	 { "Mesh_GetEdgeVertexTable", _wrap_Mesh_GetEdgeVertexTable, METH_O, "GetEdgeVertexTable(Mesh self) -> Table"},
	 { "Mesh_GetElementFaces", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementFaces, METH_VARARGS|METH_KEYWORDS, "GetElementFaces(Mesh self, int i, intArray faces, intArray ori)"},
	 { "Mesh_FindFaceNeighbors", (PyCFunction)(void(*)(void))_wrap_Mesh_FindFaceNeighbors, METH_VARARGS|METH_KEYWORDS, "FindFaceNeighbors(Mesh self, int const elem) -> intArray"},
	 { "Mesh_GetBdrElementEdgeIndex", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementEdgeIndex, METH_VARARGS|METH_KEYWORDS, "GetBdrElementEdgeIndex(Mesh self, int i) -> int"},
	 { "Mesh_GetBdrElementAdjacentElement", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementAdjacentElement, METH_VARARGS|METH_KEYWORDS, "GetBdrElementAdjacentElement(Mesh self, int bdr_el, int & el, int & info)"},
	 { "Mesh_GetBdrElementAdjacentElement2", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementAdjacentElement2, METH_VARARGS|METH_KEYWORDS, "GetBdrElementAdjacentElement2(Mesh self, int bdr_el, int & el, int & info)"},
	 { "Mesh_GetElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementType, METH_VARARGS|METH_KEYWORDS, "GetElementType(Mesh self, int i) -> mfem::Element::Type"},
	 { "Mesh_GetBdrElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrElementType, METH_VARARGS|METH_KEYWORDS, "GetBdrElementType(Mesh self, int i) -> mfem::Element::Type"},
	 { "Mesh_GetPointMatrix", (PyCFunction)(void(*)(void))_wrap_Mesh_GetPointMatrix, METH_VARARGS|METH_KEYWORDS, "GetPointMatrix(Mesh self, int i, DenseMatrix pointmat)"},
	 { "Mesh_GetBdrPointMatrix", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrPointMatrix, METH_VARARGS|METH_KEYWORDS, "GetBdrPointMatrix(Mesh self, int i, DenseMatrix pointmat)"},
	 { "Mesh_GetTransformationFEforElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetTransformationFEforElementType, METH_VARARGS|METH_KEYWORDS, "GetTransformationFEforElementType(mfem::Element::Type arg1) -> FiniteElement"},
	 { "Mesh_GetElementTransformation", _wrap_Mesh_GetElementTransformation, METH_VARARGS, "\n"
		"GetElementTransformation(Mesh self, int i, IsoparametricTransformation ElTr)\n"
		"GetElementTransformation(Mesh self, int i) -> ElementTransformation\n"
		"GetElementTransformation(Mesh self, int i, Vector nodes, IsoparametricTransformation ElTr)\n"
		""},
	 { "Mesh_GetBdrElementTransformation", _wrap_Mesh_GetBdrElementTransformation, METH_VARARGS, "\n"
		"GetBdrElementTransformation(Mesh self, int i) -> ElementTransformation\n"
		"GetBdrElementTransformation(Mesh self, int i, IsoparametricTransformation ElTr)\n"
		""},
	 { "Mesh_GetLocalFaceTransformation", (PyCFunction)(void(*)(void))_wrap_Mesh_GetLocalFaceTransformation, METH_VARARGS|METH_KEYWORDS, "GetLocalFaceTransformation(Mesh self, int face_type, int elem_type, IsoparametricTransformation Transf, int info)"},
	 { "Mesh_GetFaceTransformation", _wrap_Mesh_GetFaceTransformation, METH_VARARGS, "\n"
		"GetFaceTransformation(Mesh self, int i, IsoparametricTransformation FTr)\n"
		"GetFaceTransformation(Mesh self, int FaceNo) -> ElementTransformation\n"
		""},
	 { "Mesh_GetEdgeTransformation", _wrap_Mesh_GetEdgeTransformation, METH_VARARGS, "\n"
		"GetEdgeTransformation(Mesh self, int i, IsoparametricTransformation EdTr)\n"
		"GetEdgeTransformation(Mesh self, int EdgeNo) -> ElementTransformation\n"
		""},
	 { "Mesh_GetFaceElementTransformations", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceElementTransformations, METH_VARARGS|METH_KEYWORDS, "GetFaceElementTransformations(Mesh self, int FaceNo, int mask=31) -> FaceElementTransformations"},
	 { "Mesh_GetInteriorFaceTransformations", (PyCFunction)(void(*)(void))_wrap_Mesh_GetInteriorFaceTransformations, METH_VARARGS|METH_KEYWORDS, "GetInteriorFaceTransformations(Mesh self, int FaceNo) -> FaceElementTransformations"},
	 { "Mesh_GetBdrFaceTransformations", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrFaceTransformations, METH_VARARGS|METH_KEYWORDS, "GetBdrFaceTransformations(Mesh self, int BdrElemNo) -> FaceElementTransformations"},
	 { "Mesh_GetBdrFace", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrFace, METH_VARARGS|METH_KEYWORDS, "GetBdrFace(Mesh self, int BdrElemNo) -> int"},
	 { "Mesh_FaceIsInterior", (PyCFunction)(void(*)(void))_wrap_Mesh_FaceIsInterior, METH_VARARGS|METH_KEYWORDS, "FaceIsInterior(Mesh self, int FaceNo) -> bool"},
	 { "Mesh_GetFaceInformation", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceInformation, METH_VARARGS|METH_KEYWORDS, "GetFaceInformation(Mesh self, int f) -> mfem::Mesh::FaceInformation"},
	 { "Mesh_GetFaceElements", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceElements, METH_VARARGS|METH_KEYWORDS, "GetFaceElements(Mesh self, int Face, int * Elem1, int * Elem2)"},
	 { "Mesh_GetFaceInfos", _wrap_Mesh_GetFaceInfos, METH_VARARGS, "\n"
		"GetFaceInfos(Mesh self, int Face, int * Inf1, int * Inf2)\n"
		"GetFaceInfos(Mesh self, int Face, int * Inf1, int * Inf2, int * NCFace)\n"
		""},
	 { "Mesh_GetFaceGeometryType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceGeometryType, METH_VARARGS|METH_KEYWORDS, "GetFaceGeometryType(Mesh self, int Face) -> mfem::Geometry::Type"},
	 { "Mesh_GetFaceElementType", (PyCFunction)(void(*)(void))_wrap_Mesh_GetFaceElementType, METH_VARARGS|METH_KEYWORDS, "GetFaceElementType(Mesh self, int Face) -> mfem::Element::Type"},
	 { "Mesh_GetFaceToBdrElMap", _wrap_Mesh_GetFaceToBdrElMap, METH_O, "GetFaceToBdrElMap(Mesh self) -> intArray"},
	 { "Mesh_CheckElementOrientation", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckElementOrientation, METH_VARARGS|METH_KEYWORDS, "CheckElementOrientation(Mesh self, bool fix_it=True) -> int"},
	 { "Mesh_CheckBdrElementOrientation", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckBdrElementOrientation, METH_VARARGS|METH_KEYWORDS, "CheckBdrElementOrientation(Mesh self, bool fix_it=True) -> int"},
	 { "Mesh_GetAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetAttribute, METH_VARARGS|METH_KEYWORDS, "GetAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetAttribute, METH_VARARGS|METH_KEYWORDS, "SetAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_GetBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrAttribute, METH_VARARGS|METH_KEYWORDS, "GetBdrAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetBdrAttribute, METH_VARARGS|METH_KEYWORDS, "SetBdrAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_GetPatchAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetPatchAttribute, METH_VARARGS|METH_KEYWORDS, "GetPatchAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetPatchAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetPatchAttribute, METH_VARARGS|METH_KEYWORDS, "SetPatchAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_GetPatchBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_GetPatchBdrAttribute, METH_VARARGS|METH_KEYWORDS, "GetPatchBdrAttribute(Mesh self, int i) -> int"},
	 { "Mesh_SetPatchBdrAttribute", (PyCFunction)(void(*)(void))_wrap_Mesh_SetPatchBdrAttribute, METH_VARARGS|METH_KEYWORDS, "SetPatchBdrAttribute(Mesh self, int i, int attr)"},
	 { "Mesh_ElementToElementTable", _wrap_Mesh_ElementToElementTable, METH_O, "ElementToElementTable(Mesh self) -> Table"},
	 { "Mesh_ElementToFaceTable", _wrap_Mesh_ElementToFaceTable, METH_O, "ElementToFaceTable(Mesh self) -> Table"},
	 { "Mesh_ElementToEdgeTable", _wrap_Mesh_ElementToEdgeTable, METH_O, "ElementToEdgeTable(Mesh self) -> Table"},
	 { "Mesh_GetVertexToElementTable", _wrap_Mesh_GetVertexToElementTable, METH_O, "GetVertexToElementTable(Mesh self) -> Table"},
	 { "Mesh_GetFaceToElementTable", _wrap_Mesh_GetFaceToElementTable, METH_O, "GetFaceToElementTable(Mesh self) -> Table"},
	 { "Mesh_ReorientTetMesh", _wrap_Mesh_ReorientTetMesh, METH_O, "ReorientTetMesh(Mesh self)"},
	 { "Mesh_CartesianPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_CartesianPartitioning, METH_VARARGS|METH_KEYWORDS, "CartesianPartitioning(Mesh self, int [] nxyz) -> int *"},
	 { "Mesh_GeneratePartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_GeneratePartitioning, METH_VARARGS|METH_KEYWORDS, "GeneratePartitioning(Mesh self, int nparts, int part_method=1) -> int *"},
	 { "Mesh_CheckPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckPartitioning, METH_VARARGS|METH_KEYWORDS, "CheckPartitioning(Mesh self, int * partitioning_)"},
	 { "Mesh_CheckDisplacements", (PyCFunction)(void(*)(void))_wrap_Mesh_CheckDisplacements, METH_VARARGS|METH_KEYWORDS, "CheckDisplacements(Mesh self, Vector displacements, double & tmax)"},
	 { "Mesh_MoveVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_MoveVertices, METH_VARARGS|METH_KEYWORDS, "MoveVertices(Mesh self, Vector displacements)"},
	 { "Mesh_GetVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_GetVertices, METH_VARARGS|METH_KEYWORDS, "GetVertices(Mesh self, Vector vert_coord)"},
	 { "Mesh_SetVertices", (PyCFunction)(void(*)(void))_wrap_Mesh_SetVertices, METH_VARARGS|METH_KEYWORDS, "SetVertices(Mesh self, Vector vert_coord)"},
	 { "Mesh_GetNode", (PyCFunction)(void(*)(void))_wrap_Mesh_GetNode, METH_VARARGS|METH_KEYWORDS, "GetNode(Mesh self, int i, double * coord)"},
	 { "Mesh_SetNode", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNode, METH_VARARGS|METH_KEYWORDS, "SetNode(Mesh self, int i, double const * coord)"},
	 { "Mesh_MoveNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_MoveNodes, METH_VARARGS|METH_KEYWORDS, "MoveNodes(Mesh self, Vector displacements)"},
	 { "Mesh_SetNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodes, METH_VARARGS|METH_KEYWORDS, "SetNodes(Mesh self, Vector node_coord)"},
	 { "Mesh_OwnsNodes", _wrap_Mesh_OwnsNodes, METH_O, "OwnsNodes(Mesh self) -> bool"},
	 { "Mesh_SetNodesOwner", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodesOwner, METH_VARARGS|METH_KEYWORDS, "SetNodesOwner(Mesh self, bool nodes_owner)"},
	 { "Mesh_NewNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_NewNodes, METH_VARARGS|METH_KEYWORDS, "NewNodes(Mesh self, GridFunction nodes, bool make_owner=False)"},
	 { "Mesh_SwapNodes", (PyCFunction)(void(*)(void))_wrap_Mesh_SwapNodes, METH_VARARGS|METH_KEYWORDS, "SwapNodes(Mesh self, mfem::GridFunction *& nodes, int & own_nodes_)"},
	 { "Mesh_GetNodes", _wrap_Mesh_GetNodes, METH_VARARGS, "\n"
		"GetNodes(Mesh self, Vector node_coord)\n"
		"GetNodes(Mesh self) -> GridFunction\n"
		"GetNodes(Mesh self) -> GridFunction\n"
		"GetNodes(Mesh self, GridFunction nodes)\n"
		""},
	 { "Mesh_SetNodalFESpace", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodalFESpace, METH_VARARGS|METH_KEYWORDS, "SetNodalFESpace(Mesh self, FiniteElementSpace nfes)"},
	 { "Mesh_SetNodalGridFunction", (PyCFunction)(void(*)(void))_wrap_Mesh_SetNodalGridFunction, METH_VARARGS|METH_KEYWORDS, "SetNodalGridFunction(Mesh self, GridFunction nodes, bool make_owner=False)"},
	 { "Mesh_GetNodalFESpace", _wrap_Mesh_GetNodalFESpace, METH_O, "GetNodalFESpace(Mesh self) -> FiniteElementSpace"},
	 { "Mesh_EnsureNodes", _wrap_Mesh_EnsureNodes, METH_O, "EnsureNodes(Mesh self)"},
	 { "Mesh_SetCurvature", (PyCFunction)(void(*)(void))_wrap_Mesh_SetCurvature, METH_VARARGS|METH_KEYWORDS, "SetCurvature(Mesh self, int order, bool discont=False, int space_dim=-1, int ordering=1)"},
	 { "Mesh_UniformRefinement", (PyCFunction)(void(*)(void))_wrap_Mesh_UniformRefinement, METH_VARARGS|METH_KEYWORDS, "UniformRefinement(Mesh self, int ref_algo=0)"},
	 { "Mesh_GeneralRefinement", _wrap_Mesh_GeneralRefinement, METH_VARARGS, "\n"
		"GeneralRefinement(Mesh self, RefinementArray refinements, int nonconforming=-1, int nc_limit=0)\n"
		"GeneralRefinement(Mesh self, intArray el_to_refine, int nonconforming=-1, int nc_limit=0)\n"
		""},
	 { "Mesh_RandomRefinement", (PyCFunction)(void(*)(void))_wrap_Mesh_RandomRefinement, METH_VARARGS|METH_KEYWORDS, "RandomRefinement(Mesh self, double prob, bool aniso=False, int nonconforming=-1, int nc_limit=0)"},
	 { "Mesh_RefineAtVertex", (PyCFunction)(void(*)(void))_wrap_Mesh_RefineAtVertex, METH_VARARGS|METH_KEYWORDS, "RefineAtVertex(Mesh self, Vertex vert, double eps=0.0, int nonconforming=-1)"},
	 { "Mesh_RefineByError", _wrap_Mesh_RefineByError, METH_VARARGS, "\n"
		"RefineByError(Mesh self, doubleArray elem_error, double threshold, int nonconforming=-1, int nc_limit=0) -> bool\n"
		"RefineByError(Mesh self, Vector elem_error, double threshold, int nonconforming=-1, int nc_limit=0) -> bool\n"
		""},
	 { "Mesh_DerefineByError", _wrap_Mesh_DerefineByError, METH_VARARGS, "\n"
		"DerefineByError(Mesh self, doubleArray elem_error, double threshold, int nc_limit=0, int op=1) -> bool\n"
		"DerefineByError(Mesh self, Vector elem_error, double threshold, int nc_limit=0, int op=1) -> bool\n"
		""},
	 { "Mesh_KnotInsert", _wrap_Mesh_KnotInsert, METH_VARARGS, "\n"
		"KnotInsert(Mesh self, mfem::Array< mfem::KnotVector * > & kv)\n"
		"KnotInsert(Mesh self, VectorPtrArray kv)\n"
		""},
	 { "Mesh_DegreeElevate", (PyCFunction)(void(*)(void))_wrap_Mesh_DegreeElevate, METH_VARARGS|METH_KEYWORDS, "DegreeElevate(Mesh self, int rel_degree, int degree=16)"},
	 { "Mesh_EnsureNCMesh", (PyCFunction)(void(*)(void))_wrap_Mesh_EnsureNCMesh, METH_VARARGS|METH_KEYWORDS, "EnsureNCMesh(Mesh self, bool simplices_nonconforming=False)"},
	 { "Mesh_Conforming", _wrap_Mesh_Conforming, METH_O, "Conforming(Mesh self) -> bool"},
	 { "Mesh_Nonconforming", _wrap_Mesh_Nonconforming, METH_O, "Nonconforming(Mesh self) -> bool"},
	 { "Mesh_GetRefinementTransforms", _wrap_Mesh_GetRefinementTransforms, METH_O, "GetRefinementTransforms(Mesh self) -> CoarseFineTransformations"},
	 { "Mesh_GetLastOperation", _wrap_Mesh_GetLastOperation, METH_O, "GetLastOperation(Mesh self) -> mfem::Mesh::Operation"},
	 { "Mesh_GetSequence", _wrap_Mesh_GetSequence, METH_O, "GetSequence(Mesh self) -> long"},
	 { "Mesh_Save", (PyCFunction)(void(*)(void))_wrap_Mesh_Save, METH_VARARGS|METH_KEYWORDS, "Save(Mesh self, char const * fname, int precision=16)"},
	 { "Mesh_PrintVTU", _wrap_Mesh_PrintVTU, METH_VARARGS, "\n"
		"PrintVTU(Mesh self, std::ostream & os, int ref=1, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0, bool bdr_elements=False)\n"
		"PrintVTU(Mesh self, std::string fname, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0, bool bdr=False)\n"
		""},
	 { "Mesh_PrintBdrVTU", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintBdrVTU, METH_VARARGS|METH_KEYWORDS, "PrintBdrVTU(Mesh self, std::string fname, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0)"},
	 { "Mesh_GetElementColoring", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementColoring, METH_VARARGS|METH_KEYWORDS, "GetElementColoring(Mesh self, intArray colors, int el0=0)"},
	 { "Mesh_PrintWithPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintWithPartitioning, METH_VARARGS|METH_KEYWORDS, "PrintWithPartitioning(Mesh self, int * partitioning, std::ostream & os, int elem_attr=0)"},
	 { "Mesh_PrintElementsWithPartitioning", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintElementsWithPartitioning, METH_VARARGS|METH_KEYWORDS, "PrintElementsWithPartitioning(Mesh self, int * partitioning, std::ostream & out, int interior_faces=0)"},
	 { "Mesh_PrintSurfaces", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintSurfaces, METH_VARARGS|METH_KEYWORDS, "PrintSurfaces(Mesh self, Table Aface_face, std::ostream & out)"},
	 { "Mesh_ScaleSubdomains", (PyCFunction)(void(*)(void))_wrap_Mesh_ScaleSubdomains, METH_VARARGS|METH_KEYWORDS, "ScaleSubdomains(Mesh self, double sf)"},
	 { "Mesh_ScaleElements", (PyCFunction)(void(*)(void))_wrap_Mesh_ScaleElements, METH_VARARGS|METH_KEYWORDS, "ScaleElements(Mesh self, double sf)"},
	 { "Mesh_Transform", _wrap_Mesh_Transform, METH_VARARGS, "\n"
		"Transform(Mesh self, void (*)(mfem::Vector const &,mfem::Vector &) f)\n"
		"Transform(Mesh self, VectorCoefficient deformation)\n"
		""},
	 { "Mesh_RemoveUnusedVertices", _wrap_Mesh_RemoveUnusedVertices, METH_O, "RemoveUnusedVertices(Mesh self)"},
	 { "Mesh_RemoveInternalBoundaries", _wrap_Mesh_RemoveInternalBoundaries, METH_O, "RemoveInternalBoundaries(Mesh self)"},
	 { "Mesh_GetElementSize", _wrap_Mesh_GetElementSize, METH_VARARGS, "\n"
		"GetElementSize(Mesh self, int i, int type=0) -> double\n"
		"GetElementSize(Mesh self, int i, Vector dir) -> double\n"
		""},
	 { "Mesh_GetElementVolume", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementVolume, METH_VARARGS|METH_KEYWORDS, "GetElementVolume(Mesh self, int i) -> double"},
	 { "Mesh_GetElementCenter", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementCenter, METH_VARARGS|METH_KEYWORDS, "GetElementCenter(Mesh self, int i, Vector center)"},
	 { "Mesh_GetBoundingBox", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBoundingBox, METH_VARARGS|METH_KEYWORDS, "GetBoundingBox(Mesh self, Vector min, Vector max, int ref=2)"},
	 { "Mesh_GetCharacteristics", (PyCFunction)(void(*)(void))_wrap_Mesh_GetCharacteristics, METH_VARARGS|METH_KEYWORDS, "GetCharacteristics(Mesh self, double & h_min, double & h_max, double & kappa_min, double & kappa_max, Vector Vh=None, Vector Vk=None)"},
	 { "Mesh_PrintElementsByGeometry", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintElementsByGeometry, METH_VARARGS|METH_KEYWORDS, "PrintElementsByGeometry(int dim, intArray num_elems_by_geom, std::ostream & out)"},
	 { "Mesh_PrintCharacteristics", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintCharacteristics, METH_VARARGS|METH_KEYWORDS, "PrintCharacteristics(Mesh self, Vector Vh=None, Vector Vk=None, std::ostream & os=out)"},
	 { "Mesh_FindPoints", (PyCFunction)(void(*)(void))_wrap_Mesh_FindPoints, METH_VARARGS|METH_KEYWORDS, "FindPoints(Mesh self, DenseMatrix point_mat, intArray elem_ids, IntegrationPointArray ips, bool warn=True, InverseElementTransformation inv_trans=None) -> int"},
	 { "Mesh_Swap", (PyCFunction)(void(*)(void))_wrap_Mesh_Swap, METH_VARARGS|METH_KEYWORDS, "Swap(Mesh self, Mesh other, bool non_geometry)"},
	 { "delete_Mesh", _wrap_delete_Mesh, METH_O, "delete_Mesh(Mesh self)"},
	 { "new_Mesh", _wrap_new_Mesh, METH_VARARGS, "\n"
		"Mesh()\n"
		"Mesh(Mesh mesh, bool copy_nodes=True)\n"
		"Mesh(Mesh mesh)\n"
		"Mesh(double * vertices, int num_vertices, int * element_indices, mfem::Geometry::Type element_type, int * element_attributes, int num_elements, int * boundary_indices, mfem::Geometry::Type boundary_type, int * boundary_attributes, int num_boundary_elements, int dimension, int space_dimension=-1)\n"
		"Mesh(int Dim_, int NVert, int NElem, int NBdrElem=0, int spaceDim_=-1)\n"
		"Mesh(int nx, int ny, int nz, mfem::Element::Type type, bool generate_edges=False, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True)\n"
		"Mesh(int nx, int ny, mfem::Element::Type type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True)\n"
		"Mesh(int n, double sx=1.0)\n"
		"Mesh(char const * filename, int generate_edges=0, int refine=1, bool fix_orientation=True)\n"
		"Mesh(std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True)\n"
		"Mesh(mfem::Mesh *[] mesh_array, int num_pieces)\n"
		"Mesh(Mesh orig_mesh, int ref_factor, int ref_type)\n"
		"Mesh(int nx, int ny, int nz, char const * type, bool generate_edges=False, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True)\n"
		"new_Mesh(int nx, int ny, char const * type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True) -> Mesh\n"
		""},
	 { "Mesh_MakeMerged", (PyCFunction)(void(*)(void))_wrap_Mesh_MakeMerged, METH_VARARGS|METH_KEYWORDS, "MakeMerged(PyObject * tuple_or_list) -> PyObject *"},
	 { "Mesh_PrintToFile", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintToFile, METH_VARARGS|METH_KEYWORDS, "PrintToFile(Mesh self, char const * mesh_file, int const precision)"},
	 { "Mesh_WriteToStream", (PyCFunction)(void(*)(void))_wrap_Mesh_WriteToStream, METH_VARARGS|METH_KEYWORDS, "WriteToStream(Mesh self, PyObject * StringIO) -> PyObject *"},
	 { "Mesh_GetAttributeArray", _wrap_Mesh_GetAttributeArray, METH_O, "GetAttributeArray(Mesh self) -> PyObject *"},
	 { "Mesh_GetVertexArray", _wrap_Mesh_GetVertexArray, METH_VARARGS, "\n"
		"GetVertexArray(Mesh self, int i) -> PyObject\n"
		"GetVertexArray(Mesh self) -> PyObject *\n"
		""},
	 { "Mesh_GetBdrElementFace", _wrap_Mesh_GetBdrElementFace, METH_VARARGS, "\n"
		"GetBdrElementFace(Mesh self, int i, int * f, int * o)\n"
		"GetBdrElementFace(Mesh self, int i) -> PyObject *\n"
		""},
	 { "Mesh_GetBdrAttributeArray", _wrap_Mesh_GetBdrAttributeArray, METH_O, "GetBdrAttributeArray(Mesh self) -> PyObject *"},
	 { "Mesh_GetBdrArray", (PyCFunction)(void(*)(void))_wrap_Mesh_GetBdrArray, METH_VARARGS|METH_KEYWORDS, "GetBdrArray(Mesh self, int idx) -> PyObject *"},
	 { "Mesh_GetDomainArray", (PyCFunction)(void(*)(void))_wrap_Mesh_GetDomainArray, METH_VARARGS|METH_KEYWORDS, "GetDomainArray(Mesh self, int idx) -> PyObject *"},
	 { "Mesh_GetElementCenterArray", (PyCFunction)(void(*)(void))_wrap_Mesh_GetElementCenterArray, METH_VARARGS|METH_KEYWORDS, "GetElementCenterArray(Mesh self, int idx) -> PyObject *"},
	 { "Mesh_GetScaledJacobian", (PyCFunction)(void(*)(void))_wrap_Mesh_GetScaledJacobian, METH_VARARGS|METH_KEYWORDS, "GetScaledJacobian(Mesh self, int i, int sd=2) -> double"},
	 { "Mesh_IsElementOnPlaneArray", (PyCFunction)(void(*)(void))_wrap_Mesh_IsElementOnPlaneArray, METH_VARARGS|METH_KEYWORDS, "IsElementOnPlaneArray(Mesh self, PyObject * aa, PyObject * bb, PyObject * cc, PyObject * dd) -> PyObject *"},
	 { "Mesh_PrintInfo", _wrap_Mesh_PrintInfo, METH_VARARGS, "\n"
		"PrintInfo(Mesh self, std::ostream & os=out)\n"
		"PrintInfo(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintInfoGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintInfoGZ, METH_VARARGS|METH_KEYWORDS, "PrintInfoGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_Print", _wrap_Mesh_Print, METH_VARARGS, "\n"
		"Print(Mesh self, std::ostream & os=out)\n"
		"Print(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintGZ, METH_VARARGS|METH_KEYWORDS, "PrintGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_PrintXG", _wrap_Mesh_PrintXG, METH_VARARGS, "\n"
		"PrintXG(Mesh self, std::ostream & os=out)\n"
		"PrintXG(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintXGGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintXGGZ, METH_VARARGS|METH_KEYWORDS, "PrintXGGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_PrintVTK", _wrap_Mesh_PrintVTK, METH_VARARGS, "\n"
		"PrintVTK(Mesh self, std::ostream & os)\n"
		"PrintVTK(Mesh self, std::ostream & os, int ref, int field_data=0)\n"
		"PrintVTK(Mesh self, char const * file, int precision=16)\n"
		""},
	 { "Mesh_PrintVTKGZ", (PyCFunction)(void(*)(void))_wrap_Mesh_PrintVTKGZ, METH_VARARGS|METH_KEYWORDS, "PrintVTKGZ(Mesh self, char const * file, int precision=16)"},
	 { "Mesh_swigregister", Mesh_swigregister, METH_O, NULL},
	 { "Mesh_swiginit", Mesh_swiginit, METH_VARARGS, NULL},
	 { "GeometricFactors_mesh_set", _wrap_GeometricFactors_mesh_set, METH_VARARGS, "GeometricFactors_mesh_set(GeometricFactors self, Mesh mesh)"},
	 { "GeometricFactors_mesh_get", _wrap_GeometricFactors_mesh_get, METH_O, "GeometricFactors_mesh_get(GeometricFactors self) -> Mesh"},
	 { "GeometricFactors_IntRule_set", _wrap_GeometricFactors_IntRule_set, METH_VARARGS, "GeometricFactors_IntRule_set(GeometricFactors self, IntegrationRule IntRule)"},
	 { "GeometricFactors_IntRule_get", _wrap_GeometricFactors_IntRule_get, METH_O, "GeometricFactors_IntRule_get(GeometricFactors self) -> IntegrationRule"},
	 { "GeometricFactors_computed_factors_set", _wrap_GeometricFactors_computed_factors_set, METH_VARARGS, "GeometricFactors_computed_factors_set(GeometricFactors self, int computed_factors)"},
	 { "GeometricFactors_computed_factors_get", _wrap_GeometricFactors_computed_factors_get, METH_O, "GeometricFactors_computed_factors_get(GeometricFactors self) -> int"},
	 { "new_GeometricFactors", _wrap_new_GeometricFactors, METH_VARARGS, "\n"
		"GeometricFactors(Mesh mesh, IntegrationRule ir, int flags, mfem::MemoryType d_mt=DEFAULT)\n"
		"new_GeometricFactors(GridFunction nodes, IntegrationRule ir, int flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors\n"
		""},
	 { "GeometricFactors_X_set", _wrap_GeometricFactors_X_set, METH_VARARGS, "GeometricFactors_X_set(GeometricFactors self, Vector X)"},
	 { "GeometricFactors_X_get", _wrap_GeometricFactors_X_get, METH_O, "GeometricFactors_X_get(GeometricFactors self) -> Vector"},
	 { "GeometricFactors_J_set", _wrap_GeometricFactors_J_set, METH_VARARGS, "GeometricFactors_J_set(GeometricFactors self, Vector J)"},
	 { "GeometricFactors_J_get", _wrap_GeometricFactors_J_get, METH_O, "GeometricFactors_J_get(GeometricFactors self) -> Vector"},
	 { "GeometricFactors_detJ_set", _wrap_GeometricFactors_detJ_set, METH_VARARGS, "GeometricFactors_detJ_set(GeometricFactors self, Vector detJ)"},
	 { "GeometricFactors_detJ_get", _wrap_GeometricFactors_detJ_get, METH_O, "GeometricFactors_detJ_get(GeometricFactors self) -> Vector"},
	 { "delete_GeometricFactors", _wrap_delete_GeometricFactors, METH_O, "delete_GeometricFactors(GeometricFactors self)"},
	 { "GeometricFactors_swigregister", GeometricFactors_swigregister, METH_O, NULL},
	 { "GeometricFactors_swiginit", GeometricFactors_swiginit, METH_VARARGS, NULL},
	 { "FaceGeometricFactors_mesh_set", _wrap_FaceGeometricFactors_mesh_set, METH_VARARGS, "FaceGeometricFactors_mesh_set(FaceGeometricFactors self, Mesh mesh)"},
	 { "FaceGeometricFactors_mesh_get", _wrap_FaceGeometricFactors_mesh_get, METH_O, "FaceGeometricFactors_mesh_get(FaceGeometricFactors self) -> Mesh"},
	 { "FaceGeometricFactors_IntRule_set", _wrap_FaceGeometricFactors_IntRule_set, METH_VARARGS, "FaceGeometricFactors_IntRule_set(FaceGeometricFactors self, IntegrationRule IntRule)"},
	 { "FaceGeometricFactors_IntRule_get", _wrap_FaceGeometricFactors_IntRule_get, METH_O, "FaceGeometricFactors_IntRule_get(FaceGeometricFactors self) -> IntegrationRule"},
	 { "FaceGeometricFactors_computed_factors_set", _wrap_FaceGeometricFactors_computed_factors_set, METH_VARARGS, "FaceGeometricFactors_computed_factors_set(FaceGeometricFactors self, int computed_factors)"},
	 { "FaceGeometricFactors_computed_factors_get", _wrap_FaceGeometricFactors_computed_factors_get, METH_O, "FaceGeometricFactors_computed_factors_get(FaceGeometricFactors self) -> int"},
	 { "FaceGeometricFactors_type_set", _wrap_FaceGeometricFactors_type_set, METH_VARARGS, "FaceGeometricFactors_type_set(FaceGeometricFactors self, mfem::FaceType type)"},
	 { "FaceGeometricFactors_type_get", _wrap_FaceGeometricFactors_type_get, METH_O, "FaceGeometricFactors_type_get(FaceGeometricFactors self) -> mfem::FaceType"},
	 { "new_FaceGeometricFactors", (PyCFunction)(void(*)(void))_wrap_new_FaceGeometricFactors, METH_VARARGS|METH_KEYWORDS, "new_FaceGeometricFactors(Mesh mesh, IntegrationRule ir, int flags, mfem::FaceType type, mfem::MemoryType d_mt=DEFAULT) -> FaceGeometricFactors"},
	 { "FaceGeometricFactors_X_set", _wrap_FaceGeometricFactors_X_set, METH_VARARGS, "FaceGeometricFactors_X_set(FaceGeometricFactors self, Vector X)"},
	 { "FaceGeometricFactors_X_get", _wrap_FaceGeometricFactors_X_get, METH_O, "FaceGeometricFactors_X_get(FaceGeometricFactors self) -> Vector"},
	 { "FaceGeometricFactors_J_set", _wrap_FaceGeometricFactors_J_set, METH_VARARGS, "FaceGeometricFactors_J_set(FaceGeometricFactors self, Vector J)"},
	 { "FaceGeometricFactors_J_get", _wrap_FaceGeometricFactors_J_get, METH_O, "FaceGeometricFactors_J_get(FaceGeometricFactors self) -> Vector"},
	 { "FaceGeometricFactors_detJ_set", _wrap_FaceGeometricFactors_detJ_set, METH_VARARGS, "FaceGeometricFactors_detJ_set(FaceGeometricFactors self, Vector detJ)"},
	 { "FaceGeometricFactors_detJ_get", _wrap_FaceGeometricFactors_detJ_get, METH_O, "FaceGeometricFactors_detJ_get(FaceGeometricFactors self) -> Vector"},
	 { "FaceGeometricFactors_normal_set", _wrap_FaceGeometricFactors_normal_set, METH_VARARGS, "FaceGeometricFactors_normal_set(FaceGeometricFactors self, Vector normal)"},
	 { "FaceGeometricFactors_normal_get", _wrap_FaceGeometricFactors_normal_get, METH_O, "FaceGeometricFactors_normal_get(FaceGeometricFactors self) -> Vector"},
	 { "delete_FaceGeometricFactors", _wrap_delete_FaceGeometricFactors, METH_O, "delete_FaceGeometricFactors(FaceGeometricFactors self)"},
	 { "FaceGeometricFactors_swigregister", FaceGeometricFactors_swigregister, METH_O, NULL},
	 { "FaceGeometricFactors_swiginit", FaceGeometricFactors_swiginit, METH_VARARGS, NULL},
	 { "NodeExtrudeCoefficient_SetLayer", (PyCFunction)(void(*)(void))_wrap_NodeExtrudeCoefficient_SetLayer, METH_VARARGS|METH_KEYWORDS, "SetLayer(NodeExtrudeCoefficient self, int const l)"},
	 { "NodeExtrudeCoefficient_Eval", _wrap_NodeExtrudeCoefficient_Eval, METH_VARARGS, "\n"
		"Eval(NodeExtrudeCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)\n"
		"Eval(NodeExtrudeCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)\n"
		""},
	 { "delete_NodeExtrudeCoefficient", _wrap_delete_NodeExtrudeCoefficient, METH_O, "delete_NodeExtrudeCoefficient(NodeExtrudeCoefficient self)"},
	 { "NodeExtrudeCoefficient_swigregister", NodeExtrudeCoefficient_swigregister, METH_O, NULL},
	 { "Extrude1D", (PyCFunction)(void(*)(void))_wrap_Extrude1D, METH_VARARGS|METH_KEYWORDS, "Extrude1D(Mesh mesh, int const ny, double const sy, bool const closed=False) -> Mesh"},
	 { "Extrude2D", (PyCFunction)(void(*)(void))_wrap_Extrude2D, METH_VARARGS|METH_KEYWORDS, "Extrude2D(Mesh mesh, int const nz, double const sz) -> Mesh"},
	 { "ShiftRight", (PyCFunction)(void(*)(void))_wrap_ShiftRight, METH_VARARGS|METH_KEYWORDS, "ShiftRight(int & a, int & b, int & c)"},
	 { "__lshift__", _wrap___lshift__, METH_VARARGS, "\n"
		"__lshift__(std::ostream & os, SparseMatrix mat) -> std::ostream\n"
		"__lshift__(std::ostream & out, GridFunction sol) -> std::ostream\n"
		"__lshift__(std::ostream & out, mfem::QuadratureFunction const & qf) -> std::ostream\n"
		"__lshift__(std::ostream & out, Mesh mesh) -> std::ostream\n"
		"__lshift__(std::ostream & os, mfem::Mesh::FaceInformation const & info) -> std::ostream &\n"
		""},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_mfem__IntegrationRuleTo_p_mfem__ArrayT_mfem__IntegrationPoint_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Array< mfem::IntegrationPoint > *)  ((mfem::IntegrationRule *) x));
}
static void *_p_ScalarNumbaCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *) (mfem::FunctionCoefficient *) ((ScalarNumbaCoefficient *) x));
}
static void *_p_mfem__ConstantCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ConstantCoefficient *) x));
}
static void *_p_mfem__DeltaCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DeltaCoefficient *) x));
}
static void *_p_mfem__DeterminantCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DeterminantCoefficient *) x));
}
static void *_p_mfem__DivergenceGridFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DivergenceGridFunctionCoefficient *) x));
}
static void *_p_mfem__ExtrudeCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ExtrudeCoefficient *) x));
}
static void *_p_mfem__FunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::FunctionCoefficient *) x));
}
static void *_p_mfem__GridFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::GridFunctionCoefficient *) x));
}
static void *_p_mfem__InnerProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::InnerProductCoefficient *) x));
}
static void *_p_mfem__PWCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PWCoefficient *) x));
}
static void *_p_mfem__PWConstCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PWConstCoefficient *) x));
}
static void *_p_mfem__PowerCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PowerCoefficient *) x));
}
static void *_p_mfem__ProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ProductCoefficient *) x));
}
static void *_p_mfem__PyCoefficientBaseTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *) (mfem::FunctionCoefficient *) ((mfem::PyCoefficientBase *) x));
}
static void *_p_mfem__QuadratureFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::QuadratureFunctionCoefficient *) x));
}
static void *_p_mfem__RatioCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::RatioCoefficient *) x));
}
static void *_p_mfem__RestrictedCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::RestrictedCoefficient *) x));
}
static void *_p_mfem__SumCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::SumCoefficient *) x));
}
static void *_p_mfem__TransformedCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::TransformedCoefficient *) x));
}
static void *_p_mfem__VectorRotProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::VectorRotProductCoefficient *) x));
}
static void *_p_mfem__FaceElementTransformationsTo_p_mfem__ElementTransformation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::ElementTransformation *) (mfem::IsoparametricTransformation *) ((mfem::FaceElementTransformations *) x));
}
static void *_p_mfem__IsoparametricTransformationTo_p_mfem__ElementTransformation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::ElementTransformation *)  ((mfem::IsoparametricTransformation *) x));
}
static void *_p_mfem__BiCubic2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::BiCubic2DFiniteElement *) x));
}
static void *_p_mfem__BiLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::BiLinear2DFiniteElement *) x));
}
static void *_p_mfem__BiQuad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::BiQuad2DFiniteElement *) x));
}
static void *_p_mfem__BiQuadPos2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::BiQuadPos2DFiniteElement *) x));
}
static void *_p_mfem__CrouzeixRaviartFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::CrouzeixRaviartFiniteElement *) x));
}
static void *_p_mfem__CrouzeixRaviartQuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::CrouzeixRaviartQuadFiniteElement *) x));
}
static void *_p_mfem__Cubic1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Cubic1DFiniteElement *) x));
}
static void *_p_mfem__Cubic2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Cubic2DFiniteElement *) x));
}
static void *_p_mfem__Cubic3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Cubic3DFiniteElement *) x));
}
static void *_p_mfem__GaussBiLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussBiLinear2DFiniteElement *) x));
}
static void *_p_mfem__GaussBiQuad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussBiQuad2DFiniteElement *) x));
}
static void *_p_mfem__GaussLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussLinear2DFiniteElement *) x));
}
static void *_p_mfem__GaussQuad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussQuad2DFiniteElement *) x));
}
static void *_p_mfem__H1Pos_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::H1Pos_HexahedronElement *) x));
}
static void *_p_mfem__H1Pos_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::H1Pos_QuadrilateralElement *) x));
}
static void *_p_mfem__H1Pos_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::H1Pos_SegmentElement *) x));
}
static void *_p_mfem__H1Pos_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::H1Pos_TetrahedronElement *) x));
}
static void *_p_mfem__H1Pos_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::H1Pos_TriangleElement *) x));
}
static void *_p_mfem__H1Pos_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::H1Pos_WedgeElement *) x));
}
static void *_p_mfem__H1Ser_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::H1Ser_QuadrilateralElement *) x));
}
static void *_p_mfem__H1_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::H1_HexahedronElement *) x));
}
static void *_p_mfem__H1_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::H1_QuadrilateralElement *) x));
}
static void *_p_mfem__H1_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::H1_SegmentElement *) x));
}
static void *_p_mfem__H1_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::H1_TetrahedronElement *) x));
}
static void *_p_mfem__H1_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::H1_TriangleElement *) x));
}
static void *_p_mfem__H1_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::H1_WedgeElement *) x));
}
static void *_p_mfem__L2Pos_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::L2Pos_HexahedronElement *) x));
}
static void *_p_mfem__L2Pos_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::L2Pos_QuadrilateralElement *) x));
}
static void *_p_mfem__L2Pos_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::L2Pos_SegmentElement *) x));
}
static void *_p_mfem__L2Pos_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::L2Pos_TetrahedronElement *) x));
}
static void *_p_mfem__L2Pos_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::L2Pos_TriangleElement *) x));
}
static void *_p_mfem__L2Pos_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::L2Pos_WedgeElement *) x));
}
static void *_p_mfem__L2_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::L2_HexahedronElement *) x));
}
static void *_p_mfem__L2_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::L2_QuadrilateralElement *) x));
}
static void *_p_mfem__L2_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::L2_SegmentElement *) x));
}
static void *_p_mfem__L2_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::L2_TetrahedronElement *) x));
}
static void *_p_mfem__L2_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::L2_TriangleElement *) x));
}
static void *_p_mfem__L2_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::L2_WedgeElement *) x));
}
static void *_p_mfem__Lagrange1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Lagrange1DFiniteElement *) x));
}
static void *_p_mfem__LagrangeHexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::LagrangeHexFiniteElement *) x));
}
static void *_p_mfem__Linear1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Linear1DFiniteElement *) x));
}
static void *_p_mfem__Linear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Linear2DFiniteElement *) x));
}
static void *_p_mfem__Linear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Linear3DFiniteElement *) x));
}
static void *_p_mfem__LinearPyramidFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::LinearPyramidFiniteElement *) x));
}
static void *_p_mfem__LinearWedgeFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::LinearWedgeFiniteElement *) x));
}
static void *_p_mfem__ND_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::ND_HexahedronElement *) x));
}
static void *_p_mfem__ND_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::ND_QuadrilateralElement *) x));
}
static void *_p_mfem__ND_R1D_PointElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R1D_PointElement *) x));
}
static void *_p_mfem__ND_R1D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R1D_SegmentElement *) x));
}
static void *_p_mfem__ND_R2D_FiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R2D_FiniteElement *) x));
}
static void *_p_mfem__ND_R2D_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::ND_R2D_FiniteElement *) ((mfem::ND_R2D_QuadrilateralElement *) x));
}
static void *_p_mfem__ND_R2D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R2D_SegmentElement *) x));
}
static void *_p_mfem__ND_R2D_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::ND_R2D_FiniteElement *) ((mfem::ND_R2D_TriangleElement *) x));
}
static void *_p_mfem__ND_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::ND_SegmentElement *) x));
}
static void *_p_mfem__ND_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_TetrahedronElement *) x));
}
static void *_p_mfem__ND_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_TriangleElement *) x));
}
static void *_p_mfem__ND_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_WedgeElement *) x));
}
static void *_p_mfem__NURBS1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NURBSFiniteElement *) ((mfem::NURBS1DFiniteElement *) x));
}
static void *_p_mfem__NURBS2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NURBSFiniteElement *) ((mfem::NURBS2DFiniteElement *) x));
}
static void *_p_mfem__NURBS3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NURBSFiniteElement *) ((mfem::NURBS3DFiniteElement *) x));
}
static void *_p_mfem__NURBSFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::NURBSFiniteElement *) x));
}
static void *_p_mfem__Nedelec1HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1HexFiniteElement *) x));
}
static void *_p_mfem__Nedelec1PyrFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1PyrFiniteElement *) x));
}
static void *_p_mfem__Nedelec1TetFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1TetFiniteElement *) x));
}
static void *_p_mfem__Nedelec1WdgFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1WdgFiniteElement *) x));
}
static void *_p_mfem__NodalFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::NodalFiniteElement *) x));
}
static void *_p_mfem__NodalTensorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::NodalTensorFiniteElement *) x));
}
static void *_p_mfem__P0HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0HexFiniteElement *) x));
}
static void *_p_mfem__P0PyrFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0PyrFiniteElement *) x));
}
static void *_p_mfem__P0QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0QuadFiniteElement *) x));
}
static void *_p_mfem__P0SegmentFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0SegmentFiniteElement *) x));
}
static void *_p_mfem__P0TetFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0TetFiniteElement *) x));
}
static void *_p_mfem__P0TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0TriangleFiniteElement *) x));
}
static void *_p_mfem__P0WdgFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0WdgFiniteElement *) x));
}
static void *_p_mfem__P1OnQuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P1OnQuadFiniteElement *) x));
}
static void *_p_mfem__P1SegmentFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P1SegmentFiniteElement *) x));
}
static void *_p_mfem__P1TetNonConfFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P1TetNonConfFiniteElement *) x));
}
static void *_p_mfem__P2SegmentFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P2SegmentFiniteElement *) x));
}
static void *_p_mfem__PointFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::PointFiniteElement *) x));
}
static void *_p_mfem__PositiveFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::PositiveFiniteElement *) x));
}
static void *_p_mfem__PositiveTensorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::PositiveTensorFiniteElement *) x));
}
static void *_p_mfem__Quad1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Quad1DFiniteElement *) x));
}
static void *_p_mfem__Quad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Quad2DFiniteElement *) x));
}
static void *_p_mfem__QuadPos1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::QuadPos1DFiniteElement *) x));
}
static void *_p_mfem__Quadratic3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Quadratic3DFiniteElement *) x));
}
static void *_p_mfem__RT0HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0HexFiniteElement *) x));
}
static void *_p_mfem__RT0PyrFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0PyrFiniteElement *) x));
}
static void *_p_mfem__RT0QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0QuadFiniteElement *) x));
}
static void *_p_mfem__RT0TetFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0TetFiniteElement *) x));
}
static void *_p_mfem__RT0TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0TriangleFiniteElement *) x));
}
static void *_p_mfem__RT0WdgFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0WdgFiniteElement *) x));
}
static void *_p_mfem__RT1HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT1HexFiniteElement *) x));
}
static void *_p_mfem__RT1QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT1QuadFiniteElement *) x));
}
static void *_p_mfem__RT1TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT1TriangleFiniteElement *) x));
}
static void *_p_mfem__RT2QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT2QuadFiniteElement *) x));
}
static void *_p_mfem__RT2TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT2TriangleFiniteElement *) x));
}
static void *_p_mfem__RT_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::RT_HexahedronElement *) x));
}
static void *_p_mfem__RT_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::RT_QuadrilateralElement *) x));
}
static void *_p_mfem__RT_R1D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_R1D_SegmentElement *) x));
}
static void *_p_mfem__RT_R2D_FiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_R2D_FiniteElement *) x));
}
static void *_p_mfem__RT_R2D_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::RT_R2D_FiniteElement *) ((mfem::RT_R2D_QuadrilateralElement *) x));
}
static void *_p_mfem__RT_R2D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_R2D_SegmentElement *) x));
}
static void *_p_mfem__RT_R2D_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::RT_R2D_FiniteElement *) ((mfem::RT_R2D_TriangleElement *) x));
}
static void *_p_mfem__RT_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_TetrahedronElement *) x));
}
static void *_p_mfem__RT_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_TriangleElement *) x));
}
static void *_p_mfem__RT_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_WedgeElement *) x));
}
static void *_p_mfem__RefinedBiLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedBiLinear2DFiniteElement *) x));
}
static void *_p_mfem__RefinedLinear1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedLinear1DFiniteElement *) x));
}
static void *_p_mfem__RefinedLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedLinear2DFiniteElement *) x));
}
static void *_p_mfem__RefinedLinear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedLinear3DFiniteElement *) x));
}
static void *_p_mfem__RefinedTriLinear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedTriLinear3DFiniteElement *) x));
}
static void *_p_mfem__RotTriLinearHexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RotTriLinearHexFiniteElement *) x));
}
static void *_p_mfem__ScalarFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *)  ((mfem::ScalarFiniteElement *) x));
}
static void *_p_mfem__TriLinear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::TriLinear3DFiniteElement *) x));
}
static void *_p_mfem__VectorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *)  ((mfem::VectorFiniteElement *) x));
}
static void *_p_mfem__VectorTensorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::VectorTensorFiniteElement *) x));
}
static void *_p_mfem__FaceElementTransformationsTo_p_mfem__IsoparametricTransformation(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::IsoparametricTransformation *)  ((mfem::FaceElementTransformations *) x));
}
static void *_p_MatrixNumbaCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::MatrixFunctionCoefficient *) ((MatrixNumbaCoefficient *) x));
}
static void *_p_mfem__CrossCrossCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::CrossCrossCoefficient *) x));
}
static void *_p_mfem__IdentityMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::IdentityMatrixCoefficient *) x));
}
static void *_p_mfem__InverseMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::InverseMatrixCoefficient *) x));
}
static void *_p_mfem__MatrixArrayCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixArrayCoefficient *) x));
}
static void *_p_mfem__MatrixConstantCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixConstantCoefficient *) x));
}
static void *_p_mfem__MatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixFunctionCoefficient *) x));
}
static void *_p_mfem__MatrixProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixProductCoefficient *) x));
}
static void *_p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::MatrixFunctionCoefficient *) ((mfem::MatrixPyCoefficientBase *) x));
}
static void *_p_mfem__MatrixRestrictedCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixRestrictedCoefficient *) x));
}
static void *_p_mfem__MatrixSumCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixSumCoefficient *) x));
}
static void *_p_mfem__OuterProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::OuterProductCoefficient *) x));
}
static void *_p_mfem__PWMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::PWMatrixCoefficient *) x));
}
static void *_p_mfem__ScalarMatrixProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::ScalarMatrixProductCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::SymmetricMatrixCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::SymmetricMatrixCoefficient *) ((mfem::SymmetricMatrixConstantCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::SymmetricMatrixCoefficient *) ((mfem::SymmetricMatrixFunctionCoefficient *) x));
}
static void *_p_mfem__TransposeMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::TransposeMatrixCoefficient *) x));
}
static void *_p_mfem__AbstractSparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::AbstractSparseMatrix *) x));
}
static void *_p_mfem__ConformingFaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::FaceRestriction *) ((mfem::ConformingFaceRestriction *) x));
}
static void *_p_mfem__ConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ConstrainedOperator *) x));
}
static void *_p_mfem__DenseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseMatrix *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__DenseSymmetricMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseSymmetricMatrix *) x));
}
static void *_p_mfem__ElementRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::ElementRestrictionOperator *) ((mfem::ElementRestriction *) x));
}
static void *_p_mfem__ElementRestrictionOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ElementRestrictionOperator *) x));
}
static void *_p_mfem__FaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::FaceRestriction *) x));
}
static void *_p_mfem__IdentityOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::IdentityOperator *) x));
}
static void *_p_mfem__L2ElementRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::ElementRestrictionOperator *) ((mfem::L2ElementRestriction *) x));
}
static void *_p_mfem__L2FaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::FaceRestriction *) ((mfem::L2FaceRestriction *) x));
}
static void *_p_mfem__MatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Matrix *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *) ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__NCL2FaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::FaceRestriction *)(mfem::L2FaceRestriction *) ((mfem::NCL2FaceRestriction *) x));
}
static void *_p_mfem__ProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ProductOperator *) x));
}
static void *_p_mfem__PyOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::PyOperatorBase *) x));
}
static void *_p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase *) x));
}
static void *_p_mfem__RAPOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RAPOperator *) x));
}
static void *_p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RectangularConstrainedOperator *) x));
}
static void *_p_mfem__ScaledOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ScaledOperator *) x));
}
static void *_p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator *) x));
}
static void *_p_mfem__SolverTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Solver *) x));
}
static void *_p_mfem__SparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *)(mfem::AbstractSparseMatrix *) ((mfem::SparseMatrix *) x));
}
static void *_p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator *) x));
}
static void *_p_mfem__TimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TimeDependentOperator *) x));
}
static void *_p_mfem__TransposeOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TransposeOperator *) x));
}
static void *_p_mfem__TripleProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TripleProductOperator *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *)  ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__STableTo_p_mfem__Table(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Table *)  ((mfem::STable *) x));
}
static void *_p_mfem__CoefficientVectorTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::CoefficientVector *) x));
}
static void *_p_mfem__GridFunctionTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::GridFunction *) x));
}
static void *_p_mfem__LinearFormTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::LinearForm *) x));
}
static void *_p_VectorNumbaCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *) (mfem::VectorFunctionCoefficient *) ((VectorNumbaCoefficient *) x));
}
static void *_p_mfem__CurlGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::CurlGridFunctionCoefficient *) x));
}
static void *_p_mfem__GradientGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::GradientGridFunctionCoefficient *) x));
}
static void *_p_mfem__MatrixVectorProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::MatrixVectorProductCoefficient *) x));
}
static void *_p_mfem__NodeExtrudeCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::NodeExtrudeCoefficient *) x));
}
static void *_p_mfem__NormalizedVectorCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::NormalizedVectorCoefficient *) x));
}
static void *_p_mfem__PWVectorCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::PWVectorCoefficient *) x));
}
static void *_p_mfem__ScalarVectorProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::ScalarVectorProductCoefficient *) x));
}
static void *_p_mfem__VectorArrayCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorArrayCoefficient *) x));
}
static void *_p_mfem__VectorConstantCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorConstantCoefficient *) x));
}
static void *_p_mfem__VectorCrossProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorCrossProductCoefficient *) x));
}
static void *_p_mfem__VectorDeltaCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorDeltaCoefficient *) x));
}
static void *_p_mfem__VectorFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorFunctionCoefficient *) x));
}
static void *_p_mfem__VectorGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorGridFunctionCoefficient *) x));
}
static void *_p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *) (mfem::VectorFunctionCoefficient *) ((mfem::VectorPyCoefficientBase *) x));
}
static void *_p_mfem__VectorQuadratureFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorQuadratureFunctionCoefficient *) x));
}
static void *_p_mfem__VectorRestrictedCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorRestrictedCoefficient *) x));
}
static void *_p_mfem__VectorSumCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorSumCoefficient *) x));
}
static void *_p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::AbstractSparseMatrix **) x));
}
static void *_p_p_mfem__ConformingFaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::FaceRestriction *) ((mfem::ConformingFaceRestriction **) x));
}
static void *_p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ConstrainedOperator **) x));
}
static void *_p_p_mfem__DenseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseMatrix **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__DenseSymmetricMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseSymmetricMatrix **) x));
}
static void *_p_p_mfem__ElementRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::ElementRestrictionOperator *) ((mfem::ElementRestriction **) x));
}
static void *_p_p_mfem__ElementRestrictionOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ElementRestrictionOperator **) x));
}
static void *_p_p_mfem__FaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::FaceRestriction **) x));
}
static void *_p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::IdentityOperator **) x));
}
static void *_p_p_mfem__L2ElementRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::ElementRestrictionOperator *) ((mfem::L2ElementRestriction **) x));
}
static void *_p_p_mfem__L2FaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::FaceRestriction *) ((mfem::L2FaceRestriction **) x));
}
static void *_p_p_mfem__MatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Matrix **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *) ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__NCL2FaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::FaceRestriction *)(mfem::L2FaceRestriction *) ((mfem::NCL2FaceRestriction **) x));
}
static void *_p_p_mfem__ProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ProductOperator **) x));
}
static void *_p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::PyOperatorBase **) x));
}
static void *_p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase **) x));
}
static void *_p_p_mfem__RAPOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RAPOperator **) x));
}
static void *_p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RectangularConstrainedOperator **) x));
}
static void *_p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ScaledOperator **) x));
}
static void *_p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator **) x));
}
static void *_p_p_mfem__SolverTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Solver **) x));
}
static void *_p_p_mfem__SparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *)(mfem::AbstractSparseMatrix *) ((mfem::SparseMatrix **) x));
}
static void *_p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator **) x));
}
static void *_p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TimeDependentOperator **) x));
}
static void *_p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TransposeOperator **) x));
}
static void *_p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TripleProductOperator **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **)  ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__CoefficientVectorTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::CoefficientVector **) x));
}
static void *_p_p_mfem__GridFunctionTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::GridFunction **) x));
}
static void *_p_p_mfem__LinearFormTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::LinearForm **) x));
}
static void *_p_mfem__OutStreamTo_p_std__ostream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ostream *)  ((mfem::OutStream *) x));
}
static swig_type_info _swigt___input = {"__input", "$input", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixNumbaCoefficient = {"_p_MatrixNumbaCoefficient", "MatrixNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyMFEM__wFILE = {"_p_PyMFEM__wFILE", "PyMFEM::wFILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefCoord = {"_p_RefCoord", "RefCoord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScalarNumbaCoefficient = {"_p_ScalarNumbaCoefficient", "ScalarNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorNumbaCoefficient = {"_p_VectorNumbaCoefficient", "VectorNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__mfem__Vector_r_mfem__Vector__void = {"_p_f_r_q_const__mfem__Vector_r_mfem__Vector__void", "void (*)(mfem::Vector const &,mfem::Vector &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hex_t = {"_p_hex_t", "hex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_double_t = {"_p_mfem__ArrayT_double_t", "mfem::Array< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_int_t = {"_p_mfem__ArrayT_int_t", "mfem::Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t = {"_p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t", "mfem::Array< mfem::FaceGeometricFactors * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__GeometricFactors_p_t = {"_p_mfem__ArrayT_mfem__GeometricFactors_p_t", "mfem::Array< mfem::GeometricFactors * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__Geometry__Type_t = {"_p_mfem__ArrayT_mfem__Geometry__Type_t", "mfem::Array< mfem::Geometry::Type > *|mfem::Array< enum mfem::Geometry::Type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__IntegrationPoint_t = {"_p_mfem__ArrayT_mfem__IntegrationPoint_t", "mfem::Array< mfem::IntegrationPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__KnotVector_p_t = {"_p_mfem__ArrayT_mfem__KnotVector_p_t", "mfem::Array< mfem::KnotVector * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__Refinement_t = {"_p_mfem__ArrayT_mfem__Refinement_t", "mfem::Array< mfem::Refinement > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_mfem__Vector_p_t = {"_p_mfem__ArrayT_mfem__Vector_p_t", "mfem::Array< mfem::Vector * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CoarseFineTransformations = {"_p_mfem__CoarseFineTransformations", "mfem::CoarseFineTransformations *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Coefficient = {"_p_mfem__Coefficient", "mfem::Coefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ConstantCoefficient = {"_p_mfem__ConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DeltaCoefficient = {"_p_mfem__DeltaCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DeterminantCoefficient = {"_p_mfem__DeterminantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DivergenceGridFunctionCoefficient = {"_p_mfem__DivergenceGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ExtrudeCoefficient = {"_p_mfem__ExtrudeCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FunctionCoefficient = {"_p_mfem__FunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GridFunctionCoefficient = {"_p_mfem__GridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__InnerProductCoefficient = {"_p_mfem__InnerProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWCoefficient = {"_p_mfem__PWCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWConstCoefficient = {"_p_mfem__PWConstCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PowerCoefficient = {"_p_mfem__PowerCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ProductCoefficient = {"_p_mfem__ProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyCoefficientBase = {"_p_mfem__PyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__QuadratureFunctionCoefficient = {"_p_mfem__QuadratureFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RatioCoefficient = {"_p_mfem__RatioCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RestrictedCoefficient = {"_p_mfem__RestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SumCoefficient = {"_p_mfem__SumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransformedCoefficient = {"_p_mfem__TransformedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorRotProductCoefficient = {"_p_mfem__VectorRotProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ConformingFaceRestriction = {"_p_mfem__ConformingFaceRestriction", "mfem::H1FaceRestriction *|mfem::ConformingFaceRestriction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ConvectionIntegrator = {"_p_mfem__ConvectionIntegrator", "mfem::NonconservativeConvectionIntegrator *|mfem::ConvectionIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DGTraceIntegrator = {"_p_mfem__DGTraceIntegrator", "mfem::ConservativeDGTraceIntegrator *|mfem::DGTraceIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DSTable = {"_p_mfem__DSTable", "mfem::DSTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrix = {"_p_mfem__DenseMatrix", "mfem::DenseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Element = {"_p_mfem__Element", "mfem::Element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ElementTransformation = {"_p_mfem__ElementTransformation", "mfem::ElementTransformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__FaceElementTransformations = {"_p_mfem__FaceElementTransformations", "mfem::FaceElementTransformations *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__FaceGeometricFactors = {"_p_mfem__FaceGeometricFactors", "mfem::FaceGeometricFactors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__FiniteElement = {"_p_mfem__FiniteElement", "mfem::FiniteElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__BiCubic2DFiniteElement = {"_p_mfem__BiCubic2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__BiLinear2DFiniteElement = {"_p_mfem__BiLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__BiQuad2DFiniteElement = {"_p_mfem__BiQuad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__BiQuadPos2DFiniteElement = {"_p_mfem__BiQuadPos2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__CrouzeixRaviartFiniteElement = {"_p_mfem__CrouzeixRaviartFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__CrouzeixRaviartQuadFiniteElement = {"_p_mfem__CrouzeixRaviartQuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Cubic1DFiniteElement = {"_p_mfem__Cubic1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Cubic2DFiniteElement = {"_p_mfem__Cubic2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Cubic3DFiniteElement = {"_p_mfem__Cubic3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussBiLinear2DFiniteElement = {"_p_mfem__GaussBiLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussBiQuad2DFiniteElement = {"_p_mfem__GaussBiQuad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussLinear2DFiniteElement = {"_p_mfem__GaussLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussQuad2DFiniteElement = {"_p_mfem__GaussQuad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_HexahedronElement = {"_p_mfem__H1Pos_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_QuadrilateralElement = {"_p_mfem__H1Pos_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_SegmentElement = {"_p_mfem__H1Pos_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_TetrahedronElement = {"_p_mfem__H1Pos_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_TriangleElement = {"_p_mfem__H1Pos_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_WedgeElement = {"_p_mfem__H1Pos_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Ser_QuadrilateralElement = {"_p_mfem__H1Ser_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_HexahedronElement = {"_p_mfem__H1_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_QuadrilateralElement = {"_p_mfem__H1_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_SegmentElement = {"_p_mfem__H1_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_TetrahedronElement = {"_p_mfem__H1_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_TriangleElement = {"_p_mfem__H1_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_WedgeElement = {"_p_mfem__H1_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_HexahedronElement = {"_p_mfem__L2Pos_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_QuadrilateralElement = {"_p_mfem__L2Pos_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_SegmentElement = {"_p_mfem__L2Pos_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_TetrahedronElement = {"_p_mfem__L2Pos_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_TriangleElement = {"_p_mfem__L2Pos_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_WedgeElement = {"_p_mfem__L2Pos_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_HexahedronElement = {"_p_mfem__L2_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_QuadrilateralElement = {"_p_mfem__L2_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_SegmentElement = {"_p_mfem__L2_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_TetrahedronElement = {"_p_mfem__L2_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_TriangleElement = {"_p_mfem__L2_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_WedgeElement = {"_p_mfem__L2_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Lagrange1DFiniteElement = {"_p_mfem__Lagrange1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LagrangeHexFiniteElement = {"_p_mfem__LagrangeHexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Linear1DFiniteElement = {"_p_mfem__Linear1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Linear2DFiniteElement = {"_p_mfem__Linear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Linear3DFiniteElement = {"_p_mfem__Linear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LinearPyramidFiniteElement = {"_p_mfem__LinearPyramidFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LinearWedgeFiniteElement = {"_p_mfem__LinearWedgeFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_HexahedronElement = {"_p_mfem__ND_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_QuadrilateralElement = {"_p_mfem__ND_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R1D_PointElement = {"_p_mfem__ND_R1D_PointElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R1D_SegmentElement = {"_p_mfem__ND_R1D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_FiniteElement = {"_p_mfem__ND_R2D_FiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_QuadrilateralElement = {"_p_mfem__ND_R2D_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_SegmentElement = {"_p_mfem__ND_R2D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_TriangleElement = {"_p_mfem__ND_R2D_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_SegmentElement = {"_p_mfem__ND_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_TetrahedronElement = {"_p_mfem__ND_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_TriangleElement = {"_p_mfem__ND_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_WedgeElement = {"_p_mfem__ND_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBS1DFiniteElement = {"_p_mfem__NURBS1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBS2DFiniteElement = {"_p_mfem__NURBS2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBS3DFiniteElement = {"_p_mfem__NURBS3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBSFiniteElement = {"_p_mfem__NURBSFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1HexFiniteElement = {"_p_mfem__Nedelec1HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1PyrFiniteElement = {"_p_mfem__Nedelec1PyrFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1TetFiniteElement = {"_p_mfem__Nedelec1TetFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1WdgFiniteElement = {"_p_mfem__Nedelec1WdgFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NodalFiniteElement = {"_p_mfem__NodalFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NodalTensorFiniteElement = {"_p_mfem__NodalTensorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0HexFiniteElement = {"_p_mfem__P0HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0PyrFiniteElement = {"_p_mfem__P0PyrFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0QuadFiniteElement = {"_p_mfem__P0QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0SegmentFiniteElement = {"_p_mfem__P0SegmentFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0TetFiniteElement = {"_p_mfem__P0TetFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0TriangleFiniteElement = {"_p_mfem__P0TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0WdgFiniteElement = {"_p_mfem__P0WdgFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P1OnQuadFiniteElement = {"_p_mfem__P1OnQuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P1SegmentFiniteElement = {"_p_mfem__P1SegmentFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P1TetNonConfFiniteElement = {"_p_mfem__P1TetNonConfFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P2SegmentFiniteElement = {"_p_mfem__P2SegmentFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PointFiniteElement = {"_p_mfem__PointFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PositiveFiniteElement = {"_p_mfem__PositiveFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PositiveTensorFiniteElement = {"_p_mfem__PositiveTensorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Quad1DFiniteElement = {"_p_mfem__Quad1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Quad2DFiniteElement = {"_p_mfem__Quad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__QuadPos1DFiniteElement = {"_p_mfem__QuadPos1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Quadratic3DFiniteElement = {"_p_mfem__Quadratic3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0HexFiniteElement = {"_p_mfem__RT0HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0PyrFiniteElement = {"_p_mfem__RT0PyrFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0QuadFiniteElement = {"_p_mfem__RT0QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0TetFiniteElement = {"_p_mfem__RT0TetFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0TriangleFiniteElement = {"_p_mfem__RT0TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0WdgFiniteElement = {"_p_mfem__RT0WdgFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT1HexFiniteElement = {"_p_mfem__RT1HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT1QuadFiniteElement = {"_p_mfem__RT1QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT1TriangleFiniteElement = {"_p_mfem__RT1TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT2QuadFiniteElement = {"_p_mfem__RT2QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT2TriangleFiniteElement = {"_p_mfem__RT2TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_HexahedronElement = {"_p_mfem__RT_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_QuadrilateralElement = {"_p_mfem__RT_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R1D_SegmentElement = {"_p_mfem__RT_R1D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_FiniteElement = {"_p_mfem__RT_R2D_FiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_QuadrilateralElement = {"_p_mfem__RT_R2D_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_SegmentElement = {"_p_mfem__RT_R2D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_TriangleElement = {"_p_mfem__RT_R2D_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_TetrahedronElement = {"_p_mfem__RT_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_TriangleElement = {"_p_mfem__RT_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_WedgeElement = {"_p_mfem__RT_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedBiLinear2DFiniteElement = {"_p_mfem__RefinedBiLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinear1DFiniteElement = {"_p_mfem__RefinedLinear1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinear2DFiniteElement = {"_p_mfem__RefinedLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinear3DFiniteElement = {"_p_mfem__RefinedLinear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedTriLinear3DFiniteElement = {"_p_mfem__RefinedTriLinear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RotTriLinearHexFiniteElement = {"_p_mfem__RotTriLinearHexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScalarFiniteElement = {"_p_mfem__ScalarFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TriLinear3DFiniteElement = {"_p_mfem__TriLinear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorFiniteElement = {"_p_mfem__VectorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorTensorFiniteElement = {"_p_mfem__VectorTensorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FiniteElementSpace = {"_p_mfem__FiniteElementSpace", "mfem::FiniteElementSpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GeometricFactors = {"_p_mfem__GeometricFactors", "mfem::GeometricFactors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GridFunction = {"_p_mfem__GridFunction", "mfem::GridFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IntegrationPoint = {"_p_mfem__IntegrationPoint", "mfem::IntegrationPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IntegrationRule = {"_p_mfem__IntegrationRule", "mfem::IntegrationRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__InverseElementTransformation = {"_p_mfem__InverseElementTransformation", "mfem::InverseElementTransformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IsoparametricTransformation = {"_p_mfem__IsoparametricTransformation", "mfem::IsoparametricTransformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__L2_FECollection = {"_p_mfem__L2_FECollection", "mfem::DG_FECollection *|mfem::L2_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixCoefficient = {"_p_mfem__MatrixCoefficient", "mfem::MatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CrossCrossCoefficient = {"_p_mfem__CrossCrossCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IdentityMatrixCoefficient = {"_p_mfem__IdentityMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__InverseMatrixCoefficient = {"_p_mfem__InverseMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixArrayCoefficient = {"_p_mfem__MatrixArrayCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixConstantCoefficient = {"_p_mfem__MatrixConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixFunctionCoefficient = {"_p_mfem__MatrixFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixProductCoefficient = {"_p_mfem__MatrixProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixPyCoefficientBase = {"_p_mfem__MatrixPyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixRestrictedCoefficient = {"_p_mfem__MatrixRestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixSumCoefficient = {"_p_mfem__MatrixSumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__OuterProductCoefficient = {"_p_mfem__OuterProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWMatrixCoefficient = {"_p_mfem__PWMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScalarMatrixProductCoefficient = {"_p_mfem__ScalarMatrixProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixCoefficient = {"_p_mfem__SymmetricMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixConstantCoefficient = {"_p_mfem__SymmetricMatrixConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixFunctionCoefficient = {"_p_mfem__SymmetricMatrixFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransposeMatrixCoefficient = {"_p_mfem__TransposeMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixVectorProductCoefficient = {"_p_mfem__MatrixVectorProductCoefficient", "mfem::MatVecCoefficient *|mfem::MatrixVectorProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Mesh = {"_p_mfem__Mesh", "mfem::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Mesh__FaceInformation = {"_p_mfem__Mesh__FaceInformation", "mfem::Mesh::FaceInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__NCMesh = {"_p_mfem__NCMesh", "mfem::NCMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__NURBSExtension = {"_p_mfem__NURBSExtension", "mfem::NURBSExtension *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__NodeExtrudeCoefficient = {"_p_mfem__NodeExtrudeCoefficient", "mfem::NodeExtrudeCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Operator = {"_p_mfem__Operator", "mfem::Operator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__AbstractSparseMatrix = {"_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ConstrainedOperator = {"_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrixInverse = {"_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DenseSymmetricMatrix = {"_p_mfem__DenseSymmetricMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ElementRestriction = {"_p_mfem__ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ElementRestrictionOperator = {"_p_mfem__ElementRestrictionOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FaceRestriction = {"_p_mfem__FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IdentityOperator = {"_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2ElementRestriction = {"_p_mfem__L2ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2FaceRestriction = {"_p_mfem__L2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Matrix = {"_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixInverse = {"_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NCL2FaceRestriction = {"_p_mfem__NCL2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ProductOperator = {"_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyOperatorBase = {"_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyTimeDependentOperatorBase = {"_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RAPOperator = {"_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RectangularConstrainedOperator = {"_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScaledOperator = {"_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SecondOrderTimeDependentOperator = {"_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentAdjointOperator = {"_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentOperator = {"_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransposeOperator = {"_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TripleProductOperator = {"_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__OperatorHandle = {"_p_mfem__OperatorHandle", "mfem::OperatorPtr *|mfem::OperatorHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadratureFunction = {"_p_mfem__QuadratureFunction", "mfem::QuadratureFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Refinement = {"_p_mfem__Refinement", "mfem::Refinement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Solver = {"_p_mfem__Solver", "mfem::Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__SparseMatrix = {"_p_mfem__SparseMatrix", "mfem::SparseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Table = {"_p_mfem__Table", "mfem::Table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__STable = {"_p_mfem__STable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Vector = {"_p_mfem__Vector", "mfem::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CoefficientVector = {"_p_mfem__CoefficientVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LinearForm = {"_p_mfem__LinearForm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorCoefficient = {"_p_mfem__VectorCoefficient", "mfem::DiagonalMatrixCoefficient *|mfem::VectorCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CurlGridFunctionCoefficient = {"_p_mfem__CurlGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GradientGridFunctionCoefficient = {"_p_mfem__GradientGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NormalizedVectorCoefficient = {"_p_mfem__NormalizedVectorCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWVectorCoefficient = {"_p_mfem__PWVectorCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScalarVectorProductCoefficient = {"_p_mfem__ScalarVectorProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorArrayCoefficient = {"_p_mfem__VectorArrayCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorConstantCoefficient = {"_p_mfem__VectorConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorCrossProductCoefficient = {"_p_mfem__VectorCrossProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorDeltaCoefficient = {"_p_mfem__VectorDeltaCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorFunctionCoefficient = {"_p_mfem__VectorFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorGridFunctionCoefficient = {"_p_mfem__VectorGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorPyCoefficientBase = {"_p_mfem__VectorPyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorQuadratureFunctionCoefficient = {"_p_mfem__VectorQuadratureFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorRestrictedCoefficient = {"_p_mfem__VectorRestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorSumCoefficient = {"_p_mfem__VectorSumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Vertex = {"_p_mfem__Vertex", "mfem::Vertex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Element = {"_p_p_mfem__Element", "mfem::Element **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__FiniteElementSpace = {"_p_p_mfem__FiniteElementSpace", "mfem::FiniteElementSpace **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__GridFunction = {"_p_p_mfem__GridFunction", "mfem::GridFunction **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__IntegrationRule = {"_p_p_mfem__IntegrationRule", "mfem::IntegrationRule **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Mesh = {"_p_p_mfem__Mesh", "mfem::Mesh **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Operator = {"_p_p_mfem__Operator", "mfem::Operator **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__AbstractSparseMatrix = {"_p_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConformingFaceRestriction = {"_p_p_mfem__ConformingFaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConstrainedOperator = {"_p_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrix = {"_p_p_mfem__DenseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrixInverse = {"_p_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseSymmetricMatrix = {"_p_p_mfem__DenseSymmetricMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ElementRestriction = {"_p_p_mfem__ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ElementRestrictionOperator = {"_p_p_mfem__ElementRestrictionOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__FaceRestriction = {"_p_p_mfem__FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__IdentityOperator = {"_p_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__L2ElementRestriction = {"_p_p_mfem__L2ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__L2FaceRestriction = {"_p_p_mfem__L2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Matrix = {"_p_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__MatrixInverse = {"_p_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__NCL2FaceRestriction = {"_p_p_mfem__NCL2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ProductOperator = {"_p_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyOperatorBase = {"_p_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyTimeDependentOperatorBase = {"_p_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RAPOperator = {"_p_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RectangularConstrainedOperator = {"_p_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ScaledOperator = {"_p_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SecondOrderTimeDependentOperator = {"_p_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SparseMatrix = {"_p_p_mfem__SparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentAdjointOperator = {"_p_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentOperator = {"_p_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TransposeOperator = {"_p_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TripleProductOperator = {"_p_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Solver = {"_p_p_mfem__Solver", "mfem::Solver **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Vector = {"_p_p_mfem__Vector", "mfem::Vector **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__CoefficientVector = {"_p_p_mfem__CoefficientVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__LinearForm = {"_p_p_mfem__LinearForm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_pri_t = {"_p_pri_t", "pri_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pyr_t = {"_p_pyr_t", "pyr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_quad_t = {"_p_quad_t", "quad_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seg_t = {"_p_seg_t", "seg_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__OutStream = {"_p_mfem__OutStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_tet_t = {"_p_tet_t", "tet_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tri_t = {"_p_tri_t", "tri_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt___input,
  &_swigt__p_MatrixNumbaCoefficient,
  &_swigt__p_PyMFEM__wFILE,
  &_swigt__p_RefCoord,
  &_swigt__p_ScalarNumbaCoefficient,
  &_swigt__p_VectorNumbaCoefficient,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_r_q_const__mfem__Vector_r_mfem__Vector__void,
  &_swigt__p_hex_t,
  &_swigt__p_int,
  &_swigt__p_mfem__AbstractSparseMatrix,
  &_swigt__p_mfem__ArrayT_double_t,
  &_swigt__p_mfem__ArrayT_int_t,
  &_swigt__p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t,
  &_swigt__p_mfem__ArrayT_mfem__GeometricFactors_p_t,
  &_swigt__p_mfem__ArrayT_mfem__Geometry__Type_t,
  &_swigt__p_mfem__ArrayT_mfem__IntegrationPoint_t,
  &_swigt__p_mfem__ArrayT_mfem__KnotVector_p_t,
  &_swigt__p_mfem__ArrayT_mfem__Refinement_t,
  &_swigt__p_mfem__ArrayT_mfem__Vector_p_t,
  &_swigt__p_mfem__BiCubic2DFiniteElement,
  &_swigt__p_mfem__BiLinear2DFiniteElement,
  &_swigt__p_mfem__BiQuad2DFiniteElement,
  &_swigt__p_mfem__BiQuadPos2DFiniteElement,
  &_swigt__p_mfem__CoarseFineTransformations,
  &_swigt__p_mfem__Coefficient,
  &_swigt__p_mfem__CoefficientVector,
  &_swigt__p_mfem__ConformingFaceRestriction,
  &_swigt__p_mfem__ConstantCoefficient,
  &_swigt__p_mfem__ConstrainedOperator,
  &_swigt__p_mfem__ConvectionIntegrator,
  &_swigt__p_mfem__CrossCrossCoefficient,
  &_swigt__p_mfem__CrouzeixRaviartFiniteElement,
  &_swigt__p_mfem__CrouzeixRaviartQuadFiniteElement,
  &_swigt__p_mfem__Cubic1DFiniteElement,
  &_swigt__p_mfem__Cubic2DFiniteElement,
  &_swigt__p_mfem__Cubic3DFiniteElement,
  &_swigt__p_mfem__CurlGridFunctionCoefficient,
  &_swigt__p_mfem__DGTraceIntegrator,
  &_swigt__p_mfem__DSTable,
  &_swigt__p_mfem__DeltaCoefficient,
  &_swigt__p_mfem__DenseMatrix,
  &_swigt__p_mfem__DenseMatrixInverse,
  &_swigt__p_mfem__DenseSymmetricMatrix,
  &_swigt__p_mfem__DeterminantCoefficient,
  &_swigt__p_mfem__DivergenceGridFunctionCoefficient,
  &_swigt__p_mfem__Element,
  &_swigt__p_mfem__ElementRestriction,
  &_swigt__p_mfem__ElementRestrictionOperator,
  &_swigt__p_mfem__ElementTransformation,
  &_swigt__p_mfem__ExtrudeCoefficient,
  &_swigt__p_mfem__FaceElementTransformations,
  &_swigt__p_mfem__FaceGeometricFactors,
  &_swigt__p_mfem__FaceRestriction,
  &_swigt__p_mfem__FiniteElement,
  &_swigt__p_mfem__FiniteElementSpace,
  &_swigt__p_mfem__FunctionCoefficient,
  &_swigt__p_mfem__GaussBiLinear2DFiniteElement,
  &_swigt__p_mfem__GaussBiQuad2DFiniteElement,
  &_swigt__p_mfem__GaussLinear2DFiniteElement,
  &_swigt__p_mfem__GaussQuad2DFiniteElement,
  &_swigt__p_mfem__GeometricFactors,
  &_swigt__p_mfem__GradientGridFunctionCoefficient,
  &_swigt__p_mfem__GridFunction,
  &_swigt__p_mfem__GridFunctionCoefficient,
  &_swigt__p_mfem__H1Pos_HexahedronElement,
  &_swigt__p_mfem__H1Pos_QuadrilateralElement,
  &_swigt__p_mfem__H1Pos_SegmentElement,
  &_swigt__p_mfem__H1Pos_TetrahedronElement,
  &_swigt__p_mfem__H1Pos_TriangleElement,
  &_swigt__p_mfem__H1Pos_WedgeElement,
  &_swigt__p_mfem__H1Ser_QuadrilateralElement,
  &_swigt__p_mfem__H1_HexahedronElement,
  &_swigt__p_mfem__H1_QuadrilateralElement,
  &_swigt__p_mfem__H1_SegmentElement,
  &_swigt__p_mfem__H1_TetrahedronElement,
  &_swigt__p_mfem__H1_TriangleElement,
  &_swigt__p_mfem__H1_WedgeElement,
  &_swigt__p_mfem__IdentityMatrixCoefficient,
  &_swigt__p_mfem__IdentityOperator,
  &_swigt__p_mfem__InnerProductCoefficient,
  &_swigt__p_mfem__IntegrationPoint,
  &_swigt__p_mfem__IntegrationRule,
  &_swigt__p_mfem__InverseElementTransformation,
  &_swigt__p_mfem__InverseMatrixCoefficient,
  &_swigt__p_mfem__IsoparametricTransformation,
  &_swigt__p_mfem__L2ElementRestriction,
  &_swigt__p_mfem__L2FaceRestriction,
  &_swigt__p_mfem__L2Pos_HexahedronElement,
  &_swigt__p_mfem__L2Pos_QuadrilateralElement,
  &_swigt__p_mfem__L2Pos_SegmentElement,
  &_swigt__p_mfem__L2Pos_TetrahedronElement,
  &_swigt__p_mfem__L2Pos_TriangleElement,
  &_swigt__p_mfem__L2Pos_WedgeElement,
  &_swigt__p_mfem__L2_FECollection,
  &_swigt__p_mfem__L2_HexahedronElement,
  &_swigt__p_mfem__L2_QuadrilateralElement,
  &_swigt__p_mfem__L2_SegmentElement,
  &_swigt__p_mfem__L2_TetrahedronElement,
  &_swigt__p_mfem__L2_TriangleElement,
  &_swigt__p_mfem__L2_WedgeElement,
  &_swigt__p_mfem__Lagrange1DFiniteElement,
  &_swigt__p_mfem__LagrangeHexFiniteElement,
  &_swigt__p_mfem__Linear1DFiniteElement,
  &_swigt__p_mfem__Linear2DFiniteElement,
  &_swigt__p_mfem__Linear3DFiniteElement,
  &_swigt__p_mfem__LinearForm,
  &_swigt__p_mfem__LinearPyramidFiniteElement,
  &_swigt__p_mfem__LinearWedgeFiniteElement,
  &_swigt__p_mfem__Matrix,
  &_swigt__p_mfem__MatrixArrayCoefficient,
  &_swigt__p_mfem__MatrixCoefficient,
  &_swigt__p_mfem__MatrixConstantCoefficient,
  &_swigt__p_mfem__MatrixFunctionCoefficient,
  &_swigt__p_mfem__MatrixInverse,
  &_swigt__p_mfem__MatrixProductCoefficient,
  &_swigt__p_mfem__MatrixPyCoefficientBase,
  &_swigt__p_mfem__MatrixRestrictedCoefficient,
  &_swigt__p_mfem__MatrixSumCoefficient,
  &_swigt__p_mfem__MatrixVectorProductCoefficient,
  &_swigt__p_mfem__Mesh,
  &_swigt__p_mfem__Mesh__FaceInformation,
  &_swigt__p_mfem__NCL2FaceRestriction,
  &_swigt__p_mfem__NCMesh,
  &_swigt__p_mfem__ND_HexahedronElement,
  &_swigt__p_mfem__ND_QuadrilateralElement,
  &_swigt__p_mfem__ND_R1D_PointElement,
  &_swigt__p_mfem__ND_R1D_SegmentElement,
  &_swigt__p_mfem__ND_R2D_FiniteElement,
  &_swigt__p_mfem__ND_R2D_QuadrilateralElement,
  &_swigt__p_mfem__ND_R2D_SegmentElement,
  &_swigt__p_mfem__ND_R2D_TriangleElement,
  &_swigt__p_mfem__ND_SegmentElement,
  &_swigt__p_mfem__ND_TetrahedronElement,
  &_swigt__p_mfem__ND_TriangleElement,
  &_swigt__p_mfem__ND_WedgeElement,
  &_swigt__p_mfem__NURBS1DFiniteElement,
  &_swigt__p_mfem__NURBS2DFiniteElement,
  &_swigt__p_mfem__NURBS3DFiniteElement,
  &_swigt__p_mfem__NURBSExtension,
  &_swigt__p_mfem__NURBSFiniteElement,
  &_swigt__p_mfem__Nedelec1HexFiniteElement,
  &_swigt__p_mfem__Nedelec1PyrFiniteElement,
  &_swigt__p_mfem__Nedelec1TetFiniteElement,
  &_swigt__p_mfem__Nedelec1WdgFiniteElement,
  &_swigt__p_mfem__NodalFiniteElement,
  &_swigt__p_mfem__NodalTensorFiniteElement,
  &_swigt__p_mfem__NodeExtrudeCoefficient,
  &_swigt__p_mfem__NormalizedVectorCoefficient,
  &_swigt__p_mfem__Operator,
  &_swigt__p_mfem__OperatorHandle,
  &_swigt__p_mfem__OutStream,
  &_swigt__p_mfem__OuterProductCoefficient,
  &_swigt__p_mfem__P0HexFiniteElement,
  &_swigt__p_mfem__P0PyrFiniteElement,
  &_swigt__p_mfem__P0QuadFiniteElement,
  &_swigt__p_mfem__P0SegmentFiniteElement,
  &_swigt__p_mfem__P0TetFiniteElement,
  &_swigt__p_mfem__P0TriangleFiniteElement,
  &_swigt__p_mfem__P0WdgFiniteElement,
  &_swigt__p_mfem__P1OnQuadFiniteElement,
  &_swigt__p_mfem__P1SegmentFiniteElement,
  &_swigt__p_mfem__P1TetNonConfFiniteElement,
  &_swigt__p_mfem__P2SegmentFiniteElement,
  &_swigt__p_mfem__PWCoefficient,
  &_swigt__p_mfem__PWConstCoefficient,
  &_swigt__p_mfem__PWMatrixCoefficient,
  &_swigt__p_mfem__PWVectorCoefficient,
  &_swigt__p_mfem__PointFiniteElement,
  &_swigt__p_mfem__PositiveFiniteElement,
  &_swigt__p_mfem__PositiveTensorFiniteElement,
  &_swigt__p_mfem__PowerCoefficient,
  &_swigt__p_mfem__ProductCoefficient,
  &_swigt__p_mfem__ProductOperator,
  &_swigt__p_mfem__PyCoefficientBase,
  &_swigt__p_mfem__PyOperatorBase,
  &_swigt__p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_mfem__Quad1DFiniteElement,
  &_swigt__p_mfem__Quad2DFiniteElement,
  &_swigt__p_mfem__QuadPos1DFiniteElement,
  &_swigt__p_mfem__Quadratic3DFiniteElement,
  &_swigt__p_mfem__QuadratureFunction,
  &_swigt__p_mfem__QuadratureFunctionCoefficient,
  &_swigt__p_mfem__RAPOperator,
  &_swigt__p_mfem__RT0HexFiniteElement,
  &_swigt__p_mfem__RT0PyrFiniteElement,
  &_swigt__p_mfem__RT0QuadFiniteElement,
  &_swigt__p_mfem__RT0TetFiniteElement,
  &_swigt__p_mfem__RT0TriangleFiniteElement,
  &_swigt__p_mfem__RT0WdgFiniteElement,
  &_swigt__p_mfem__RT1HexFiniteElement,
  &_swigt__p_mfem__RT1QuadFiniteElement,
  &_swigt__p_mfem__RT1TriangleFiniteElement,
  &_swigt__p_mfem__RT2QuadFiniteElement,
  &_swigt__p_mfem__RT2TriangleFiniteElement,
  &_swigt__p_mfem__RT_HexahedronElement,
  &_swigt__p_mfem__RT_QuadrilateralElement,
  &_swigt__p_mfem__RT_R1D_SegmentElement,
  &_swigt__p_mfem__RT_R2D_FiniteElement,
  &_swigt__p_mfem__RT_R2D_QuadrilateralElement,
  &_swigt__p_mfem__RT_R2D_SegmentElement,
  &_swigt__p_mfem__RT_R2D_TriangleElement,
  &_swigt__p_mfem__RT_TetrahedronElement,
  &_swigt__p_mfem__RT_TriangleElement,
  &_swigt__p_mfem__RT_WedgeElement,
  &_swigt__p_mfem__RatioCoefficient,
  &_swigt__p_mfem__RectangularConstrainedOperator,
  &_swigt__p_mfem__RefinedBiLinear2DFiniteElement,
  &_swigt__p_mfem__RefinedLinear1DFiniteElement,
  &_swigt__p_mfem__RefinedLinear2DFiniteElement,
  &_swigt__p_mfem__RefinedLinear3DFiniteElement,
  &_swigt__p_mfem__RefinedTriLinear3DFiniteElement,
  &_swigt__p_mfem__Refinement,
  &_swigt__p_mfem__RestrictedCoefficient,
  &_swigt__p_mfem__RotTriLinearHexFiniteElement,
  &_swigt__p_mfem__STable,
  &_swigt__p_mfem__ScalarFiniteElement,
  &_swigt__p_mfem__ScalarMatrixProductCoefficient,
  &_swigt__p_mfem__ScalarVectorProductCoefficient,
  &_swigt__p_mfem__ScaledOperator,
  &_swigt__p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_mfem__Solver,
  &_swigt__p_mfem__SparseMatrix,
  &_swigt__p_mfem__SumCoefficient,
  &_swigt__p_mfem__SymmetricMatrixCoefficient,
  &_swigt__p_mfem__SymmetricMatrixConstantCoefficient,
  &_swigt__p_mfem__SymmetricMatrixFunctionCoefficient,
  &_swigt__p_mfem__Table,
  &_swigt__p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_mfem__TimeDependentOperator,
  &_swigt__p_mfem__TransformedCoefficient,
  &_swigt__p_mfem__TransposeMatrixCoefficient,
  &_swigt__p_mfem__TransposeOperator,
  &_swigt__p_mfem__TriLinear3DFiniteElement,
  &_swigt__p_mfem__TripleProductOperator,
  &_swigt__p_mfem__Vector,
  &_swigt__p_mfem__VectorArrayCoefficient,
  &_swigt__p_mfem__VectorCoefficient,
  &_swigt__p_mfem__VectorConstantCoefficient,
  &_swigt__p_mfem__VectorCrossProductCoefficient,
  &_swigt__p_mfem__VectorDeltaCoefficient,
  &_swigt__p_mfem__VectorFiniteElement,
  &_swigt__p_mfem__VectorFunctionCoefficient,
  &_swigt__p_mfem__VectorGridFunctionCoefficient,
  &_swigt__p_mfem__VectorPyCoefficientBase,
  &_swigt__p_mfem__VectorQuadratureFunctionCoefficient,
  &_swigt__p_mfem__VectorRestrictedCoefficient,
  &_swigt__p_mfem__VectorRotProductCoefficient,
  &_swigt__p_mfem__VectorSumCoefficient,
  &_swigt__p_mfem__VectorTensorFiniteElement,
  &_swigt__p_mfem__Vertex,
  &_swigt__p_p_mfem__AbstractSparseMatrix,
  &_swigt__p_p_mfem__CoefficientVector,
  &_swigt__p_p_mfem__ConformingFaceRestriction,
  &_swigt__p_p_mfem__ConstrainedOperator,
  &_swigt__p_p_mfem__DenseMatrix,
  &_swigt__p_p_mfem__DenseMatrixInverse,
  &_swigt__p_p_mfem__DenseSymmetricMatrix,
  &_swigt__p_p_mfem__Element,
  &_swigt__p_p_mfem__ElementRestriction,
  &_swigt__p_p_mfem__ElementRestrictionOperator,
  &_swigt__p_p_mfem__FaceRestriction,
  &_swigt__p_p_mfem__FiniteElementSpace,
  &_swigt__p_p_mfem__GridFunction,
  &_swigt__p_p_mfem__IdentityOperator,
  &_swigt__p_p_mfem__IntegrationRule,
  &_swigt__p_p_mfem__L2ElementRestriction,
  &_swigt__p_p_mfem__L2FaceRestriction,
  &_swigt__p_p_mfem__LinearForm,
  &_swigt__p_p_mfem__Matrix,
  &_swigt__p_p_mfem__MatrixInverse,
  &_swigt__p_p_mfem__Mesh,
  &_swigt__p_p_mfem__NCL2FaceRestriction,
  &_swigt__p_p_mfem__Operator,
  &_swigt__p_p_mfem__ProductOperator,
  &_swigt__p_p_mfem__PyOperatorBase,
  &_swigt__p_p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_p_mfem__RAPOperator,
  &_swigt__p_p_mfem__RectangularConstrainedOperator,
  &_swigt__p_p_mfem__ScaledOperator,
  &_swigt__p_p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_p_mfem__Solver,
  &_swigt__p_p_mfem__SparseMatrix,
  &_swigt__p_p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_p_mfem__TimeDependentOperator,
  &_swigt__p_p_mfem__TransposeOperator,
  &_swigt__p_p_mfem__TripleProductOperator,
  &_swigt__p_p_mfem__Vector,
  &_swigt__p_pri_t,
  &_swigt__p_pyr_t,
  &_swigt__p_quad_t,
  &_swigt__p_seg_t,
  &_swigt__p_size_type,
  &_swigt__p_std__ostream,
  &_swigt__p_tet_t,
  &_swigt__p_tri_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc___input[] = {  {&_swigt___input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixNumbaCoefficient[] = {  {&_swigt__p_MatrixNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyMFEM__wFILE[] = {  {&_swigt__p_PyMFEM__wFILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefCoord[] = {  {&_swigt__p_RefCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScalarNumbaCoefficient[] = {  {&_swigt__p_ScalarNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorNumbaCoefficient[] = {  {&_swigt__p_VectorNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__mfem__Vector_r_mfem__Vector__void[] = {  {&_swigt__p_f_r_q_const__mfem__Vector_r_mfem__Vector__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hex_t[] = {  {&_swigt__p_hex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_double_t[] = {  {&_swigt__p_mfem__ArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_int_t[] = {  {&_swigt__p_mfem__ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__GeometricFactors_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__GeometricFactors_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__Geometry__Type_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__Geometry__Type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__IntegrationPoint_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__IntegrationPoint_t, 0, 0, 0},  {&_swigt__p_mfem__IntegrationRule, _p_mfem__IntegrationRuleTo_p_mfem__ArrayT_mfem__IntegrationPoint_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__KnotVector_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__KnotVector_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__Refinement_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__Refinement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_mfem__Vector_p_t[] = {  {&_swigt__p_mfem__ArrayT_mfem__Vector_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CoarseFineTransformations[] = {  {&_swigt__p_mfem__CoarseFineTransformations, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstantCoefficient[] = {{&_swigt__p_mfem__ConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DeltaCoefficient[] = {{&_swigt__p_mfem__DeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DeterminantCoefficient[] = {{&_swigt__p_mfem__DeterminantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DivergenceGridFunctionCoefficient[] = {{&_swigt__p_mfem__DivergenceGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ExtrudeCoefficient[] = {{&_swigt__p_mfem__ExtrudeCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FunctionCoefficient[] = {{&_swigt__p_mfem__FunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GridFunctionCoefficient[] = {{&_swigt__p_mfem__GridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InnerProductCoefficient[] = {{&_swigt__p_mfem__InnerProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWCoefficient[] = {{&_swigt__p_mfem__PWCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWConstCoefficient[] = {{&_swigt__p_mfem__PWConstCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PowerCoefficient[] = {{&_swigt__p_mfem__PowerCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductCoefficient[] = {{&_swigt__p_mfem__ProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyCoefficientBase[] = {{&_swigt__p_mfem__PyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadratureFunctionCoefficient[] = {{&_swigt__p_mfem__QuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RatioCoefficient[] = {{&_swigt__p_mfem__RatioCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RestrictedCoefficient[] = {{&_swigt__p_mfem__RestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SumCoefficient[] = {{&_swigt__p_mfem__SumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransformedCoefficient[] = {{&_swigt__p_mfem__TransformedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorRotProductCoefficient[] = {{&_swigt__p_mfem__VectorRotProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Coefficient[] = {  {&_swigt__p_mfem__Coefficient, 0, 0, 0},  {&_swigt__p_ScalarNumbaCoefficient, _p_ScalarNumbaCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ConstantCoefficient, _p_mfem__ConstantCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DeltaCoefficient, _p_mfem__DeltaCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DeterminantCoefficient, _p_mfem__DeterminantCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DivergenceGridFunctionCoefficient, _p_mfem__DivergenceGridFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ExtrudeCoefficient, _p_mfem__ExtrudeCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__FunctionCoefficient, _p_mfem__FunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__GridFunctionCoefficient, _p_mfem__GridFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__InnerProductCoefficient, _p_mfem__InnerProductCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PWCoefficient, _p_mfem__PWCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PWConstCoefficient, _p_mfem__PWConstCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PowerCoefficient, _p_mfem__PowerCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ProductCoefficient, _p_mfem__ProductCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PyCoefficientBase, _p_mfem__PyCoefficientBaseTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__QuadratureFunctionCoefficient, _p_mfem__QuadratureFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__RatioCoefficient, _p_mfem__RatioCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__RestrictedCoefficient, _p_mfem__RestrictedCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__SumCoefficient, _p_mfem__SumCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__TransformedCoefficient, _p_mfem__TransformedCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__VectorRotProductCoefficient, _p_mfem__VectorRotProductCoefficientTo_p_mfem__Coefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConformingFaceRestriction[] = {  {&_swigt__p_mfem__ConformingFaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConvectionIntegrator[] = {  {&_swigt__p_mfem__ConvectionIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DGTraceIntegrator[] = {  {&_swigt__p_mfem__DGTraceIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DSTable[] = {  {&_swigt__p_mfem__DSTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrix[] = {  {&_swigt__p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Element[] = {  {&_swigt__p_mfem__Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ElementTransformation[] = {  {&_swigt__p_mfem__ElementTransformation, 0, 0, 0},  {&_swigt__p_mfem__FaceElementTransformations, _p_mfem__FaceElementTransformationsTo_p_mfem__ElementTransformation, 0, 0},  {&_swigt__p_mfem__IsoparametricTransformation, _p_mfem__IsoparametricTransformationTo_p_mfem__ElementTransformation, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FaceElementTransformations[] = {  {&_swigt__p_mfem__FaceElementTransformations, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FaceGeometricFactors[] = {  {&_swigt__p_mfem__FaceGeometricFactors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiCubic2DFiniteElement[] = {{&_swigt__p_mfem__BiCubic2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiLinear2DFiniteElement[] = {{&_swigt__p_mfem__BiLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiQuad2DFiniteElement[] = {{&_swigt__p_mfem__BiQuad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiQuadPos2DFiniteElement[] = {{&_swigt__p_mfem__BiQuadPos2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrouzeixRaviartFiniteElement[] = {{&_swigt__p_mfem__CrouzeixRaviartFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrouzeixRaviartQuadFiniteElement[] = {{&_swigt__p_mfem__CrouzeixRaviartQuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Cubic1DFiniteElement[] = {{&_swigt__p_mfem__Cubic1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Cubic2DFiniteElement[] = {{&_swigt__p_mfem__Cubic2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Cubic3DFiniteElement[] = {{&_swigt__p_mfem__Cubic3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussBiLinear2DFiniteElement[] = {{&_swigt__p_mfem__GaussBiLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussBiQuad2DFiniteElement[] = {{&_swigt__p_mfem__GaussBiQuad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussLinear2DFiniteElement[] = {{&_swigt__p_mfem__GaussLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussQuad2DFiniteElement[] = {{&_swigt__p_mfem__GaussQuad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_HexahedronElement[] = {{&_swigt__p_mfem__H1Pos_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_QuadrilateralElement[] = {{&_swigt__p_mfem__H1Pos_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_SegmentElement[] = {{&_swigt__p_mfem__H1Pos_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_TetrahedronElement[] = {{&_swigt__p_mfem__H1Pos_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_TriangleElement[] = {{&_swigt__p_mfem__H1Pos_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_WedgeElement[] = {{&_swigt__p_mfem__H1Pos_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Ser_QuadrilateralElement[] = {{&_swigt__p_mfem__H1Ser_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_HexahedronElement[] = {{&_swigt__p_mfem__H1_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_QuadrilateralElement[] = {{&_swigt__p_mfem__H1_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_SegmentElement[] = {{&_swigt__p_mfem__H1_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_TetrahedronElement[] = {{&_swigt__p_mfem__H1_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_TriangleElement[] = {{&_swigt__p_mfem__H1_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_WedgeElement[] = {{&_swigt__p_mfem__H1_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_HexahedronElement[] = {{&_swigt__p_mfem__L2Pos_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_QuadrilateralElement[] = {{&_swigt__p_mfem__L2Pos_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_SegmentElement[] = {{&_swigt__p_mfem__L2Pos_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_TetrahedronElement[] = {{&_swigt__p_mfem__L2Pos_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_TriangleElement[] = {{&_swigt__p_mfem__L2Pos_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_WedgeElement[] = {{&_swigt__p_mfem__L2Pos_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_HexahedronElement[] = {{&_swigt__p_mfem__L2_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_QuadrilateralElement[] = {{&_swigt__p_mfem__L2_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_SegmentElement[] = {{&_swigt__p_mfem__L2_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_TetrahedronElement[] = {{&_swigt__p_mfem__L2_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_TriangleElement[] = {{&_swigt__p_mfem__L2_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_WedgeElement[] = {{&_swigt__p_mfem__L2_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Lagrange1DFiniteElement[] = {{&_swigt__p_mfem__Lagrange1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LagrangeHexFiniteElement[] = {{&_swigt__p_mfem__LagrangeHexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Linear1DFiniteElement[] = {{&_swigt__p_mfem__Linear1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Linear2DFiniteElement[] = {{&_swigt__p_mfem__Linear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Linear3DFiniteElement[] = {{&_swigt__p_mfem__Linear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearPyramidFiniteElement[] = {{&_swigt__p_mfem__LinearPyramidFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearWedgeFiniteElement[] = {{&_swigt__p_mfem__LinearWedgeFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_HexahedronElement[] = {{&_swigt__p_mfem__ND_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_QuadrilateralElement[] = {{&_swigt__p_mfem__ND_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R1D_PointElement[] = {{&_swigt__p_mfem__ND_R1D_PointElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R1D_SegmentElement[] = {{&_swigt__p_mfem__ND_R1D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_FiniteElement[] = {{&_swigt__p_mfem__ND_R2D_FiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_QuadrilateralElement[] = {{&_swigt__p_mfem__ND_R2D_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_SegmentElement[] = {{&_swigt__p_mfem__ND_R2D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_TriangleElement[] = {{&_swigt__p_mfem__ND_R2D_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_SegmentElement[] = {{&_swigt__p_mfem__ND_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_TetrahedronElement[] = {{&_swigt__p_mfem__ND_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_TriangleElement[] = {{&_swigt__p_mfem__ND_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_WedgeElement[] = {{&_swigt__p_mfem__ND_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBS1DFiniteElement[] = {{&_swigt__p_mfem__NURBS1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBS2DFiniteElement[] = {{&_swigt__p_mfem__NURBS2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBS3DFiniteElement[] = {{&_swigt__p_mfem__NURBS3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBSFiniteElement[] = {{&_swigt__p_mfem__NURBSFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1HexFiniteElement[] = {{&_swigt__p_mfem__Nedelec1HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1PyrFiniteElement[] = {{&_swigt__p_mfem__Nedelec1PyrFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1TetFiniteElement[] = {{&_swigt__p_mfem__Nedelec1TetFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1WdgFiniteElement[] = {{&_swigt__p_mfem__Nedelec1WdgFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NodalFiniteElement[] = {{&_swigt__p_mfem__NodalFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NodalTensorFiniteElement[] = {{&_swigt__p_mfem__NodalTensorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0HexFiniteElement[] = {{&_swigt__p_mfem__P0HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0PyrFiniteElement[] = {{&_swigt__p_mfem__P0PyrFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0QuadFiniteElement[] = {{&_swigt__p_mfem__P0QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0SegmentFiniteElement[] = {{&_swigt__p_mfem__P0SegmentFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0TetFiniteElement[] = {{&_swigt__p_mfem__P0TetFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0TriangleFiniteElement[] = {{&_swigt__p_mfem__P0TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0WdgFiniteElement[] = {{&_swigt__p_mfem__P0WdgFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1OnQuadFiniteElement[] = {{&_swigt__p_mfem__P1OnQuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1SegmentFiniteElement[] = {{&_swigt__p_mfem__P1SegmentFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1TetNonConfFiniteElement[] = {{&_swigt__p_mfem__P1TetNonConfFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P2SegmentFiniteElement[] = {{&_swigt__p_mfem__P2SegmentFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PointFiniteElement[] = {{&_swigt__p_mfem__PointFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PositiveFiniteElement[] = {{&_swigt__p_mfem__PositiveFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PositiveTensorFiniteElement[] = {{&_swigt__p_mfem__PositiveTensorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Quad1DFiniteElement[] = {{&_swigt__p_mfem__Quad1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Quad2DFiniteElement[] = {{&_swigt__p_mfem__Quad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadPos1DFiniteElement[] = {{&_swigt__p_mfem__QuadPos1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Quadratic3DFiniteElement[] = {{&_swigt__p_mfem__Quadratic3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0HexFiniteElement[] = {{&_swigt__p_mfem__RT0HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0PyrFiniteElement[] = {{&_swigt__p_mfem__RT0PyrFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0QuadFiniteElement[] = {{&_swigt__p_mfem__RT0QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0TetFiniteElement[] = {{&_swigt__p_mfem__RT0TetFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0TriangleFiniteElement[] = {{&_swigt__p_mfem__RT0TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0WdgFiniteElement[] = {{&_swigt__p_mfem__RT0WdgFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1HexFiniteElement[] = {{&_swigt__p_mfem__RT1HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1QuadFiniteElement[] = {{&_swigt__p_mfem__RT1QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1TriangleFiniteElement[] = {{&_swigt__p_mfem__RT1TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT2QuadFiniteElement[] = {{&_swigt__p_mfem__RT2QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT2TriangleFiniteElement[] = {{&_swigt__p_mfem__RT2TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_HexahedronElement[] = {{&_swigt__p_mfem__RT_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_QuadrilateralElement[] = {{&_swigt__p_mfem__RT_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R1D_SegmentElement[] = {{&_swigt__p_mfem__RT_R1D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_FiniteElement[] = {{&_swigt__p_mfem__RT_R2D_FiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_QuadrilateralElement[] = {{&_swigt__p_mfem__RT_R2D_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_SegmentElement[] = {{&_swigt__p_mfem__RT_R2D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_TriangleElement[] = {{&_swigt__p_mfem__RT_R2D_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_TetrahedronElement[] = {{&_swigt__p_mfem__RT_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_TriangleElement[] = {{&_swigt__p_mfem__RT_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_WedgeElement[] = {{&_swigt__p_mfem__RT_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedBiLinear2DFiniteElement[] = {{&_swigt__p_mfem__RefinedBiLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinear1DFiniteElement[] = {{&_swigt__p_mfem__RefinedLinear1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinear2DFiniteElement[] = {{&_swigt__p_mfem__RefinedLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinear3DFiniteElement[] = {{&_swigt__p_mfem__RefinedLinear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedTriLinear3DFiniteElement[] = {{&_swigt__p_mfem__RefinedTriLinear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RotTriLinearHexFiniteElement[] = {{&_swigt__p_mfem__RotTriLinearHexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarFiniteElement[] = {{&_swigt__p_mfem__ScalarFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TriLinear3DFiniteElement[] = {{&_swigt__p_mfem__TriLinear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorFiniteElement[] = {{&_swigt__p_mfem__VectorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorTensorFiniteElement[] = {{&_swigt__p_mfem__VectorTensorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FiniteElement[] = {  {&_swigt__p_mfem__FiniteElement, 0, 0, 0},  {&_swigt__p_mfem__BiCubic2DFiniteElement, _p_mfem__BiCubic2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__BiLinear2DFiniteElement, _p_mfem__BiLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__BiQuad2DFiniteElement, _p_mfem__BiQuad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__BiQuadPos2DFiniteElement, _p_mfem__BiQuadPos2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__CrouzeixRaviartFiniteElement, _p_mfem__CrouzeixRaviartFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__CrouzeixRaviartQuadFiniteElement, _p_mfem__CrouzeixRaviartQuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Cubic1DFiniteElement, _p_mfem__Cubic1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Cubic2DFiniteElement, _p_mfem__Cubic2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Cubic3DFiniteElement, _p_mfem__Cubic3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussBiLinear2DFiniteElement, _p_mfem__GaussBiLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussBiQuad2DFiniteElement, _p_mfem__GaussBiQuad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussLinear2DFiniteElement, _p_mfem__GaussLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussQuad2DFiniteElement, _p_mfem__GaussQuad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_HexahedronElement, _p_mfem__H1Pos_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_QuadrilateralElement, _p_mfem__H1Pos_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_SegmentElement, _p_mfem__H1Pos_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_TetrahedronElement, _p_mfem__H1Pos_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_TriangleElement, _p_mfem__H1Pos_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_WedgeElement, _p_mfem__H1Pos_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Ser_QuadrilateralElement, _p_mfem__H1Ser_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_HexahedronElement, _p_mfem__H1_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_QuadrilateralElement, _p_mfem__H1_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_SegmentElement, _p_mfem__H1_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_TetrahedronElement, _p_mfem__H1_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_TriangleElement, _p_mfem__H1_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_WedgeElement, _p_mfem__H1_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_HexahedronElement, _p_mfem__L2Pos_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_QuadrilateralElement, _p_mfem__L2Pos_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_SegmentElement, _p_mfem__L2Pos_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_TetrahedronElement, _p_mfem__L2Pos_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_TriangleElement, _p_mfem__L2Pos_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_WedgeElement, _p_mfem__L2Pos_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_HexahedronElement, _p_mfem__L2_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_QuadrilateralElement, _p_mfem__L2_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_SegmentElement, _p_mfem__L2_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_TetrahedronElement, _p_mfem__L2_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_TriangleElement, _p_mfem__L2_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_WedgeElement, _p_mfem__L2_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Lagrange1DFiniteElement, _p_mfem__Lagrange1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__LagrangeHexFiniteElement, _p_mfem__LagrangeHexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Linear1DFiniteElement, _p_mfem__Linear1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Linear2DFiniteElement, _p_mfem__Linear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Linear3DFiniteElement, _p_mfem__Linear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__LinearPyramidFiniteElement, _p_mfem__LinearPyramidFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__LinearWedgeFiniteElement, _p_mfem__LinearWedgeFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_HexahedronElement, _p_mfem__ND_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_QuadrilateralElement, _p_mfem__ND_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R1D_PointElement, _p_mfem__ND_R1D_PointElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R1D_SegmentElement, _p_mfem__ND_R1D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_FiniteElement, _p_mfem__ND_R2D_FiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_QuadrilateralElement, _p_mfem__ND_R2D_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_SegmentElement, _p_mfem__ND_R2D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_TriangleElement, _p_mfem__ND_R2D_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_SegmentElement, _p_mfem__ND_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_TetrahedronElement, _p_mfem__ND_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_TriangleElement, _p_mfem__ND_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_WedgeElement, _p_mfem__ND_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBS1DFiniteElement, _p_mfem__NURBS1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBS2DFiniteElement, _p_mfem__NURBS2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBS3DFiniteElement, _p_mfem__NURBS3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBSFiniteElement, _p_mfem__NURBSFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1HexFiniteElement, _p_mfem__Nedelec1HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1PyrFiniteElement, _p_mfem__Nedelec1PyrFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1TetFiniteElement, _p_mfem__Nedelec1TetFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1WdgFiniteElement, _p_mfem__Nedelec1WdgFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NodalFiniteElement, _p_mfem__NodalFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NodalTensorFiniteElement, _p_mfem__NodalTensorFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0HexFiniteElement, _p_mfem__P0HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0PyrFiniteElement, _p_mfem__P0PyrFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0QuadFiniteElement, _p_mfem__P0QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0SegmentFiniteElement, _p_mfem__P0SegmentFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0TetFiniteElement, _p_mfem__P0TetFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0TriangleFiniteElement, _p_mfem__P0TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0WdgFiniteElement, _p_mfem__P0WdgFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P1OnQuadFiniteElement, _p_mfem__P1OnQuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P1SegmentFiniteElement, _p_mfem__P1SegmentFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P1TetNonConfFiniteElement, _p_mfem__P1TetNonConfFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P2SegmentFiniteElement, _p_mfem__P2SegmentFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__PointFiniteElement, _p_mfem__PointFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__PositiveFiniteElement, _p_mfem__PositiveFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__PositiveTensorFiniteElement, _p_mfem__PositiveTensorFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Quad1DFiniteElement, _p_mfem__Quad1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Quad2DFiniteElement, _p_mfem__Quad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__QuadPos1DFiniteElement, _p_mfem__QuadPos1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Quadratic3DFiniteElement, _p_mfem__Quadratic3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0HexFiniteElement, _p_mfem__RT0HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0PyrFiniteElement, _p_mfem__RT0PyrFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0QuadFiniteElement, _p_mfem__RT0QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0TetFiniteElement, _p_mfem__RT0TetFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0TriangleFiniteElement, _p_mfem__RT0TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0WdgFiniteElement, _p_mfem__RT0WdgFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT1HexFiniteElement, _p_mfem__RT1HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT1QuadFiniteElement, _p_mfem__RT1QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT1TriangleFiniteElement, _p_mfem__RT1TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT2QuadFiniteElement, _p_mfem__RT2QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT2TriangleFiniteElement, _p_mfem__RT2TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_HexahedronElement, _p_mfem__RT_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_QuadrilateralElement, _p_mfem__RT_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R1D_SegmentElement, _p_mfem__RT_R1D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_FiniteElement, _p_mfem__RT_R2D_FiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_QuadrilateralElement, _p_mfem__RT_R2D_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_SegmentElement, _p_mfem__RT_R2D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_TriangleElement, _p_mfem__RT_R2D_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_TetrahedronElement, _p_mfem__RT_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_TriangleElement, _p_mfem__RT_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_WedgeElement, _p_mfem__RT_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedBiLinear2DFiniteElement, _p_mfem__RefinedBiLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedLinear1DFiniteElement, _p_mfem__RefinedLinear1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedLinear2DFiniteElement, _p_mfem__RefinedLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedLinear3DFiniteElement, _p_mfem__RefinedLinear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedTriLinear3DFiniteElement, _p_mfem__RefinedTriLinear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RotTriLinearHexFiniteElement, _p_mfem__RotTriLinearHexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ScalarFiniteElement, _p_mfem__ScalarFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__TriLinear3DFiniteElement, _p_mfem__TriLinear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__VectorFiniteElement, _p_mfem__VectorFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__VectorTensorFiniteElement, _p_mfem__VectorTensorFiniteElementTo_p_mfem__FiniteElement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FiniteElementSpace[] = {  {&_swigt__p_mfem__FiniteElementSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GeometricFactors[] = {  {&_swigt__p_mfem__GeometricFactors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GridFunction[] = {  {&_swigt__p_mfem__GridFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IntegrationPoint[] = {  {&_swigt__p_mfem__IntegrationPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IntegrationRule[] = {  {&_swigt__p_mfem__IntegrationRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InverseElementTransformation[] = {  {&_swigt__p_mfem__InverseElementTransformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IsoparametricTransformation[] = {  {&_swigt__p_mfem__IsoparametricTransformation, 0, 0, 0},  {&_swigt__p_mfem__FaceElementTransformations, _p_mfem__FaceElementTransformationsTo_p_mfem__IsoparametricTransformation, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_FECollection[] = {  {&_swigt__p_mfem__L2_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrossCrossCoefficient[] = {{&_swigt__p_mfem__CrossCrossCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityMatrixCoefficient[] = {{&_swigt__p_mfem__IdentityMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InverseMatrixCoefficient[] = {{&_swigt__p_mfem__InverseMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixArrayCoefficient[] = {{&_swigt__p_mfem__MatrixArrayCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixConstantCoefficient[] = {{&_swigt__p_mfem__MatrixConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixFunctionCoefficient[] = {{&_swigt__p_mfem__MatrixFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixProductCoefficient[] = {{&_swigt__p_mfem__MatrixProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixPyCoefficientBase[] = {{&_swigt__p_mfem__MatrixPyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixRestrictedCoefficient[] = {{&_swigt__p_mfem__MatrixRestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixSumCoefficient[] = {{&_swigt__p_mfem__MatrixSumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__OuterProductCoefficient[] = {{&_swigt__p_mfem__OuterProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWMatrixCoefficient[] = {{&_swigt__p_mfem__PWMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarMatrixProductCoefficient[] = {{&_swigt__p_mfem__ScalarMatrixProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixCoefficient[] = {{&_swigt__p_mfem__SymmetricMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixConstantCoefficient[] = {{&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixFunctionCoefficient[] = {{&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeMatrixCoefficient[] = {{&_swigt__p_mfem__TransposeMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixCoefficient[] = {  {&_swigt__p_mfem__MatrixCoefficient, 0, 0, 0},  {&_swigt__p_MatrixNumbaCoefficient, _p_MatrixNumbaCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__CrossCrossCoefficient, _p_mfem__CrossCrossCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__IdentityMatrixCoefficient, _p_mfem__IdentityMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__InverseMatrixCoefficient, _p_mfem__InverseMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixArrayCoefficient, _p_mfem__MatrixArrayCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixConstantCoefficient, _p_mfem__MatrixConstantCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixFunctionCoefficient, _p_mfem__MatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixProductCoefficient, _p_mfem__MatrixProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixPyCoefficientBase, _p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixRestrictedCoefficient, _p_mfem__MatrixRestrictedCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixSumCoefficient, _p_mfem__MatrixSumCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__OuterProductCoefficient, _p_mfem__OuterProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__PWMatrixCoefficient, _p_mfem__PWMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__ScalarMatrixProductCoefficient, _p_mfem__ScalarMatrixProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixCoefficient, _p_mfem__SymmetricMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, _p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, _p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__TransposeMatrixCoefficient, _p_mfem__TransposeMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixVectorProductCoefficient[] = {  {&_swigt__p_mfem__MatrixVectorProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Mesh[] = {  {&_swigt__p_mfem__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Mesh__FaceInformation[] = {  {&_swigt__p_mfem__Mesh__FaceInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NCMesh[] = {  {&_swigt__p_mfem__NCMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBSExtension[] = {  {&_swigt__p_mfem__NURBSExtension, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NodeExtrudeCoefficient[] = {  {&_swigt__p_mfem__NodeExtrudeCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstrainedOperator[] = {{&_swigt__p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrixInverse[] = {{&_swigt__p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseSymmetricMatrix[] = {{&_swigt__p_mfem__DenseSymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ElementRestriction[] = {{&_swigt__p_mfem__ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ElementRestrictionOperator[] = {{&_swigt__p_mfem__ElementRestrictionOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FaceRestriction[] = {{&_swigt__p_mfem__FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityOperator[] = {{&_swigt__p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2ElementRestriction[] = {{&_swigt__p_mfem__L2ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2FaceRestriction[] = {{&_swigt__p_mfem__L2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Matrix[] = {{&_swigt__p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixInverse[] = {{&_swigt__p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NCL2FaceRestriction[] = {{&_swigt__p_mfem__NCL2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductOperator[] = {{&_swigt__p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyOperatorBase[] = {{&_swigt__p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RAPOperator[] = {{&_swigt__p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScaledOperator[] = {{&_swigt__p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentOperator[] = {{&_swigt__p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeOperator[] = {{&_swigt__p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TripleProductOperator[] = {{&_swigt__p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Operator[] = {  {&_swigt__p_mfem__Operator, 0, 0, 0},  {&_swigt__p_mfem__AbstractSparseMatrix, _p_mfem__AbstractSparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ConformingFaceRestriction, _p_mfem__ConformingFaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ConstrainedOperator, _p_mfem__ConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrix, _p_mfem__DenseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseSymmetricMatrix, _p_mfem__DenseSymmetricMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ElementRestriction, _p_mfem__ElementRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ElementRestrictionOperator, _p_mfem__ElementRestrictionOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__FaceRestriction, _p_mfem__FaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__IdentityOperator, _p_mfem__IdentityOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__L2ElementRestriction, _p_mfem__L2ElementRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__L2FaceRestriction, _p_mfem__L2FaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Matrix, _p_mfem__MatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__NCL2FaceRestriction, _p_mfem__NCL2FaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ProductOperator, _p_mfem__ProductOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyOperatorBase, _p_mfem__PyOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyTimeDependentOperatorBase, _p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RAPOperator, _p_mfem__RAPOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RectangularConstrainedOperator, _p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ScaledOperator, _p_mfem__ScaledOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SecondOrderTimeDependentOperator, _p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Solver, _p_mfem__SolverTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SparseMatrix, _p_mfem__SparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentAdjointOperator, _p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentOperator, _p_mfem__TimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TransposeOperator, _p_mfem__TransposeOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TripleProductOperator, _p_mfem__TripleProductOperatorTo_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__OperatorHandle[] = {  {&_swigt__p_mfem__OperatorHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadratureFunction[] = {  {&_swigt__p_mfem__QuadratureFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Refinement[] = {  {&_swigt__p_mfem__Refinement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Solver[] = {  {&_swigt__p_mfem__Solver, 0, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Solver, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SparseMatrix[] = {  {&_swigt__p_mfem__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__STable[] = {{&_swigt__p_mfem__STable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Table[] = {  {&_swigt__p_mfem__Table, 0, 0, 0},  {&_swigt__p_mfem__STable, _p_mfem__STableTo_p_mfem__Table, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CoefficientVector[] = {{&_swigt__p_mfem__CoefficientVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearForm[] = {{&_swigt__p_mfem__LinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Vector[] = {  {&_swigt__p_mfem__Vector, 0, 0, 0},  {&_swigt__p_mfem__CoefficientVector, _p_mfem__CoefficientVectorTo_p_mfem__Vector, 0, 0},  {&_swigt__p_mfem__GridFunction, _p_mfem__GridFunctionTo_p_mfem__Vector, 0, 0},  {&_swigt__p_mfem__LinearForm, _p_mfem__LinearFormTo_p_mfem__Vector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CurlGridFunctionCoefficient[] = {{&_swigt__p_mfem__CurlGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GradientGridFunctionCoefficient[] = {{&_swigt__p_mfem__GradientGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NormalizedVectorCoefficient[] = {{&_swigt__p_mfem__NormalizedVectorCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWVectorCoefficient[] = {{&_swigt__p_mfem__PWVectorCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarVectorProductCoefficient[] = {{&_swigt__p_mfem__ScalarVectorProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorArrayCoefficient[] = {{&_swigt__p_mfem__VectorArrayCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorConstantCoefficient[] = {{&_swigt__p_mfem__VectorConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorCrossProductCoefficient[] = {{&_swigt__p_mfem__VectorCrossProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorDeltaCoefficient[] = {{&_swigt__p_mfem__VectorDeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorFunctionCoefficient[] = {{&_swigt__p_mfem__VectorFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorGridFunctionCoefficient[] = {{&_swigt__p_mfem__VectorGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorPyCoefficientBase[] = {{&_swigt__p_mfem__VectorPyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorQuadratureFunctionCoefficient[] = {{&_swigt__p_mfem__VectorQuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorRestrictedCoefficient[] = {{&_swigt__p_mfem__VectorRestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorSumCoefficient[] = {{&_swigt__p_mfem__VectorSumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorCoefficient[] = {  {&_swigt__p_mfem__VectorCoefficient, 0, 0, 0},  {&_swigt__p_VectorNumbaCoefficient, _p_VectorNumbaCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__CurlGridFunctionCoefficient, _p_mfem__CurlGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__GradientGridFunctionCoefficient, _p_mfem__GradientGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixVectorProductCoefficient, _p_mfem__MatrixVectorProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__NodeExtrudeCoefficient, _p_mfem__NodeExtrudeCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__NormalizedVectorCoefficient, _p_mfem__NormalizedVectorCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__PWVectorCoefficient, _p_mfem__PWVectorCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__ScalarVectorProductCoefficient, _p_mfem__ScalarVectorProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorArrayCoefficient, _p_mfem__VectorArrayCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorConstantCoefficient, _p_mfem__VectorConstantCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorCrossProductCoefficient, _p_mfem__VectorCrossProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorDeltaCoefficient, _p_mfem__VectorDeltaCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorFunctionCoefficient, _p_mfem__VectorFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorGridFunctionCoefficient, _p_mfem__VectorGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorPyCoefficientBase, _p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorQuadratureFunctionCoefficient, _p_mfem__VectorQuadratureFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorRestrictedCoefficient, _p_mfem__VectorRestrictedCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorSumCoefficient, _p_mfem__VectorSumCoefficientTo_p_mfem__VectorCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Vertex[] = {  {&_swigt__p_mfem__Vertex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Element[] = {  {&_swigt__p_p_mfem__Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__FiniteElementSpace[] = {  {&_swigt__p_p_mfem__FiniteElementSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__GridFunction[] = {  {&_swigt__p_p_mfem__GridFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IntegrationRule[] = {  {&_swigt__p_p_mfem__IntegrationRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Mesh[] = {  {&_swigt__p_p_mfem__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConformingFaceRestriction[] = {{&_swigt__p_p_mfem__ConformingFaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConstrainedOperator[] = {{&_swigt__p_p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrix[] = {{&_swigt__p_p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrixInverse[] = {{&_swigt__p_p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseSymmetricMatrix[] = {{&_swigt__p_p_mfem__DenseSymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ElementRestriction[] = {{&_swigt__p_p_mfem__ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ElementRestrictionOperator[] = {{&_swigt__p_p_mfem__ElementRestrictionOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__FaceRestriction[] = {{&_swigt__p_p_mfem__FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IdentityOperator[] = {{&_swigt__p_p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__L2ElementRestriction[] = {{&_swigt__p_p_mfem__L2ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__L2FaceRestriction[] = {{&_swigt__p_p_mfem__L2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Matrix[] = {{&_swigt__p_p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__MatrixInverse[] = {{&_swigt__p_p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__NCL2FaceRestriction[] = {{&_swigt__p_p_mfem__NCL2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ProductOperator[] = {{&_swigt__p_p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyOperatorBase[] = {{&_swigt__p_p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RAPOperator[] = {{&_swigt__p_p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ScaledOperator[] = {{&_swigt__p_p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SparseMatrix[] = {{&_swigt__p_p_mfem__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentOperator[] = {{&_swigt__p_p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TransposeOperator[] = {{&_swigt__p_p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TripleProductOperator[] = {{&_swigt__p_p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Operator[] = {  {&_swigt__p_p_mfem__Operator, 0, 0, 0},  {&_swigt__p_p_mfem__AbstractSparseMatrix, _p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ConformingFaceRestriction, _p_p_mfem__ConformingFaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ConstrainedOperator, _p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrix, _p_p_mfem__DenseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseSymmetricMatrix, _p_p_mfem__DenseSymmetricMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ElementRestriction, _p_p_mfem__ElementRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ElementRestrictionOperator, _p_p_mfem__ElementRestrictionOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__FaceRestriction, _p_p_mfem__FaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__IdentityOperator, _p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__L2ElementRestriction, _p_p_mfem__L2ElementRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__L2FaceRestriction, _p_p_mfem__L2FaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Matrix, _p_p_mfem__MatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__NCL2FaceRestriction, _p_p_mfem__NCL2FaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ProductOperator, _p_p_mfem__ProductOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyOperatorBase, _p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyTimeDependentOperatorBase, _p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RAPOperator, _p_p_mfem__RAPOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RectangularConstrainedOperator, _p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ScaledOperator, _p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, _p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Solver, _p_p_mfem__SolverTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SparseMatrix, _p_p_mfem__SparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentAdjointOperator, _p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentOperator, _p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TransposeOperator, _p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TripleProductOperator, _p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Solver[] = {  {&_swigt__p_p_mfem__Solver, 0, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__CoefficientVector[] = {{&_swigt__p_p_mfem__CoefficientVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__LinearForm[] = {{&_swigt__p_p_mfem__LinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Vector[] = {  {&_swigt__p_p_mfem__Vector, 0, 0, 0},  {&_swigt__p_p_mfem__CoefficientVector, _p_p_mfem__CoefficientVectorTo_p_p_mfem__Vector, 0, 0},  {&_swigt__p_p_mfem__GridFunction, _p_p_mfem__GridFunctionTo_p_p_mfem__Vector, 0, 0},  {&_swigt__p_p_mfem__LinearForm, _p_p_mfem__LinearFormTo_p_p_mfem__Vector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pri_t[] = {  {&_swigt__p_pri_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pyr_t[] = {  {&_swigt__p_pyr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_quad_t[] = {  {&_swigt__p_quad_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seg_t[] = {  {&_swigt__p_seg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__OutStream[] = {{&_swigt__p_mfem__OutStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},  {&_swigt__p_mfem__OutStream, _p_mfem__OutStreamTo_p_std__ostream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tet_t[] = {  {&_swigt__p_tet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tri_t[] = {  {&_swigt__p_tri_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc___input,
  _swigc__p_MatrixNumbaCoefficient,
  _swigc__p_PyMFEM__wFILE,
  _swigc__p_RefCoord,
  _swigc__p_ScalarNumbaCoefficient,
  _swigc__p_VectorNumbaCoefficient,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_r_q_const__mfem__Vector_r_mfem__Vector__void,
  _swigc__p_hex_t,
  _swigc__p_int,
  _swigc__p_mfem__AbstractSparseMatrix,
  _swigc__p_mfem__ArrayT_double_t,
  _swigc__p_mfem__ArrayT_int_t,
  _swigc__p_mfem__ArrayT_mfem__FaceGeometricFactors_p_t,
  _swigc__p_mfem__ArrayT_mfem__GeometricFactors_p_t,
  _swigc__p_mfem__ArrayT_mfem__Geometry__Type_t,
  _swigc__p_mfem__ArrayT_mfem__IntegrationPoint_t,
  _swigc__p_mfem__ArrayT_mfem__KnotVector_p_t,
  _swigc__p_mfem__ArrayT_mfem__Refinement_t,
  _swigc__p_mfem__ArrayT_mfem__Vector_p_t,
  _swigc__p_mfem__BiCubic2DFiniteElement,
  _swigc__p_mfem__BiLinear2DFiniteElement,
  _swigc__p_mfem__BiQuad2DFiniteElement,
  _swigc__p_mfem__BiQuadPos2DFiniteElement,
  _swigc__p_mfem__CoarseFineTransformations,
  _swigc__p_mfem__Coefficient,
  _swigc__p_mfem__CoefficientVector,
  _swigc__p_mfem__ConformingFaceRestriction,
  _swigc__p_mfem__ConstantCoefficient,
  _swigc__p_mfem__ConstrainedOperator,
  _swigc__p_mfem__ConvectionIntegrator,
  _swigc__p_mfem__CrossCrossCoefficient,
  _swigc__p_mfem__CrouzeixRaviartFiniteElement,
  _swigc__p_mfem__CrouzeixRaviartQuadFiniteElement,
  _swigc__p_mfem__Cubic1DFiniteElement,
  _swigc__p_mfem__Cubic2DFiniteElement,
  _swigc__p_mfem__Cubic3DFiniteElement,
  _swigc__p_mfem__CurlGridFunctionCoefficient,
  _swigc__p_mfem__DGTraceIntegrator,
  _swigc__p_mfem__DSTable,
  _swigc__p_mfem__DeltaCoefficient,
  _swigc__p_mfem__DenseMatrix,
  _swigc__p_mfem__DenseMatrixInverse,
  _swigc__p_mfem__DenseSymmetricMatrix,
  _swigc__p_mfem__DeterminantCoefficient,
  _swigc__p_mfem__DivergenceGridFunctionCoefficient,
  _swigc__p_mfem__Element,
  _swigc__p_mfem__ElementRestriction,
  _swigc__p_mfem__ElementRestrictionOperator,
  _swigc__p_mfem__ElementTransformation,
  _swigc__p_mfem__ExtrudeCoefficient,
  _swigc__p_mfem__FaceElementTransformations,
  _swigc__p_mfem__FaceGeometricFactors,
  _swigc__p_mfem__FaceRestriction,
  _swigc__p_mfem__FiniteElement,
  _swigc__p_mfem__FiniteElementSpace,
  _swigc__p_mfem__FunctionCoefficient,
  _swigc__p_mfem__GaussBiLinear2DFiniteElement,
  _swigc__p_mfem__GaussBiQuad2DFiniteElement,
  _swigc__p_mfem__GaussLinear2DFiniteElement,
  _swigc__p_mfem__GaussQuad2DFiniteElement,
  _swigc__p_mfem__GeometricFactors,
  _swigc__p_mfem__GradientGridFunctionCoefficient,
  _swigc__p_mfem__GridFunction,
  _swigc__p_mfem__GridFunctionCoefficient,
  _swigc__p_mfem__H1Pos_HexahedronElement,
  _swigc__p_mfem__H1Pos_QuadrilateralElement,
  _swigc__p_mfem__H1Pos_SegmentElement,
  _swigc__p_mfem__H1Pos_TetrahedronElement,
  _swigc__p_mfem__H1Pos_TriangleElement,
  _swigc__p_mfem__H1Pos_WedgeElement,
  _swigc__p_mfem__H1Ser_QuadrilateralElement,
  _swigc__p_mfem__H1_HexahedronElement,
  _swigc__p_mfem__H1_QuadrilateralElement,
  _swigc__p_mfem__H1_SegmentElement,
  _swigc__p_mfem__H1_TetrahedronElement,
  _swigc__p_mfem__H1_TriangleElement,
  _swigc__p_mfem__H1_WedgeElement,
  _swigc__p_mfem__IdentityMatrixCoefficient,
  _swigc__p_mfem__IdentityOperator,
  _swigc__p_mfem__InnerProductCoefficient,
  _swigc__p_mfem__IntegrationPoint,
  _swigc__p_mfem__IntegrationRule,
  _swigc__p_mfem__InverseElementTransformation,
  _swigc__p_mfem__InverseMatrixCoefficient,
  _swigc__p_mfem__IsoparametricTransformation,
  _swigc__p_mfem__L2ElementRestriction,
  _swigc__p_mfem__L2FaceRestriction,
  _swigc__p_mfem__L2Pos_HexahedronElement,
  _swigc__p_mfem__L2Pos_QuadrilateralElement,
  _swigc__p_mfem__L2Pos_SegmentElement,
  _swigc__p_mfem__L2Pos_TetrahedronElement,
  _swigc__p_mfem__L2Pos_TriangleElement,
  _swigc__p_mfem__L2Pos_WedgeElement,
  _swigc__p_mfem__L2_FECollection,
  _swigc__p_mfem__L2_HexahedronElement,
  _swigc__p_mfem__L2_QuadrilateralElement,
  _swigc__p_mfem__L2_SegmentElement,
  _swigc__p_mfem__L2_TetrahedronElement,
  _swigc__p_mfem__L2_TriangleElement,
  _swigc__p_mfem__L2_WedgeElement,
  _swigc__p_mfem__Lagrange1DFiniteElement,
  _swigc__p_mfem__LagrangeHexFiniteElement,
  _swigc__p_mfem__Linear1DFiniteElement,
  _swigc__p_mfem__Linear2DFiniteElement,
  _swigc__p_mfem__Linear3DFiniteElement,
  _swigc__p_mfem__LinearForm,
  _swigc__p_mfem__LinearPyramidFiniteElement,
  _swigc__p_mfem__LinearWedgeFiniteElement,
  _swigc__p_mfem__Matrix,
  _swigc__p_mfem__MatrixArrayCoefficient,
  _swigc__p_mfem__MatrixCoefficient,
  _swigc__p_mfem__MatrixConstantCoefficient,
  _swigc__p_mfem__MatrixFunctionCoefficient,
  _swigc__p_mfem__MatrixInverse,
  _swigc__p_mfem__MatrixProductCoefficient,
  _swigc__p_mfem__MatrixPyCoefficientBase,
  _swigc__p_mfem__MatrixRestrictedCoefficient,
  _swigc__p_mfem__MatrixSumCoefficient,
  _swigc__p_mfem__MatrixVectorProductCoefficient,
  _swigc__p_mfem__Mesh,
  _swigc__p_mfem__Mesh__FaceInformation,
  _swigc__p_mfem__NCL2FaceRestriction,
  _swigc__p_mfem__NCMesh,
  _swigc__p_mfem__ND_HexahedronElement,
  _swigc__p_mfem__ND_QuadrilateralElement,
  _swigc__p_mfem__ND_R1D_PointElement,
  _swigc__p_mfem__ND_R1D_SegmentElement,
  _swigc__p_mfem__ND_R2D_FiniteElement,
  _swigc__p_mfem__ND_R2D_QuadrilateralElement,
  _swigc__p_mfem__ND_R2D_SegmentElement,
  _swigc__p_mfem__ND_R2D_TriangleElement,
  _swigc__p_mfem__ND_SegmentElement,
  _swigc__p_mfem__ND_TetrahedronElement,
  _swigc__p_mfem__ND_TriangleElement,
  _swigc__p_mfem__ND_WedgeElement,
  _swigc__p_mfem__NURBS1DFiniteElement,
  _swigc__p_mfem__NURBS2DFiniteElement,
  _swigc__p_mfem__NURBS3DFiniteElement,
  _swigc__p_mfem__NURBSExtension,
  _swigc__p_mfem__NURBSFiniteElement,
  _swigc__p_mfem__Nedelec1HexFiniteElement,
  _swigc__p_mfem__Nedelec1PyrFiniteElement,
  _swigc__p_mfem__Nedelec1TetFiniteElement,
  _swigc__p_mfem__Nedelec1WdgFiniteElement,
  _swigc__p_mfem__NodalFiniteElement,
  _swigc__p_mfem__NodalTensorFiniteElement,
  _swigc__p_mfem__NodeExtrudeCoefficient,
  _swigc__p_mfem__NormalizedVectorCoefficient,
  _swigc__p_mfem__Operator,
  _swigc__p_mfem__OperatorHandle,
  _swigc__p_mfem__OutStream,
  _swigc__p_mfem__OuterProductCoefficient,
  _swigc__p_mfem__P0HexFiniteElement,
  _swigc__p_mfem__P0PyrFiniteElement,
  _swigc__p_mfem__P0QuadFiniteElement,
  _swigc__p_mfem__P0SegmentFiniteElement,
  _swigc__p_mfem__P0TetFiniteElement,
  _swigc__p_mfem__P0TriangleFiniteElement,
  _swigc__p_mfem__P0WdgFiniteElement,
  _swigc__p_mfem__P1OnQuadFiniteElement,
  _swigc__p_mfem__P1SegmentFiniteElement,
  _swigc__p_mfem__P1TetNonConfFiniteElement,
  _swigc__p_mfem__P2SegmentFiniteElement,
  _swigc__p_mfem__PWCoefficient,
  _swigc__p_mfem__PWConstCoefficient,
  _swigc__p_mfem__PWMatrixCoefficient,
  _swigc__p_mfem__PWVectorCoefficient,
  _swigc__p_mfem__PointFiniteElement,
  _swigc__p_mfem__PositiveFiniteElement,
  _swigc__p_mfem__PositiveTensorFiniteElement,
  _swigc__p_mfem__PowerCoefficient,
  _swigc__p_mfem__ProductCoefficient,
  _swigc__p_mfem__ProductOperator,
  _swigc__p_mfem__PyCoefficientBase,
  _swigc__p_mfem__PyOperatorBase,
  _swigc__p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_mfem__Quad1DFiniteElement,
  _swigc__p_mfem__Quad2DFiniteElement,
  _swigc__p_mfem__QuadPos1DFiniteElement,
  _swigc__p_mfem__Quadratic3DFiniteElement,
  _swigc__p_mfem__QuadratureFunction,
  _swigc__p_mfem__QuadratureFunctionCoefficient,
  _swigc__p_mfem__RAPOperator,
  _swigc__p_mfem__RT0HexFiniteElement,
  _swigc__p_mfem__RT0PyrFiniteElement,
  _swigc__p_mfem__RT0QuadFiniteElement,
  _swigc__p_mfem__RT0TetFiniteElement,
  _swigc__p_mfem__RT0TriangleFiniteElement,
  _swigc__p_mfem__RT0WdgFiniteElement,
  _swigc__p_mfem__RT1HexFiniteElement,
  _swigc__p_mfem__RT1QuadFiniteElement,
  _swigc__p_mfem__RT1TriangleFiniteElement,
  _swigc__p_mfem__RT2QuadFiniteElement,
  _swigc__p_mfem__RT2TriangleFiniteElement,
  _swigc__p_mfem__RT_HexahedronElement,
  _swigc__p_mfem__RT_QuadrilateralElement,
  _swigc__p_mfem__RT_R1D_SegmentElement,
  _swigc__p_mfem__RT_R2D_FiniteElement,
  _swigc__p_mfem__RT_R2D_QuadrilateralElement,
  _swigc__p_mfem__RT_R2D_SegmentElement,
  _swigc__p_mfem__RT_R2D_TriangleElement,
  _swigc__p_mfem__RT_TetrahedronElement,
  _swigc__p_mfem__RT_TriangleElement,
  _swigc__p_mfem__RT_WedgeElement,
  _swigc__p_mfem__RatioCoefficient,
  _swigc__p_mfem__RectangularConstrainedOperator,
  _swigc__p_mfem__RefinedBiLinear2DFiniteElement,
  _swigc__p_mfem__RefinedLinear1DFiniteElement,
  _swigc__p_mfem__RefinedLinear2DFiniteElement,
  _swigc__p_mfem__RefinedLinear3DFiniteElement,
  _swigc__p_mfem__RefinedTriLinear3DFiniteElement,
  _swigc__p_mfem__Refinement,
  _swigc__p_mfem__RestrictedCoefficient,
  _swigc__p_mfem__RotTriLinearHexFiniteElement,
  _swigc__p_mfem__STable,
  _swigc__p_mfem__ScalarFiniteElement,
  _swigc__p_mfem__ScalarMatrixProductCoefficient,
  _swigc__p_mfem__ScalarVectorProductCoefficient,
  _swigc__p_mfem__ScaledOperator,
  _swigc__p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_mfem__Solver,
  _swigc__p_mfem__SparseMatrix,
  _swigc__p_mfem__SumCoefficient,
  _swigc__p_mfem__SymmetricMatrixCoefficient,
  _swigc__p_mfem__SymmetricMatrixConstantCoefficient,
  _swigc__p_mfem__SymmetricMatrixFunctionCoefficient,
  _swigc__p_mfem__Table,
  _swigc__p_mfem__TimeDependentAdjointOperator,
  _swigc__p_mfem__TimeDependentOperator,
  _swigc__p_mfem__TransformedCoefficient,
  _swigc__p_mfem__TransposeMatrixCoefficient,
  _swigc__p_mfem__TransposeOperator,
  _swigc__p_mfem__TriLinear3DFiniteElement,
  _swigc__p_mfem__TripleProductOperator,
  _swigc__p_mfem__Vector,
  _swigc__p_mfem__VectorArrayCoefficient,
  _swigc__p_mfem__VectorCoefficient,
  _swigc__p_mfem__VectorConstantCoefficient,
  _swigc__p_mfem__VectorCrossProductCoefficient,
  _swigc__p_mfem__VectorDeltaCoefficient,
  _swigc__p_mfem__VectorFiniteElement,
  _swigc__p_mfem__VectorFunctionCoefficient,
  _swigc__p_mfem__VectorGridFunctionCoefficient,
  _swigc__p_mfem__VectorPyCoefficientBase,
  _swigc__p_mfem__VectorQuadratureFunctionCoefficient,
  _swigc__p_mfem__VectorRestrictedCoefficient,
  _swigc__p_mfem__VectorRotProductCoefficient,
  _swigc__p_mfem__VectorSumCoefficient,
  _swigc__p_mfem__VectorTensorFiniteElement,
  _swigc__p_mfem__Vertex,
  _swigc__p_p_mfem__AbstractSparseMatrix,
  _swigc__p_p_mfem__CoefficientVector,
  _swigc__p_p_mfem__ConformingFaceRestriction,
  _swigc__p_p_mfem__ConstrainedOperator,
  _swigc__p_p_mfem__DenseMatrix,
  _swigc__p_p_mfem__DenseMatrixInverse,
  _swigc__p_p_mfem__DenseSymmetricMatrix,
  _swigc__p_p_mfem__Element,
  _swigc__p_p_mfem__ElementRestriction,
  _swigc__p_p_mfem__ElementRestrictionOperator,
  _swigc__p_p_mfem__FaceRestriction,
  _swigc__p_p_mfem__FiniteElementSpace,
  _swigc__p_p_mfem__GridFunction,
  _swigc__p_p_mfem__IdentityOperator,
  _swigc__p_p_mfem__IntegrationRule,
  _swigc__p_p_mfem__L2ElementRestriction,
  _swigc__p_p_mfem__L2FaceRestriction,
  _swigc__p_p_mfem__LinearForm,
  _swigc__p_p_mfem__Matrix,
  _swigc__p_p_mfem__MatrixInverse,
  _swigc__p_p_mfem__Mesh,
  _swigc__p_p_mfem__NCL2FaceRestriction,
  _swigc__p_p_mfem__Operator,
  _swigc__p_p_mfem__ProductOperator,
  _swigc__p_p_mfem__PyOperatorBase,
  _swigc__p_p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_p_mfem__RAPOperator,
  _swigc__p_p_mfem__RectangularConstrainedOperator,
  _swigc__p_p_mfem__ScaledOperator,
  _swigc__p_p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_p_mfem__Solver,
  _swigc__p_p_mfem__SparseMatrix,
  _swigc__p_p_mfem__TimeDependentAdjointOperator,
  _swigc__p_p_mfem__TimeDependentOperator,
  _swigc__p_p_mfem__TransposeOperator,
  _swigc__p_p_mfem__TripleProductOperator,
  _swigc__p_p_mfem__Vector,
  _swigc__p_pri_t,
  _swigc__p_pyr_t,
  _swigc__p_quad_t,
  _swigc__p_seg_t,
  _swigc__p_size_type,
  _swigc__p_std__ostream,
  _swigc__p_tet_t,
  _swigc__p_tri_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "FaceType_Interior",SWIG_From_int(static_cast< int >(mfem::FaceType::Interior)));
  SWIG_Python_SetConstant(d, "FaceType_Boundary",SWIG_From_int(static_cast< int >(mfem::FaceType::Boundary)));
  SWIG_Python_SetConstant(d, "Mesh_NONE",SWIG_From_int(static_cast< int >(mfem::Mesh::NONE)));
  SWIG_Python_SetConstant(d, "Mesh_REFINE",SWIG_From_int(static_cast< int >(mfem::Mesh::REFINE)));
  SWIG_Python_SetConstant(d, "Mesh_DEREFINE",SWIG_From_int(static_cast< int >(mfem::Mesh::DEREFINE)));
  SWIG_Python_SetConstant(d, "Mesh_REBALANCE",SWIG_From_int(static_cast< int >(mfem::Mesh::REBALANCE)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  SWIG_addvarlink(globals, "Mesh_remove_unused_vertices", Swig_var_Mesh_remove_unused_vertices_get, Swig_var_Mesh_remove_unused_vertices_set);
  SWIG_Python_SetConstant(d, "Mesh_FaceTopology_Boundary",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceTopology::Boundary)));
  SWIG_Python_SetConstant(d, "Mesh_FaceTopology_Conforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceTopology::Conforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceTopology_Nonconforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceTopology::Nonconforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceTopology_NA",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceTopology::NA)));
  SWIG_Python_SetConstant(d, "Mesh_ElementLocation_Local",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementLocation::Local)));
  SWIG_Python_SetConstant(d, "Mesh_ElementLocation_FaceNbr",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementLocation::FaceNbr)));
  SWIG_Python_SetConstant(d, "Mesh_ElementLocation_NA",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementLocation::NA)));
  SWIG_Python_SetConstant(d, "Mesh_ElementConformity_Coincident",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementConformity::Coincident)));
  SWIG_Python_SetConstant(d, "Mesh_ElementConformity_Superset",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementConformity::Superset)));
  SWIG_Python_SetConstant(d, "Mesh_ElementConformity_Subset",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementConformity::Subset)));
  SWIG_Python_SetConstant(d, "Mesh_ElementConformity_NA",SWIG_From_int(static_cast< int >(mfem::Mesh::ElementConformity::NA)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_Boundary",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::Boundary)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_LocalConforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::LocalConforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_LocalSlaveNonconforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::LocalSlaveNonconforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_SharedConforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::SharedConforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_SharedSlaveNonconforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::SharedSlaveNonconforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_MasterNonconforming",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::MasterNonconforming)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_GhostSlave",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::GhostSlave)));
  SWIG_Python_SetConstant(d, "Mesh_FaceInfoTag_GhostMaster",SWIG_From_int(static_cast< int >(mfem::Mesh::FaceInfoTag::GhostMaster)));
  SWIG_Python_SetConstant(d, "GeometricFactors_COORDINATES",SWIG_From_int(static_cast< int >(mfem::GeometricFactors::COORDINATES)));
  SWIG_Python_SetConstant(d, "GeometricFactors_JACOBIANS",SWIG_From_int(static_cast< int >(mfem::GeometricFactors::JACOBIANS)));
  SWIG_Python_SetConstant(d, "GeometricFactors_DETERMINANTS",SWIG_From_int(static_cast< int >(mfem::GeometricFactors::DETERMINANTS)));
  SWIG_Python_SetConstant(d, "FaceGeometricFactors_COORDINATES",SWIG_From_int(static_cast< int >(mfem::FaceGeometricFactors::COORDINATES)));
  SWIG_Python_SetConstant(d, "FaceGeometricFactors_JACOBIANS",SWIG_From_int(static_cast< int >(mfem::FaceGeometricFactors::JACOBIANS)));
  SWIG_Python_SetConstant(d, "FaceGeometricFactors_DETERMINANTS",SWIG_From_int(static_cast< int >(mfem::FaceGeometricFactors::DETERMINANTS)));
  SWIG_Python_SetConstant(d, "FaceGeometricFactors_NORMALS",SWIG_From_int(static_cast< int >(mfem::FaceGeometricFactors::NORMALS)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}


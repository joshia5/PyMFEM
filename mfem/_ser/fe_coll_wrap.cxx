/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_FASTPROXY

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE__input swig_types[0]
#define SWIGTYPE_p_MatrixNumbaCoefficient swig_types[1]
#define SWIGTYPE_p_PyMFEM__wFILE swig_types[2]
#define SWIGTYPE_p_RefCoord swig_types[3]
#define SWIGTYPE_p_ScalarNumbaCoefficient swig_types[4]
#define SWIGTYPE_p_VectorNumbaCoefficient swig_types[5]
#define SWIGTYPE_p_allocator_type swig_types[6]
#define SWIGTYPE_p_bool swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_difference_type swig_types[9]
#define SWIGTYPE_p_double swig_types[10]
#define SWIGTYPE_p_hex_t swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_mfem__AbstractSparseMatrix swig_types[13]
#define SWIGTYPE_p_mfem__ArrayT_int_t swig_types[14]
#define SWIGTYPE_p_mfem__BiCubic2DFiniteElement swig_types[15]
#define SWIGTYPE_p_mfem__BiLinear2DFiniteElement swig_types[16]
#define SWIGTYPE_p_mfem__BiQuad2DFiniteElement swig_types[17]
#define SWIGTYPE_p_mfem__BiQuadPos2DFiniteElement swig_types[18]
#define SWIGTYPE_p_mfem__Coefficient swig_types[19]
#define SWIGTYPE_p_mfem__CoefficientVector swig_types[20]
#define SWIGTYPE_p_mfem__ConformingFaceRestriction swig_types[21]
#define SWIGTYPE_p_mfem__Const2DFECollection swig_types[22]
#define SWIGTYPE_p_mfem__Const3DFECollection swig_types[23]
#define SWIGTYPE_p_mfem__ConstantCoefficient swig_types[24]
#define SWIGTYPE_p_mfem__ConstrainedOperator swig_types[25]
#define SWIGTYPE_p_mfem__ConvectionIntegrator swig_types[26]
#define SWIGTYPE_p_mfem__CrossCrossCoefficient swig_types[27]
#define SWIGTYPE_p_mfem__CrouzeixRaviartFECollection swig_types[28]
#define SWIGTYPE_p_mfem__CrouzeixRaviartFiniteElement swig_types[29]
#define SWIGTYPE_p_mfem__CrouzeixRaviartQuadFiniteElement swig_types[30]
#define SWIGTYPE_p_mfem__Cubic1DFiniteElement swig_types[31]
#define SWIGTYPE_p_mfem__Cubic2DFiniteElement swig_types[32]
#define SWIGTYPE_p_mfem__Cubic3DFiniteElement swig_types[33]
#define SWIGTYPE_p_mfem__CubicDiscont2DFECollection swig_types[34]
#define SWIGTYPE_p_mfem__CubicFECollection swig_types[35]
#define SWIGTYPE_p_mfem__CurlGridFunctionCoefficient swig_types[36]
#define SWIGTYPE_p_mfem__DGTraceIntegrator swig_types[37]
#define SWIGTYPE_p_mfem__DG_Interface_FECollection swig_types[38]
#define SWIGTYPE_p_mfem__DeltaCoefficient swig_types[39]
#define SWIGTYPE_p_mfem__DenseMatrix swig_types[40]
#define SWIGTYPE_p_mfem__DenseMatrixInverse swig_types[41]
#define SWIGTYPE_p_mfem__DenseSymmetricMatrix swig_types[42]
#define SWIGTYPE_p_mfem__DeterminantCoefficient swig_types[43]
#define SWIGTYPE_p_mfem__DivergenceGridFunctionCoefficient swig_types[44]
#define SWIGTYPE_p_mfem__ElementRestriction swig_types[45]
#define SWIGTYPE_p_mfem__ElementRestrictionOperator swig_types[46]
#define SWIGTYPE_p_mfem__ExtrudeCoefficient swig_types[47]
#define SWIGTYPE_p_mfem__FaceRestriction swig_types[48]
#define SWIGTYPE_p_mfem__FiniteElement swig_types[49]
#define SWIGTYPE_p_mfem__FiniteElementCollection swig_types[50]
#define SWIGTYPE_p_mfem__FiniteElementSpace swig_types[51]
#define SWIGTYPE_p_mfem__FunctionCoefficient swig_types[52]
#define SWIGTYPE_p_mfem__GaussBiLinear2DFiniteElement swig_types[53]
#define SWIGTYPE_p_mfem__GaussBiQuad2DFiniteElement swig_types[54]
#define SWIGTYPE_p_mfem__GaussLinear2DFiniteElement swig_types[55]
#define SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection swig_types[56]
#define SWIGTYPE_p_mfem__GaussQuad2DFiniteElement swig_types[57]
#define SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection swig_types[58]
#define SWIGTYPE_p_mfem__GradientGridFunctionCoefficient swig_types[59]
#define SWIGTYPE_p_mfem__GridFunction swig_types[60]
#define SWIGTYPE_p_mfem__GridFunctionCoefficient swig_types[61]
#define SWIGTYPE_p_mfem__H1Pos_FECollection swig_types[62]
#define SWIGTYPE_p_mfem__H1Pos_HexahedronElement swig_types[63]
#define SWIGTYPE_p_mfem__H1Pos_QuadrilateralElement swig_types[64]
#define SWIGTYPE_p_mfem__H1Pos_SegmentElement swig_types[65]
#define SWIGTYPE_p_mfem__H1Pos_TetrahedronElement swig_types[66]
#define SWIGTYPE_p_mfem__H1Pos_TriangleElement swig_types[67]
#define SWIGTYPE_p_mfem__H1Pos_WedgeElement swig_types[68]
#define SWIGTYPE_p_mfem__H1Ser_FECollection swig_types[69]
#define SWIGTYPE_p_mfem__H1Ser_QuadrilateralElement swig_types[70]
#define SWIGTYPE_p_mfem__H1_FECollection swig_types[71]
#define SWIGTYPE_p_mfem__H1_HexahedronElement swig_types[72]
#define SWIGTYPE_p_mfem__H1_QuadrilateralElement swig_types[73]
#define SWIGTYPE_p_mfem__H1_SegmentElement swig_types[74]
#define SWIGTYPE_p_mfem__H1_TetrahedronElement swig_types[75]
#define SWIGTYPE_p_mfem__H1_Trace_FECollection swig_types[76]
#define SWIGTYPE_p_mfem__H1_TriangleElement swig_types[77]
#define SWIGTYPE_p_mfem__H1_WedgeElement swig_types[78]
#define SWIGTYPE_p_mfem__IdentityMatrixCoefficient swig_types[79]
#define SWIGTYPE_p_mfem__IdentityOperator swig_types[80]
#define SWIGTYPE_p_mfem__InnerProductCoefficient swig_types[81]
#define SWIGTYPE_p_mfem__IntegrationPoint swig_types[82]
#define SWIGTYPE_p_mfem__IntegrationRule swig_types[83]
#define SWIGTYPE_p_mfem__InverseMatrixCoefficient swig_types[84]
#define SWIGTYPE_p_mfem__L2ElementRestriction swig_types[85]
#define SWIGTYPE_p_mfem__L2FaceRestriction swig_types[86]
#define SWIGTYPE_p_mfem__L2Pos_HexahedronElement swig_types[87]
#define SWIGTYPE_p_mfem__L2Pos_QuadrilateralElement swig_types[88]
#define SWIGTYPE_p_mfem__L2Pos_SegmentElement swig_types[89]
#define SWIGTYPE_p_mfem__L2Pos_TetrahedronElement swig_types[90]
#define SWIGTYPE_p_mfem__L2Pos_TriangleElement swig_types[91]
#define SWIGTYPE_p_mfem__L2Pos_WedgeElement swig_types[92]
#define SWIGTYPE_p_mfem__L2_FECollection swig_types[93]
#define SWIGTYPE_p_mfem__L2_HexahedronElement swig_types[94]
#define SWIGTYPE_p_mfem__L2_QuadrilateralElement swig_types[95]
#define SWIGTYPE_p_mfem__L2_SegmentElement swig_types[96]
#define SWIGTYPE_p_mfem__L2_TetrahedronElement swig_types[97]
#define SWIGTYPE_p_mfem__L2_TriangleElement swig_types[98]
#define SWIGTYPE_p_mfem__L2_WedgeElement swig_types[99]
#define SWIGTYPE_p_mfem__Lagrange1DFiniteElement swig_types[100]
#define SWIGTYPE_p_mfem__LagrangeHexFiniteElement swig_types[101]
#define SWIGTYPE_p_mfem__Linear1DFiniteElement swig_types[102]
#define SWIGTYPE_p_mfem__Linear2DFiniteElement swig_types[103]
#define SWIGTYPE_p_mfem__Linear3DFiniteElement swig_types[104]
#define SWIGTYPE_p_mfem__LinearDiscont2DFECollection swig_types[105]
#define SWIGTYPE_p_mfem__LinearDiscont3DFECollection swig_types[106]
#define SWIGTYPE_p_mfem__LinearFECollection swig_types[107]
#define SWIGTYPE_p_mfem__LinearForm swig_types[108]
#define SWIGTYPE_p_mfem__LinearNonConf3DFECollection swig_types[109]
#define SWIGTYPE_p_mfem__LinearPyramidFiniteElement swig_types[110]
#define SWIGTYPE_p_mfem__LinearWedgeFiniteElement swig_types[111]
#define SWIGTYPE_p_mfem__Local_FECollection swig_types[112]
#define SWIGTYPE_p_mfem__Matrix swig_types[113]
#define SWIGTYPE_p_mfem__MatrixArrayCoefficient swig_types[114]
#define SWIGTYPE_p_mfem__MatrixCoefficient swig_types[115]
#define SWIGTYPE_p_mfem__MatrixConstantCoefficient swig_types[116]
#define SWIGTYPE_p_mfem__MatrixFunctionCoefficient swig_types[117]
#define SWIGTYPE_p_mfem__MatrixInverse swig_types[118]
#define SWIGTYPE_p_mfem__MatrixProductCoefficient swig_types[119]
#define SWIGTYPE_p_mfem__MatrixPyCoefficientBase swig_types[120]
#define SWIGTYPE_p_mfem__MatrixRestrictedCoefficient swig_types[121]
#define SWIGTYPE_p_mfem__MatrixSumCoefficient swig_types[122]
#define SWIGTYPE_p_mfem__MatrixVectorProductCoefficient swig_types[123]
#define SWIGTYPE_p_mfem__NCL2FaceRestriction swig_types[124]
#define SWIGTYPE_p_mfem__ND1_3DFECollection swig_types[125]
#define SWIGTYPE_p_mfem__ND_FECollection swig_types[126]
#define SWIGTYPE_p_mfem__ND_HexahedronElement swig_types[127]
#define SWIGTYPE_p_mfem__ND_QuadrilateralElement swig_types[128]
#define SWIGTYPE_p_mfem__ND_R1D_FECollection swig_types[129]
#define SWIGTYPE_p_mfem__ND_R1D_PointElement swig_types[130]
#define SWIGTYPE_p_mfem__ND_R1D_SegmentElement swig_types[131]
#define SWIGTYPE_p_mfem__ND_R2D_FECollection swig_types[132]
#define SWIGTYPE_p_mfem__ND_R2D_FiniteElement swig_types[133]
#define SWIGTYPE_p_mfem__ND_R2D_QuadrilateralElement swig_types[134]
#define SWIGTYPE_p_mfem__ND_R2D_SegmentElement swig_types[135]
#define SWIGTYPE_p_mfem__ND_R2D_Trace_FECollection swig_types[136]
#define SWIGTYPE_p_mfem__ND_R2D_TriangleElement swig_types[137]
#define SWIGTYPE_p_mfem__ND_SegmentElement swig_types[138]
#define SWIGTYPE_p_mfem__ND_TetrahedronElement swig_types[139]
#define SWIGTYPE_p_mfem__ND_Trace_FECollection swig_types[140]
#define SWIGTYPE_p_mfem__ND_TriangleElement swig_types[141]
#define SWIGTYPE_p_mfem__ND_WedgeElement swig_types[142]
#define SWIGTYPE_p_mfem__NURBS1DFiniteElement swig_types[143]
#define SWIGTYPE_p_mfem__NURBS2DFiniteElement swig_types[144]
#define SWIGTYPE_p_mfem__NURBS3DFiniteElement swig_types[145]
#define SWIGTYPE_p_mfem__NURBSFECollection swig_types[146]
#define SWIGTYPE_p_mfem__NURBSFiniteElement swig_types[147]
#define SWIGTYPE_p_mfem__Nedelec1HexFiniteElement swig_types[148]
#define SWIGTYPE_p_mfem__Nedelec1PyrFiniteElement swig_types[149]
#define SWIGTYPE_p_mfem__Nedelec1TetFiniteElement swig_types[150]
#define SWIGTYPE_p_mfem__Nedelec1WdgFiniteElement swig_types[151]
#define SWIGTYPE_p_mfem__NodalFiniteElement swig_types[152]
#define SWIGTYPE_p_mfem__NodalTensorFiniteElement swig_types[153]
#define SWIGTYPE_p_mfem__NodeExtrudeCoefficient swig_types[154]
#define SWIGTYPE_p_mfem__NormalizedVectorCoefficient swig_types[155]
#define SWIGTYPE_p_mfem__Operator swig_types[156]
#define SWIGTYPE_p_mfem__OperatorHandle swig_types[157]
#define SWIGTYPE_p_mfem__OuterProductCoefficient swig_types[158]
#define SWIGTYPE_p_mfem__P0HexFiniteElement swig_types[159]
#define SWIGTYPE_p_mfem__P0PyrFiniteElement swig_types[160]
#define SWIGTYPE_p_mfem__P0QuadFiniteElement swig_types[161]
#define SWIGTYPE_p_mfem__P0SegmentFiniteElement swig_types[162]
#define SWIGTYPE_p_mfem__P0TetFiniteElement swig_types[163]
#define SWIGTYPE_p_mfem__P0TriangleFiniteElement swig_types[164]
#define SWIGTYPE_p_mfem__P0WdgFiniteElement swig_types[165]
#define SWIGTYPE_p_mfem__P1OnQuadFECollection swig_types[166]
#define SWIGTYPE_p_mfem__P1OnQuadFiniteElement swig_types[167]
#define SWIGTYPE_p_mfem__P1SegmentFiniteElement swig_types[168]
#define SWIGTYPE_p_mfem__P1TetNonConfFiniteElement swig_types[169]
#define SWIGTYPE_p_mfem__P2SegmentFiniteElement swig_types[170]
#define SWIGTYPE_p_mfem__PWCoefficient swig_types[171]
#define SWIGTYPE_p_mfem__PWConstCoefficient swig_types[172]
#define SWIGTYPE_p_mfem__PWMatrixCoefficient swig_types[173]
#define SWIGTYPE_p_mfem__PWVectorCoefficient swig_types[174]
#define SWIGTYPE_p_mfem__PointFiniteElement swig_types[175]
#define SWIGTYPE_p_mfem__PositiveFiniteElement swig_types[176]
#define SWIGTYPE_p_mfem__PositiveTensorFiniteElement swig_types[177]
#define SWIGTYPE_p_mfem__PowerCoefficient swig_types[178]
#define SWIGTYPE_p_mfem__ProductCoefficient swig_types[179]
#define SWIGTYPE_p_mfem__ProductOperator swig_types[180]
#define SWIGTYPE_p_mfem__PyCoefficientBase swig_types[181]
#define SWIGTYPE_p_mfem__PyOperatorBase swig_types[182]
#define SWIGTYPE_p_mfem__PyTimeDependentOperatorBase swig_types[183]
#define SWIGTYPE_p_mfem__Quad1DFiniteElement swig_types[184]
#define SWIGTYPE_p_mfem__Quad2DFiniteElement swig_types[185]
#define SWIGTYPE_p_mfem__QuadPos1DFiniteElement swig_types[186]
#define SWIGTYPE_p_mfem__Quadratic3DFiniteElement swig_types[187]
#define SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection swig_types[188]
#define SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection swig_types[189]
#define SWIGTYPE_p_mfem__QuadraticFECollection swig_types[190]
#define SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection swig_types[191]
#define SWIGTYPE_p_mfem__QuadraticPosFECollection swig_types[192]
#define SWIGTYPE_p_mfem__QuadratureFunctionCoefficient swig_types[193]
#define SWIGTYPE_p_mfem__RAPOperator swig_types[194]
#define SWIGTYPE_p_mfem__RT0HexFiniteElement swig_types[195]
#define SWIGTYPE_p_mfem__RT0PyrFiniteElement swig_types[196]
#define SWIGTYPE_p_mfem__RT0QuadFiniteElement swig_types[197]
#define SWIGTYPE_p_mfem__RT0TetFiniteElement swig_types[198]
#define SWIGTYPE_p_mfem__RT0TriangleFiniteElement swig_types[199]
#define SWIGTYPE_p_mfem__RT0WdgFiniteElement swig_types[200]
#define SWIGTYPE_p_mfem__RT0_2DFECollection swig_types[201]
#define SWIGTYPE_p_mfem__RT0_3DFECollection swig_types[202]
#define SWIGTYPE_p_mfem__RT1HexFiniteElement swig_types[203]
#define SWIGTYPE_p_mfem__RT1QuadFiniteElement swig_types[204]
#define SWIGTYPE_p_mfem__RT1TriangleFiniteElement swig_types[205]
#define SWIGTYPE_p_mfem__RT1_2DFECollection swig_types[206]
#define SWIGTYPE_p_mfem__RT1_3DFECollection swig_types[207]
#define SWIGTYPE_p_mfem__RT2QuadFiniteElement swig_types[208]
#define SWIGTYPE_p_mfem__RT2TriangleFiniteElement swig_types[209]
#define SWIGTYPE_p_mfem__RT2_2DFECollection swig_types[210]
#define SWIGTYPE_p_mfem__RT_FECollection swig_types[211]
#define SWIGTYPE_p_mfem__RT_HexahedronElement swig_types[212]
#define SWIGTYPE_p_mfem__RT_QuadrilateralElement swig_types[213]
#define SWIGTYPE_p_mfem__RT_R1D_FECollection swig_types[214]
#define SWIGTYPE_p_mfem__RT_R1D_SegmentElement swig_types[215]
#define SWIGTYPE_p_mfem__RT_R2D_FECollection swig_types[216]
#define SWIGTYPE_p_mfem__RT_R2D_FiniteElement swig_types[217]
#define SWIGTYPE_p_mfem__RT_R2D_QuadrilateralElement swig_types[218]
#define SWIGTYPE_p_mfem__RT_R2D_SegmentElement swig_types[219]
#define SWIGTYPE_p_mfem__RT_R2D_Trace_FECollection swig_types[220]
#define SWIGTYPE_p_mfem__RT_R2D_TriangleElement swig_types[221]
#define SWIGTYPE_p_mfem__RT_TetrahedronElement swig_types[222]
#define SWIGTYPE_p_mfem__RT_Trace_FECollection swig_types[223]
#define SWIGTYPE_p_mfem__RT_TriangleElement swig_types[224]
#define SWIGTYPE_p_mfem__RT_WedgeElement swig_types[225]
#define SWIGTYPE_p_mfem__RatioCoefficient swig_types[226]
#define SWIGTYPE_p_mfem__RectangularConstrainedOperator swig_types[227]
#define SWIGTYPE_p_mfem__RefinedBiLinear2DFiniteElement swig_types[228]
#define SWIGTYPE_p_mfem__RefinedLinear1DFiniteElement swig_types[229]
#define SWIGTYPE_p_mfem__RefinedLinear2DFiniteElement swig_types[230]
#define SWIGTYPE_p_mfem__RefinedLinear3DFiniteElement swig_types[231]
#define SWIGTYPE_p_mfem__RefinedLinearFECollection swig_types[232]
#define SWIGTYPE_p_mfem__RefinedTriLinear3DFiniteElement swig_types[233]
#define SWIGTYPE_p_mfem__Refinement swig_types[234]
#define SWIGTYPE_p_mfem__RestrictedCoefficient swig_types[235]
#define SWIGTYPE_p_mfem__RotTriLinearHexFiniteElement swig_types[236]
#define SWIGTYPE_p_mfem__ScalarFiniteElement swig_types[237]
#define SWIGTYPE_p_mfem__ScalarMatrixProductCoefficient swig_types[238]
#define SWIGTYPE_p_mfem__ScalarVectorProductCoefficient swig_types[239]
#define SWIGTYPE_p_mfem__ScaledOperator swig_types[240]
#define SWIGTYPE_p_mfem__SecondOrderTimeDependentOperator swig_types[241]
#define SWIGTYPE_p_mfem__Solver swig_types[242]
#define SWIGTYPE_p_mfem__SparseMatrix swig_types[243]
#define SWIGTYPE_p_mfem__SumCoefficient swig_types[244]
#define SWIGTYPE_p_mfem__SymmetricMatrixCoefficient swig_types[245]
#define SWIGTYPE_p_mfem__SymmetricMatrixConstantCoefficient swig_types[246]
#define SWIGTYPE_p_mfem__SymmetricMatrixFunctionCoefficient swig_types[247]
#define SWIGTYPE_p_mfem__TimeDependentAdjointOperator swig_types[248]
#define SWIGTYPE_p_mfem__TimeDependentOperator swig_types[249]
#define SWIGTYPE_p_mfem__TransformedCoefficient swig_types[250]
#define SWIGTYPE_p_mfem__TransposeMatrixCoefficient swig_types[251]
#define SWIGTYPE_p_mfem__TransposeOperator swig_types[252]
#define SWIGTYPE_p_mfem__TriLinear3DFiniteElement swig_types[253]
#define SWIGTYPE_p_mfem__TripleProductOperator swig_types[254]
#define SWIGTYPE_p_mfem__Vector swig_types[255]
#define SWIGTYPE_p_mfem__VectorArrayCoefficient swig_types[256]
#define SWIGTYPE_p_mfem__VectorCoefficient swig_types[257]
#define SWIGTYPE_p_mfem__VectorConstantCoefficient swig_types[258]
#define SWIGTYPE_p_mfem__VectorCrossProductCoefficient swig_types[259]
#define SWIGTYPE_p_mfem__VectorDeltaCoefficient swig_types[260]
#define SWIGTYPE_p_mfem__VectorFiniteElement swig_types[261]
#define SWIGTYPE_p_mfem__VectorFunctionCoefficient swig_types[262]
#define SWIGTYPE_p_mfem__VectorGridFunctionCoefficient swig_types[263]
#define SWIGTYPE_p_mfem__VectorPyCoefficientBase swig_types[264]
#define SWIGTYPE_p_mfem__VectorQuadratureFunctionCoefficient swig_types[265]
#define SWIGTYPE_p_mfem__VectorRestrictedCoefficient swig_types[266]
#define SWIGTYPE_p_mfem__VectorRotProductCoefficient swig_types[267]
#define SWIGTYPE_p_mfem__VectorSumCoefficient swig_types[268]
#define SWIGTYPE_p_mfem__VectorTensorFiniteElement swig_types[269]
#define SWIGTYPE_p_p_mfem__AbstractSparseMatrix swig_types[270]
#define SWIGTYPE_p_p_mfem__CoefficientVector swig_types[271]
#define SWIGTYPE_p_p_mfem__ConformingFaceRestriction swig_types[272]
#define SWIGTYPE_p_p_mfem__ConstrainedOperator swig_types[273]
#define SWIGTYPE_p_p_mfem__DenseMatrix swig_types[274]
#define SWIGTYPE_p_p_mfem__DenseMatrixInverse swig_types[275]
#define SWIGTYPE_p_p_mfem__DenseSymmetricMatrix swig_types[276]
#define SWIGTYPE_p_p_mfem__ElementRestriction swig_types[277]
#define SWIGTYPE_p_p_mfem__ElementRestrictionOperator swig_types[278]
#define SWIGTYPE_p_p_mfem__FaceRestriction swig_types[279]
#define SWIGTYPE_p_p_mfem__FiniteElementSpace swig_types[280]
#define SWIGTYPE_p_p_mfem__GridFunction swig_types[281]
#define SWIGTYPE_p_p_mfem__IdentityOperator swig_types[282]
#define SWIGTYPE_p_p_mfem__IntegrationRule swig_types[283]
#define SWIGTYPE_p_p_mfem__L2ElementRestriction swig_types[284]
#define SWIGTYPE_p_p_mfem__L2FaceRestriction swig_types[285]
#define SWIGTYPE_p_p_mfem__LinearForm swig_types[286]
#define SWIGTYPE_p_p_mfem__Matrix swig_types[287]
#define SWIGTYPE_p_p_mfem__MatrixInverse swig_types[288]
#define SWIGTYPE_p_p_mfem__NCL2FaceRestriction swig_types[289]
#define SWIGTYPE_p_p_mfem__Operator swig_types[290]
#define SWIGTYPE_p_p_mfem__ProductOperator swig_types[291]
#define SWIGTYPE_p_p_mfem__PyOperatorBase swig_types[292]
#define SWIGTYPE_p_p_mfem__PyTimeDependentOperatorBase swig_types[293]
#define SWIGTYPE_p_p_mfem__RAPOperator swig_types[294]
#define SWIGTYPE_p_p_mfem__RectangularConstrainedOperator swig_types[295]
#define SWIGTYPE_p_p_mfem__ScaledOperator swig_types[296]
#define SWIGTYPE_p_p_mfem__SecondOrderTimeDependentOperator swig_types[297]
#define SWIGTYPE_p_p_mfem__Solver swig_types[298]
#define SWIGTYPE_p_p_mfem__SparseMatrix swig_types[299]
#define SWIGTYPE_p_p_mfem__TimeDependentAdjointOperator swig_types[300]
#define SWIGTYPE_p_p_mfem__TimeDependentOperator swig_types[301]
#define SWIGTYPE_p_p_mfem__TransposeOperator swig_types[302]
#define SWIGTYPE_p_p_mfem__TripleProductOperator swig_types[303]
#define SWIGTYPE_p_p_mfem__Vector swig_types[304]
#define SWIGTYPE_p_pri_t swig_types[305]
#define SWIGTYPE_p_pyr_t swig_types[306]
#define SWIGTYPE_p_quad_t swig_types[307]
#define SWIGTYPE_p_seg_t swig_types[308]
#define SWIGTYPE_p_size_type swig_types[309]
#define SWIGTYPE_p_tet_t swig_types[310]
#define SWIGTYPE_p_tri_t swig_types[311]
#define SWIGTYPE_p_value_type swig_types[312]
static swig_type_info *swig_types[314];
static swig_module_info swig_module = {swig_types, 313, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _fe_coll.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__fe_coll

#else
#  define SWIG_init    init_fe_coll

#endif
#define SWIG_name    "_fe_coll"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <iostream>
#include <sstream>
#include <fstream>
#include <limits>
#include <cmath>
#include <cstring>
#include <ctime>
#include "mfem.hpp"  
#include "pyoperator.hpp"  
#include "numpy/arrayobject.h"
#include "../common/pycoefficient.hpp"  


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}






/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "fe_coll_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_FiniteElementCollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::FiniteElementCollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_FiniteElementForDim(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_FiniteElementForDim", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_FiniteElementForDim" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FiniteElement *)((mfem::FiniteElementCollection const *)arg1)->FiniteElementForDim(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_DofForGeometry" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:FiniteElementCollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::FiniteElementCollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_Name" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    try {
      result = (char *)((mfem::FiniteElementCollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetContType" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetRangeType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_GetRangeType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetRangeType" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetRangeType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetDerivRangeType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_GetDerivRangeType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetDerivRangeType" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetDerivRangeType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetMapType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_GetMapType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetMapType" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetMapType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetDerivType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_GetDerivType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetDerivType" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetDerivType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetDerivMapType(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"dim",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_GetDerivMapType", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetDerivMapType" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetDerivMapType(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_HasFaceDofs(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  (char *)"p",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:FiniteElementCollection_HasFaceDofs", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_HasFaceDofs" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_HasFaceDofs" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->HasFaceDofs(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_TraceFiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_TraceFiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_TraceFiniteElementForGeometry" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_TraceFiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::FiniteElementCollection const *)arg1)->TraceFiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::FiniteElementCollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FiniteElementCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FiniteElementCollection" "', argument " "1"" of type '" "mfem::FiniteElementCollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_New(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"name",  NULL 
  };
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:FiniteElementCollection_New", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_New" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (mfem::FiniteElementCollection *)mfem::FiniteElementCollection::New((char const *)arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_SubDofOrder(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  int arg4 ;
  mfem::Array< int > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Geom",  (char *)"SDim",  (char *)"Info",  (char *)"dofs",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOOO:FiniteElementCollection_SubDofOrder", kwnames, &obj0, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_SubDofOrder" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_SubDofOrder" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_mfem__ArrayT_int_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FiniteElementCollection_SubDofOrder" "', argument " "5"" of type '" "mfem::Array< int > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteElementCollection_SubDofOrder" "', argument " "5"" of type '" "mfem::Array< int > &""'"); 
  }
  arg5 = reinterpret_cast< mfem::Array< int > * >(argp5);
  {
    try {
      ((mfem::FiniteElementCollection const *)arg1)->SubDofOrder(arg2,arg3,arg4,*arg5);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetFE(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  (char *)"p",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:FiniteElementCollection_GetFE", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetFE" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_GetFE" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (mfem::FiniteElement *)((mfem::FiniteElementCollection const *)arg1)->GetFE(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetNumDof(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  (char *)"p",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:FiniteElementCollection_GetNumDof", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetNumDof" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_GetNumDof" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetNumDof(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetDofOrdering(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"geom",  (char *)"p",  (char *)"ori",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOOO:FiniteElementCollection_GetDofOrdering", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetDofOrdering" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElementCollection_GetDofOrdering" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg4 = PyArray_PyIntAsInt(obj3);
  }
  {
    try {
      result = (int *)((mfem::FiniteElementCollection const *)arg1)->GetDofOrdering(arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_GetOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_GetOrder" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    try {
      result = (int)((mfem::FiniteElementCollection const *)arg1)->GetOrder();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElementCollection_Clone(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::FiniteElementCollection *arg1 = (mfem::FiniteElementCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:FiniteElementCollection_Clone", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElementCollection_Clone" "', argument " "1"" of type '" "mfem::FiniteElementCollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::FiniteElementCollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::FiniteElementCollection const *)arg1)->Clone(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FiniteElementCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__FiniteElementCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_H1_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 = (int) (int)3 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"btype",  NULL 
  };
  mfem::H1_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OO:new_H1_FECollection", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (mfem::H1_FECollection *)new mfem::H1_FECollection(arg1,arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__H1_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:H1_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "H1_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::H1_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:H1_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "H1_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::H1_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:H1_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "H1_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::H1_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_Name" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::H1_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_GetContType" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::H1_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_GetBasisType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_GetBasisType" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::H1_FECollection const *)arg1)->GetBasisType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::H1_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_GetDofMap__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_GetDofMap" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "H1_FECollection_GetDofMap" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int *)((mfem::H1_FECollection const *)arg1)->GetDofMap(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_GetDofMap__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_GetDofMap" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "H1_FECollection_GetDofMap" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(swig_obj[2]);
  }
  {
    try {
      result = (int *)((mfem::H1_FECollection const *)arg1)->GetDofMap(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_GetDofMap(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "H1_FECollection_GetDofMap", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__H1_FECollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_H1_FECollection_GetDofMap__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_mfem__H1_FECollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          return _wrap_H1_FECollection_GetDofMap__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'H1_FECollection_GetDofMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::H1_FECollection::GetDofMap(mfem::Geometry::Type) const\n"
    "    mfem::H1_FECollection::GetDofMap(mfem::Geometry::Type,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_H1_FECollection_Clone(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:H1_FECollection_Clone", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__H1_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H1_FECollection_Clone" "', argument " "1"" of type '" "mfem::H1_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::H1_FECollection const *)arg1)->Clone(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_H1_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1_FECollection *arg1 = (mfem::H1_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_H1_FECollection" "', argument " "1"" of type '" "mfem::H1_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *H1_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__H1_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *H1_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_H1Pos_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 = (int) (int)3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  NULL 
  };
  mfem::H1Pos_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:new_H1Pos_FECollection", kwnames, &obj0, &obj1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  {
    try {
      result = (mfem::H1Pos_FECollection *)new mfem::H1Pos_FECollection(arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__H1Pos_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_H1Pos_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1Pos_FECollection *arg1 = (mfem::H1Pos_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1Pos_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_H1Pos_FECollection" "', argument " "1"" of type '" "mfem::H1Pos_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1Pos_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *H1Pos_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__H1Pos_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *H1Pos_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_H1Ser_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 = (int) (int)2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  NULL 
  };
  mfem::H1Ser_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|O:new_H1Ser_FECollection", kwnames, &obj0, &obj1)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  if (obj1) {
    {
      if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg2 = PyArray_PyIntAsInt(obj1);
    }
  }
  {
    try {
      result = (mfem::H1Ser_FECollection *)new mfem::H1Ser_FECollection(arg1,arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__H1Ser_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_H1Ser_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1Ser_FECollection *arg1 = (mfem::H1Ser_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1Ser_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_H1Ser_FECollection" "', argument " "1"" of type '" "mfem::H1Ser_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1Ser_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *H1Ser_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__H1Ser_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *H1Ser_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_H1_Trace_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"btype",  NULL 
  };
  mfem::H1_Trace_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O:new_H1_Trace_FECollection", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  {
    try {
      result = (mfem::H1_Trace_FECollection *)new mfem::H1_Trace_FECollection(arg1,arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__H1_Trace_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_H1_Trace_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::H1_Trace_FECollection *arg1 = (mfem::H1_Trace_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__H1_Trace_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_H1_Trace_FECollection" "', argument " "1"" of type '" "mfem::H1_Trace_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::H1_Trace_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *H1_Trace_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__H1_Trace_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *H1_Trace_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_L2_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLegendre ;
  int arg4 = (int) (int)mfem::FiniteElement::VALUE ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"btype",  (char *)"map_type",  NULL 
  };
  mfem::L2_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_L2_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::L2_FECollection *)new mfem::L2_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__L2_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:L2_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "L2_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::L2_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:L2_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "L2_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::L2_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:L2_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "L2_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::L2_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_Name" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::L2_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_GetContType" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::L2_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_TraceFiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:L2_FECollection_TraceFiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_TraceFiniteElementForGeometry" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "L2_FECollection_TraceFiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::L2_FECollection const *)arg1)->TraceFiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_GetBasisType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_GetBasisType" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::L2_FECollection const *)arg1)->GetBasisType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_L2_FECollection_Clone(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:L2_FECollection_Clone", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__L2_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L2_FECollection_Clone" "', argument " "1"" of type '" "mfem::L2_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::L2_FECollection const *)arg1)->Clone(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_L2_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::L2_FECollection *arg1 = (mfem::L2_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__L2_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_L2_FECollection" "', argument " "1"" of type '" "mfem::L2_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::L2_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *L2_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__L2_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *L2_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT_FECollection__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  mfem::RT_FECollection *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      result = (mfem::RT_FECollection *)new mfem::RT_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RT_FECollection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RT_FECollection", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_RT_FECollection__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_RT_FECollection__SWIG_1(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_new_RT_FECollection__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RT_FECollection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::RT_FECollection::RT_FECollection(int const,int const,int const,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_Name" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_GetContType" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::RT_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_GetClosedBasisType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_GetClosedBasisType" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT_FECollection const *)arg1)->GetClosedBasisType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_GetOpenBasisType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_GetOpenBasisType" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT_FECollection const *)arg1)->GetOpenBasisType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_FECollection_Clone(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_FECollection_Clone", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_FECollection_Clone" "', argument " "1"" of type '" "mfem::RT_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::RT_FECollection const *)arg1)->Clone(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_FECollection *arg1 = (mfem::RT_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT_FECollection" "', argument " "1"" of type '" "mfem::RT_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT_Trace_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::FiniteElement::INTEGRAL ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"map_type",  (char *)"ob_type",  NULL 
  };
  mfem::RT_Trace_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_RT_Trace_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::RT_Trace_FECollection *)new mfem::RT_Trace_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT_Trace_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT_Trace_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_Trace_FECollection *arg1 = (mfem::RT_Trace_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_Trace_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT_Trace_FECollection" "', argument " "1"" of type '" "mfem::RT_Trace_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_Trace_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT_Trace_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT_Trace_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT_Trace_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DG_Interface_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::FiniteElement::VALUE ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"map_type",  (char *)"ob_type",  NULL 
  };
  mfem::DG_Interface_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_DG_Interface_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::DG_Interface_FECollection *)new mfem::DG_Interface_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__DG_Interface_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DG_Interface_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::DG_Interface_FECollection *arg1 = (mfem::DG_Interface_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__DG_Interface_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DG_Interface_FECollection" "', argument " "1"" of type '" "mfem::DG_Interface_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::DG_Interface_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DG_Interface_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__DG_Interface_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DG_Interface_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ND_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"cb_type",  (char *)"ob_type",  NULL 
  };
  mfem::ND_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_ND_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::ND_FECollection *)new mfem::ND_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ND_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::ND_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::ND_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ND_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::ND_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_Name" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::ND_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_GetContType" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::ND_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::ND_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_GetClosedBasisType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_GetClosedBasisType" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::ND_FECollection const *)arg1)->GetClosedBasisType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_GetOpenBasisType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_GetOpenBasisType" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::ND_FECollection const *)arg1)->GetOpenBasisType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_FECollection_Clone(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"p",  NULL 
  };
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_FECollection_Clone", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_FECollection_Clone" "', argument " "1"" of type '" "mfem::ND_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::ND_FECollection const *)arg1)->Clone(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ND_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_FECollection *arg1 = (mfem::ND_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ND_FECollection" "', argument " "1"" of type '" "mfem::ND_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ND_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ND_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ND_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ND_Trace_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"cb_type",  (char *)"ob_type",  NULL 
  };
  mfem::ND_Trace_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_ND_Trace_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::ND_Trace_FECollection *)new mfem::ND_Trace_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ND_Trace_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ND_Trace_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_Trace_FECollection *arg1 = (mfem::ND_Trace_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_Trace_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ND_Trace_FECollection" "', argument " "1"" of type '" "mfem::ND_Trace_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_Trace_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ND_Trace_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ND_Trace_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ND_Trace_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ND_R1D_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"cb_type",  (char *)"ob_type",  NULL 
  };
  mfem::ND_R1D_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_ND_R1D_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::ND_R1D_FECollection *)new mfem::ND_R1D_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ND_R1D_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R1D_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_R1D_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R1D_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_R1D_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::ND_R1D_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R1D_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_R1D_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R1D_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_R1D_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::ND_R1D_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R1D_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ND_R1D_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R1D_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_R1D_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::ND_R1D_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R1D_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R1D_FECollection_Name" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::ND_R1D_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R1D_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R1D_FECollection_GetContType" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::ND_R1D_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R1D_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R1D_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::ND_R1D_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ND_R1D_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R1D_FECollection *arg1 = (mfem::ND_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R1D_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ND_R1D_FECollection" "', argument " "1"" of type '" "mfem::ND_R1D_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R1D_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ND_R1D_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ND_R1D_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ND_R1D_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT_R1D_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"cb_type",  (char *)"ob_type",  NULL 
  };
  mfem::RT_R1D_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_RT_R1D_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::RT_R1D_FECollection *)new mfem::RT_R1D_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT_R1D_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R1D_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_R1D_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R1D_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_R1D_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT_R1D_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R1D_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_R1D_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R1D_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_R1D_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT_R1D_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R1D_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT_R1D_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R1D_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_R1D_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT_R1D_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R1D_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R1D_FECollection_Name" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT_R1D_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R1D_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R1D_FECollection_GetContType" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT_R1D_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R1D_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R1D_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::RT_R1D_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT_R1D_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R1D_FECollection *arg1 = (mfem::RT_R1D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R1D_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT_R1D_FECollection" "', argument " "1"" of type '" "mfem::RT_R1D_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R1D_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT_R1D_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT_R1D_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT_R1D_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ND_R2D_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"cb_type",  (char *)"ob_type",  NULL 
  };
  mfem::ND_R2D_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_ND_R2D_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::ND_R2D_FECollection *)new mfem::ND_R2D_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ND_R2D_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R2D_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_R2D_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R2D_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_R2D_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::ND_R2D_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R2D_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND_R2D_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R2D_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_R2D_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::ND_R2D_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R2D_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ND_R2D_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R2D_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND_R2D_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::ND_R2D_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R2D_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R2D_FECollection_Name" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::ND_R2D_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R2D_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R2D_FECollection_GetContType" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::ND_R2D_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND_R2D_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND_R2D_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::ND_R2D_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ND_R2D_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_FECollection *arg1 = (mfem::ND_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R2D_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ND_R2D_FECollection" "', argument " "1"" of type '" "mfem::ND_R2D_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ND_R2D_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ND_R2D_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ND_R2D_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ND_R2D_Trace_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"cb_type",  (char *)"ob_type",  NULL 
  };
  mfem::ND_R2D_Trace_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_ND_R2D_Trace_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::ND_R2D_Trace_FECollection *)new mfem::ND_R2D_Trace_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ND_R2D_Trace_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ND_R2D_Trace_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND_R2D_Trace_FECollection *arg1 = (mfem::ND_R2D_Trace_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND_R2D_Trace_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ND_R2D_Trace_FECollection" "', argument " "1"" of type '" "mfem::ND_R2D_Trace_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND_R2D_Trace_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ND_R2D_Trace_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ND_R2D_Trace_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ND_R2D_Trace_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT_R2D_FECollection__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::BasisType::GaussLobatto ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  mfem::RT_R2D_FECollection *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 4)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(swig_obj[0]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(swig_obj[0]);
  }
  {
    if ((PyArray_PyIntAsInt(swig_obj[1]) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(swig_obj[1]);
  }
  if (swig_obj[2]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[2]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(swig_obj[2]);
    }
  }
  if (swig_obj[3]) {
    {
      if ((PyArray_PyIntAsInt(swig_obj[3]) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(swig_obj[3]);
    }
  }
  {
    try {
      result = (mfem::RT_R2D_FECollection *)new mfem::RT_R2D_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT_R2D_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RT_R2D_FECollection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RT_R2D_FECollection", 0, 4, argv))) SWIG_fail;
  --argc;
  if ((argc >= 2) && (argc <= 4)) {
    int _v = 0;
    {
      if ((PyArray_PyIntAsInt(argv[0]) == -1) && PyErr_Occurred()) {
        PyErr_Clear();
        _v = 0;
      } else {
        _v = 1;    
      }
    }
    if (_v) {
      {
        if ((PyArray_PyIntAsInt(argv[1]) == -1) && PyErr_Occurred()) {
          PyErr_Clear();
          _v = 0;
        } else {
          _v = 1;    
        }
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_new_RT_R2D_FECollection__SWIG_1(self, argc, argv);
        }
        {
          if ((PyArray_PyIntAsInt(argv[2]) == -1) && PyErr_Occurred()) {
            PyErr_Clear();
            _v = 0;
          } else {
            _v = 1;    
          }
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_new_RT_R2D_FECollection__SWIG_1(self, argc, argv);
          }
          {
            if ((PyArray_PyIntAsInt(argv[3]) == -1) && PyErr_Occurred()) {
              PyErr_Clear();
              _v = 0;
            } else {
              _v = 1;    
            }
          }
          if (_v) {
            return _wrap_new_RT_R2D_FECollection__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RT_R2D_FECollection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mfem::RT_R2D_FECollection::RT_R2D_FECollection(int const,int const,int const,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RT_R2D_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_R2D_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R2D_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_R2D_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT_R2D_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R2D_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT_R2D_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R2D_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_R2D_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT_R2D_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R2D_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT_R2D_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R2D_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT_R2D_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT_R2D_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R2D_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R2D_FECollection_Name" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT_R2D_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R2D_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R2D_FECollection_GetContType" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT_R2D_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT_R2D_FECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT_R2D_FECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::RT_R2D_FECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT_R2D_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_FECollection *arg1 = (mfem::RT_R2D_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R2D_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT_R2D_FECollection" "', argument " "1"" of type '" "mfem::RT_R2D_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT_R2D_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT_R2D_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT_R2D_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT_R2D_Trace_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) (int)mfem::FiniteElement::INTEGRAL ;
  int arg4 = (int) (int)mfem::BasisType::GaussLegendre ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char * kwnames[] = {
    (char *)"p",  (char *)"dim",  (char *)"map_type",  (char *)"ob_type",  NULL 
  };
  mfem::RT_R2D_Trace_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|OO:new_RT_R2D_Trace_FECollection", kwnames, &obj0, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg1 = PyArray_PyIntAsInt(obj0);
  }
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  if (obj2) {
    {
      if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg3 = PyArray_PyIntAsInt(obj2);
    }
  }
  if (obj3) {
    {
      if ((PyArray_PyIntAsInt(obj3) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg4 = PyArray_PyIntAsInt(obj3);
    }
  }
  {
    try {
      result = (mfem::RT_R2D_Trace_FECollection *)new mfem::RT_R2D_Trace_FECollection(arg1,arg2,arg3,arg4);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT_R2D_Trace_FECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT_R2D_Trace_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT_R2D_Trace_FECollection *arg1 = (mfem::RT_R2D_Trace_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT_R2D_Trace_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT_R2D_Trace_FECollection" "', argument " "1"" of type '" "mfem::RT_R2D_Trace_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT_R2D_Trace_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT_R2D_Trace_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT_R2D_Trace_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT_R2D_Trace_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NURBSFECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 = (int) mfem::NURBSFECollection::VariableOrder ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"Order",  NULL 
  };
  mfem::NURBSFECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|O:new_NURBSFECollection", kwnames, &obj0)) SWIG_fail;
  if (obj0) {
    {
      if ((PyArray_PyIntAsInt(obj0) == -1) && PyErr_Occurred()) {
        SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
      };  
      arg1 = PyArray_PyIntAsInt(obj0);
    }
  }
  {
    try {
      result = (mfem::NURBSFECollection *)new mfem::NURBSFECollection(arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__NURBSFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_Reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_Reset" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    try {
      ((mfem::NURBSFECollection const *)arg1)->Reset();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_GetOrder(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_GetOrder" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::NURBSFECollection const *)arg1)->GetOrder();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_SetOrder(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"Order",  NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NURBSFECollection_SetOrder", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_SetOrder" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    if ((PyArray_PyIntAsInt(obj1) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg2 = PyArray_PyIntAsInt(obj1);
  }
  {
    try {
      ((mfem::NURBSFECollection const *)arg1)->SetOrder(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NURBSFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NURBSFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::NURBSFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:NURBSFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NURBSFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::NURBSFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:NURBSFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NURBSFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::NURBSFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_Name" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::NURBSFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_GetContType" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::NURBSFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NURBSFECollection_GetTraceCollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  mfem::FiniteElementCollection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NURBSFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NURBSFECollection_GetTraceCollection" "', argument " "1"" of type '" "mfem::NURBSFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    try {
      result = (mfem::FiniteElementCollection *)((mfem::NURBSFECollection const *)arg1)->GetTraceCollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElementCollection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NURBSFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::NURBSFECollection *arg1 = (mfem::NURBSFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__NURBSFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NURBSFECollection" "', argument " "1"" of type '" "mfem::NURBSFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::NURBSFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NURBSFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__NURBSFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NURBSFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LinearFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LinearFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::LinearFECollection *)new mfem::LinearFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__LinearFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *arg1 = (mfem::LinearFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::LinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::LinearFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *arg1 = (mfem::LinearFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::LinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::LinearFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *arg1 = (mfem::LinearFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:LinearFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::LinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::LinearFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *arg1 = (mfem::LinearFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearFECollection_Name" "', argument " "1"" of type '" "mfem::LinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::LinearFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *arg1 = (mfem::LinearFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearFECollection_GetContType" "', argument " "1"" of type '" "mfem::LinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::LinearFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearFECollection *arg1 = (mfem::LinearFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearFECollection" "', argument " "1"" of type '" "mfem::LinearFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__LinearFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LinearFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuadraticFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuadraticFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::QuadraticFECollection *)new mfem::QuadraticFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadraticFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *arg1 = (mfem::QuadraticFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::QuadraticFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::QuadraticFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *arg1 = (mfem::QuadraticFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::QuadraticFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::QuadraticFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *arg1 = (mfem::QuadraticFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:QuadraticFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::QuadraticFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::QuadraticFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *arg1 = (mfem::QuadraticFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticFECollection_Name" "', argument " "1"" of type '" "mfem::QuadraticFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::QuadraticFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *arg1 = (mfem::QuadraticFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticFECollection_GetContType" "', argument " "1"" of type '" "mfem::QuadraticFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::QuadraticFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuadraticFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticFECollection *arg1 = (mfem::QuadraticFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuadraticFECollection" "', argument " "1"" of type '" "mfem::QuadraticFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuadraticFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__QuadraticFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuadraticFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuadraticPosFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuadraticPosFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::QuadraticPosFECollection *)new mfem::QuadraticPosFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadraticPosFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *arg1 = (mfem::QuadraticPosFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticPosFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticPosFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::QuadraticPosFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticPosFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::QuadraticPosFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *arg1 = (mfem::QuadraticPosFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticPosFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticPosFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::QuadraticPosFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticPosFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::QuadraticPosFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *arg1 = (mfem::QuadraticPosFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:QuadraticPosFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticPosFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::QuadraticPosFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticPosFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::QuadraticPosFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *arg1 = (mfem::QuadraticPosFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticPosFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosFECollection_Name" "', argument " "1"" of type '" "mfem::QuadraticPosFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::QuadraticPosFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *arg1 = (mfem::QuadraticPosFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticPosFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosFECollection_GetContType" "', argument " "1"" of type '" "mfem::QuadraticPosFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::QuadraticPosFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuadraticPosFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosFECollection *arg1 = (mfem::QuadraticPosFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticPosFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuadraticPosFECollection" "', argument " "1"" of type '" "mfem::QuadraticPosFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuadraticPosFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__QuadraticPosFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuadraticPosFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CubicFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_CubicFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::CubicFECollection *)new mfem::CubicFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CubicFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *arg1 = (mfem::CubicFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CubicFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CubicFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::CubicFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::CubicFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *arg1 = (mfem::CubicFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CubicFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CubicFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::CubicFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::CubicFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *arg1 = (mfem::CubicFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:CubicFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CubicFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::CubicFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::CubicFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *arg1 = (mfem::CubicFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CubicFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicFECollection_Name" "', argument " "1"" of type '" "mfem::CubicFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::CubicFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *arg1 = (mfem::CubicFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CubicFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicFECollection_GetContType" "', argument " "1"" of type '" "mfem::CubicFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::CubicFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CubicFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicFECollection *arg1 = (mfem::CubicFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CubicFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CubicFECollection" "', argument " "1"" of type '" "mfem::CubicFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CubicFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CubicFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CubicFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CrouzeixRaviartFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_CrouzeixRaviartFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::CrouzeixRaviartFECollection *)new mfem::CrouzeixRaviartFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrouzeixRaviartFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *arg1 = (mfem::CrouzeixRaviartFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CrouzeixRaviartFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrouzeixRaviartFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::CrouzeixRaviartFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrouzeixRaviartFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CrouzeixRaviartFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::CrouzeixRaviartFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrouzeixRaviartFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *arg1 = (mfem::CrouzeixRaviartFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CrouzeixRaviartFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrouzeixRaviartFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::CrouzeixRaviartFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrouzeixRaviartFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CrouzeixRaviartFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::CrouzeixRaviartFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrouzeixRaviartFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *arg1 = (mfem::CrouzeixRaviartFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:CrouzeixRaviartFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrouzeixRaviartFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::CrouzeixRaviartFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrouzeixRaviartFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CrouzeixRaviartFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::CrouzeixRaviartFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrouzeixRaviartFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *arg1 = (mfem::CrouzeixRaviartFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrouzeixRaviartFECollection_Name" "', argument " "1"" of type '" "mfem::CrouzeixRaviartFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrouzeixRaviartFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::CrouzeixRaviartFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrouzeixRaviartFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *arg1 = (mfem::CrouzeixRaviartFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrouzeixRaviartFECollection_GetContType" "', argument " "1"" of type '" "mfem::CrouzeixRaviartFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrouzeixRaviartFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::CrouzeixRaviartFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CrouzeixRaviartFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CrouzeixRaviartFECollection *arg1 = (mfem::CrouzeixRaviartFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CrouzeixRaviartFECollection" "', argument " "1"" of type '" "mfem::CrouzeixRaviartFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CrouzeixRaviartFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CrouzeixRaviartFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CrouzeixRaviartFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CrouzeixRaviartFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LinearNonConf3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LinearNonConf3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::LinearNonConf3DFECollection *)new mfem::LinearNonConf3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__LinearNonConf3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearNonConf3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *arg1 = (mfem::LinearNonConf3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearNonConf3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearNonConf3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearNonConf3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::LinearNonConf3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearNonConf3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearNonConf3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::LinearNonConf3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearNonConf3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *arg1 = (mfem::LinearNonConf3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearNonConf3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearNonConf3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearNonConf3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::LinearNonConf3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearNonConf3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearNonConf3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::LinearNonConf3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearNonConf3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *arg1 = (mfem::LinearNonConf3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:LinearNonConf3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearNonConf3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearNonConf3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::LinearNonConf3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearNonConf3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearNonConf3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::LinearNonConf3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearNonConf3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *arg1 = (mfem::LinearNonConf3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearNonConf3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearNonConf3DFECollection_Name" "', argument " "1"" of type '" "mfem::LinearNonConf3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearNonConf3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::LinearNonConf3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearNonConf3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *arg1 = (mfem::LinearNonConf3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearNonConf3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearNonConf3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::LinearNonConf3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearNonConf3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::LinearNonConf3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearNonConf3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearNonConf3DFECollection *arg1 = (mfem::LinearNonConf3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearNonConf3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearNonConf3DFECollection" "', argument " "1"" of type '" "mfem::LinearNonConf3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearNonConf3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearNonConf3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__LinearNonConf3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LinearNonConf3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT0_2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RT0_2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::RT0_2DFECollection *)new mfem::RT0_2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT0_2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *arg1 = (mfem::RT0_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT0_2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT0_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT0_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT0_2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT0_2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *arg1 = (mfem::RT0_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT0_2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT0_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT0_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT0_2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT0_2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *arg1 = (mfem::RT0_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT0_2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT0_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT0_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT0_2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT0_2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *arg1 = (mfem::RT0_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT0_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_2DFECollection_Name" "', argument " "1"" of type '" "mfem::RT0_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT0_2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *arg1 = (mfem::RT0_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT0_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::RT0_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT0_2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT0_2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_2DFECollection *arg1 = (mfem::RT0_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT0_2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT0_2DFECollection" "', argument " "1"" of type '" "mfem::RT0_2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT0_2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT0_2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT0_2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT1_2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RT1_2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::RT1_2DFECollection *)new mfem::RT1_2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT1_2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *arg1 = (mfem::RT1_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT1_2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT1_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT1_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT1_2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT1_2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *arg1 = (mfem::RT1_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT1_2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT1_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT1_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT1_2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT1_2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *arg1 = (mfem::RT1_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT1_2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT1_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT1_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT1_2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT1_2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *arg1 = (mfem::RT1_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT1_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_2DFECollection_Name" "', argument " "1"" of type '" "mfem::RT1_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT1_2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *arg1 = (mfem::RT1_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT1_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::RT1_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT1_2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT1_2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_2DFECollection *arg1 = (mfem::RT1_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT1_2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT1_2DFECollection" "', argument " "1"" of type '" "mfem::RT1_2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT1_2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT1_2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT1_2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT2_2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RT2_2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::RT2_2DFECollection *)new mfem::RT2_2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT2_2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT2_2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *arg1 = (mfem::RT2_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT2_2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT2_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT2_2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT2_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT2_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT2_2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT2_2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT2_2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *arg1 = (mfem::RT2_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT2_2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT2_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT2_2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT2_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT2_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT2_2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT2_2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT2_2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *arg1 = (mfem::RT2_2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT2_2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT2_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT2_2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT2_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT2_2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT2_2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT2_2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT2_2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *arg1 = (mfem::RT2_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT2_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT2_2DFECollection_Name" "', argument " "1"" of type '" "mfem::RT2_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT2_2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT2_2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT2_2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *arg1 = (mfem::RT2_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT2_2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT2_2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::RT2_2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT2_2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT2_2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT2_2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT2_2DFECollection *arg1 = (mfem::RT2_2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT2_2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT2_2DFECollection" "', argument " "1"" of type '" "mfem::RT2_2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT2_2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT2_2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT2_2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT2_2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Const2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Const2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::Const2DFECollection *)new mfem::Const2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Const2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *arg1 = (mfem::Const2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Const2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Const2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::Const2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Const2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::Const2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *arg1 = (mfem::Const2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Const2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Const2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::Const2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Const2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::Const2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *arg1 = (mfem::Const2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Const2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Const2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::Const2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Const2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::Const2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *arg1 = (mfem::Const2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Const2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const2DFECollection_Name" "', argument " "1"" of type '" "mfem::Const2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::Const2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *arg1 = (mfem::Const2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Const2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::Const2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::Const2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Const2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const2DFECollection *arg1 = (mfem::Const2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Const2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Const2DFECollection" "', argument " "1"" of type '" "mfem::Const2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Const2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__Const2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Const2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LinearDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LinearDiscont2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::LinearDiscont2DFECollection *)new mfem::LinearDiscont2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__LinearDiscont2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *arg1 = (mfem::LinearDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearDiscont2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::LinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearDiscont2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::LinearDiscont2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *arg1 = (mfem::LinearDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearDiscont2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::LinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearDiscont2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::LinearDiscont2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *arg1 = (mfem::LinearDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:LinearDiscont2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::LinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearDiscont2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::LinearDiscont2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *arg1 = (mfem::LinearDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont2DFECollection_Name" "', argument " "1"" of type '" "mfem::LinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::LinearDiscont2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *arg1 = (mfem::LinearDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::LinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::LinearDiscont2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont2DFECollection *arg1 = (mfem::LinearDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearDiscont2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearDiscont2DFECollection" "', argument " "1"" of type '" "mfem::LinearDiscont2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearDiscont2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__LinearDiscont2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LinearDiscont2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GaussLinearDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GaussLinearDiscont2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::GaussLinearDiscont2DFECollection *)new mfem::GaussLinearDiscont2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLinearDiscont2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *arg1 = (mfem::GaussLinearDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GaussLinearDiscont2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLinearDiscont2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::GaussLinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussLinearDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussLinearDiscont2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::GaussLinearDiscont2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLinearDiscont2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *arg1 = (mfem::GaussLinearDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GaussLinearDiscont2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLinearDiscont2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::GaussLinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussLinearDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussLinearDiscont2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::GaussLinearDiscont2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLinearDiscont2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *arg1 = (mfem::GaussLinearDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:GaussLinearDiscont2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLinearDiscont2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::GaussLinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussLinearDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussLinearDiscont2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::GaussLinearDiscont2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLinearDiscont2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *arg1 = (mfem::GaussLinearDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLinearDiscont2DFECollection_Name" "', argument " "1"" of type '" "mfem::GaussLinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussLinearDiscont2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::GaussLinearDiscont2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLinearDiscont2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *arg1 = (mfem::GaussLinearDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLinearDiscont2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::GaussLinearDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussLinearDiscont2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::GaussLinearDiscont2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussLinearDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussLinearDiscont2DFECollection *arg1 = (mfem::GaussLinearDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussLinearDiscont2DFECollection" "', argument " "1"" of type '" "mfem::GaussLinearDiscont2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussLinearDiscont2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussLinearDiscont2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__GaussLinearDiscont2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GaussLinearDiscont2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_P1OnQuadFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_P1OnQuadFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::P1OnQuadFECollection *)new mfem::P1OnQuadFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__P1OnQuadFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P1OnQuadFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *arg1 = (mfem::P1OnQuadFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:P1OnQuadFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__P1OnQuadFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1OnQuadFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::P1OnQuadFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::P1OnQuadFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "P1OnQuadFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::P1OnQuadFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P1OnQuadFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *arg1 = (mfem::P1OnQuadFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:P1OnQuadFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__P1OnQuadFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1OnQuadFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::P1OnQuadFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::P1OnQuadFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "P1OnQuadFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::P1OnQuadFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P1OnQuadFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *arg1 = (mfem::P1OnQuadFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:P1OnQuadFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__P1OnQuadFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1OnQuadFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::P1OnQuadFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::P1OnQuadFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "P1OnQuadFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::P1OnQuadFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P1OnQuadFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *arg1 = (mfem::P1OnQuadFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__P1OnQuadFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1OnQuadFECollection_Name" "', argument " "1"" of type '" "mfem::P1OnQuadFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::P1OnQuadFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::P1OnQuadFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P1OnQuadFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *arg1 = (mfem::P1OnQuadFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__P1OnQuadFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1OnQuadFECollection_GetContType" "', argument " "1"" of type '" "mfem::P1OnQuadFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::P1OnQuadFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::P1OnQuadFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_P1OnQuadFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::P1OnQuadFECollection *arg1 = (mfem::P1OnQuadFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__P1OnQuadFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_P1OnQuadFECollection" "', argument " "1"" of type '" "mfem::P1OnQuadFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::P1OnQuadFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *P1OnQuadFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__P1OnQuadFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *P1OnQuadFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuadraticDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuadraticDiscont2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::QuadraticDiscont2DFECollection *)new mfem::QuadraticDiscont2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *arg1 = (mfem::QuadraticDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticDiscont2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::QuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticDiscont2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::QuadraticDiscont2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *arg1 = (mfem::QuadraticDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticDiscont2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::QuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticDiscont2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::QuadraticDiscont2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *arg1 = (mfem::QuadraticDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:QuadraticDiscont2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::QuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticDiscont2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::QuadraticDiscont2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *arg1 = (mfem::QuadraticDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont2DFECollection_Name" "', argument " "1"" of type '" "mfem::QuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::QuadraticDiscont2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *arg1 = (mfem::QuadraticDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::QuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::QuadraticDiscont2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuadraticDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont2DFECollection *arg1 = (mfem::QuadraticDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuadraticDiscont2DFECollection" "', argument " "1"" of type '" "mfem::QuadraticDiscont2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuadraticDiscont2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__QuadraticDiscont2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuadraticDiscont2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuadraticPosDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuadraticPosDiscont2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::QuadraticPosDiscont2DFECollection *)new mfem::QuadraticPosDiscont2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosDiscont2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *arg1 = (mfem::QuadraticPosDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticPosDiscont2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosDiscont2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::QuadraticPosDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticPosDiscont2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::QuadraticPosDiscont2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosDiscont2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *arg1 = (mfem::QuadraticPosDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticPosDiscont2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosDiscont2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::QuadraticPosDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticPosDiscont2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::QuadraticPosDiscont2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosDiscont2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *arg1 = (mfem::QuadraticPosDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:QuadraticPosDiscont2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosDiscont2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::QuadraticPosDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticPosDiscont2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::QuadraticPosDiscont2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosDiscont2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *arg1 = (mfem::QuadraticPosDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosDiscont2DFECollection_Name" "', argument " "1"" of type '" "mfem::QuadraticPosDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosDiscont2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::QuadraticPosDiscont2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticPosDiscont2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *arg1 = (mfem::QuadraticPosDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticPosDiscont2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::QuadraticPosDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosDiscont2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::QuadraticPosDiscont2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuadraticPosDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticPosDiscont2DFECollection *arg1 = (mfem::QuadraticPosDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuadraticPosDiscont2DFECollection" "', argument " "1"" of type '" "mfem::QuadraticPosDiscont2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticPosDiscont2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuadraticPosDiscont2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__QuadraticPosDiscont2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuadraticPosDiscont2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GaussQuadraticDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GaussQuadraticDiscont2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::GaussQuadraticDiscont2DFECollection *)new mfem::GaussQuadraticDiscont2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *arg1 = (mfem::GaussQuadraticDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::GaussQuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussQuadraticDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::GaussQuadraticDiscont2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussQuadraticDiscont2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *arg1 = (mfem::GaussQuadraticDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:GaussQuadraticDiscont2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussQuadraticDiscont2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::GaussQuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussQuadraticDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussQuadraticDiscont2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::GaussQuadraticDiscont2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussQuadraticDiscont2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *arg1 = (mfem::GaussQuadraticDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:GaussQuadraticDiscont2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussQuadraticDiscont2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::GaussQuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussQuadraticDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussQuadraticDiscont2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::GaussQuadraticDiscont2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussQuadraticDiscont2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *arg1 = (mfem::GaussQuadraticDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussQuadraticDiscont2DFECollection_Name" "', argument " "1"" of type '" "mfem::GaussQuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussQuadraticDiscont2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::GaussQuadraticDiscont2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussQuadraticDiscont2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *arg1 = (mfem::GaussQuadraticDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussQuadraticDiscont2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::GaussQuadraticDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussQuadraticDiscont2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::GaussQuadraticDiscont2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussQuadraticDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::GaussQuadraticDiscont2DFECollection *arg1 = (mfem::GaussQuadraticDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussQuadraticDiscont2DFECollection" "', argument " "1"" of type '" "mfem::GaussQuadraticDiscont2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::GaussQuadraticDiscont2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussQuadraticDiscont2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__GaussQuadraticDiscont2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GaussQuadraticDiscont2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CubicDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_CubicDiscont2DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::CubicDiscont2DFECollection *)new mfem::CubicDiscont2DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__CubicDiscont2DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicDiscont2DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *arg1 = (mfem::CubicDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CubicDiscont2DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CubicDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicDiscont2DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::CubicDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicDiscont2DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::CubicDiscont2DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicDiscont2DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *arg1 = (mfem::CubicDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:CubicDiscont2DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CubicDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicDiscont2DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::CubicDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicDiscont2DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::CubicDiscont2DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicDiscont2DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *arg1 = (mfem::CubicDiscont2DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:CubicDiscont2DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__CubicDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicDiscont2DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::CubicDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicDiscont2DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicDiscont2DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::CubicDiscont2DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicDiscont2DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *arg1 = (mfem::CubicDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CubicDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicDiscont2DFECollection_Name" "', argument " "1"" of type '" "mfem::CubicDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicDiscont2DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::CubicDiscont2DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicDiscont2DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *arg1 = (mfem::CubicDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CubicDiscont2DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicDiscont2DFECollection_GetContType" "', argument " "1"" of type '" "mfem::CubicDiscont2DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicDiscont2DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::CubicDiscont2DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CubicDiscont2DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::CubicDiscont2DFECollection *arg1 = (mfem::CubicDiscont2DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__CubicDiscont2DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CubicDiscont2DFECollection" "', argument " "1"" of type '" "mfem::CubicDiscont2DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::CubicDiscont2DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CubicDiscont2DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__CubicDiscont2DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CubicDiscont2DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Const3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Const3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::Const3DFECollection *)new mfem::Const3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Const3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *arg1 = (mfem::Const3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Const3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Const3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::Const3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Const3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::Const3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *arg1 = (mfem::Const3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Const3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Const3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::Const3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Const3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::Const3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *arg1 = (mfem::Const3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Const3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Const3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::Const3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Const3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::Const3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *arg1 = (mfem::Const3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Const3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const3DFECollection_Name" "', argument " "1"" of type '" "mfem::Const3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::Const3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Const3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *arg1 = (mfem::Const3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Const3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Const3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::Const3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::Const3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Const3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Const3DFECollection *arg1 = (mfem::Const3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Const3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Const3DFECollection" "', argument " "1"" of type '" "mfem::Const3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Const3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Const3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__Const3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Const3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LinearDiscont3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LinearDiscont3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::LinearDiscont3DFECollection *)new mfem::LinearDiscont3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__LinearDiscont3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *arg1 = (mfem::LinearDiscont3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearDiscont3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::LinearDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearDiscont3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::LinearDiscont3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *arg1 = (mfem::LinearDiscont3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:LinearDiscont3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::LinearDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearDiscont3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::LinearDiscont3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *arg1 = (mfem::LinearDiscont3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:LinearDiscont3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__LinearDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::LinearDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearDiscont3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::LinearDiscont3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *arg1 = (mfem::LinearDiscont3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont3DFECollection_Name" "', argument " "1"" of type '" "mfem::LinearDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::LinearDiscont3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearDiscont3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *arg1 = (mfem::LinearDiscont3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearDiscont3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::LinearDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::LinearDiscont3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearDiscont3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::LinearDiscont3DFECollection *arg1 = (mfem::LinearDiscont3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__LinearDiscont3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearDiscont3DFECollection" "', argument " "1"" of type '" "mfem::LinearDiscont3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::LinearDiscont3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearDiscont3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__LinearDiscont3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LinearDiscont3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuadraticDiscont3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuadraticDiscont3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::QuadraticDiscont3DFECollection *)new mfem::QuadraticDiscont3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *arg1 = (mfem::QuadraticDiscont3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticDiscont3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::QuadraticDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticDiscont3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::QuadraticDiscont3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *arg1 = (mfem::QuadraticDiscont3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:QuadraticDiscont3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::QuadraticDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticDiscont3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::QuadraticDiscont3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *arg1 = (mfem::QuadraticDiscont3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:QuadraticDiscont3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::QuadraticDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuadraticDiscont3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::QuadraticDiscont3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *arg1 = (mfem::QuadraticDiscont3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont3DFECollection_Name" "', argument " "1"" of type '" "mfem::QuadraticDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::QuadraticDiscont3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuadraticDiscont3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *arg1 = (mfem::QuadraticDiscont3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuadraticDiscont3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::QuadraticDiscont3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::QuadraticDiscont3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuadraticDiscont3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::QuadraticDiscont3DFECollection *arg1 = (mfem::QuadraticDiscont3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuadraticDiscont3DFECollection" "', argument " "1"" of type '" "mfem::QuadraticDiscont3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::QuadraticDiscont3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuadraticDiscont3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__QuadraticDiscont3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuadraticDiscont3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RefinedLinearFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RefinedLinearFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::RefinedLinearFECollection *)new mfem::RefinedLinearFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RefinedLinearFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RefinedLinearFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *arg1 = (mfem::RefinedLinearFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RefinedLinearFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RefinedLinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RefinedLinearFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RefinedLinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RefinedLinearFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RefinedLinearFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RefinedLinearFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RefinedLinearFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *arg1 = (mfem::RefinedLinearFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RefinedLinearFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RefinedLinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RefinedLinearFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RefinedLinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RefinedLinearFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RefinedLinearFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RefinedLinearFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RefinedLinearFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *arg1 = (mfem::RefinedLinearFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RefinedLinearFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RefinedLinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RefinedLinearFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RefinedLinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RefinedLinearFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RefinedLinearFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RefinedLinearFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RefinedLinearFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *arg1 = (mfem::RefinedLinearFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RefinedLinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RefinedLinearFECollection_Name" "', argument " "1"" of type '" "mfem::RefinedLinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RefinedLinearFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RefinedLinearFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RefinedLinearFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *arg1 = (mfem::RefinedLinearFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RefinedLinearFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RefinedLinearFECollection_GetContType" "', argument " "1"" of type '" "mfem::RefinedLinearFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RefinedLinearFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RefinedLinearFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RefinedLinearFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RefinedLinearFECollection *arg1 = (mfem::RefinedLinearFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RefinedLinearFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RefinedLinearFECollection" "', argument " "1"" of type '" "mfem::RefinedLinearFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RefinedLinearFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RefinedLinearFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RefinedLinearFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RefinedLinearFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ND1_3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ND1_3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::ND1_3DFECollection *)new mfem::ND1_3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__ND1_3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND1_3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *arg1 = (mfem::ND1_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND1_3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND1_3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::ND1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND1_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND1_3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::ND1_3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND1_3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *arg1 = (mfem::ND1_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:ND1_3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND1_3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::ND1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND1_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND1_3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::ND1_3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND1_3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *arg1 = (mfem::ND1_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:ND1_3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__ND1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND1_3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::ND1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND1_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ND1_3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::ND1_3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND1_3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *arg1 = (mfem::ND1_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND1_3DFECollection_Name" "', argument " "1"" of type '" "mfem::ND1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND1_3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::ND1_3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ND1_3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *arg1 = (mfem::ND1_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ND1_3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::ND1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND1_3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::ND1_3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ND1_3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::ND1_3DFECollection *arg1 = (mfem::ND1_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__ND1_3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ND1_3DFECollection" "', argument " "1"" of type '" "mfem::ND1_3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::ND1_3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ND1_3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__ND1_3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ND1_3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT0_3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RT0_3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::RT0_3DFECollection *)new mfem::RT0_3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT0_3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *arg1 = (mfem::RT0_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT0_3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT0_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT0_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT0_3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT0_3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *arg1 = (mfem::RT0_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT0_3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT0_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT0_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT0_3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT0_3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *arg1 = (mfem::RT0_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT0_3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT0_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT0_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT0_3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT0_3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *arg1 = (mfem::RT0_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT0_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_3DFECollection_Name" "', argument " "1"" of type '" "mfem::RT0_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT0_3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT0_3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *arg1 = (mfem::RT0_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT0_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT0_3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::RT0_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT0_3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT0_3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT0_3DFECollection *arg1 = (mfem::RT0_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT0_3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT0_3DFECollection" "', argument " "1"" of type '" "mfem::RT0_3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT0_3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT0_3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT0_3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT0_3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RT1_3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RT1_3DFECollection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (mfem::RT1_3DFECollection *)new mfem::RT1_3DFECollection();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__RT1_3DFECollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_3DFECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *arg1 = (mfem::RT1_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT1_3DFECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_3DFECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::RT1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT1_3DFECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::RT1_3DFECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_3DFECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *arg1 = (mfem::RT1_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:RT1_3DFECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_3DFECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::RT1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT1_3DFECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::RT1_3DFECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_3DFECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *arg1 = (mfem::RT1_3DFECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:RT1_3DFECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__RT1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_3DFECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::RT1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_3DFECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RT1_3DFECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::RT1_3DFECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_3DFECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *arg1 = (mfem::RT1_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_3DFECollection_Name" "', argument " "1"" of type '" "mfem::RT1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_3DFECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::RT1_3DFECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RT1_3DFECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *arg1 = (mfem::RT1_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT1_3DFECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RT1_3DFECollection_GetContType" "', argument " "1"" of type '" "mfem::RT1_3DFECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_3DFECollection * >(argp1);
  {
    try {
      result = (int)((mfem::RT1_3DFECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RT1_3DFECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::RT1_3DFECollection *arg1 = (mfem::RT1_3DFECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__RT1_3DFECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RT1_3DFECollection" "', argument " "1"" of type '" "mfem::RT1_3DFECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::RT1_3DFECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RT1_3DFECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__RT1_3DFECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RT1_3DFECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Local_FECollection(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  char * kwnames[] = {
    (char *)"fe_name",  NULL 
  };
  mfem::Local_FECollection *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:new_Local_FECollection", kwnames, &obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Local_FECollection" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (mfem::Local_FECollection *)new mfem::Local_FECollection((char const *)arg1);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__Local_FECollection, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Local_FECollection_FiniteElementForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Local_FECollection *arg1 = (mfem::Local_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType_",  NULL 
  };
  mfem::FiniteElement *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Local_FECollection_FiniteElementForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Local_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Local_FECollection_FiniteElementForGeometry" "', argument " "1"" of type '" "mfem::Local_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Local_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Local_FECollection_FiniteElementForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (mfem::FiniteElement *)((mfem::Local_FECollection const *)arg1)->FiniteElementForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mfem__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Local_FECollection_DofForGeometry(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Local_FECollection *arg1 = (mfem::Local_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType_",  NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO:Local_FECollection_DofForGeometry", kwnames, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Local_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Local_FECollection_DofForGeometry" "', argument " "1"" of type '" "mfem::Local_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Local_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Local_FECollection_DofForGeometry" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    try {
      result = (int)((mfem::Local_FECollection const *)arg1)->DofForGeometry(arg2);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Local_FECollection_DofOrderForOrientation(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  mfem::Local_FECollection *arg1 = (mfem::Local_FECollection *) 0 ;
  mfem::Geometry::Type arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char * kwnames[] = {
    (char *)"self",  (char *)"GeomType_",  (char *)"Or",  NULL 
  };
  int *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OOO:Local_FECollection_DofOrderForOrientation", kwnames, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_mfem__Local_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Local_FECollection_DofOrderForOrientation" "', argument " "1"" of type '" "mfem::Local_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Local_FECollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Local_FECollection_DofOrderForOrientation" "', argument " "2"" of type '" "mfem::Geometry::Type""'");
  } 
  arg2 = static_cast< mfem::Geometry::Type >(val2);
  {
    if ((PyArray_PyIntAsInt(obj2) == -1) && PyErr_Occurred()) {
      SWIG_exception_fail(SWIG_TypeError, "Input must be integer");
    };  
    arg3 = PyArray_PyIntAsInt(obj2);
  }
  {
    try {
      result = (int *)((mfem::Local_FECollection const *)arg1)->DofOrderForOrientation(arg2,arg3);
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Local_FECollection_Name(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Local_FECollection *arg1 = (mfem::Local_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Local_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Local_FECollection_Name" "', argument " "1"" of type '" "mfem::Local_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Local_FECollection * >(argp1);
  {
    try {
      result = (char *)((mfem::Local_FECollection const *)arg1)->Name();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Local_FECollection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Local_FECollection *arg1 = (mfem::Local_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Local_FECollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Local_FECollection" "', argument " "1"" of type '" "mfem::Local_FECollection *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Local_FECollection * >(argp1);
  {
    try {
      delete arg1;
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Local_FECollection_GetContType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  mfem::Local_FECollection *arg1 = (mfem::Local_FECollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_mfem__Local_FECollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Local_FECollection_GetContType" "', argument " "1"" of type '" "mfem::Local_FECollection const *""'"); 
  }
  arg1 = reinterpret_cast< mfem::Local_FECollection * >(argp1);
  {
    try {
      result = (int)((mfem::Local_FECollection const *)arg1)->GetContType();
    }
#ifdef  MFEM_USE_EXCEPTIONS
    catch (mfem::ErrorException &_e) {
      std::string s("PyMFEM error (mfem::ErrorException): "), s2(_e.what());
      s = s + s2;    
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
#endif
    
    catch (Swig::DirectorException &e){
      SWIG_fail;
    }    
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }	 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Local_FECollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_mfem__Local_FECollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Local_FECollection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "FiniteElementCollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_FiniteElementForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "FiniteElementCollection_FiniteElementForDim", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_FiniteElementForDim, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_FiniteElementForDim(FiniteElementCollection self, int dim) -> FiniteElement"},
	 { "FiniteElementCollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_DofForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "FiniteElementCollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_DofOrderForOrientation(FiniteElementCollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "FiniteElementCollection_Name", _wrap_FiniteElementCollection_Name, METH_O, "FiniteElementCollection_Name(FiniteElementCollection self) -> char const *"},
	 { "FiniteElementCollection_GetContType", _wrap_FiniteElementCollection_GetContType, METH_O, "FiniteElementCollection_GetContType(FiniteElementCollection self) -> int"},
	 { "FiniteElementCollection_GetRangeType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetRangeType, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetRangeType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetDerivRangeType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDerivRangeType, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetDerivRangeType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetMapType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetMapType, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetMapType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetDerivType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDerivType, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetDerivType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetDerivMapType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDerivMapType, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetDerivMapType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_HasFaceDofs", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_HasFaceDofs, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_HasFaceDofs(FiniteElementCollection self, mfem::Geometry::Type geom, int p) -> int"},
	 { "FiniteElementCollection_TraceFiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_TraceFiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_TraceFiniteElementForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "FiniteElementCollection_GetTraceCollection", _wrap_FiniteElementCollection_GetTraceCollection, METH_O, "FiniteElementCollection_GetTraceCollection(FiniteElementCollection self) -> FiniteElementCollection"},
	 { "delete_FiniteElementCollection", _wrap_delete_FiniteElementCollection, METH_O, "delete_FiniteElementCollection(FiniteElementCollection self)"},
	 { "FiniteElementCollection_New", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_New, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_New(char const * name) -> FiniteElementCollection"},
	 { "FiniteElementCollection_SubDofOrder", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_SubDofOrder, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_SubDofOrder(FiniteElementCollection self, mfem::Geometry::Type Geom, int SDim, int Info, intArray dofs)"},
	 { "FiniteElementCollection_GetFE", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetFE, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetFE(FiniteElementCollection self, mfem::Geometry::Type geom, int p) -> FiniteElement"},
	 { "FiniteElementCollection_GetNumDof", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetNumDof, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetNumDof(FiniteElementCollection self, mfem::Geometry::Type geom, int p) -> int"},
	 { "FiniteElementCollection_GetDofOrdering", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDofOrdering, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_GetDofOrdering(FiniteElementCollection self, mfem::Geometry::Type geom, int p, int ori) -> int const *"},
	 { "FiniteElementCollection_GetOrder", _wrap_FiniteElementCollection_GetOrder, METH_O, "FiniteElementCollection_GetOrder(FiniteElementCollection self) -> int"},
	 { "FiniteElementCollection_Clone", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_Clone, METH_VARARGS|METH_KEYWORDS, "FiniteElementCollection_Clone(FiniteElementCollection self, int p) -> FiniteElementCollection"},
	 { "FiniteElementCollection_swigregister", FiniteElementCollection_swigregister, METH_O, NULL},
	 { "new_H1_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1_FECollection(int const p, int const dim=3, int const btype=GaussLobatto) -> H1_FECollection"},
	 { "H1_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "H1_FECollection_FiniteElementForGeometry(H1_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "H1_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "H1_FECollection_DofForGeometry(H1_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "H1_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "H1_FECollection_DofOrderForOrientation(H1_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "H1_FECollection_Name", _wrap_H1_FECollection_Name, METH_O, "H1_FECollection_Name(H1_FECollection self) -> char const *"},
	 { "H1_FECollection_GetContType", _wrap_H1_FECollection_GetContType, METH_O, "H1_FECollection_GetContType(H1_FECollection self) -> int"},
	 { "H1_FECollection_GetBasisType", _wrap_H1_FECollection_GetBasisType, METH_O, "H1_FECollection_GetBasisType(H1_FECollection self) -> int"},
	 { "H1_FECollection_GetTraceCollection", _wrap_H1_FECollection_GetTraceCollection, METH_O, "H1_FECollection_GetTraceCollection(H1_FECollection self) -> FiniteElementCollection"},
	 { "H1_FECollection_GetDofMap", _wrap_H1_FECollection_GetDofMap, METH_VARARGS, "\n"
		"H1_FECollection_GetDofMap(H1_FECollection self, mfem::Geometry::Type GeomType) -> int const\n"
		"H1_FECollection_GetDofMap(H1_FECollection self, mfem::Geometry::Type GeomType, int p) -> int const *\n"
		""},
	 { "H1_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "H1_FECollection_Clone(H1_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_H1_FECollection", _wrap_delete_H1_FECollection, METH_O, "delete_H1_FECollection(H1_FECollection self)"},
	 { "H1_FECollection_swigregister", H1_FECollection_swigregister, METH_O, NULL},
	 { "H1_FECollection_swiginit", H1_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_H1Pos_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1Pos_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1Pos_FECollection(int const p, int const dim=3) -> H1Pos_FECollection"},
	 { "delete_H1Pos_FECollection", _wrap_delete_H1Pos_FECollection, METH_O, "delete_H1Pos_FECollection(H1Pos_FECollection self)"},
	 { "H1Pos_FECollection_swigregister", H1Pos_FECollection_swigregister, METH_O, NULL},
	 { "H1Pos_FECollection_swiginit", H1Pos_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_H1Ser_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1Ser_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1Ser_FECollection(int const p, int const dim=2) -> H1Ser_FECollection"},
	 { "delete_H1Ser_FECollection", _wrap_delete_H1Ser_FECollection, METH_O, "delete_H1Ser_FECollection(H1Ser_FECollection self)"},
	 { "H1Ser_FECollection_swigregister", H1Ser_FECollection_swigregister, METH_O, NULL},
	 { "H1Ser_FECollection_swiginit", H1Ser_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_H1_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1_Trace_FECollection(int const p, int const dim, int const btype=GaussLobatto) -> H1_Trace_FECollection"},
	 { "delete_H1_Trace_FECollection", _wrap_delete_H1_Trace_FECollection, METH_O, "delete_H1_Trace_FECollection(H1_Trace_FECollection self)"},
	 { "H1_Trace_FECollection_swigregister", H1_Trace_FECollection_swigregister, METH_O, NULL},
	 { "H1_Trace_FECollection_swiginit", H1_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_L2_FECollection", (PyCFunction)(void(*)(void))_wrap_new_L2_FECollection, METH_VARARGS|METH_KEYWORDS, "new_L2_FECollection(int const p, int const dim, int const btype=GaussLegendre, int const map_type=VALUE) -> L2_FECollection"},
	 { "L2_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "L2_FECollection_FiniteElementForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "L2_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "L2_FECollection_DofForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "L2_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "L2_FECollection_DofOrderForOrientation(L2_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "L2_FECollection_Name", _wrap_L2_FECollection_Name, METH_O, "L2_FECollection_Name(L2_FECollection self) -> char const *"},
	 { "L2_FECollection_GetContType", _wrap_L2_FECollection_GetContType, METH_O, "L2_FECollection_GetContType(L2_FECollection self) -> int"},
	 { "L2_FECollection_TraceFiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_TraceFiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "L2_FECollection_TraceFiniteElementForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "L2_FECollection_GetBasisType", _wrap_L2_FECollection_GetBasisType, METH_O, "L2_FECollection_GetBasisType(L2_FECollection self) -> int"},
	 { "L2_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "L2_FECollection_Clone(L2_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_L2_FECollection", _wrap_delete_L2_FECollection, METH_O, "delete_L2_FECollection(L2_FECollection self)"},
	 { "L2_FECollection_swigregister", L2_FECollection_swigregister, METH_O, NULL},
	 { "L2_FECollection_swiginit", L2_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_FECollection", _wrap_new_RT_FECollection, METH_VARARGS, NULL},
	 { "RT_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT_FECollection_FiniteElementForGeometry(RT_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT_FECollection_DofForGeometry(RT_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT_FECollection_DofOrderForOrientation(RT_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT_FECollection_Name", _wrap_RT_FECollection_Name, METH_O, "RT_FECollection_Name(RT_FECollection self) -> char const *"},
	 { "RT_FECollection_GetContType", _wrap_RT_FECollection_GetContType, METH_O, "RT_FECollection_GetContType(RT_FECollection self) -> int"},
	 { "RT_FECollection_GetTraceCollection", _wrap_RT_FECollection_GetTraceCollection, METH_O, "RT_FECollection_GetTraceCollection(RT_FECollection self) -> FiniteElementCollection"},
	 { "RT_FECollection_GetClosedBasisType", _wrap_RT_FECollection_GetClosedBasisType, METH_O, "RT_FECollection_GetClosedBasisType(RT_FECollection self) -> int"},
	 { "RT_FECollection_GetOpenBasisType", _wrap_RT_FECollection_GetOpenBasisType, METH_O, "RT_FECollection_GetOpenBasisType(RT_FECollection self) -> int"},
	 { "RT_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "RT_FECollection_Clone(RT_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_RT_FECollection", _wrap_delete_RT_FECollection, METH_O, "delete_RT_FECollection(RT_FECollection self)"},
	 { "RT_FECollection_swigregister", RT_FECollection_swigregister, METH_O, NULL},
	 { "RT_FECollection_swiginit", RT_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_RT_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_RT_Trace_FECollection(int const p, int const dim, int const map_type=INTEGRAL, int const ob_type=GaussLegendre) -> RT_Trace_FECollection"},
	 { "delete_RT_Trace_FECollection", _wrap_delete_RT_Trace_FECollection, METH_O, "delete_RT_Trace_FECollection(RT_Trace_FECollection self)"},
	 { "RT_Trace_FECollection_swigregister", RT_Trace_FECollection_swigregister, METH_O, NULL},
	 { "RT_Trace_FECollection_swiginit", RT_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_DG_Interface_FECollection", (PyCFunction)(void(*)(void))_wrap_new_DG_Interface_FECollection, METH_VARARGS|METH_KEYWORDS, "new_DG_Interface_FECollection(int const p, int const dim, int const map_type=VALUE, int const ob_type=GaussLegendre) -> DG_Interface_FECollection"},
	 { "delete_DG_Interface_FECollection", _wrap_delete_DG_Interface_FECollection, METH_O, "delete_DG_Interface_FECollection(DG_Interface_FECollection self)"},
	 { "DG_Interface_FECollection_swigregister", DG_Interface_FECollection_swigregister, METH_O, NULL},
	 { "DG_Interface_FECollection_swiginit", DG_Interface_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_FECollection"},
	 { "ND_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "ND_FECollection_FiniteElementForGeometry(ND_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "ND_FECollection_DofForGeometry(ND_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "ND_FECollection_DofOrderForOrientation(ND_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND_FECollection_Name", _wrap_ND_FECollection_Name, METH_O, "ND_FECollection_Name(ND_FECollection self) -> char const *"},
	 { "ND_FECollection_GetContType", _wrap_ND_FECollection_GetContType, METH_O, "ND_FECollection_GetContType(ND_FECollection self) -> int"},
	 { "ND_FECollection_GetTraceCollection", _wrap_ND_FECollection_GetTraceCollection, METH_O, "ND_FECollection_GetTraceCollection(ND_FECollection self) -> FiniteElementCollection"},
	 { "ND_FECollection_GetClosedBasisType", _wrap_ND_FECollection_GetClosedBasisType, METH_O, "ND_FECollection_GetClosedBasisType(ND_FECollection self) -> int"},
	 { "ND_FECollection_GetOpenBasisType", _wrap_ND_FECollection_GetOpenBasisType, METH_O, "ND_FECollection_GetOpenBasisType(ND_FECollection self) -> int"},
	 { "ND_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "ND_FECollection_Clone(ND_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_ND_FECollection", _wrap_delete_ND_FECollection, METH_O, "delete_ND_FECollection(ND_FECollection self)"},
	 { "ND_FECollection_swigregister", ND_FECollection_swigregister, METH_O, NULL},
	 { "ND_FECollection_swiginit", ND_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_Trace_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_Trace_FECollection"},
	 { "delete_ND_Trace_FECollection", _wrap_delete_ND_Trace_FECollection, METH_O, "delete_ND_Trace_FECollection(ND_Trace_FECollection self)"},
	 { "ND_Trace_FECollection_swigregister", ND_Trace_FECollection_swigregister, METH_O, NULL},
	 { "ND_Trace_FECollection_swiginit", ND_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_R1D_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_R1D_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_R1D_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_R1D_FECollection"},
	 { "ND_R1D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R1D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "ND_R1D_FECollection_FiniteElementForGeometry(ND_R1D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND_R1D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R1D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "ND_R1D_FECollection_DofForGeometry(ND_R1D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND_R1D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND_R1D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "ND_R1D_FECollection_DofOrderForOrientation(ND_R1D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND_R1D_FECollection_Name", _wrap_ND_R1D_FECollection_Name, METH_O, "ND_R1D_FECollection_Name(ND_R1D_FECollection self) -> char const *"},
	 { "ND_R1D_FECollection_GetContType", _wrap_ND_R1D_FECollection_GetContType, METH_O, "ND_R1D_FECollection_GetContType(ND_R1D_FECollection self) -> int"},
	 { "ND_R1D_FECollection_GetTraceCollection", _wrap_ND_R1D_FECollection_GetTraceCollection, METH_O, "ND_R1D_FECollection_GetTraceCollection(ND_R1D_FECollection self) -> FiniteElementCollection"},
	 { "delete_ND_R1D_FECollection", _wrap_delete_ND_R1D_FECollection, METH_O, "delete_ND_R1D_FECollection(ND_R1D_FECollection self)"},
	 { "ND_R1D_FECollection_swigregister", ND_R1D_FECollection_swigregister, METH_O, NULL},
	 { "ND_R1D_FECollection_swiginit", ND_R1D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_R1D_FECollection", (PyCFunction)(void(*)(void))_wrap_new_RT_R1D_FECollection, METH_VARARGS|METH_KEYWORDS, "new_RT_R1D_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> RT_R1D_FECollection"},
	 { "RT_R1D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R1D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT_R1D_FECollection_FiniteElementForGeometry(RT_R1D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT_R1D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R1D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT_R1D_FECollection_DofForGeometry(RT_R1D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT_R1D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT_R1D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT_R1D_FECollection_DofOrderForOrientation(RT_R1D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT_R1D_FECollection_Name", _wrap_RT_R1D_FECollection_Name, METH_O, "RT_R1D_FECollection_Name(RT_R1D_FECollection self) -> char const *"},
	 { "RT_R1D_FECollection_GetContType", _wrap_RT_R1D_FECollection_GetContType, METH_O, "RT_R1D_FECollection_GetContType(RT_R1D_FECollection self) -> int"},
	 { "RT_R1D_FECollection_GetTraceCollection", _wrap_RT_R1D_FECollection_GetTraceCollection, METH_O, "RT_R1D_FECollection_GetTraceCollection(RT_R1D_FECollection self) -> FiniteElementCollection"},
	 { "delete_RT_R1D_FECollection", _wrap_delete_RT_R1D_FECollection, METH_O, "delete_RT_R1D_FECollection(RT_R1D_FECollection self)"},
	 { "RT_R1D_FECollection_swigregister", RT_R1D_FECollection_swigregister, METH_O, NULL},
	 { "RT_R1D_FECollection_swiginit", RT_R1D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_R2D_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_R2D_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_R2D_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_R2D_FECollection"},
	 { "ND_R2D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R2D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "ND_R2D_FECollection_FiniteElementForGeometry(ND_R2D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND_R2D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R2D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "ND_R2D_FECollection_DofForGeometry(ND_R2D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND_R2D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND_R2D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "ND_R2D_FECollection_DofOrderForOrientation(ND_R2D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND_R2D_FECollection_Name", _wrap_ND_R2D_FECollection_Name, METH_O, "ND_R2D_FECollection_Name(ND_R2D_FECollection self) -> char const *"},
	 { "ND_R2D_FECollection_GetContType", _wrap_ND_R2D_FECollection_GetContType, METH_O, "ND_R2D_FECollection_GetContType(ND_R2D_FECollection self) -> int"},
	 { "ND_R2D_FECollection_GetTraceCollection", _wrap_ND_R2D_FECollection_GetTraceCollection, METH_O, "ND_R2D_FECollection_GetTraceCollection(ND_R2D_FECollection self) -> FiniteElementCollection"},
	 { "delete_ND_R2D_FECollection", _wrap_delete_ND_R2D_FECollection, METH_O, "delete_ND_R2D_FECollection(ND_R2D_FECollection self)"},
	 { "ND_R2D_FECollection_swigregister", ND_R2D_FECollection_swigregister, METH_O, NULL},
	 { "ND_R2D_FECollection_swiginit", ND_R2D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_R2D_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_R2D_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_R2D_Trace_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_R2D_Trace_FECollection"},
	 { "delete_ND_R2D_Trace_FECollection", _wrap_delete_ND_R2D_Trace_FECollection, METH_O, "delete_ND_R2D_Trace_FECollection(ND_R2D_Trace_FECollection self)"},
	 { "ND_R2D_Trace_FECollection_swigregister", ND_R2D_Trace_FECollection_swigregister, METH_O, NULL},
	 { "ND_R2D_Trace_FECollection_swiginit", ND_R2D_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_R2D_FECollection", _wrap_new_RT_R2D_FECollection, METH_VARARGS, NULL},
	 { "RT_R2D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R2D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT_R2D_FECollection_FiniteElementForGeometry(RT_R2D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT_R2D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R2D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT_R2D_FECollection_DofForGeometry(RT_R2D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT_R2D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT_R2D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT_R2D_FECollection_DofOrderForOrientation(RT_R2D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT_R2D_FECollection_Name", _wrap_RT_R2D_FECollection_Name, METH_O, "RT_R2D_FECollection_Name(RT_R2D_FECollection self) -> char const *"},
	 { "RT_R2D_FECollection_GetContType", _wrap_RT_R2D_FECollection_GetContType, METH_O, "RT_R2D_FECollection_GetContType(RT_R2D_FECollection self) -> int"},
	 { "RT_R2D_FECollection_GetTraceCollection", _wrap_RT_R2D_FECollection_GetTraceCollection, METH_O, "RT_R2D_FECollection_GetTraceCollection(RT_R2D_FECollection self) -> FiniteElementCollection"},
	 { "delete_RT_R2D_FECollection", _wrap_delete_RT_R2D_FECollection, METH_O, "delete_RT_R2D_FECollection(RT_R2D_FECollection self)"},
	 { "RT_R2D_FECollection_swigregister", RT_R2D_FECollection_swigregister, METH_O, NULL},
	 { "RT_R2D_FECollection_swiginit", RT_R2D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_R2D_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_RT_R2D_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_RT_R2D_Trace_FECollection(int const p, int const dim, int const map_type=INTEGRAL, int const ob_type=GaussLegendre) -> RT_R2D_Trace_FECollection"},
	 { "delete_RT_R2D_Trace_FECollection", _wrap_delete_RT_R2D_Trace_FECollection, METH_O, "delete_RT_R2D_Trace_FECollection(RT_R2D_Trace_FECollection self)"},
	 { "RT_R2D_Trace_FECollection_swigregister", RT_R2D_Trace_FECollection_swigregister, METH_O, NULL},
	 { "RT_R2D_Trace_FECollection_swiginit", RT_R2D_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_NURBSFECollection", (PyCFunction)(void(*)(void))_wrap_new_NURBSFECollection, METH_VARARGS|METH_KEYWORDS, "new_NURBSFECollection(int Order=VariableOrder) -> NURBSFECollection"},
	 { "NURBSFECollection_Reset", _wrap_NURBSFECollection_Reset, METH_O, "NURBSFECollection_Reset(NURBSFECollection self)"},
	 { "NURBSFECollection_GetOrder", _wrap_NURBSFECollection_GetOrder, METH_O, "NURBSFECollection_GetOrder(NURBSFECollection self) -> int"},
	 { "NURBSFECollection_SetOrder", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_SetOrder, METH_VARARGS|METH_KEYWORDS, "NURBSFECollection_SetOrder(NURBSFECollection self, int Order)"},
	 { "NURBSFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "NURBSFECollection_FiniteElementForGeometry(NURBSFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "NURBSFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "NURBSFECollection_DofForGeometry(NURBSFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "NURBSFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "NURBSFECollection_DofOrderForOrientation(NURBSFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "NURBSFECollection_Name", _wrap_NURBSFECollection_Name, METH_O, "NURBSFECollection_Name(NURBSFECollection self) -> char const *"},
	 { "NURBSFECollection_GetContType", _wrap_NURBSFECollection_GetContType, METH_O, "NURBSFECollection_GetContType(NURBSFECollection self) -> int"},
	 { "NURBSFECollection_GetTraceCollection", _wrap_NURBSFECollection_GetTraceCollection, METH_O, "NURBSFECollection_GetTraceCollection(NURBSFECollection self) -> FiniteElementCollection"},
	 { "delete_NURBSFECollection", _wrap_delete_NURBSFECollection, METH_O, "delete_NURBSFECollection(NURBSFECollection self)"},
	 { "NURBSFECollection_swigregister", NURBSFECollection_swigregister, METH_O, NULL},
	 { "NURBSFECollection_swiginit", NURBSFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearFECollection", _wrap_new_LinearFECollection, METH_NOARGS, "new_LinearFECollection() -> LinearFECollection"},
	 { "LinearFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearFECollection_FiniteElementForGeometry(LinearFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearFECollection_DofForGeometry(LinearFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "LinearFECollection_DofOrderForOrientation(LinearFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearFECollection_Name", _wrap_LinearFECollection_Name, METH_O, "LinearFECollection_Name(LinearFECollection self) -> char const *"},
	 { "LinearFECollection_GetContType", _wrap_LinearFECollection_GetContType, METH_O, "LinearFECollection_GetContType(LinearFECollection self) -> int"},
	 { "delete_LinearFECollection", _wrap_delete_LinearFECollection, METH_O, "delete_LinearFECollection(LinearFECollection self)"},
	 { "LinearFECollection_swigregister", LinearFECollection_swigregister, METH_O, NULL},
	 { "LinearFECollection_swiginit", LinearFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticFECollection", _wrap_new_QuadraticFECollection, METH_NOARGS, "new_QuadraticFECollection() -> QuadraticFECollection"},
	 { "QuadraticFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticFECollection_FiniteElementForGeometry(QuadraticFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticFECollection_DofForGeometry(QuadraticFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "QuadraticFECollection_DofOrderForOrientation(QuadraticFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticFECollection_Name", _wrap_QuadraticFECollection_Name, METH_O, "QuadraticFECollection_Name(QuadraticFECollection self) -> char const *"},
	 { "QuadraticFECollection_GetContType", _wrap_QuadraticFECollection_GetContType, METH_O, "QuadraticFECollection_GetContType(QuadraticFECollection self) -> int"},
	 { "delete_QuadraticFECollection", _wrap_delete_QuadraticFECollection, METH_O, "delete_QuadraticFECollection(QuadraticFECollection self)"},
	 { "QuadraticFECollection_swigregister", QuadraticFECollection_swigregister, METH_O, NULL},
	 { "QuadraticFECollection_swiginit", QuadraticFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticPosFECollection", _wrap_new_QuadraticPosFECollection, METH_NOARGS, "new_QuadraticPosFECollection() -> QuadraticPosFECollection"},
	 { "QuadraticPosFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticPosFECollection_FiniteElementForGeometry(QuadraticPosFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticPosFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticPosFECollection_DofForGeometry(QuadraticPosFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticPosFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticPosFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "QuadraticPosFECollection_DofOrderForOrientation(QuadraticPosFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticPosFECollection_Name", _wrap_QuadraticPosFECollection_Name, METH_O, "QuadraticPosFECollection_Name(QuadraticPosFECollection self) -> char const *"},
	 { "QuadraticPosFECollection_GetContType", _wrap_QuadraticPosFECollection_GetContType, METH_O, "QuadraticPosFECollection_GetContType(QuadraticPosFECollection self) -> int"},
	 { "delete_QuadraticPosFECollection", _wrap_delete_QuadraticPosFECollection, METH_O, "delete_QuadraticPosFECollection(QuadraticPosFECollection self)"},
	 { "QuadraticPosFECollection_swigregister", QuadraticPosFECollection_swigregister, METH_O, NULL},
	 { "QuadraticPosFECollection_swiginit", QuadraticPosFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_CubicFECollection", _wrap_new_CubicFECollection, METH_NOARGS, "new_CubicFECollection() -> CubicFECollection"},
	 { "CubicFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "CubicFECollection_FiniteElementForGeometry(CubicFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "CubicFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "CubicFECollection_DofForGeometry(CubicFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "CubicFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_CubicFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "CubicFECollection_DofOrderForOrientation(CubicFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "CubicFECollection_Name", _wrap_CubicFECollection_Name, METH_O, "CubicFECollection_Name(CubicFECollection self) -> char const *"},
	 { "CubicFECollection_GetContType", _wrap_CubicFECollection_GetContType, METH_O, "CubicFECollection_GetContType(CubicFECollection self) -> int"},
	 { "delete_CubicFECollection", _wrap_delete_CubicFECollection, METH_O, "delete_CubicFECollection(CubicFECollection self)"},
	 { "CubicFECollection_swigregister", CubicFECollection_swigregister, METH_O, NULL},
	 { "CubicFECollection_swiginit", CubicFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_CrouzeixRaviartFECollection", _wrap_new_CrouzeixRaviartFECollection, METH_NOARGS, "new_CrouzeixRaviartFECollection() -> CrouzeixRaviartFECollection"},
	 { "CrouzeixRaviartFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_CrouzeixRaviartFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "CrouzeixRaviartFECollection_FiniteElementForGeometry(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "CrouzeixRaviartFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_CrouzeixRaviartFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "CrouzeixRaviartFECollection_DofForGeometry(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "CrouzeixRaviartFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_CrouzeixRaviartFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "CrouzeixRaviartFECollection_DofOrderForOrientation(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "CrouzeixRaviartFECollection_Name", _wrap_CrouzeixRaviartFECollection_Name, METH_O, "CrouzeixRaviartFECollection_Name(CrouzeixRaviartFECollection self) -> char const *"},
	 { "CrouzeixRaviartFECollection_GetContType", _wrap_CrouzeixRaviartFECollection_GetContType, METH_O, "CrouzeixRaviartFECollection_GetContType(CrouzeixRaviartFECollection self) -> int"},
	 { "delete_CrouzeixRaviartFECollection", _wrap_delete_CrouzeixRaviartFECollection, METH_O, "delete_CrouzeixRaviartFECollection(CrouzeixRaviartFECollection self)"},
	 { "CrouzeixRaviartFECollection_swigregister", CrouzeixRaviartFECollection_swigregister, METH_O, NULL},
	 { "CrouzeixRaviartFECollection_swiginit", CrouzeixRaviartFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearNonConf3DFECollection", _wrap_new_LinearNonConf3DFECollection, METH_NOARGS, "new_LinearNonConf3DFECollection() -> LinearNonConf3DFECollection"},
	 { "LinearNonConf3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearNonConf3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearNonConf3DFECollection_FiniteElementForGeometry(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearNonConf3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearNonConf3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearNonConf3DFECollection_DofForGeometry(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearNonConf3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearNonConf3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "LinearNonConf3DFECollection_DofOrderForOrientation(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearNonConf3DFECollection_Name", _wrap_LinearNonConf3DFECollection_Name, METH_O, "LinearNonConf3DFECollection_Name(LinearNonConf3DFECollection self) -> char const *"},
	 { "LinearNonConf3DFECollection_GetContType", _wrap_LinearNonConf3DFECollection_GetContType, METH_O, "LinearNonConf3DFECollection_GetContType(LinearNonConf3DFECollection self) -> int"},
	 { "delete_LinearNonConf3DFECollection", _wrap_delete_LinearNonConf3DFECollection, METH_O, "delete_LinearNonConf3DFECollection(LinearNonConf3DFECollection self)"},
	 { "LinearNonConf3DFECollection_swigregister", LinearNonConf3DFECollection_swigregister, METH_O, NULL},
	 { "LinearNonConf3DFECollection_swiginit", LinearNonConf3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT0_2DFECollection", _wrap_new_RT0_2DFECollection, METH_NOARGS, "new_RT0_2DFECollection() -> RT0_2DFECollection"},
	 { "RT0_2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT0_2DFECollection_FiniteElementForGeometry(RT0_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT0_2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT0_2DFECollection_DofForGeometry(RT0_2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT0_2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT0_2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT0_2DFECollection_DofOrderForOrientation(RT0_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT0_2DFECollection_Name", _wrap_RT0_2DFECollection_Name, METH_O, "RT0_2DFECollection_Name(RT0_2DFECollection self) -> char const *"},
	 { "RT0_2DFECollection_GetContType", _wrap_RT0_2DFECollection_GetContType, METH_O, "RT0_2DFECollection_GetContType(RT0_2DFECollection self) -> int"},
	 { "delete_RT0_2DFECollection", _wrap_delete_RT0_2DFECollection, METH_O, "delete_RT0_2DFECollection(RT0_2DFECollection self)"},
	 { "RT0_2DFECollection_swigregister", RT0_2DFECollection_swigregister, METH_O, NULL},
	 { "RT0_2DFECollection_swiginit", RT0_2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT1_2DFECollection", _wrap_new_RT1_2DFECollection, METH_NOARGS, "new_RT1_2DFECollection() -> RT1_2DFECollection"},
	 { "RT1_2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT1_2DFECollection_FiniteElementForGeometry(RT1_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT1_2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT1_2DFECollection_DofForGeometry(RT1_2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT1_2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT1_2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT1_2DFECollection_DofOrderForOrientation(RT1_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT1_2DFECollection_Name", _wrap_RT1_2DFECollection_Name, METH_O, "RT1_2DFECollection_Name(RT1_2DFECollection self) -> char const *"},
	 { "RT1_2DFECollection_GetContType", _wrap_RT1_2DFECollection_GetContType, METH_O, "RT1_2DFECollection_GetContType(RT1_2DFECollection self) -> int"},
	 { "delete_RT1_2DFECollection", _wrap_delete_RT1_2DFECollection, METH_O, "delete_RT1_2DFECollection(RT1_2DFECollection self)"},
	 { "RT1_2DFECollection_swigregister", RT1_2DFECollection_swigregister, METH_O, NULL},
	 { "RT1_2DFECollection_swiginit", RT1_2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT2_2DFECollection", _wrap_new_RT2_2DFECollection, METH_NOARGS, "new_RT2_2DFECollection() -> RT2_2DFECollection"},
	 { "RT2_2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT2_2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT2_2DFECollection_FiniteElementForGeometry(RT2_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT2_2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT2_2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT2_2DFECollection_DofForGeometry(RT2_2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT2_2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT2_2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT2_2DFECollection_DofOrderForOrientation(RT2_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT2_2DFECollection_Name", _wrap_RT2_2DFECollection_Name, METH_O, "RT2_2DFECollection_Name(RT2_2DFECollection self) -> char const *"},
	 { "RT2_2DFECollection_GetContType", _wrap_RT2_2DFECollection_GetContType, METH_O, "RT2_2DFECollection_GetContType(RT2_2DFECollection self) -> int"},
	 { "delete_RT2_2DFECollection", _wrap_delete_RT2_2DFECollection, METH_O, "delete_RT2_2DFECollection(RT2_2DFECollection self)"},
	 { "RT2_2DFECollection_swigregister", RT2_2DFECollection_swigregister, METH_O, NULL},
	 { "RT2_2DFECollection_swiginit", RT2_2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_Const2DFECollection", _wrap_new_Const2DFECollection, METH_NOARGS, "new_Const2DFECollection() -> Const2DFECollection"},
	 { "Const2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_Const2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "Const2DFECollection_FiniteElementForGeometry(Const2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "Const2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_Const2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "Const2DFECollection_DofForGeometry(Const2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "Const2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_Const2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "Const2DFECollection_DofOrderForOrientation(Const2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "Const2DFECollection_Name", _wrap_Const2DFECollection_Name, METH_O, "Const2DFECollection_Name(Const2DFECollection self) -> char const *"},
	 { "Const2DFECollection_GetContType", _wrap_Const2DFECollection_GetContType, METH_O, "Const2DFECollection_GetContType(Const2DFECollection self) -> int"},
	 { "delete_Const2DFECollection", _wrap_delete_Const2DFECollection, METH_O, "delete_Const2DFECollection(Const2DFECollection self)"},
	 { "Const2DFECollection_swigregister", Const2DFECollection_swigregister, METH_O, NULL},
	 { "Const2DFECollection_swiginit", Const2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearDiscont2DFECollection", _wrap_new_LinearDiscont2DFECollection, METH_NOARGS, "new_LinearDiscont2DFECollection() -> LinearDiscont2DFECollection"},
	 { "LinearDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearDiscont2DFECollection_FiniteElementForGeometry(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearDiscont2DFECollection_DofForGeometry(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "LinearDiscont2DFECollection_DofOrderForOrientation(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearDiscont2DFECollection_Name", _wrap_LinearDiscont2DFECollection_Name, METH_O, "LinearDiscont2DFECollection_Name(LinearDiscont2DFECollection self) -> char const *"},
	 { "LinearDiscont2DFECollection_GetContType", _wrap_LinearDiscont2DFECollection_GetContType, METH_O, "LinearDiscont2DFECollection_GetContType(LinearDiscont2DFECollection self) -> int"},
	 { "delete_LinearDiscont2DFECollection", _wrap_delete_LinearDiscont2DFECollection, METH_O, "delete_LinearDiscont2DFECollection(LinearDiscont2DFECollection self)"},
	 { "LinearDiscont2DFECollection_swigregister", LinearDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "LinearDiscont2DFECollection_swiginit", LinearDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_GaussLinearDiscont2DFECollection", _wrap_new_GaussLinearDiscont2DFECollection, METH_NOARGS, "new_GaussLinearDiscont2DFECollection() -> GaussLinearDiscont2DFECollection"},
	 { "GaussLinearDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussLinearDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "GaussLinearDiscont2DFECollection_FiniteElementForGeometry(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "GaussLinearDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussLinearDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "GaussLinearDiscont2DFECollection_DofForGeometry(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "GaussLinearDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_GaussLinearDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "GaussLinearDiscont2DFECollection_DofOrderForOrientation(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "GaussLinearDiscont2DFECollection_Name", _wrap_GaussLinearDiscont2DFECollection_Name, METH_O, "GaussLinearDiscont2DFECollection_Name(GaussLinearDiscont2DFECollection self) -> char const *"},
	 { "GaussLinearDiscont2DFECollection_GetContType", _wrap_GaussLinearDiscont2DFECollection_GetContType, METH_O, "GaussLinearDiscont2DFECollection_GetContType(GaussLinearDiscont2DFECollection self) -> int"},
	 { "delete_GaussLinearDiscont2DFECollection", _wrap_delete_GaussLinearDiscont2DFECollection, METH_O, "delete_GaussLinearDiscont2DFECollection(GaussLinearDiscont2DFECollection self)"},
	 { "GaussLinearDiscont2DFECollection_swigregister", GaussLinearDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "GaussLinearDiscont2DFECollection_swiginit", GaussLinearDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_P1OnQuadFECollection", _wrap_new_P1OnQuadFECollection, METH_NOARGS, "new_P1OnQuadFECollection() -> P1OnQuadFECollection"},
	 { "P1OnQuadFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_P1OnQuadFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "P1OnQuadFECollection_FiniteElementForGeometry(P1OnQuadFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "P1OnQuadFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_P1OnQuadFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "P1OnQuadFECollection_DofForGeometry(P1OnQuadFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "P1OnQuadFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_P1OnQuadFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "P1OnQuadFECollection_DofOrderForOrientation(P1OnQuadFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "P1OnQuadFECollection_Name", _wrap_P1OnQuadFECollection_Name, METH_O, "P1OnQuadFECollection_Name(P1OnQuadFECollection self) -> char const *"},
	 { "P1OnQuadFECollection_GetContType", _wrap_P1OnQuadFECollection_GetContType, METH_O, "P1OnQuadFECollection_GetContType(P1OnQuadFECollection self) -> int"},
	 { "delete_P1OnQuadFECollection", _wrap_delete_P1OnQuadFECollection, METH_O, "delete_P1OnQuadFECollection(P1OnQuadFECollection self)"},
	 { "P1OnQuadFECollection_swigregister", P1OnQuadFECollection_swigregister, METH_O, NULL},
	 { "P1OnQuadFECollection_swiginit", P1OnQuadFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticDiscont2DFECollection", _wrap_new_QuadraticDiscont2DFECollection, METH_NOARGS, "new_QuadraticDiscont2DFECollection() -> QuadraticDiscont2DFECollection"},
	 { "QuadraticDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticDiscont2DFECollection_FiniteElementForGeometry(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticDiscont2DFECollection_DofForGeometry(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "QuadraticDiscont2DFECollection_DofOrderForOrientation(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticDiscont2DFECollection_Name", _wrap_QuadraticDiscont2DFECollection_Name, METH_O, "QuadraticDiscont2DFECollection_Name(QuadraticDiscont2DFECollection self) -> char const *"},
	 { "QuadraticDiscont2DFECollection_GetContType", _wrap_QuadraticDiscont2DFECollection_GetContType, METH_O, "QuadraticDiscont2DFECollection_GetContType(QuadraticDiscont2DFECollection self) -> int"},
	 { "delete_QuadraticDiscont2DFECollection", _wrap_delete_QuadraticDiscont2DFECollection, METH_O, "delete_QuadraticDiscont2DFECollection(QuadraticDiscont2DFECollection self)"},
	 { "QuadraticDiscont2DFECollection_swigregister", QuadraticDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "QuadraticDiscont2DFECollection_swiginit", QuadraticDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticPosDiscont2DFECollection", _wrap_new_QuadraticPosDiscont2DFECollection, METH_NOARGS, "new_QuadraticPosDiscont2DFECollection() -> QuadraticPosDiscont2DFECollection"},
	 { "QuadraticPosDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticPosDiscont2DFECollection_FiniteElementForGeometry(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticPosDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticPosDiscont2DFECollection_DofForGeometry(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticPosDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticPosDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "QuadraticPosDiscont2DFECollection_DofOrderForOrientation(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticPosDiscont2DFECollection_Name", _wrap_QuadraticPosDiscont2DFECollection_Name, METH_O, "QuadraticPosDiscont2DFECollection_Name(QuadraticPosDiscont2DFECollection self) -> char const *"},
	 { "QuadraticPosDiscont2DFECollection_GetContType", _wrap_QuadraticPosDiscont2DFECollection_GetContType, METH_O, "QuadraticPosDiscont2DFECollection_GetContType(QuadraticPosDiscont2DFECollection self) -> int"},
	 { "delete_QuadraticPosDiscont2DFECollection", _wrap_delete_QuadraticPosDiscont2DFECollection, METH_O, "delete_QuadraticPosDiscont2DFECollection(QuadraticPosDiscont2DFECollection self)"},
	 { "QuadraticPosDiscont2DFECollection_swigregister", QuadraticPosDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "QuadraticPosDiscont2DFECollection_swiginit", QuadraticPosDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_GaussQuadraticDiscont2DFECollection", _wrap_new_GaussQuadraticDiscont2DFECollection, METH_NOARGS, "new_GaussQuadraticDiscont2DFECollection() -> GaussQuadraticDiscont2DFECollection"},
	 { "GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "GaussQuadraticDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussQuadraticDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "GaussQuadraticDiscont2DFECollection_DofForGeometry(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "GaussQuadraticDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_GaussQuadraticDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "GaussQuadraticDiscont2DFECollection_DofOrderForOrientation(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "GaussQuadraticDiscont2DFECollection_Name", _wrap_GaussQuadraticDiscont2DFECollection_Name, METH_O, "GaussQuadraticDiscont2DFECollection_Name(GaussQuadraticDiscont2DFECollection self) -> char const *"},
	 { "GaussQuadraticDiscont2DFECollection_GetContType", _wrap_GaussQuadraticDiscont2DFECollection_GetContType, METH_O, "GaussQuadraticDiscont2DFECollection_GetContType(GaussQuadraticDiscont2DFECollection self) -> int"},
	 { "delete_GaussQuadraticDiscont2DFECollection", _wrap_delete_GaussQuadraticDiscont2DFECollection, METH_O, "delete_GaussQuadraticDiscont2DFECollection(GaussQuadraticDiscont2DFECollection self)"},
	 { "GaussQuadraticDiscont2DFECollection_swigregister", GaussQuadraticDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "GaussQuadraticDiscont2DFECollection_swiginit", GaussQuadraticDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_CubicDiscont2DFECollection", _wrap_new_CubicDiscont2DFECollection, METH_NOARGS, "new_CubicDiscont2DFECollection() -> CubicDiscont2DFECollection"},
	 { "CubicDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "CubicDiscont2DFECollection_FiniteElementForGeometry(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "CubicDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "CubicDiscont2DFECollection_DofForGeometry(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "CubicDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_CubicDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "CubicDiscont2DFECollection_DofOrderForOrientation(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "CubicDiscont2DFECollection_Name", _wrap_CubicDiscont2DFECollection_Name, METH_O, "CubicDiscont2DFECollection_Name(CubicDiscont2DFECollection self) -> char const *"},
	 { "CubicDiscont2DFECollection_GetContType", _wrap_CubicDiscont2DFECollection_GetContType, METH_O, "CubicDiscont2DFECollection_GetContType(CubicDiscont2DFECollection self) -> int"},
	 { "delete_CubicDiscont2DFECollection", _wrap_delete_CubicDiscont2DFECollection, METH_O, "delete_CubicDiscont2DFECollection(CubicDiscont2DFECollection self)"},
	 { "CubicDiscont2DFECollection_swigregister", CubicDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "CubicDiscont2DFECollection_swiginit", CubicDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_Const3DFECollection", _wrap_new_Const3DFECollection, METH_NOARGS, "new_Const3DFECollection() -> Const3DFECollection"},
	 { "Const3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_Const3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "Const3DFECollection_FiniteElementForGeometry(Const3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "Const3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_Const3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "Const3DFECollection_DofForGeometry(Const3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "Const3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_Const3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "Const3DFECollection_DofOrderForOrientation(Const3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "Const3DFECollection_Name", _wrap_Const3DFECollection_Name, METH_O, "Const3DFECollection_Name(Const3DFECollection self) -> char const *"},
	 { "Const3DFECollection_GetContType", _wrap_Const3DFECollection_GetContType, METH_O, "Const3DFECollection_GetContType(Const3DFECollection self) -> int"},
	 { "delete_Const3DFECollection", _wrap_delete_Const3DFECollection, METH_O, "delete_Const3DFECollection(Const3DFECollection self)"},
	 { "Const3DFECollection_swigregister", Const3DFECollection_swigregister, METH_O, NULL},
	 { "Const3DFECollection_swiginit", Const3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearDiscont3DFECollection", _wrap_new_LinearDiscont3DFECollection, METH_NOARGS, "new_LinearDiscont3DFECollection() -> LinearDiscont3DFECollection"},
	 { "LinearDiscont3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearDiscont3DFECollection_FiniteElementForGeometry(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearDiscont3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "LinearDiscont3DFECollection_DofForGeometry(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearDiscont3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearDiscont3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "LinearDiscont3DFECollection_DofOrderForOrientation(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearDiscont3DFECollection_Name", _wrap_LinearDiscont3DFECollection_Name, METH_O, "LinearDiscont3DFECollection_Name(LinearDiscont3DFECollection self) -> char const *"},
	 { "LinearDiscont3DFECollection_GetContType", _wrap_LinearDiscont3DFECollection_GetContType, METH_O, "LinearDiscont3DFECollection_GetContType(LinearDiscont3DFECollection self) -> int"},
	 { "delete_LinearDiscont3DFECollection", _wrap_delete_LinearDiscont3DFECollection, METH_O, "delete_LinearDiscont3DFECollection(LinearDiscont3DFECollection self)"},
	 { "LinearDiscont3DFECollection_swigregister", LinearDiscont3DFECollection_swigregister, METH_O, NULL},
	 { "LinearDiscont3DFECollection_swiginit", LinearDiscont3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticDiscont3DFECollection", _wrap_new_QuadraticDiscont3DFECollection, METH_NOARGS, "new_QuadraticDiscont3DFECollection() -> QuadraticDiscont3DFECollection"},
	 { "QuadraticDiscont3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticDiscont3DFECollection_FiniteElementForGeometry(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticDiscont3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "QuadraticDiscont3DFECollection_DofForGeometry(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticDiscont3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "QuadraticDiscont3DFECollection_DofOrderForOrientation(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticDiscont3DFECollection_Name", _wrap_QuadraticDiscont3DFECollection_Name, METH_O, "QuadraticDiscont3DFECollection_Name(QuadraticDiscont3DFECollection self) -> char const *"},
	 { "QuadraticDiscont3DFECollection_GetContType", _wrap_QuadraticDiscont3DFECollection_GetContType, METH_O, "QuadraticDiscont3DFECollection_GetContType(QuadraticDiscont3DFECollection self) -> int"},
	 { "delete_QuadraticDiscont3DFECollection", _wrap_delete_QuadraticDiscont3DFECollection, METH_O, "delete_QuadraticDiscont3DFECollection(QuadraticDiscont3DFECollection self)"},
	 { "QuadraticDiscont3DFECollection_swigregister", QuadraticDiscont3DFECollection_swigregister, METH_O, NULL},
	 { "QuadraticDiscont3DFECollection_swiginit", QuadraticDiscont3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RefinedLinearFECollection", _wrap_new_RefinedLinearFECollection, METH_NOARGS, "new_RefinedLinearFECollection() -> RefinedLinearFECollection"},
	 { "RefinedLinearFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RefinedLinearFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RefinedLinearFECollection_FiniteElementForGeometry(RefinedLinearFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RefinedLinearFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RefinedLinearFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RefinedLinearFECollection_DofForGeometry(RefinedLinearFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RefinedLinearFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RefinedLinearFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RefinedLinearFECollection_DofOrderForOrientation(RefinedLinearFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RefinedLinearFECollection_Name", _wrap_RefinedLinearFECollection_Name, METH_O, "RefinedLinearFECollection_Name(RefinedLinearFECollection self) -> char const *"},
	 { "RefinedLinearFECollection_GetContType", _wrap_RefinedLinearFECollection_GetContType, METH_O, "RefinedLinearFECollection_GetContType(RefinedLinearFECollection self) -> int"},
	 { "delete_RefinedLinearFECollection", _wrap_delete_RefinedLinearFECollection, METH_O, "delete_RefinedLinearFECollection(RefinedLinearFECollection self)"},
	 { "RefinedLinearFECollection_swigregister", RefinedLinearFECollection_swigregister, METH_O, NULL},
	 { "RefinedLinearFECollection_swiginit", RefinedLinearFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND1_3DFECollection", _wrap_new_ND1_3DFECollection, METH_NOARGS, "new_ND1_3DFECollection() -> ND1_3DFECollection"},
	 { "ND1_3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND1_3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "ND1_3DFECollection_FiniteElementForGeometry(ND1_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND1_3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND1_3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "ND1_3DFECollection_DofForGeometry(ND1_3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND1_3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND1_3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "ND1_3DFECollection_DofOrderForOrientation(ND1_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND1_3DFECollection_Name", _wrap_ND1_3DFECollection_Name, METH_O, "ND1_3DFECollection_Name(ND1_3DFECollection self) -> char const *"},
	 { "ND1_3DFECollection_GetContType", _wrap_ND1_3DFECollection_GetContType, METH_O, "ND1_3DFECollection_GetContType(ND1_3DFECollection self) -> int"},
	 { "delete_ND1_3DFECollection", _wrap_delete_ND1_3DFECollection, METH_O, "delete_ND1_3DFECollection(ND1_3DFECollection self)"},
	 { "ND1_3DFECollection_swigregister", ND1_3DFECollection_swigregister, METH_O, NULL},
	 { "ND1_3DFECollection_swiginit", ND1_3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT0_3DFECollection", _wrap_new_RT0_3DFECollection, METH_NOARGS, "new_RT0_3DFECollection() -> RT0_3DFECollection"},
	 { "RT0_3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT0_3DFECollection_FiniteElementForGeometry(RT0_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT0_3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT0_3DFECollection_DofForGeometry(RT0_3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT0_3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT0_3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT0_3DFECollection_DofOrderForOrientation(RT0_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT0_3DFECollection_Name", _wrap_RT0_3DFECollection_Name, METH_O, "RT0_3DFECollection_Name(RT0_3DFECollection self) -> char const *"},
	 { "RT0_3DFECollection_GetContType", _wrap_RT0_3DFECollection_GetContType, METH_O, "RT0_3DFECollection_GetContType(RT0_3DFECollection self) -> int"},
	 { "delete_RT0_3DFECollection", _wrap_delete_RT0_3DFECollection, METH_O, "delete_RT0_3DFECollection(RT0_3DFECollection self)"},
	 { "RT0_3DFECollection_swigregister", RT0_3DFECollection_swigregister, METH_O, NULL},
	 { "RT0_3DFECollection_swiginit", RT0_3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT1_3DFECollection", _wrap_new_RT1_3DFECollection, METH_NOARGS, "new_RT1_3DFECollection() -> RT1_3DFECollection"},
	 { "RT1_3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "RT1_3DFECollection_FiniteElementForGeometry(RT1_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT1_3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "RT1_3DFECollection_DofForGeometry(RT1_3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT1_3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT1_3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "RT1_3DFECollection_DofOrderForOrientation(RT1_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT1_3DFECollection_Name", _wrap_RT1_3DFECollection_Name, METH_O, "RT1_3DFECollection_Name(RT1_3DFECollection self) -> char const *"},
	 { "RT1_3DFECollection_GetContType", _wrap_RT1_3DFECollection_GetContType, METH_O, "RT1_3DFECollection_GetContType(RT1_3DFECollection self) -> int"},
	 { "delete_RT1_3DFECollection", _wrap_delete_RT1_3DFECollection, METH_O, "delete_RT1_3DFECollection(RT1_3DFECollection self)"},
	 { "RT1_3DFECollection_swigregister", RT1_3DFECollection_swigregister, METH_O, NULL},
	 { "RT1_3DFECollection_swiginit", RT1_3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_Local_FECollection", (PyCFunction)(void(*)(void))_wrap_new_Local_FECollection, METH_VARARGS|METH_KEYWORDS, "new_Local_FECollection(char const * fe_name) -> Local_FECollection"},
	 { "Local_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_Local_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "Local_FECollection_FiniteElementForGeometry(Local_FECollection self, mfem::Geometry::Type GeomType_) -> FiniteElement"},
	 { "Local_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_Local_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "Local_FECollection_DofForGeometry(Local_FECollection self, mfem::Geometry::Type GeomType_) -> int"},
	 { "Local_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_Local_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "Local_FECollection_DofOrderForOrientation(Local_FECollection self, mfem::Geometry::Type GeomType_, int Or) -> int const *"},
	 { "Local_FECollection_Name", _wrap_Local_FECollection_Name, METH_O, "Local_FECollection_Name(Local_FECollection self) -> char const *"},
	 { "delete_Local_FECollection", _wrap_delete_Local_FECollection, METH_O, "delete_Local_FECollection(Local_FECollection self)"},
	 { "Local_FECollection_GetContType", _wrap_Local_FECollection_GetContType, METH_O, "Local_FECollection_GetContType(Local_FECollection self) -> int"},
	 { "Local_FECollection_swigregister", Local_FECollection_swigregister, METH_O, NULL},
	 { "Local_FECollection_swiginit", Local_FECollection_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "SWIG_PyStaticMethod_New", SWIG_PyStaticMethod_New, METH_O, NULL},
	 { "FiniteElementCollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "FiniteElementCollection_FiniteElementForDim", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_FiniteElementForDim, METH_VARARGS|METH_KEYWORDS, "FiniteElementForDim(FiniteElementCollection self, int dim) -> FiniteElement"},
	 { "FiniteElementCollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "FiniteElementCollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(FiniteElementCollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "FiniteElementCollection_Name", _wrap_FiniteElementCollection_Name, METH_O, "Name(FiniteElementCollection self) -> char const *"},
	 { "FiniteElementCollection_GetContType", _wrap_FiniteElementCollection_GetContType, METH_O, "GetContType(FiniteElementCollection self) -> int"},
	 { "FiniteElementCollection_GetRangeType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetRangeType, METH_VARARGS|METH_KEYWORDS, "GetRangeType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetDerivRangeType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDerivRangeType, METH_VARARGS|METH_KEYWORDS, "GetDerivRangeType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetMapType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetMapType, METH_VARARGS|METH_KEYWORDS, "GetMapType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetDerivType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDerivType, METH_VARARGS|METH_KEYWORDS, "GetDerivType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_GetDerivMapType", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDerivMapType, METH_VARARGS|METH_KEYWORDS, "GetDerivMapType(FiniteElementCollection self, int dim) -> int"},
	 { "FiniteElementCollection_HasFaceDofs", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_HasFaceDofs, METH_VARARGS|METH_KEYWORDS, "HasFaceDofs(FiniteElementCollection self, mfem::Geometry::Type geom, int p) -> int"},
	 { "FiniteElementCollection_TraceFiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_TraceFiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "TraceFiniteElementForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "FiniteElementCollection_GetTraceCollection", _wrap_FiniteElementCollection_GetTraceCollection, METH_O, "GetTraceCollection(FiniteElementCollection self) -> FiniteElementCollection"},
	 { "delete_FiniteElementCollection", _wrap_delete_FiniteElementCollection, METH_O, "delete_FiniteElementCollection(FiniteElementCollection self)"},
	 { "FiniteElementCollection_New", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_New, METH_VARARGS|METH_KEYWORDS, "New(char const * name) -> FiniteElementCollection"},
	 { "FiniteElementCollection_SubDofOrder", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_SubDofOrder, METH_VARARGS|METH_KEYWORDS, "SubDofOrder(FiniteElementCollection self, mfem::Geometry::Type Geom, int SDim, int Info, intArray dofs)"},
	 { "FiniteElementCollection_GetFE", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetFE, METH_VARARGS|METH_KEYWORDS, "GetFE(FiniteElementCollection self, mfem::Geometry::Type geom, int p) -> FiniteElement"},
	 { "FiniteElementCollection_GetNumDof", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetNumDof, METH_VARARGS|METH_KEYWORDS, "GetNumDof(FiniteElementCollection self, mfem::Geometry::Type geom, int p) -> int"},
	 { "FiniteElementCollection_GetDofOrdering", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_GetDofOrdering, METH_VARARGS|METH_KEYWORDS, "GetDofOrdering(FiniteElementCollection self, mfem::Geometry::Type geom, int p, int ori) -> int const *"},
	 { "FiniteElementCollection_GetOrder", _wrap_FiniteElementCollection_GetOrder, METH_O, "GetOrder(FiniteElementCollection self) -> int"},
	 { "FiniteElementCollection_Clone", (PyCFunction)(void(*)(void))_wrap_FiniteElementCollection_Clone, METH_VARARGS|METH_KEYWORDS, "Clone(FiniteElementCollection self, int p) -> FiniteElementCollection"},
	 { "FiniteElementCollection_swigregister", FiniteElementCollection_swigregister, METH_O, NULL},
	 { "new_H1_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1_FECollection(int const p, int const dim=3, int const btype=GaussLobatto) -> H1_FECollection"},
	 { "H1_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(H1_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "H1_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(H1_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "H1_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(H1_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "H1_FECollection_Name", _wrap_H1_FECollection_Name, METH_O, "Name(H1_FECollection self) -> char const *"},
	 { "H1_FECollection_GetContType", _wrap_H1_FECollection_GetContType, METH_O, "GetContType(H1_FECollection self) -> int"},
	 { "H1_FECollection_GetBasisType", _wrap_H1_FECollection_GetBasisType, METH_O, "GetBasisType(H1_FECollection self) -> int"},
	 { "H1_FECollection_GetTraceCollection", _wrap_H1_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(H1_FECollection self) -> FiniteElementCollection"},
	 { "H1_FECollection_GetDofMap", _wrap_H1_FECollection_GetDofMap, METH_VARARGS, "\n"
		"GetDofMap(H1_FECollection self, mfem::Geometry::Type GeomType) -> int const\n"
		"GetDofMap(H1_FECollection self, mfem::Geometry::Type GeomType, int p) -> int const *\n"
		""},
	 { "H1_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_H1_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "Clone(H1_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_H1_FECollection", _wrap_delete_H1_FECollection, METH_O, "delete_H1_FECollection(H1_FECollection self)"},
	 { "H1_FECollection_swigregister", H1_FECollection_swigregister, METH_O, NULL},
	 { "H1_FECollection_swiginit", H1_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_H1Pos_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1Pos_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1Pos_FECollection(int const p, int const dim=3) -> H1Pos_FECollection"},
	 { "delete_H1Pos_FECollection", _wrap_delete_H1Pos_FECollection, METH_O, "delete_H1Pos_FECollection(H1Pos_FECollection self)"},
	 { "H1Pos_FECollection_swigregister", H1Pos_FECollection_swigregister, METH_O, NULL},
	 { "H1Pos_FECollection_swiginit", H1Pos_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_H1Ser_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1Ser_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1Ser_FECollection(int const p, int const dim=2) -> H1Ser_FECollection"},
	 { "delete_H1Ser_FECollection", _wrap_delete_H1Ser_FECollection, METH_O, "delete_H1Ser_FECollection(H1Ser_FECollection self)"},
	 { "H1Ser_FECollection_swigregister", H1Ser_FECollection_swigregister, METH_O, NULL},
	 { "H1Ser_FECollection_swiginit", H1Ser_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_H1_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_H1_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_H1_Trace_FECollection(int const p, int const dim, int const btype=GaussLobatto) -> H1_Trace_FECollection"},
	 { "delete_H1_Trace_FECollection", _wrap_delete_H1_Trace_FECollection, METH_O, "delete_H1_Trace_FECollection(H1_Trace_FECollection self)"},
	 { "H1_Trace_FECollection_swigregister", H1_Trace_FECollection_swigregister, METH_O, NULL},
	 { "H1_Trace_FECollection_swiginit", H1_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_L2_FECollection", (PyCFunction)(void(*)(void))_wrap_new_L2_FECollection, METH_VARARGS|METH_KEYWORDS, "new_L2_FECollection(int const p, int const dim, int const btype=GaussLegendre, int const map_type=VALUE) -> L2_FECollection"},
	 { "L2_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "L2_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "L2_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(L2_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "L2_FECollection_Name", _wrap_L2_FECollection_Name, METH_O, "Name(L2_FECollection self) -> char const *"},
	 { "L2_FECollection_GetContType", _wrap_L2_FECollection_GetContType, METH_O, "GetContType(L2_FECollection self) -> int"},
	 { "L2_FECollection_TraceFiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_TraceFiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "TraceFiniteElementForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "L2_FECollection_GetBasisType", _wrap_L2_FECollection_GetBasisType, METH_O, "GetBasisType(L2_FECollection self) -> int"},
	 { "L2_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_L2_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "Clone(L2_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_L2_FECollection", _wrap_delete_L2_FECollection, METH_O, "delete_L2_FECollection(L2_FECollection self)"},
	 { "L2_FECollection_swigregister", L2_FECollection_swigregister, METH_O, NULL},
	 { "L2_FECollection_swiginit", L2_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_FECollection", _wrap_new_RT_FECollection, METH_VARARGS, NULL},
	 { "RT_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT_FECollection_Name", _wrap_RT_FECollection_Name, METH_O, "Name(RT_FECollection self) -> char const *"},
	 { "RT_FECollection_GetContType", _wrap_RT_FECollection_GetContType, METH_O, "GetContType(RT_FECollection self) -> int"},
	 { "RT_FECollection_GetTraceCollection", _wrap_RT_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(RT_FECollection self) -> FiniteElementCollection"},
	 { "RT_FECollection_GetClosedBasisType", _wrap_RT_FECollection_GetClosedBasisType, METH_O, "GetClosedBasisType(RT_FECollection self) -> int"},
	 { "RT_FECollection_GetOpenBasisType", _wrap_RT_FECollection_GetOpenBasisType, METH_O, "GetOpenBasisType(RT_FECollection self) -> int"},
	 { "RT_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_RT_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "Clone(RT_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_RT_FECollection", _wrap_delete_RT_FECollection, METH_O, "delete_RT_FECollection(RT_FECollection self)"},
	 { "RT_FECollection_swigregister", RT_FECollection_swigregister, METH_O, NULL},
	 { "RT_FECollection_swiginit", RT_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_RT_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_RT_Trace_FECollection(int const p, int const dim, int const map_type=INTEGRAL, int const ob_type=GaussLegendre) -> RT_Trace_FECollection"},
	 { "delete_RT_Trace_FECollection", _wrap_delete_RT_Trace_FECollection, METH_O, "delete_RT_Trace_FECollection(RT_Trace_FECollection self)"},
	 { "RT_Trace_FECollection_swigregister", RT_Trace_FECollection_swigregister, METH_O, NULL},
	 { "RT_Trace_FECollection_swiginit", RT_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_DG_Interface_FECollection", (PyCFunction)(void(*)(void))_wrap_new_DG_Interface_FECollection, METH_VARARGS|METH_KEYWORDS, "new_DG_Interface_FECollection(int const p, int const dim, int const map_type=VALUE, int const ob_type=GaussLegendre) -> DG_Interface_FECollection"},
	 { "delete_DG_Interface_FECollection", _wrap_delete_DG_Interface_FECollection, METH_O, "delete_DG_Interface_FECollection(DG_Interface_FECollection self)"},
	 { "DG_Interface_FECollection_swigregister", DG_Interface_FECollection_swigregister, METH_O, NULL},
	 { "DG_Interface_FECollection_swiginit", DG_Interface_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_FECollection"},
	 { "ND_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(ND_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(ND_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(ND_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND_FECollection_Name", _wrap_ND_FECollection_Name, METH_O, "Name(ND_FECollection self) -> char const *"},
	 { "ND_FECollection_GetContType", _wrap_ND_FECollection_GetContType, METH_O, "GetContType(ND_FECollection self) -> int"},
	 { "ND_FECollection_GetTraceCollection", _wrap_ND_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(ND_FECollection self) -> FiniteElementCollection"},
	 { "ND_FECollection_GetClosedBasisType", _wrap_ND_FECollection_GetClosedBasisType, METH_O, "GetClosedBasisType(ND_FECollection self) -> int"},
	 { "ND_FECollection_GetOpenBasisType", _wrap_ND_FECollection_GetOpenBasisType, METH_O, "GetOpenBasisType(ND_FECollection self) -> int"},
	 { "ND_FECollection_Clone", (PyCFunction)(void(*)(void))_wrap_ND_FECollection_Clone, METH_VARARGS|METH_KEYWORDS, "Clone(ND_FECollection self, int p) -> FiniteElementCollection"},
	 { "delete_ND_FECollection", _wrap_delete_ND_FECollection, METH_O, "delete_ND_FECollection(ND_FECollection self)"},
	 { "ND_FECollection_swigregister", ND_FECollection_swigregister, METH_O, NULL},
	 { "ND_FECollection_swiginit", ND_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_Trace_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_Trace_FECollection"},
	 { "delete_ND_Trace_FECollection", _wrap_delete_ND_Trace_FECollection, METH_O, "delete_ND_Trace_FECollection(ND_Trace_FECollection self)"},
	 { "ND_Trace_FECollection_swigregister", ND_Trace_FECollection_swigregister, METH_O, NULL},
	 { "ND_Trace_FECollection_swiginit", ND_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_R1D_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_R1D_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_R1D_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_R1D_FECollection"},
	 { "ND_R1D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R1D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(ND_R1D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND_R1D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R1D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(ND_R1D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND_R1D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND_R1D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(ND_R1D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND_R1D_FECollection_Name", _wrap_ND_R1D_FECollection_Name, METH_O, "Name(ND_R1D_FECollection self) -> char const *"},
	 { "ND_R1D_FECollection_GetContType", _wrap_ND_R1D_FECollection_GetContType, METH_O, "GetContType(ND_R1D_FECollection self) -> int"},
	 { "ND_R1D_FECollection_GetTraceCollection", _wrap_ND_R1D_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(ND_R1D_FECollection self) -> FiniteElementCollection"},
	 { "delete_ND_R1D_FECollection", _wrap_delete_ND_R1D_FECollection, METH_O, "delete_ND_R1D_FECollection(ND_R1D_FECollection self)"},
	 { "ND_R1D_FECollection_swigregister", ND_R1D_FECollection_swigregister, METH_O, NULL},
	 { "ND_R1D_FECollection_swiginit", ND_R1D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_R1D_FECollection", (PyCFunction)(void(*)(void))_wrap_new_RT_R1D_FECollection, METH_VARARGS|METH_KEYWORDS, "new_RT_R1D_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> RT_R1D_FECollection"},
	 { "RT_R1D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R1D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT_R1D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT_R1D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R1D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT_R1D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT_R1D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT_R1D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT_R1D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT_R1D_FECollection_Name", _wrap_RT_R1D_FECollection_Name, METH_O, "Name(RT_R1D_FECollection self) -> char const *"},
	 { "RT_R1D_FECollection_GetContType", _wrap_RT_R1D_FECollection_GetContType, METH_O, "GetContType(RT_R1D_FECollection self) -> int"},
	 { "RT_R1D_FECollection_GetTraceCollection", _wrap_RT_R1D_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(RT_R1D_FECollection self) -> FiniteElementCollection"},
	 { "delete_RT_R1D_FECollection", _wrap_delete_RT_R1D_FECollection, METH_O, "delete_RT_R1D_FECollection(RT_R1D_FECollection self)"},
	 { "RT_R1D_FECollection_swigregister", RT_R1D_FECollection_swigregister, METH_O, NULL},
	 { "RT_R1D_FECollection_swiginit", RT_R1D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_R2D_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_R2D_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_R2D_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_R2D_FECollection"},
	 { "ND_R2D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R2D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(ND_R2D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND_R2D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND_R2D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(ND_R2D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND_R2D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND_R2D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(ND_R2D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND_R2D_FECollection_Name", _wrap_ND_R2D_FECollection_Name, METH_O, "Name(ND_R2D_FECollection self) -> char const *"},
	 { "ND_R2D_FECollection_GetContType", _wrap_ND_R2D_FECollection_GetContType, METH_O, "GetContType(ND_R2D_FECollection self) -> int"},
	 { "ND_R2D_FECollection_GetTraceCollection", _wrap_ND_R2D_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(ND_R2D_FECollection self) -> FiniteElementCollection"},
	 { "delete_ND_R2D_FECollection", _wrap_delete_ND_R2D_FECollection, METH_O, "delete_ND_R2D_FECollection(ND_R2D_FECollection self)"},
	 { "ND_R2D_FECollection_swigregister", ND_R2D_FECollection_swigregister, METH_O, NULL},
	 { "ND_R2D_FECollection_swiginit", ND_R2D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND_R2D_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_ND_R2D_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_ND_R2D_Trace_FECollection(int const p, int const dim, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_R2D_Trace_FECollection"},
	 { "delete_ND_R2D_Trace_FECollection", _wrap_delete_ND_R2D_Trace_FECollection, METH_O, "delete_ND_R2D_Trace_FECollection(ND_R2D_Trace_FECollection self)"},
	 { "ND_R2D_Trace_FECollection_swigregister", ND_R2D_Trace_FECollection_swigregister, METH_O, NULL},
	 { "ND_R2D_Trace_FECollection_swiginit", ND_R2D_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_R2D_FECollection", _wrap_new_RT_R2D_FECollection, METH_VARARGS, NULL},
	 { "RT_R2D_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R2D_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT_R2D_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT_R2D_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT_R2D_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT_R2D_FECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT_R2D_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT_R2D_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT_R2D_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT_R2D_FECollection_Name", _wrap_RT_R2D_FECollection_Name, METH_O, "Name(RT_R2D_FECollection self) -> char const *"},
	 { "RT_R2D_FECollection_GetContType", _wrap_RT_R2D_FECollection_GetContType, METH_O, "GetContType(RT_R2D_FECollection self) -> int"},
	 { "RT_R2D_FECollection_GetTraceCollection", _wrap_RT_R2D_FECollection_GetTraceCollection, METH_O, "GetTraceCollection(RT_R2D_FECollection self) -> FiniteElementCollection"},
	 { "delete_RT_R2D_FECollection", _wrap_delete_RT_R2D_FECollection, METH_O, "delete_RT_R2D_FECollection(RT_R2D_FECollection self)"},
	 { "RT_R2D_FECollection_swigregister", RT_R2D_FECollection_swigregister, METH_O, NULL},
	 { "RT_R2D_FECollection_swiginit", RT_R2D_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT_R2D_Trace_FECollection", (PyCFunction)(void(*)(void))_wrap_new_RT_R2D_Trace_FECollection, METH_VARARGS|METH_KEYWORDS, "new_RT_R2D_Trace_FECollection(int const p, int const dim, int const map_type=INTEGRAL, int const ob_type=GaussLegendre) -> RT_R2D_Trace_FECollection"},
	 { "delete_RT_R2D_Trace_FECollection", _wrap_delete_RT_R2D_Trace_FECollection, METH_O, "delete_RT_R2D_Trace_FECollection(RT_R2D_Trace_FECollection self)"},
	 { "RT_R2D_Trace_FECollection_swigregister", RT_R2D_Trace_FECollection_swigregister, METH_O, NULL},
	 { "RT_R2D_Trace_FECollection_swiginit", RT_R2D_Trace_FECollection_swiginit, METH_VARARGS, NULL},
	 { "new_NURBSFECollection", (PyCFunction)(void(*)(void))_wrap_new_NURBSFECollection, METH_VARARGS|METH_KEYWORDS, "new_NURBSFECollection(int Order=VariableOrder) -> NURBSFECollection"},
	 { "NURBSFECollection_Reset", _wrap_NURBSFECollection_Reset, METH_O, "Reset(NURBSFECollection self)"},
	 { "NURBSFECollection_GetOrder", _wrap_NURBSFECollection_GetOrder, METH_O, "GetOrder(NURBSFECollection self) -> int"},
	 { "NURBSFECollection_SetOrder", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_SetOrder, METH_VARARGS|METH_KEYWORDS, "SetOrder(NURBSFECollection self, int Order)"},
	 { "NURBSFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(NURBSFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "NURBSFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(NURBSFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "NURBSFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_NURBSFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(NURBSFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "NURBSFECollection_Name", _wrap_NURBSFECollection_Name, METH_O, "Name(NURBSFECollection self) -> char const *"},
	 { "NURBSFECollection_GetContType", _wrap_NURBSFECollection_GetContType, METH_O, "GetContType(NURBSFECollection self) -> int"},
	 { "NURBSFECollection_GetTraceCollection", _wrap_NURBSFECollection_GetTraceCollection, METH_O, "GetTraceCollection(NURBSFECollection self) -> FiniteElementCollection"},
	 { "delete_NURBSFECollection", _wrap_delete_NURBSFECollection, METH_O, "delete_NURBSFECollection(NURBSFECollection self)"},
	 { "NURBSFECollection_swigregister", NURBSFECollection_swigregister, METH_O, NULL},
	 { "NURBSFECollection_swiginit", NURBSFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearFECollection", _wrap_new_LinearFECollection, METH_NOARGS, "new_LinearFECollection() -> LinearFECollection"},
	 { "LinearFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(LinearFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(LinearFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(LinearFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearFECollection_Name", _wrap_LinearFECollection_Name, METH_O, "Name(LinearFECollection self) -> char const *"},
	 { "LinearFECollection_GetContType", _wrap_LinearFECollection_GetContType, METH_O, "GetContType(LinearFECollection self) -> int"},
	 { "delete_LinearFECollection", _wrap_delete_LinearFECollection, METH_O, "delete_LinearFECollection(LinearFECollection self)"},
	 { "LinearFECollection_swigregister", LinearFECollection_swigregister, METH_O, NULL},
	 { "LinearFECollection_swiginit", LinearFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticFECollection", _wrap_new_QuadraticFECollection, METH_NOARGS, "new_QuadraticFECollection() -> QuadraticFECollection"},
	 { "QuadraticFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(QuadraticFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(QuadraticFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(QuadraticFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticFECollection_Name", _wrap_QuadraticFECollection_Name, METH_O, "Name(QuadraticFECollection self) -> char const *"},
	 { "QuadraticFECollection_GetContType", _wrap_QuadraticFECollection_GetContType, METH_O, "GetContType(QuadraticFECollection self) -> int"},
	 { "delete_QuadraticFECollection", _wrap_delete_QuadraticFECollection, METH_O, "delete_QuadraticFECollection(QuadraticFECollection self)"},
	 { "QuadraticFECollection_swigregister", QuadraticFECollection_swigregister, METH_O, NULL},
	 { "QuadraticFECollection_swiginit", QuadraticFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticPosFECollection", _wrap_new_QuadraticPosFECollection, METH_NOARGS, "new_QuadraticPosFECollection() -> QuadraticPosFECollection"},
	 { "QuadraticPosFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(QuadraticPosFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticPosFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(QuadraticPosFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticPosFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticPosFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(QuadraticPosFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticPosFECollection_Name", _wrap_QuadraticPosFECollection_Name, METH_O, "Name(QuadraticPosFECollection self) -> char const *"},
	 { "QuadraticPosFECollection_GetContType", _wrap_QuadraticPosFECollection_GetContType, METH_O, "GetContType(QuadraticPosFECollection self) -> int"},
	 { "delete_QuadraticPosFECollection", _wrap_delete_QuadraticPosFECollection, METH_O, "delete_QuadraticPosFECollection(QuadraticPosFECollection self)"},
	 { "QuadraticPosFECollection_swigregister", QuadraticPosFECollection_swigregister, METH_O, NULL},
	 { "QuadraticPosFECollection_swiginit", QuadraticPosFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_CubicFECollection", _wrap_new_CubicFECollection, METH_NOARGS, "new_CubicFECollection() -> CubicFECollection"},
	 { "CubicFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(CubicFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "CubicFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(CubicFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "CubicFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_CubicFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(CubicFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "CubicFECollection_Name", _wrap_CubicFECollection_Name, METH_O, "Name(CubicFECollection self) -> char const *"},
	 { "CubicFECollection_GetContType", _wrap_CubicFECollection_GetContType, METH_O, "GetContType(CubicFECollection self) -> int"},
	 { "delete_CubicFECollection", _wrap_delete_CubicFECollection, METH_O, "delete_CubicFECollection(CubicFECollection self)"},
	 { "CubicFECollection_swigregister", CubicFECollection_swigregister, METH_O, NULL},
	 { "CubicFECollection_swiginit", CubicFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_CrouzeixRaviartFECollection", _wrap_new_CrouzeixRaviartFECollection, METH_NOARGS, "new_CrouzeixRaviartFECollection() -> CrouzeixRaviartFECollection"},
	 { "CrouzeixRaviartFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_CrouzeixRaviartFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "CrouzeixRaviartFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_CrouzeixRaviartFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "CrouzeixRaviartFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_CrouzeixRaviartFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "CrouzeixRaviartFECollection_Name", _wrap_CrouzeixRaviartFECollection_Name, METH_O, "Name(CrouzeixRaviartFECollection self) -> char const *"},
	 { "CrouzeixRaviartFECollection_GetContType", _wrap_CrouzeixRaviartFECollection_GetContType, METH_O, "GetContType(CrouzeixRaviartFECollection self) -> int"},
	 { "delete_CrouzeixRaviartFECollection", _wrap_delete_CrouzeixRaviartFECollection, METH_O, "delete_CrouzeixRaviartFECollection(CrouzeixRaviartFECollection self)"},
	 { "CrouzeixRaviartFECollection_swigregister", CrouzeixRaviartFECollection_swigregister, METH_O, NULL},
	 { "CrouzeixRaviartFECollection_swiginit", CrouzeixRaviartFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearNonConf3DFECollection", _wrap_new_LinearNonConf3DFECollection, METH_NOARGS, "new_LinearNonConf3DFECollection() -> LinearNonConf3DFECollection"},
	 { "LinearNonConf3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearNonConf3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearNonConf3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearNonConf3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearNonConf3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearNonConf3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearNonConf3DFECollection_Name", _wrap_LinearNonConf3DFECollection_Name, METH_O, "Name(LinearNonConf3DFECollection self) -> char const *"},
	 { "LinearNonConf3DFECollection_GetContType", _wrap_LinearNonConf3DFECollection_GetContType, METH_O, "GetContType(LinearNonConf3DFECollection self) -> int"},
	 { "delete_LinearNonConf3DFECollection", _wrap_delete_LinearNonConf3DFECollection, METH_O, "delete_LinearNonConf3DFECollection(LinearNonConf3DFECollection self)"},
	 { "LinearNonConf3DFECollection_swigregister", LinearNonConf3DFECollection_swigregister, METH_O, NULL},
	 { "LinearNonConf3DFECollection_swiginit", LinearNonConf3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT0_2DFECollection", _wrap_new_RT0_2DFECollection, METH_NOARGS, "new_RT0_2DFECollection() -> RT0_2DFECollection"},
	 { "RT0_2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT0_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT0_2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT0_2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT0_2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT0_2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT0_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT0_2DFECollection_Name", _wrap_RT0_2DFECollection_Name, METH_O, "Name(RT0_2DFECollection self) -> char const *"},
	 { "RT0_2DFECollection_GetContType", _wrap_RT0_2DFECollection_GetContType, METH_O, "GetContType(RT0_2DFECollection self) -> int"},
	 { "delete_RT0_2DFECollection", _wrap_delete_RT0_2DFECollection, METH_O, "delete_RT0_2DFECollection(RT0_2DFECollection self)"},
	 { "RT0_2DFECollection_swigregister", RT0_2DFECollection_swigregister, METH_O, NULL},
	 { "RT0_2DFECollection_swiginit", RT0_2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT1_2DFECollection", _wrap_new_RT1_2DFECollection, METH_NOARGS, "new_RT1_2DFECollection() -> RT1_2DFECollection"},
	 { "RT1_2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT1_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT1_2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT1_2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT1_2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT1_2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT1_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT1_2DFECollection_Name", _wrap_RT1_2DFECollection_Name, METH_O, "Name(RT1_2DFECollection self) -> char const *"},
	 { "RT1_2DFECollection_GetContType", _wrap_RT1_2DFECollection_GetContType, METH_O, "GetContType(RT1_2DFECollection self) -> int"},
	 { "delete_RT1_2DFECollection", _wrap_delete_RT1_2DFECollection, METH_O, "delete_RT1_2DFECollection(RT1_2DFECollection self)"},
	 { "RT1_2DFECollection_swigregister", RT1_2DFECollection_swigregister, METH_O, NULL},
	 { "RT1_2DFECollection_swiginit", RT1_2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT2_2DFECollection", _wrap_new_RT2_2DFECollection, METH_NOARGS, "new_RT2_2DFECollection() -> RT2_2DFECollection"},
	 { "RT2_2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT2_2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT2_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT2_2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT2_2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT2_2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT2_2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT2_2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT2_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT2_2DFECollection_Name", _wrap_RT2_2DFECollection_Name, METH_O, "Name(RT2_2DFECollection self) -> char const *"},
	 { "RT2_2DFECollection_GetContType", _wrap_RT2_2DFECollection_GetContType, METH_O, "GetContType(RT2_2DFECollection self) -> int"},
	 { "delete_RT2_2DFECollection", _wrap_delete_RT2_2DFECollection, METH_O, "delete_RT2_2DFECollection(RT2_2DFECollection self)"},
	 { "RT2_2DFECollection_swigregister", RT2_2DFECollection_swigregister, METH_O, NULL},
	 { "RT2_2DFECollection_swiginit", RT2_2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_Const2DFECollection", _wrap_new_Const2DFECollection, METH_NOARGS, "new_Const2DFECollection() -> Const2DFECollection"},
	 { "Const2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_Const2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(Const2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "Const2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_Const2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(Const2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "Const2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_Const2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(Const2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "Const2DFECollection_Name", _wrap_Const2DFECollection_Name, METH_O, "Name(Const2DFECollection self) -> char const *"},
	 { "Const2DFECollection_GetContType", _wrap_Const2DFECollection_GetContType, METH_O, "GetContType(Const2DFECollection self) -> int"},
	 { "delete_Const2DFECollection", _wrap_delete_Const2DFECollection, METH_O, "delete_Const2DFECollection(Const2DFECollection self)"},
	 { "Const2DFECollection_swigregister", Const2DFECollection_swigregister, METH_O, NULL},
	 { "Const2DFECollection_swiginit", Const2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearDiscont2DFECollection", _wrap_new_LinearDiscont2DFECollection, METH_NOARGS, "new_LinearDiscont2DFECollection() -> LinearDiscont2DFECollection"},
	 { "LinearDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearDiscont2DFECollection_Name", _wrap_LinearDiscont2DFECollection_Name, METH_O, "Name(LinearDiscont2DFECollection self) -> char const *"},
	 { "LinearDiscont2DFECollection_GetContType", _wrap_LinearDiscont2DFECollection_GetContType, METH_O, "GetContType(LinearDiscont2DFECollection self) -> int"},
	 { "delete_LinearDiscont2DFECollection", _wrap_delete_LinearDiscont2DFECollection, METH_O, "delete_LinearDiscont2DFECollection(LinearDiscont2DFECollection self)"},
	 { "LinearDiscont2DFECollection_swigregister", LinearDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "LinearDiscont2DFECollection_swiginit", LinearDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_GaussLinearDiscont2DFECollection", _wrap_new_GaussLinearDiscont2DFECollection, METH_NOARGS, "new_GaussLinearDiscont2DFECollection() -> GaussLinearDiscont2DFECollection"},
	 { "GaussLinearDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussLinearDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "GaussLinearDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussLinearDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "GaussLinearDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_GaussLinearDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "GaussLinearDiscont2DFECollection_Name", _wrap_GaussLinearDiscont2DFECollection_Name, METH_O, "Name(GaussLinearDiscont2DFECollection self) -> char const *"},
	 { "GaussLinearDiscont2DFECollection_GetContType", _wrap_GaussLinearDiscont2DFECollection_GetContType, METH_O, "GetContType(GaussLinearDiscont2DFECollection self) -> int"},
	 { "delete_GaussLinearDiscont2DFECollection", _wrap_delete_GaussLinearDiscont2DFECollection, METH_O, "delete_GaussLinearDiscont2DFECollection(GaussLinearDiscont2DFECollection self)"},
	 { "GaussLinearDiscont2DFECollection_swigregister", GaussLinearDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "GaussLinearDiscont2DFECollection_swiginit", GaussLinearDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_P1OnQuadFECollection", _wrap_new_P1OnQuadFECollection, METH_NOARGS, "new_P1OnQuadFECollection() -> P1OnQuadFECollection"},
	 { "P1OnQuadFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_P1OnQuadFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(P1OnQuadFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "P1OnQuadFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_P1OnQuadFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(P1OnQuadFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "P1OnQuadFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_P1OnQuadFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(P1OnQuadFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "P1OnQuadFECollection_Name", _wrap_P1OnQuadFECollection_Name, METH_O, "Name(P1OnQuadFECollection self) -> char const *"},
	 { "P1OnQuadFECollection_GetContType", _wrap_P1OnQuadFECollection_GetContType, METH_O, "GetContType(P1OnQuadFECollection self) -> int"},
	 { "delete_P1OnQuadFECollection", _wrap_delete_P1OnQuadFECollection, METH_O, "delete_P1OnQuadFECollection(P1OnQuadFECollection self)"},
	 { "P1OnQuadFECollection_swigregister", P1OnQuadFECollection_swigregister, METH_O, NULL},
	 { "P1OnQuadFECollection_swiginit", P1OnQuadFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticDiscont2DFECollection", _wrap_new_QuadraticDiscont2DFECollection, METH_NOARGS, "new_QuadraticDiscont2DFECollection() -> QuadraticDiscont2DFECollection"},
	 { "QuadraticDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticDiscont2DFECollection_Name", _wrap_QuadraticDiscont2DFECollection_Name, METH_O, "Name(QuadraticDiscont2DFECollection self) -> char const *"},
	 { "QuadraticDiscont2DFECollection_GetContType", _wrap_QuadraticDiscont2DFECollection_GetContType, METH_O, "GetContType(QuadraticDiscont2DFECollection self) -> int"},
	 { "delete_QuadraticDiscont2DFECollection", _wrap_delete_QuadraticDiscont2DFECollection, METH_O, "delete_QuadraticDiscont2DFECollection(QuadraticDiscont2DFECollection self)"},
	 { "QuadraticDiscont2DFECollection_swigregister", QuadraticDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "QuadraticDiscont2DFECollection_swiginit", QuadraticDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticPosDiscont2DFECollection", _wrap_new_QuadraticPosDiscont2DFECollection, METH_NOARGS, "new_QuadraticPosDiscont2DFECollection() -> QuadraticPosDiscont2DFECollection"},
	 { "QuadraticPosDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticPosDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticPosDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticPosDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticPosDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticPosDiscont2DFECollection_Name", _wrap_QuadraticPosDiscont2DFECollection_Name, METH_O, "Name(QuadraticPosDiscont2DFECollection self) -> char const *"},
	 { "QuadraticPosDiscont2DFECollection_GetContType", _wrap_QuadraticPosDiscont2DFECollection_GetContType, METH_O, "GetContType(QuadraticPosDiscont2DFECollection self) -> int"},
	 { "delete_QuadraticPosDiscont2DFECollection", _wrap_delete_QuadraticPosDiscont2DFECollection, METH_O, "delete_QuadraticPosDiscont2DFECollection(QuadraticPosDiscont2DFECollection self)"},
	 { "QuadraticPosDiscont2DFECollection_swigregister", QuadraticPosDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "QuadraticPosDiscont2DFECollection_swiginit", QuadraticPosDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_GaussQuadraticDiscont2DFECollection", _wrap_new_GaussQuadraticDiscont2DFECollection, METH_NOARGS, "new_GaussQuadraticDiscont2DFECollection() -> GaussQuadraticDiscont2DFECollection"},
	 { "GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "GaussQuadraticDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_GaussQuadraticDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "GaussQuadraticDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_GaussQuadraticDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "GaussQuadraticDiscont2DFECollection_Name", _wrap_GaussQuadraticDiscont2DFECollection_Name, METH_O, "Name(GaussQuadraticDiscont2DFECollection self) -> char const *"},
	 { "GaussQuadraticDiscont2DFECollection_GetContType", _wrap_GaussQuadraticDiscont2DFECollection_GetContType, METH_O, "GetContType(GaussQuadraticDiscont2DFECollection self) -> int"},
	 { "delete_GaussQuadraticDiscont2DFECollection", _wrap_delete_GaussQuadraticDiscont2DFECollection, METH_O, "delete_GaussQuadraticDiscont2DFECollection(GaussQuadraticDiscont2DFECollection self)"},
	 { "GaussQuadraticDiscont2DFECollection_swigregister", GaussQuadraticDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "GaussQuadraticDiscont2DFECollection_swiginit", GaussQuadraticDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_CubicDiscont2DFECollection", _wrap_new_CubicDiscont2DFECollection, METH_NOARGS, "new_CubicDiscont2DFECollection() -> CubicDiscont2DFECollection"},
	 { "CubicDiscont2DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicDiscont2DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "CubicDiscont2DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_CubicDiscont2DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "CubicDiscont2DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_CubicDiscont2DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "CubicDiscont2DFECollection_Name", _wrap_CubicDiscont2DFECollection_Name, METH_O, "Name(CubicDiscont2DFECollection self) -> char const *"},
	 { "CubicDiscont2DFECollection_GetContType", _wrap_CubicDiscont2DFECollection_GetContType, METH_O, "GetContType(CubicDiscont2DFECollection self) -> int"},
	 { "delete_CubicDiscont2DFECollection", _wrap_delete_CubicDiscont2DFECollection, METH_O, "delete_CubicDiscont2DFECollection(CubicDiscont2DFECollection self)"},
	 { "CubicDiscont2DFECollection_swigregister", CubicDiscont2DFECollection_swigregister, METH_O, NULL},
	 { "CubicDiscont2DFECollection_swiginit", CubicDiscont2DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_Const3DFECollection", _wrap_new_Const3DFECollection, METH_NOARGS, "new_Const3DFECollection() -> Const3DFECollection"},
	 { "Const3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_Const3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(Const3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "Const3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_Const3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(Const3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "Const3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_Const3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(Const3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "Const3DFECollection_Name", _wrap_Const3DFECollection_Name, METH_O, "Name(Const3DFECollection self) -> char const *"},
	 { "Const3DFECollection_GetContType", _wrap_Const3DFECollection_GetContType, METH_O, "GetContType(Const3DFECollection self) -> int"},
	 { "delete_Const3DFECollection", _wrap_delete_Const3DFECollection, METH_O, "delete_Const3DFECollection(Const3DFECollection self)"},
	 { "Const3DFECollection_swigregister", Const3DFECollection_swigregister, METH_O, NULL},
	 { "Const3DFECollection_swiginit", Const3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_LinearDiscont3DFECollection", _wrap_new_LinearDiscont3DFECollection, METH_NOARGS, "new_LinearDiscont3DFECollection() -> LinearDiscont3DFECollection"},
	 { "LinearDiscont3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "LinearDiscont3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_LinearDiscont3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "LinearDiscont3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_LinearDiscont3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "LinearDiscont3DFECollection_Name", _wrap_LinearDiscont3DFECollection_Name, METH_O, "Name(LinearDiscont3DFECollection self) -> char const *"},
	 { "LinearDiscont3DFECollection_GetContType", _wrap_LinearDiscont3DFECollection_GetContType, METH_O, "GetContType(LinearDiscont3DFECollection self) -> int"},
	 { "delete_LinearDiscont3DFECollection", _wrap_delete_LinearDiscont3DFECollection, METH_O, "delete_LinearDiscont3DFECollection(LinearDiscont3DFECollection self)"},
	 { "LinearDiscont3DFECollection_swigregister", LinearDiscont3DFECollection_swigregister, METH_O, NULL},
	 { "LinearDiscont3DFECollection_swiginit", LinearDiscont3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_QuadraticDiscont3DFECollection", _wrap_new_QuadraticDiscont3DFECollection, METH_NOARGS, "new_QuadraticDiscont3DFECollection() -> QuadraticDiscont3DFECollection"},
	 { "QuadraticDiscont3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "QuadraticDiscont3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "QuadraticDiscont3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_QuadraticDiscont3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "QuadraticDiscont3DFECollection_Name", _wrap_QuadraticDiscont3DFECollection_Name, METH_O, "Name(QuadraticDiscont3DFECollection self) -> char const *"},
	 { "QuadraticDiscont3DFECollection_GetContType", _wrap_QuadraticDiscont3DFECollection_GetContType, METH_O, "GetContType(QuadraticDiscont3DFECollection self) -> int"},
	 { "delete_QuadraticDiscont3DFECollection", _wrap_delete_QuadraticDiscont3DFECollection, METH_O, "delete_QuadraticDiscont3DFECollection(QuadraticDiscont3DFECollection self)"},
	 { "QuadraticDiscont3DFECollection_swigregister", QuadraticDiscont3DFECollection_swigregister, METH_O, NULL},
	 { "QuadraticDiscont3DFECollection_swiginit", QuadraticDiscont3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RefinedLinearFECollection", _wrap_new_RefinedLinearFECollection, METH_NOARGS, "new_RefinedLinearFECollection() -> RefinedLinearFECollection"},
	 { "RefinedLinearFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RefinedLinearFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RefinedLinearFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RefinedLinearFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RefinedLinearFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RefinedLinearFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RefinedLinearFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RefinedLinearFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RefinedLinearFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RefinedLinearFECollection_Name", _wrap_RefinedLinearFECollection_Name, METH_O, "Name(RefinedLinearFECollection self) -> char const *"},
	 { "RefinedLinearFECollection_GetContType", _wrap_RefinedLinearFECollection_GetContType, METH_O, "GetContType(RefinedLinearFECollection self) -> int"},
	 { "delete_RefinedLinearFECollection", _wrap_delete_RefinedLinearFECollection, METH_O, "delete_RefinedLinearFECollection(RefinedLinearFECollection self)"},
	 { "RefinedLinearFECollection_swigregister", RefinedLinearFECollection_swigregister, METH_O, NULL},
	 { "RefinedLinearFECollection_swiginit", RefinedLinearFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_ND1_3DFECollection", _wrap_new_ND1_3DFECollection, METH_NOARGS, "new_ND1_3DFECollection() -> ND1_3DFECollection"},
	 { "ND1_3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_ND1_3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(ND1_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "ND1_3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_ND1_3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(ND1_3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "ND1_3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_ND1_3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(ND1_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "ND1_3DFECollection_Name", _wrap_ND1_3DFECollection_Name, METH_O, "Name(ND1_3DFECollection self) -> char const *"},
	 { "ND1_3DFECollection_GetContType", _wrap_ND1_3DFECollection_GetContType, METH_O, "GetContType(ND1_3DFECollection self) -> int"},
	 { "delete_ND1_3DFECollection", _wrap_delete_ND1_3DFECollection, METH_O, "delete_ND1_3DFECollection(ND1_3DFECollection self)"},
	 { "ND1_3DFECollection_swigregister", ND1_3DFECollection_swigregister, METH_O, NULL},
	 { "ND1_3DFECollection_swiginit", ND1_3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT0_3DFECollection", _wrap_new_RT0_3DFECollection, METH_NOARGS, "new_RT0_3DFECollection() -> RT0_3DFECollection"},
	 { "RT0_3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT0_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT0_3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT0_3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT0_3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT0_3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT0_3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT0_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT0_3DFECollection_Name", _wrap_RT0_3DFECollection_Name, METH_O, "Name(RT0_3DFECollection self) -> char const *"},
	 { "RT0_3DFECollection_GetContType", _wrap_RT0_3DFECollection_GetContType, METH_O, "GetContType(RT0_3DFECollection self) -> int"},
	 { "delete_RT0_3DFECollection", _wrap_delete_RT0_3DFECollection, METH_O, "delete_RT0_3DFECollection(RT0_3DFECollection self)"},
	 { "RT0_3DFECollection_swigregister", RT0_3DFECollection_swigregister, METH_O, NULL},
	 { "RT0_3DFECollection_swiginit", RT0_3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_RT1_3DFECollection", _wrap_new_RT1_3DFECollection, METH_NOARGS, "new_RT1_3DFECollection() -> RT1_3DFECollection"},
	 { "RT1_3DFECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_3DFECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(RT1_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"},
	 { "RT1_3DFECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_RT1_3DFECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(RT1_3DFECollection self, mfem::Geometry::Type GeomType) -> int"},
	 { "RT1_3DFECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_RT1_3DFECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(RT1_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"},
	 { "RT1_3DFECollection_Name", _wrap_RT1_3DFECollection_Name, METH_O, "Name(RT1_3DFECollection self) -> char const *"},
	 { "RT1_3DFECollection_GetContType", _wrap_RT1_3DFECollection_GetContType, METH_O, "GetContType(RT1_3DFECollection self) -> int"},
	 { "delete_RT1_3DFECollection", _wrap_delete_RT1_3DFECollection, METH_O, "delete_RT1_3DFECollection(RT1_3DFECollection self)"},
	 { "RT1_3DFECollection_swigregister", RT1_3DFECollection_swigregister, METH_O, NULL},
	 { "RT1_3DFECollection_swiginit", RT1_3DFECollection_swiginit, METH_VARARGS, NULL},
	 { "new_Local_FECollection", (PyCFunction)(void(*)(void))_wrap_new_Local_FECollection, METH_VARARGS|METH_KEYWORDS, "new_Local_FECollection(char const * fe_name) -> Local_FECollection"},
	 { "Local_FECollection_FiniteElementForGeometry", (PyCFunction)(void(*)(void))_wrap_Local_FECollection_FiniteElementForGeometry, METH_VARARGS|METH_KEYWORDS, "FiniteElementForGeometry(Local_FECollection self, mfem::Geometry::Type GeomType_) -> FiniteElement"},
	 { "Local_FECollection_DofForGeometry", (PyCFunction)(void(*)(void))_wrap_Local_FECollection_DofForGeometry, METH_VARARGS|METH_KEYWORDS, "DofForGeometry(Local_FECollection self, mfem::Geometry::Type GeomType_) -> int"},
	 { "Local_FECollection_DofOrderForOrientation", (PyCFunction)(void(*)(void))_wrap_Local_FECollection_DofOrderForOrientation, METH_VARARGS|METH_KEYWORDS, "DofOrderForOrientation(Local_FECollection self, mfem::Geometry::Type GeomType_, int Or) -> int const *"},
	 { "Local_FECollection_Name", _wrap_Local_FECollection_Name, METH_O, "Name(Local_FECollection self) -> char const *"},
	 { "delete_Local_FECollection", _wrap_delete_Local_FECollection, METH_O, "delete_Local_FECollection(Local_FECollection self)"},
	 { "Local_FECollection_GetContType", _wrap_Local_FECollection_GetContType, METH_O, "GetContType(Local_FECollection self) -> int"},
	 { "Local_FECollection_swigregister", Local_FECollection_swigregister, METH_O, NULL},
	 { "Local_FECollection_swiginit", Local_FECollection_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ScalarNumbaCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *) (mfem::FunctionCoefficient *) ((ScalarNumbaCoefficient *) x));
}
static void *_p_mfem__ConstantCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ConstantCoefficient *) x));
}
static void *_p_mfem__DeltaCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DeltaCoefficient *) x));
}
static void *_p_mfem__DeterminantCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DeterminantCoefficient *) x));
}
static void *_p_mfem__DivergenceGridFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::DivergenceGridFunctionCoefficient *) x));
}
static void *_p_mfem__ExtrudeCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ExtrudeCoefficient *) x));
}
static void *_p_mfem__FunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::FunctionCoefficient *) x));
}
static void *_p_mfem__GridFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::GridFunctionCoefficient *) x));
}
static void *_p_mfem__InnerProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::InnerProductCoefficient *) x));
}
static void *_p_mfem__PWCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PWCoefficient *) x));
}
static void *_p_mfem__PWConstCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PWConstCoefficient *) x));
}
static void *_p_mfem__PowerCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::PowerCoefficient *) x));
}
static void *_p_mfem__ProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::ProductCoefficient *) x));
}
static void *_p_mfem__PyCoefficientBaseTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *) (mfem::FunctionCoefficient *) ((mfem::PyCoefficientBase *) x));
}
static void *_p_mfem__QuadratureFunctionCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::QuadratureFunctionCoefficient *) x));
}
static void *_p_mfem__RatioCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::RatioCoefficient *) x));
}
static void *_p_mfem__RestrictedCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::RestrictedCoefficient *) x));
}
static void *_p_mfem__SumCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::SumCoefficient *) x));
}
static void *_p_mfem__TransformedCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::TransformedCoefficient *) x));
}
static void *_p_mfem__VectorRotProductCoefficientTo_p_mfem__Coefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Coefficient *)  ((mfem::VectorRotProductCoefficient *) x));
}
static void *_p_mfem__BiCubic2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::BiCubic2DFiniteElement *) x));
}
static void *_p_mfem__BiLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::BiLinear2DFiniteElement *) x));
}
static void *_p_mfem__BiQuad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::BiQuad2DFiniteElement *) x));
}
static void *_p_mfem__BiQuadPos2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::BiQuadPos2DFiniteElement *) x));
}
static void *_p_mfem__CrouzeixRaviartFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::CrouzeixRaviartFiniteElement *) x));
}
static void *_p_mfem__CrouzeixRaviartQuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::CrouzeixRaviartQuadFiniteElement *) x));
}
static void *_p_mfem__Cubic1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Cubic1DFiniteElement *) x));
}
static void *_p_mfem__Cubic2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Cubic2DFiniteElement *) x));
}
static void *_p_mfem__Cubic3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Cubic3DFiniteElement *) x));
}
static void *_p_mfem__GaussBiLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussBiLinear2DFiniteElement *) x));
}
static void *_p_mfem__GaussBiQuad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussBiQuad2DFiniteElement *) x));
}
static void *_p_mfem__GaussLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussLinear2DFiniteElement *) x));
}
static void *_p_mfem__GaussQuad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::GaussQuad2DFiniteElement *) x));
}
static void *_p_mfem__H1Pos_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::H1Pos_HexahedronElement *) x));
}
static void *_p_mfem__H1Pos_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::H1Pos_QuadrilateralElement *) x));
}
static void *_p_mfem__H1Pos_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::H1Pos_SegmentElement *) x));
}
static void *_p_mfem__H1Pos_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::H1Pos_TetrahedronElement *) x));
}
static void *_p_mfem__H1Pos_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::H1Pos_TriangleElement *) x));
}
static void *_p_mfem__H1Pos_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::H1Pos_WedgeElement *) x));
}
static void *_p_mfem__H1Ser_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::H1Ser_QuadrilateralElement *) x));
}
static void *_p_mfem__H1_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::H1_HexahedronElement *) x));
}
static void *_p_mfem__H1_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::H1_QuadrilateralElement *) x));
}
static void *_p_mfem__H1_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::H1_SegmentElement *) x));
}
static void *_p_mfem__H1_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::H1_TetrahedronElement *) x));
}
static void *_p_mfem__H1_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::H1_TriangleElement *) x));
}
static void *_p_mfem__H1_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::H1_WedgeElement *) x));
}
static void *_p_mfem__L2Pos_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::L2Pos_HexahedronElement *) x));
}
static void *_p_mfem__L2Pos_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::L2Pos_QuadrilateralElement *) x));
}
static void *_p_mfem__L2Pos_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *)(mfem::PositiveTensorFiniteElement *) ((mfem::L2Pos_SegmentElement *) x));
}
static void *_p_mfem__L2Pos_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::L2Pos_TetrahedronElement *) x));
}
static void *_p_mfem__L2Pos_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::L2Pos_TriangleElement *) x));
}
static void *_p_mfem__L2Pos_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::L2Pos_WedgeElement *) x));
}
static void *_p_mfem__L2_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::L2_HexahedronElement *) x));
}
static void *_p_mfem__L2_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::L2_QuadrilateralElement *) x));
}
static void *_p_mfem__L2_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *)(mfem::NodalTensorFiniteElement *) ((mfem::L2_SegmentElement *) x));
}
static void *_p_mfem__L2_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::L2_TetrahedronElement *) x));
}
static void *_p_mfem__L2_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::L2_TriangleElement *) x));
}
static void *_p_mfem__L2_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::L2_WedgeElement *) x));
}
static void *_p_mfem__Lagrange1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Lagrange1DFiniteElement *) x));
}
static void *_p_mfem__LagrangeHexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::LagrangeHexFiniteElement *) x));
}
static void *_p_mfem__Linear1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Linear1DFiniteElement *) x));
}
static void *_p_mfem__Linear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Linear2DFiniteElement *) x));
}
static void *_p_mfem__Linear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Linear3DFiniteElement *) x));
}
static void *_p_mfem__LinearPyramidFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::LinearPyramidFiniteElement *) x));
}
static void *_p_mfem__LinearWedgeFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::LinearWedgeFiniteElement *) x));
}
static void *_p_mfem__ND_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::ND_HexahedronElement *) x));
}
static void *_p_mfem__ND_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::ND_QuadrilateralElement *) x));
}
static void *_p_mfem__ND_R1D_PointElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R1D_PointElement *) x));
}
static void *_p_mfem__ND_R1D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R1D_SegmentElement *) x));
}
static void *_p_mfem__ND_R2D_FiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R2D_FiniteElement *) x));
}
static void *_p_mfem__ND_R2D_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::ND_R2D_FiniteElement *) ((mfem::ND_R2D_QuadrilateralElement *) x));
}
static void *_p_mfem__ND_R2D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_R2D_SegmentElement *) x));
}
static void *_p_mfem__ND_R2D_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::ND_R2D_FiniteElement *) ((mfem::ND_R2D_TriangleElement *) x));
}
static void *_p_mfem__ND_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::ND_SegmentElement *) x));
}
static void *_p_mfem__ND_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_TetrahedronElement *) x));
}
static void *_p_mfem__ND_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_TriangleElement *) x));
}
static void *_p_mfem__ND_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::ND_WedgeElement *) x));
}
static void *_p_mfem__NURBS1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NURBSFiniteElement *) ((mfem::NURBS1DFiniteElement *) x));
}
static void *_p_mfem__NURBS2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NURBSFiniteElement *) ((mfem::NURBS2DFiniteElement *) x));
}
static void *_p_mfem__NURBS3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NURBSFiniteElement *) ((mfem::NURBS3DFiniteElement *) x));
}
static void *_p_mfem__NURBSFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::NURBSFiniteElement *) x));
}
static void *_p_mfem__Nedelec1HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1HexFiniteElement *) x));
}
static void *_p_mfem__Nedelec1PyrFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1PyrFiniteElement *) x));
}
static void *_p_mfem__Nedelec1TetFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1TetFiniteElement *) x));
}
static void *_p_mfem__Nedelec1WdgFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::Nedelec1WdgFiniteElement *) x));
}
static void *_p_mfem__NodalFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::NodalFiniteElement *) x));
}
static void *_p_mfem__NodalTensorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::NodalTensorFiniteElement *) x));
}
static void *_p_mfem__P0HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0HexFiniteElement *) x));
}
static void *_p_mfem__P0PyrFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0PyrFiniteElement *) x));
}
static void *_p_mfem__P0QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0QuadFiniteElement *) x));
}
static void *_p_mfem__P0SegmentFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0SegmentFiniteElement *) x));
}
static void *_p_mfem__P0TetFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0TetFiniteElement *) x));
}
static void *_p_mfem__P0TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0TriangleFiniteElement *) x));
}
static void *_p_mfem__P0WdgFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P0WdgFiniteElement *) x));
}
static void *_p_mfem__P1OnQuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P1OnQuadFiniteElement *) x));
}
static void *_p_mfem__P1SegmentFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P1SegmentFiniteElement *) x));
}
static void *_p_mfem__P1TetNonConfFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P1TetNonConfFiniteElement *) x));
}
static void *_p_mfem__P2SegmentFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::P2SegmentFiniteElement *) x));
}
static void *_p_mfem__PointFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::PointFiniteElement *) x));
}
static void *_p_mfem__PositiveFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *) ((mfem::PositiveFiniteElement *) x));
}
static void *_p_mfem__PositiveTensorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::PositiveTensorFiniteElement *) x));
}
static void *_p_mfem__Quad1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Quad1DFiniteElement *) x));
}
static void *_p_mfem__Quad2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Quad2DFiniteElement *) x));
}
static void *_p_mfem__QuadPos1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::PositiveFiniteElement *) ((mfem::QuadPos1DFiniteElement *) x));
}
static void *_p_mfem__Quadratic3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::Quadratic3DFiniteElement *) x));
}
static void *_p_mfem__RT0HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0HexFiniteElement *) x));
}
static void *_p_mfem__RT0PyrFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0PyrFiniteElement *) x));
}
static void *_p_mfem__RT0QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0QuadFiniteElement *) x));
}
static void *_p_mfem__RT0TetFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0TetFiniteElement *) x));
}
static void *_p_mfem__RT0TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0TriangleFiniteElement *) x));
}
static void *_p_mfem__RT0WdgFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT0WdgFiniteElement *) x));
}
static void *_p_mfem__RT1HexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT1HexFiniteElement *) x));
}
static void *_p_mfem__RT1QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT1QuadFiniteElement *) x));
}
static void *_p_mfem__RT1TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT1TriangleFiniteElement *) x));
}
static void *_p_mfem__RT2QuadFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT2QuadFiniteElement *) x));
}
static void *_p_mfem__RT2TriangleFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT2TriangleFiniteElement *) x));
}
static void *_p_mfem__RT_HexahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::RT_HexahedronElement *) x));
}
static void *_p_mfem__RT_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::VectorTensorFiniteElement *) ((mfem::RT_QuadrilateralElement *) x));
}
static void *_p_mfem__RT_R1D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_R1D_SegmentElement *) x));
}
static void *_p_mfem__RT_R2D_FiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_R2D_FiniteElement *) x));
}
static void *_p_mfem__RT_R2D_QuadrilateralElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::RT_R2D_FiniteElement *) ((mfem::RT_R2D_QuadrilateralElement *) x));
}
static void *_p_mfem__RT_R2D_SegmentElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_R2D_SegmentElement *) x));
}
static void *_p_mfem__RT_R2D_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *)(mfem::RT_R2D_FiniteElement *) ((mfem::RT_R2D_TriangleElement *) x));
}
static void *_p_mfem__RT_TetrahedronElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_TetrahedronElement *) x));
}
static void *_p_mfem__RT_TriangleElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_TriangleElement *) x));
}
static void *_p_mfem__RT_WedgeElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::RT_WedgeElement *) x));
}
static void *_p_mfem__RefinedBiLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedBiLinear2DFiniteElement *) x));
}
static void *_p_mfem__RefinedLinear1DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedLinear1DFiniteElement *) x));
}
static void *_p_mfem__RefinedLinear2DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedLinear2DFiniteElement *) x));
}
static void *_p_mfem__RefinedLinear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedLinear3DFiniteElement *) x));
}
static void *_p_mfem__RefinedTriLinear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RefinedTriLinear3DFiniteElement *) x));
}
static void *_p_mfem__RotTriLinearHexFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::RotTriLinearHexFiniteElement *) x));
}
static void *_p_mfem__ScalarFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *)  ((mfem::ScalarFiniteElement *) x));
}
static void *_p_mfem__TriLinear3DFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::ScalarFiniteElement *)(mfem::NodalFiniteElement *) ((mfem::TriLinear3DFiniteElement *) x));
}
static void *_p_mfem__VectorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *)  ((mfem::VectorFiniteElement *) x));
}
static void *_p_mfem__VectorTensorFiniteElementTo_p_mfem__FiniteElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElement *) (mfem::VectorFiniteElement *) ((mfem::VectorTensorFiniteElement *) x));
}
static void *_p_mfem__Const2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::Const2DFECollection *) x));
}
static void *_p_mfem__Const3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::Const3DFECollection *) x));
}
static void *_p_mfem__CrouzeixRaviartFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::CrouzeixRaviartFECollection *) x));
}
static void *_p_mfem__CubicDiscont2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::CubicDiscont2DFECollection *) x));
}
static void *_p_mfem__CubicFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::CubicFECollection *) x));
}
static void *_p_mfem__DG_Interface_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::RT_FECollection *) ((mfem::DG_Interface_FECollection *) x));
}
static void *_p_mfem__GaussLinearDiscont2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::GaussLinearDiscont2DFECollection *) x));
}
static void *_p_mfem__GaussQuadraticDiscont2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::GaussQuadraticDiscont2DFECollection *) x));
}
static void *_p_mfem__H1Pos_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::H1_FECollection *) ((mfem::H1Pos_FECollection *) x));
}
static void *_p_mfem__H1Ser_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::H1_FECollection *) ((mfem::H1Ser_FECollection *) x));
}
static void *_p_mfem__H1_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::H1_FECollection *) x));
}
static void *_p_mfem__H1_Trace_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::H1_FECollection *) ((mfem::H1_Trace_FECollection *) x));
}
static void *_p_mfem__L2_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::L2_FECollection *) x));
}
static void *_p_mfem__LinearDiscont2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::LinearDiscont2DFECollection *) x));
}
static void *_p_mfem__LinearDiscont3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::LinearDiscont3DFECollection *) x));
}
static void *_p_mfem__LinearFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::LinearFECollection *) x));
}
static void *_p_mfem__LinearNonConf3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::LinearNonConf3DFECollection *) x));
}
static void *_p_mfem__Local_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::Local_FECollection *) x));
}
static void *_p_mfem__ND1_3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::ND1_3DFECollection *) x));
}
static void *_p_mfem__ND_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::ND_FECollection *) x));
}
static void *_p_mfem__ND_R1D_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::ND_R1D_FECollection *) x));
}
static void *_p_mfem__ND_R2D_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::ND_R2D_FECollection *) x));
}
static void *_p_mfem__ND_R2D_Trace_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::ND_R2D_FECollection *) ((mfem::ND_R2D_Trace_FECollection *) x));
}
static void *_p_mfem__ND_Trace_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::ND_FECollection *) ((mfem::ND_Trace_FECollection *) x));
}
static void *_p_mfem__NURBSFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::NURBSFECollection *) x));
}
static void *_p_mfem__P1OnQuadFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::P1OnQuadFECollection *) x));
}
static void *_p_mfem__QuadraticDiscont2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::QuadraticDiscont2DFECollection *) x));
}
static void *_p_mfem__QuadraticDiscont3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::QuadraticDiscont3DFECollection *) x));
}
static void *_p_mfem__QuadraticFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::QuadraticFECollection *) x));
}
static void *_p_mfem__QuadraticPosDiscont2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::QuadraticPosDiscont2DFECollection *) x));
}
static void *_p_mfem__QuadraticPosFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::QuadraticPosFECollection *) x));
}
static void *_p_mfem__RT0_2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT0_2DFECollection *) x));
}
static void *_p_mfem__RT0_3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT0_3DFECollection *) x));
}
static void *_p_mfem__RT1_2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT1_2DFECollection *) x));
}
static void *_p_mfem__RT1_3DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT1_3DFECollection *) x));
}
static void *_p_mfem__RT2_2DFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT2_2DFECollection *) x));
}
static void *_p_mfem__RT_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT_FECollection *) x));
}
static void *_p_mfem__RT_R1D_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT_R1D_FECollection *) x));
}
static void *_p_mfem__RT_R2D_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RT_R2D_FECollection *) x));
}
static void *_p_mfem__RT_R2D_Trace_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::RT_R2D_FECollection *) ((mfem::RT_R2D_Trace_FECollection *) x));
}
static void *_p_mfem__RT_Trace_FECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *) (mfem::RT_FECollection *) ((mfem::RT_Trace_FECollection *) x));
}
static void *_p_mfem__RefinedLinearFECollectionTo_p_mfem__FiniteElementCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::FiniteElementCollection *)  ((mfem::RefinedLinearFECollection *) x));
}
static void *_p_mfem__H1Pos_FECollectionTo_p_mfem__H1_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::H1_FECollection *)  ((mfem::H1Pos_FECollection *) x));
}
static void *_p_mfem__H1Ser_FECollectionTo_p_mfem__H1_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::H1_FECollection *)  ((mfem::H1Ser_FECollection *) x));
}
static void *_p_mfem__H1_Trace_FECollectionTo_p_mfem__H1_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::H1_FECollection *)  ((mfem::H1_Trace_FECollection *) x));
}
static void *_p_MatrixNumbaCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::MatrixFunctionCoefficient *) ((MatrixNumbaCoefficient *) x));
}
static void *_p_mfem__CrossCrossCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::CrossCrossCoefficient *) x));
}
static void *_p_mfem__IdentityMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::IdentityMatrixCoefficient *) x));
}
static void *_p_mfem__InverseMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::InverseMatrixCoefficient *) x));
}
static void *_p_mfem__MatrixArrayCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixArrayCoefficient *) x));
}
static void *_p_mfem__MatrixConstantCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixConstantCoefficient *) x));
}
static void *_p_mfem__MatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixFunctionCoefficient *) x));
}
static void *_p_mfem__MatrixProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixProductCoefficient *) x));
}
static void *_p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::MatrixFunctionCoefficient *) ((mfem::MatrixPyCoefficientBase *) x));
}
static void *_p_mfem__MatrixRestrictedCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixRestrictedCoefficient *) x));
}
static void *_p_mfem__MatrixSumCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::MatrixSumCoefficient *) x));
}
static void *_p_mfem__OuterProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::OuterProductCoefficient *) x));
}
static void *_p_mfem__PWMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::PWMatrixCoefficient *) x));
}
static void *_p_mfem__ScalarMatrixProductCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::ScalarMatrixProductCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::SymmetricMatrixCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::SymmetricMatrixCoefficient *) ((mfem::SymmetricMatrixConstantCoefficient *) x));
}
static void *_p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *) (mfem::SymmetricMatrixCoefficient *) ((mfem::SymmetricMatrixFunctionCoefficient *) x));
}
static void *_p_mfem__TransposeMatrixCoefficientTo_p_mfem__MatrixCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::MatrixCoefficient *)  ((mfem::TransposeMatrixCoefficient *) x));
}
static void *_p_mfem__ND_Trace_FECollectionTo_p_mfem__ND_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::ND_FECollection *)  ((mfem::ND_Trace_FECollection *) x));
}
static void *_p_mfem__ND_R2D_Trace_FECollectionTo_p_mfem__ND_R2D_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::ND_R2D_FECollection *)  ((mfem::ND_R2D_Trace_FECollection *) x));
}
static void *_p_mfem__AbstractSparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::AbstractSparseMatrix *) x));
}
static void *_p_mfem__ConformingFaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::FaceRestriction *) ((mfem::ConformingFaceRestriction *) x));
}
static void *_p_mfem__ConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ConstrainedOperator *) x));
}
static void *_p_mfem__DenseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseMatrix *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__DenseSymmetricMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *) ((mfem::DenseSymmetricMatrix *) x));
}
static void *_p_mfem__ElementRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::ElementRestrictionOperator *) ((mfem::ElementRestriction *) x));
}
static void *_p_mfem__ElementRestrictionOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ElementRestrictionOperator *) x));
}
static void *_p_mfem__FaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::FaceRestriction *) x));
}
static void *_p_mfem__IdentityOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::IdentityOperator *) x));
}
static void *_p_mfem__L2ElementRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::ElementRestrictionOperator *) ((mfem::L2ElementRestriction *) x));
}
static void *_p_mfem__L2FaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::FaceRestriction *) ((mfem::L2FaceRestriction *) x));
}
static void *_p_mfem__MatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Matrix *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Solver *) ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__NCL2FaceRestrictionTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::FaceRestriction *)(mfem::L2FaceRestriction *) ((mfem::NCL2FaceRestriction *) x));
}
static void *_p_mfem__ProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ProductOperator *) x));
}
static void *_p_mfem__PyOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::PyOperatorBase *) x));
}
static void *_p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase *) x));
}
static void *_p_mfem__RAPOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RAPOperator *) x));
}
static void *_p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::RectangularConstrainedOperator *) x));
}
static void *_p_mfem__ScaledOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::ScaledOperator *) x));
}
static void *_p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator *) x));
}
static void *_p_mfem__SolverTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::Solver *) x));
}
static void *_p_mfem__SparseMatrixTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::Matrix *)(mfem::AbstractSparseMatrix *) ((mfem::SparseMatrix *) x));
}
static void *_p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator *) x));
}
static void *_p_mfem__TimeDependentOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TimeDependentOperator *) x));
}
static void *_p_mfem__TransposeOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TransposeOperator *) x));
}
static void *_p_mfem__TripleProductOperatorTo_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator *)  ((mfem::TripleProductOperator *) x));
}
static void *_p_mfem__DG_Interface_FECollectionTo_p_mfem__RT_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::RT_FECollection *)  ((mfem::DG_Interface_FECollection *) x));
}
static void *_p_mfem__RT_Trace_FECollectionTo_p_mfem__RT_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::RT_FECollection *)  ((mfem::RT_Trace_FECollection *) x));
}
static void *_p_mfem__RT_R2D_Trace_FECollectionTo_p_mfem__RT_R2D_FECollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::RT_R2D_FECollection *)  ((mfem::RT_R2D_Trace_FECollection *) x));
}
static void *_p_mfem__DenseMatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse *) x));
}
static void *_p_mfem__MatrixInverseTo_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver *)  ((mfem::MatrixInverse *) x));
}
static void *_p_mfem__CoefficientVectorTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::CoefficientVector *) x));
}
static void *_p_mfem__GridFunctionTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::GridFunction *) x));
}
static void *_p_mfem__LinearFormTo_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector *)  ((mfem::LinearForm *) x));
}
static void *_p_VectorNumbaCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *) (mfem::VectorFunctionCoefficient *) ((VectorNumbaCoefficient *) x));
}
static void *_p_mfem__CurlGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::CurlGridFunctionCoefficient *) x));
}
static void *_p_mfem__GradientGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::GradientGridFunctionCoefficient *) x));
}
static void *_p_mfem__MatrixVectorProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::MatrixVectorProductCoefficient *) x));
}
static void *_p_mfem__NodeExtrudeCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::NodeExtrudeCoefficient *) x));
}
static void *_p_mfem__NormalizedVectorCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::NormalizedVectorCoefficient *) x));
}
static void *_p_mfem__PWVectorCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::PWVectorCoefficient *) x));
}
static void *_p_mfem__ScalarVectorProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::ScalarVectorProductCoefficient *) x));
}
static void *_p_mfem__VectorArrayCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorArrayCoefficient *) x));
}
static void *_p_mfem__VectorConstantCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorConstantCoefficient *) x));
}
static void *_p_mfem__VectorCrossProductCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorCrossProductCoefficient *) x));
}
static void *_p_mfem__VectorDeltaCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorDeltaCoefficient *) x));
}
static void *_p_mfem__VectorFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorFunctionCoefficient *) x));
}
static void *_p_mfem__VectorGridFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorGridFunctionCoefficient *) x));
}
static void *_p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *) (mfem::VectorFunctionCoefficient *) ((mfem::VectorPyCoefficientBase *) x));
}
static void *_p_mfem__VectorQuadratureFunctionCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorQuadratureFunctionCoefficient *) x));
}
static void *_p_mfem__VectorRestrictedCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorRestrictedCoefficient *) x));
}
static void *_p_mfem__VectorSumCoefficientTo_p_mfem__VectorCoefficient(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::VectorCoefficient *)  ((mfem::VectorSumCoefficient *) x));
}
static void *_p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::AbstractSparseMatrix **) x));
}
static void *_p_p_mfem__ConformingFaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::FaceRestriction *) ((mfem::ConformingFaceRestriction **) x));
}
static void *_p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ConstrainedOperator **) x));
}
static void *_p_p_mfem__DenseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseMatrix **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *)(mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__DenseSymmetricMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *) ((mfem::DenseSymmetricMatrix **) x));
}
static void *_p_p_mfem__ElementRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::ElementRestrictionOperator *) ((mfem::ElementRestriction **) x));
}
static void *_p_p_mfem__ElementRestrictionOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ElementRestrictionOperator **) x));
}
static void *_p_p_mfem__FaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::FaceRestriction **) x));
}
static void *_p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::IdentityOperator **) x));
}
static void *_p_p_mfem__L2ElementRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::ElementRestrictionOperator *) ((mfem::L2ElementRestriction **) x));
}
static void *_p_p_mfem__L2FaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::FaceRestriction *) ((mfem::L2FaceRestriction **) x));
}
static void *_p_p_mfem__MatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Matrix **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Solver *) ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__NCL2FaceRestrictionTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::FaceRestriction *)(mfem::L2FaceRestriction *) ((mfem::NCL2FaceRestriction **) x));
}
static void *_p_p_mfem__ProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ProductOperator **) x));
}
static void *_p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::PyOperatorBase **) x));
}
static void *_p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::PyTimeDependentOperatorBase **) x));
}
static void *_p_p_mfem__RAPOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RAPOperator **) x));
}
static void *_p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::RectangularConstrainedOperator **) x));
}
static void *_p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::ScaledOperator **) x));
}
static void *_p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::SecondOrderTimeDependentOperator **) x));
}
static void *_p_p_mfem__SolverTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::Solver **) x));
}
static void *_p_p_mfem__SparseMatrixTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::Matrix *)(mfem::AbstractSparseMatrix *) ((mfem::SparseMatrix **) x));
}
static void *_p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **) (mfem::TimeDependentOperator *) ((mfem::TimeDependentAdjointOperator **) x));
}
static void *_p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TimeDependentOperator **) x));
}
static void *_p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TransposeOperator **) x));
}
static void *_p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Operator **)  ((mfem::TripleProductOperator **) x));
}
static void *_p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **) (mfem::MatrixInverse *) ((mfem::DenseMatrixInverse **) x));
}
static void *_p_p_mfem__MatrixInverseTo_p_p_mfem__Solver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Solver **)  ((mfem::MatrixInverse **) x));
}
static void *_p_p_mfem__CoefficientVectorTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::CoefficientVector **) x));
}
static void *_p_p_mfem__GridFunctionTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::GridFunction **) x));
}
static void *_p_p_mfem__LinearFormTo_p_p_mfem__Vector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mfem::Vector **)  ((mfem::LinearForm **) x));
}
static swig_type_info _swigt___input = {"__input", "$input", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixNumbaCoefficient = {"_p_MatrixNumbaCoefficient", "MatrixNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyMFEM__wFILE = {"_p_PyMFEM__wFILE", "PyMFEM::wFILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefCoord = {"_p_RefCoord", "RefCoord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScalarNumbaCoefficient = {"_p_ScalarNumbaCoefficient", "ScalarNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorNumbaCoefficient = {"_p_VectorNumbaCoefficient", "VectorNumbaCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hex_t = {"_p_hex_t", "hex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ArrayT_int_t = {"_p_mfem__ArrayT_int_t", "mfem::Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Coefficient = {"_p_mfem__Coefficient", "mfem::Coefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ConstantCoefficient = {"_p_mfem__ConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DeltaCoefficient = {"_p_mfem__DeltaCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DeterminantCoefficient = {"_p_mfem__DeterminantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DivergenceGridFunctionCoefficient = {"_p_mfem__DivergenceGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ExtrudeCoefficient = {"_p_mfem__ExtrudeCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FunctionCoefficient = {"_p_mfem__FunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GridFunctionCoefficient = {"_p_mfem__GridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__InnerProductCoefficient = {"_p_mfem__InnerProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWCoefficient = {"_p_mfem__PWCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWConstCoefficient = {"_p_mfem__PWConstCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PowerCoefficient = {"_p_mfem__PowerCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ProductCoefficient = {"_p_mfem__ProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyCoefficientBase = {"_p_mfem__PyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__QuadratureFunctionCoefficient = {"_p_mfem__QuadratureFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RatioCoefficient = {"_p_mfem__RatioCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RestrictedCoefficient = {"_p_mfem__RestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SumCoefficient = {"_p_mfem__SumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransformedCoefficient = {"_p_mfem__TransformedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorRotProductCoefficient = {"_p_mfem__VectorRotProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ConformingFaceRestriction = {"_p_mfem__ConformingFaceRestriction", "mfem::H1FaceRestriction *|mfem::ConformingFaceRestriction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Const2DFECollection = {"_p_mfem__Const2DFECollection", "mfem::Const2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Const3DFECollection = {"_p_mfem__Const3DFECollection", "mfem::Const3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ConvectionIntegrator = {"_p_mfem__ConvectionIntegrator", "mfem::NonconservativeConvectionIntegrator *|mfem::ConvectionIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CrouzeixRaviartFECollection = {"_p_mfem__CrouzeixRaviartFECollection", "mfem::CrouzeixRaviartFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CubicDiscont2DFECollection = {"_p_mfem__CubicDiscont2DFECollection", "mfem::CubicDiscont2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CubicFECollection = {"_p_mfem__CubicFECollection", "mfem::CubicFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DGTraceIntegrator = {"_p_mfem__DGTraceIntegrator", "mfem::ConservativeDGTraceIntegrator *|mfem::DGTraceIntegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__DG_Interface_FECollection = {"_p_mfem__DG_Interface_FECollection", "mfem::DG_Interface_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__FiniteElement = {"_p_mfem__FiniteElement", "mfem::FiniteElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__BiCubic2DFiniteElement = {"_p_mfem__BiCubic2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__BiLinear2DFiniteElement = {"_p_mfem__BiLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__BiQuad2DFiniteElement = {"_p_mfem__BiQuad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__BiQuadPos2DFiniteElement = {"_p_mfem__BiQuadPos2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__CrouzeixRaviartFiniteElement = {"_p_mfem__CrouzeixRaviartFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__CrouzeixRaviartQuadFiniteElement = {"_p_mfem__CrouzeixRaviartQuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Cubic1DFiniteElement = {"_p_mfem__Cubic1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Cubic2DFiniteElement = {"_p_mfem__Cubic2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Cubic3DFiniteElement = {"_p_mfem__Cubic3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussBiLinear2DFiniteElement = {"_p_mfem__GaussBiLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussBiQuad2DFiniteElement = {"_p_mfem__GaussBiQuad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussLinear2DFiniteElement = {"_p_mfem__GaussLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GaussQuad2DFiniteElement = {"_p_mfem__GaussQuad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_HexahedronElement = {"_p_mfem__H1Pos_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_QuadrilateralElement = {"_p_mfem__H1Pos_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_SegmentElement = {"_p_mfem__H1Pos_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_TetrahedronElement = {"_p_mfem__H1Pos_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_TriangleElement = {"_p_mfem__H1Pos_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_WedgeElement = {"_p_mfem__H1Pos_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1Ser_QuadrilateralElement = {"_p_mfem__H1Ser_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_HexahedronElement = {"_p_mfem__H1_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_QuadrilateralElement = {"_p_mfem__H1_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_SegmentElement = {"_p_mfem__H1_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_TetrahedronElement = {"_p_mfem__H1_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_TriangleElement = {"_p_mfem__H1_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__H1_WedgeElement = {"_p_mfem__H1_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_HexahedronElement = {"_p_mfem__L2Pos_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_QuadrilateralElement = {"_p_mfem__L2Pos_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_SegmentElement = {"_p_mfem__L2Pos_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_TetrahedronElement = {"_p_mfem__L2Pos_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_TriangleElement = {"_p_mfem__L2Pos_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2Pos_WedgeElement = {"_p_mfem__L2Pos_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_HexahedronElement = {"_p_mfem__L2_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_QuadrilateralElement = {"_p_mfem__L2_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_SegmentElement = {"_p_mfem__L2_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_TetrahedronElement = {"_p_mfem__L2_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_TriangleElement = {"_p_mfem__L2_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2_WedgeElement = {"_p_mfem__L2_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Lagrange1DFiniteElement = {"_p_mfem__Lagrange1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LagrangeHexFiniteElement = {"_p_mfem__LagrangeHexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Linear1DFiniteElement = {"_p_mfem__Linear1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Linear2DFiniteElement = {"_p_mfem__Linear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Linear3DFiniteElement = {"_p_mfem__Linear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LinearPyramidFiniteElement = {"_p_mfem__LinearPyramidFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LinearWedgeFiniteElement = {"_p_mfem__LinearWedgeFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_HexahedronElement = {"_p_mfem__ND_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_QuadrilateralElement = {"_p_mfem__ND_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R1D_PointElement = {"_p_mfem__ND_R1D_PointElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R1D_SegmentElement = {"_p_mfem__ND_R1D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_FiniteElement = {"_p_mfem__ND_R2D_FiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_QuadrilateralElement = {"_p_mfem__ND_R2D_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_SegmentElement = {"_p_mfem__ND_R2D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_TriangleElement = {"_p_mfem__ND_R2D_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_SegmentElement = {"_p_mfem__ND_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_TetrahedronElement = {"_p_mfem__ND_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_TriangleElement = {"_p_mfem__ND_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ND_WedgeElement = {"_p_mfem__ND_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBS1DFiniteElement = {"_p_mfem__NURBS1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBS2DFiniteElement = {"_p_mfem__NURBS2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBS3DFiniteElement = {"_p_mfem__NURBS3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NURBSFiniteElement = {"_p_mfem__NURBSFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1HexFiniteElement = {"_p_mfem__Nedelec1HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1PyrFiniteElement = {"_p_mfem__Nedelec1PyrFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1TetFiniteElement = {"_p_mfem__Nedelec1TetFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Nedelec1WdgFiniteElement = {"_p_mfem__Nedelec1WdgFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NodalFiniteElement = {"_p_mfem__NodalFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NodalTensorFiniteElement = {"_p_mfem__NodalTensorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0HexFiniteElement = {"_p_mfem__P0HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0PyrFiniteElement = {"_p_mfem__P0PyrFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0QuadFiniteElement = {"_p_mfem__P0QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0SegmentFiniteElement = {"_p_mfem__P0SegmentFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0TetFiniteElement = {"_p_mfem__P0TetFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0TriangleFiniteElement = {"_p_mfem__P0TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P0WdgFiniteElement = {"_p_mfem__P0WdgFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P1OnQuadFiniteElement = {"_p_mfem__P1OnQuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P1SegmentFiniteElement = {"_p_mfem__P1SegmentFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P1TetNonConfFiniteElement = {"_p_mfem__P1TetNonConfFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__P2SegmentFiniteElement = {"_p_mfem__P2SegmentFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PointFiniteElement = {"_p_mfem__PointFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PositiveFiniteElement = {"_p_mfem__PositiveFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PositiveTensorFiniteElement = {"_p_mfem__PositiveTensorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Quad1DFiniteElement = {"_p_mfem__Quad1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Quad2DFiniteElement = {"_p_mfem__Quad2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__QuadPos1DFiniteElement = {"_p_mfem__QuadPos1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Quadratic3DFiniteElement = {"_p_mfem__Quadratic3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0HexFiniteElement = {"_p_mfem__RT0HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0PyrFiniteElement = {"_p_mfem__RT0PyrFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0QuadFiniteElement = {"_p_mfem__RT0QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0TetFiniteElement = {"_p_mfem__RT0TetFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0TriangleFiniteElement = {"_p_mfem__RT0TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT0WdgFiniteElement = {"_p_mfem__RT0WdgFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT1HexFiniteElement = {"_p_mfem__RT1HexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT1QuadFiniteElement = {"_p_mfem__RT1QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT1TriangleFiniteElement = {"_p_mfem__RT1TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT2QuadFiniteElement = {"_p_mfem__RT2QuadFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT2TriangleFiniteElement = {"_p_mfem__RT2TriangleFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_HexahedronElement = {"_p_mfem__RT_HexahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_QuadrilateralElement = {"_p_mfem__RT_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R1D_SegmentElement = {"_p_mfem__RT_R1D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_FiniteElement = {"_p_mfem__RT_R2D_FiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_QuadrilateralElement = {"_p_mfem__RT_R2D_QuadrilateralElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_SegmentElement = {"_p_mfem__RT_R2D_SegmentElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_TriangleElement = {"_p_mfem__RT_R2D_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_TetrahedronElement = {"_p_mfem__RT_TetrahedronElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_TriangleElement = {"_p_mfem__RT_TriangleElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RT_WedgeElement = {"_p_mfem__RT_WedgeElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedBiLinear2DFiniteElement = {"_p_mfem__RefinedBiLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinear1DFiniteElement = {"_p_mfem__RefinedLinear1DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinear2DFiniteElement = {"_p_mfem__RefinedLinear2DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinear3DFiniteElement = {"_p_mfem__RefinedLinear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RefinedTriLinear3DFiniteElement = {"_p_mfem__RefinedTriLinear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RotTriLinearHexFiniteElement = {"_p_mfem__RotTriLinearHexFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScalarFiniteElement = {"_p_mfem__ScalarFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TriLinear3DFiniteElement = {"_p_mfem__TriLinear3DFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorFiniteElement = {"_p_mfem__VectorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorTensorFiniteElement = {"_p_mfem__VectorTensorFiniteElement", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FiniteElementCollection = {"_p_mfem__FiniteElementCollection", "mfem::FiniteElementCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__FiniteElementSpace = {"_p_mfem__FiniteElementSpace", "mfem::FiniteElementSpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GaussLinearDiscont2DFECollection = {"_p_mfem__GaussLinearDiscont2DFECollection", "mfem::GaussLinearDiscont2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GaussQuadraticDiscont2DFECollection = {"_p_mfem__GaussQuadraticDiscont2DFECollection", "mfem::GaussQuadraticDiscont2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__GridFunction = {"_p_mfem__GridFunction", "mfem::GridFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__H1Pos_FECollection = {"_p_mfem__H1Pos_FECollection", "mfem::H1Pos_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__H1Ser_FECollection = {"_p_mfem__H1Ser_FECollection", "mfem::H1Ser_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__H1_FECollection = {"_p_mfem__H1_FECollection", "mfem::H1_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__H1_Trace_FECollection = {"_p_mfem__H1_Trace_FECollection", "mfem::H1_Trace_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IntegrationPoint = {"_p_mfem__IntegrationPoint", "mfem::IntegrationPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__IntegrationRule = {"_p_mfem__IntegrationRule", "mfem::IntegrationRule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__L2_FECollection = {"_p_mfem__L2_FECollection", "mfem::DG_FECollection *|mfem::L2_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__LinearDiscont2DFECollection = {"_p_mfem__LinearDiscont2DFECollection", "mfem::LinearDiscont2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__LinearDiscont3DFECollection = {"_p_mfem__LinearDiscont3DFECollection", "mfem::LinearDiscont3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__LinearFECollection = {"_p_mfem__LinearFECollection", "mfem::LinearFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__LinearNonConf3DFECollection = {"_p_mfem__LinearNonConf3DFECollection", "mfem::LinearNonConf3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Local_FECollection = {"_p_mfem__Local_FECollection", "mfem::Local_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__MatrixCoefficient = {"_p_mfem__MatrixCoefficient", "mfem::MatrixCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CrossCrossCoefficient = {"_p_mfem__CrossCrossCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IdentityMatrixCoefficient = {"_p_mfem__IdentityMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__InverseMatrixCoefficient = {"_p_mfem__InverseMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixArrayCoefficient = {"_p_mfem__MatrixArrayCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixConstantCoefficient = {"_p_mfem__MatrixConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixFunctionCoefficient = {"_p_mfem__MatrixFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixProductCoefficient = {"_p_mfem__MatrixProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixPyCoefficientBase = {"_p_mfem__MatrixPyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixRestrictedCoefficient = {"_p_mfem__MatrixRestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixSumCoefficient = {"_p_mfem__MatrixSumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__OuterProductCoefficient = {"_p_mfem__OuterProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWMatrixCoefficient = {"_p_mfem__PWMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScalarMatrixProductCoefficient = {"_p_mfem__ScalarMatrixProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixCoefficient = {"_p_mfem__SymmetricMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixConstantCoefficient = {"_p_mfem__SymmetricMatrixConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SymmetricMatrixFunctionCoefficient = {"_p_mfem__SymmetricMatrixFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransposeMatrixCoefficient = {"_p_mfem__TransposeMatrixCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixVectorProductCoefficient = {"_p_mfem__MatrixVectorProductCoefficient", "mfem::MatVecCoefficient *|mfem::MatrixVectorProductCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ND1_3DFECollection = {"_p_mfem__ND1_3DFECollection", "mfem::ND1_3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ND_FECollection = {"_p_mfem__ND_FECollection", "mfem::ND_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ND_R1D_FECollection = {"_p_mfem__ND_R1D_FECollection", "mfem::ND_R1D_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_FECollection = {"_p_mfem__ND_R2D_FECollection", "mfem::ND_R2D_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ND_R2D_Trace_FECollection = {"_p_mfem__ND_R2D_Trace_FECollection", "mfem::ND_R2D_Trace_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__ND_Trace_FECollection = {"_p_mfem__ND_Trace_FECollection", "mfem::ND_Trace_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__NURBSFECollection = {"_p_mfem__NURBSFECollection", "mfem::NURBSFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Operator = {"_p_mfem__Operator", "mfem::Operator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__AbstractSparseMatrix = {"_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ConstrainedOperator = {"_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrix = {"_p_mfem__DenseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DenseMatrixInverse = {"_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__DenseSymmetricMatrix = {"_p_mfem__DenseSymmetricMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ElementRestriction = {"_p_mfem__ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ElementRestrictionOperator = {"_p_mfem__ElementRestrictionOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__FaceRestriction = {"_p_mfem__FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__IdentityOperator = {"_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2ElementRestriction = {"_p_mfem__L2ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__L2FaceRestriction = {"_p_mfem__L2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__Matrix = {"_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__MatrixInverse = {"_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NCL2FaceRestriction = {"_p_mfem__NCL2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ProductOperator = {"_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyOperatorBase = {"_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PyTimeDependentOperatorBase = {"_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RAPOperator = {"_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__RectangularConstrainedOperator = {"_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScaledOperator = {"_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SecondOrderTimeDependentOperator = {"_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__SparseMatrix = {"_p_mfem__SparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentAdjointOperator = {"_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TimeDependentOperator = {"_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TransposeOperator = {"_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__TripleProductOperator = {"_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__OperatorHandle = {"_p_mfem__OperatorHandle", "mfem::OperatorPtr *|mfem::OperatorHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__P1OnQuadFECollection = {"_p_mfem__P1OnQuadFECollection", "mfem::P1OnQuadFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadraticDiscont2DFECollection = {"_p_mfem__QuadraticDiscont2DFECollection", "mfem::QuadraticDiscont2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadraticDiscont3DFECollection = {"_p_mfem__QuadraticDiscont3DFECollection", "mfem::QuadraticDiscont3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadraticFECollection = {"_p_mfem__QuadraticFECollection", "mfem::QuadraticFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadraticPosDiscont2DFECollection = {"_p_mfem__QuadraticPosDiscont2DFECollection", "mfem::QuadraticPosDiscont2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__QuadraticPosFECollection = {"_p_mfem__QuadraticPosFECollection", "mfem::QuadraticPosFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT0_2DFECollection = {"_p_mfem__RT0_2DFECollection", "mfem::RT0_2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT0_3DFECollection = {"_p_mfem__RT0_3DFECollection", "mfem::RT0_3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT1_2DFECollection = {"_p_mfem__RT1_2DFECollection", "mfem::RT1_2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT1_3DFECollection = {"_p_mfem__RT1_3DFECollection", "mfem::RT1_3DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT2_2DFECollection = {"_p_mfem__RT2_2DFECollection", "mfem::RT2_2DFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT_FECollection = {"_p_mfem__RT_FECollection", "mfem::RT_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT_R1D_FECollection = {"_p_mfem__RT_R1D_FECollection", "mfem::RT_R1D_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_FECollection = {"_p_mfem__RT_R2D_FECollection", "mfem::RT_R2D_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT_R2D_Trace_FECollection = {"_p_mfem__RT_R2D_Trace_FECollection", "mfem::RT_R2D_Trace_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RT_Trace_FECollection = {"_p_mfem__RT_Trace_FECollection", "mfem::RT_Trace_FECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__RefinedLinearFECollection = {"_p_mfem__RefinedLinearFECollection", "mfem::RefinedLinearFECollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Refinement = {"_p_mfem__Refinement", "mfem::Refinement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Solver = {"_p_mfem__Solver", "mfem::Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__Vector = {"_p_mfem__Vector", "mfem::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CoefficientVector = {"_p_mfem__CoefficientVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__LinearForm = {"_p_mfem__LinearForm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorCoefficient = {"_p_mfem__VectorCoefficient", "mfem::DiagonalMatrixCoefficient *|mfem::VectorCoefficient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mfem__CurlGridFunctionCoefficient = {"_p_mfem__CurlGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__GradientGridFunctionCoefficient = {"_p_mfem__GradientGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NodeExtrudeCoefficient = {"_p_mfem__NodeExtrudeCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__NormalizedVectorCoefficient = {"_p_mfem__NormalizedVectorCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__PWVectorCoefficient = {"_p_mfem__PWVectorCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__ScalarVectorProductCoefficient = {"_p_mfem__ScalarVectorProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorArrayCoefficient = {"_p_mfem__VectorArrayCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorConstantCoefficient = {"_p_mfem__VectorConstantCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorCrossProductCoefficient = {"_p_mfem__VectorCrossProductCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorDeltaCoefficient = {"_p_mfem__VectorDeltaCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorFunctionCoefficient = {"_p_mfem__VectorFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorGridFunctionCoefficient = {"_p_mfem__VectorGridFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorPyCoefficientBase = {"_p_mfem__VectorPyCoefficientBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorQuadratureFunctionCoefficient = {"_p_mfem__VectorQuadratureFunctionCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorRestrictedCoefficient = {"_p_mfem__VectorRestrictedCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_mfem__VectorSumCoefficient = {"_p_mfem__VectorSumCoefficient", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__FiniteElementSpace = {"_p_p_mfem__FiniteElementSpace", "mfem::FiniteElementSpace **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__IntegrationRule = {"_p_p_mfem__IntegrationRule", "mfem::IntegrationRule **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Operator = {"_p_p_mfem__Operator", "mfem::Operator **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__AbstractSparseMatrix = {"_p_p_mfem__AbstractSparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConformingFaceRestriction = {"_p_p_mfem__ConformingFaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ConstrainedOperator = {"_p_p_mfem__ConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrix = {"_p_p_mfem__DenseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseMatrixInverse = {"_p_p_mfem__DenseMatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__DenseSymmetricMatrix = {"_p_p_mfem__DenseSymmetricMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ElementRestriction = {"_p_p_mfem__ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ElementRestrictionOperator = {"_p_p_mfem__ElementRestrictionOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__FaceRestriction = {"_p_p_mfem__FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__IdentityOperator = {"_p_p_mfem__IdentityOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__L2ElementRestriction = {"_p_p_mfem__L2ElementRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__L2FaceRestriction = {"_p_p_mfem__L2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Matrix = {"_p_p_mfem__Matrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__MatrixInverse = {"_p_p_mfem__MatrixInverse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__NCL2FaceRestriction = {"_p_p_mfem__NCL2FaceRestriction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ProductOperator = {"_p_p_mfem__ProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyOperatorBase = {"_p_p_mfem__PyOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__PyTimeDependentOperatorBase = {"_p_p_mfem__PyTimeDependentOperatorBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RAPOperator = {"_p_p_mfem__RAPOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__RectangularConstrainedOperator = {"_p_p_mfem__RectangularConstrainedOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__ScaledOperator = {"_p_p_mfem__ScaledOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SecondOrderTimeDependentOperator = {"_p_p_mfem__SecondOrderTimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__SparseMatrix = {"_p_p_mfem__SparseMatrix", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentAdjointOperator = {"_p_p_mfem__TimeDependentAdjointOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TimeDependentOperator = {"_p_p_mfem__TimeDependentOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TransposeOperator = {"_p_p_mfem__TransposeOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__TripleProductOperator = {"_p_p_mfem__TripleProductOperator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__Solver = {"_p_p_mfem__Solver", "mfem::Solver **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__Vector = {"_p_p_mfem__Vector", "mfem::Vector **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_mfem__CoefficientVector = {"_p_p_mfem__CoefficientVector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__GridFunction = {"_p_p_mfem__GridFunction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_mfem__LinearForm = {"_p_p_mfem__LinearForm", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_pri_t = {"_p_pri_t", "pri_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pyr_t = {"_p_pyr_t", "pyr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_quad_t = {"_p_quad_t", "quad_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seg_t = {"_p_seg_t", "seg_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tet_t = {"_p_tet_t", "tet_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tri_t = {"_p_tri_t", "tri_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt___input,
  &_swigt__p_MatrixNumbaCoefficient,
  &_swigt__p_PyMFEM__wFILE,
  &_swigt__p_RefCoord,
  &_swigt__p_ScalarNumbaCoefficient,
  &_swigt__p_VectorNumbaCoefficient,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_hex_t,
  &_swigt__p_int,
  &_swigt__p_mfem__AbstractSparseMatrix,
  &_swigt__p_mfem__ArrayT_int_t,
  &_swigt__p_mfem__BiCubic2DFiniteElement,
  &_swigt__p_mfem__BiLinear2DFiniteElement,
  &_swigt__p_mfem__BiQuad2DFiniteElement,
  &_swigt__p_mfem__BiQuadPos2DFiniteElement,
  &_swigt__p_mfem__Coefficient,
  &_swigt__p_mfem__CoefficientVector,
  &_swigt__p_mfem__ConformingFaceRestriction,
  &_swigt__p_mfem__Const2DFECollection,
  &_swigt__p_mfem__Const3DFECollection,
  &_swigt__p_mfem__ConstantCoefficient,
  &_swigt__p_mfem__ConstrainedOperator,
  &_swigt__p_mfem__ConvectionIntegrator,
  &_swigt__p_mfem__CrossCrossCoefficient,
  &_swigt__p_mfem__CrouzeixRaviartFECollection,
  &_swigt__p_mfem__CrouzeixRaviartFiniteElement,
  &_swigt__p_mfem__CrouzeixRaviartQuadFiniteElement,
  &_swigt__p_mfem__Cubic1DFiniteElement,
  &_swigt__p_mfem__Cubic2DFiniteElement,
  &_swigt__p_mfem__Cubic3DFiniteElement,
  &_swigt__p_mfem__CubicDiscont2DFECollection,
  &_swigt__p_mfem__CubicFECollection,
  &_swigt__p_mfem__CurlGridFunctionCoefficient,
  &_swigt__p_mfem__DGTraceIntegrator,
  &_swigt__p_mfem__DG_Interface_FECollection,
  &_swigt__p_mfem__DeltaCoefficient,
  &_swigt__p_mfem__DenseMatrix,
  &_swigt__p_mfem__DenseMatrixInverse,
  &_swigt__p_mfem__DenseSymmetricMatrix,
  &_swigt__p_mfem__DeterminantCoefficient,
  &_swigt__p_mfem__DivergenceGridFunctionCoefficient,
  &_swigt__p_mfem__ElementRestriction,
  &_swigt__p_mfem__ElementRestrictionOperator,
  &_swigt__p_mfem__ExtrudeCoefficient,
  &_swigt__p_mfem__FaceRestriction,
  &_swigt__p_mfem__FiniteElement,
  &_swigt__p_mfem__FiniteElementCollection,
  &_swigt__p_mfem__FiniteElementSpace,
  &_swigt__p_mfem__FunctionCoefficient,
  &_swigt__p_mfem__GaussBiLinear2DFiniteElement,
  &_swigt__p_mfem__GaussBiQuad2DFiniteElement,
  &_swigt__p_mfem__GaussLinear2DFiniteElement,
  &_swigt__p_mfem__GaussLinearDiscont2DFECollection,
  &_swigt__p_mfem__GaussQuad2DFiniteElement,
  &_swigt__p_mfem__GaussQuadraticDiscont2DFECollection,
  &_swigt__p_mfem__GradientGridFunctionCoefficient,
  &_swigt__p_mfem__GridFunction,
  &_swigt__p_mfem__GridFunctionCoefficient,
  &_swigt__p_mfem__H1Pos_FECollection,
  &_swigt__p_mfem__H1Pos_HexahedronElement,
  &_swigt__p_mfem__H1Pos_QuadrilateralElement,
  &_swigt__p_mfem__H1Pos_SegmentElement,
  &_swigt__p_mfem__H1Pos_TetrahedronElement,
  &_swigt__p_mfem__H1Pos_TriangleElement,
  &_swigt__p_mfem__H1Pos_WedgeElement,
  &_swigt__p_mfem__H1Ser_FECollection,
  &_swigt__p_mfem__H1Ser_QuadrilateralElement,
  &_swigt__p_mfem__H1_FECollection,
  &_swigt__p_mfem__H1_HexahedronElement,
  &_swigt__p_mfem__H1_QuadrilateralElement,
  &_swigt__p_mfem__H1_SegmentElement,
  &_swigt__p_mfem__H1_TetrahedronElement,
  &_swigt__p_mfem__H1_Trace_FECollection,
  &_swigt__p_mfem__H1_TriangleElement,
  &_swigt__p_mfem__H1_WedgeElement,
  &_swigt__p_mfem__IdentityMatrixCoefficient,
  &_swigt__p_mfem__IdentityOperator,
  &_swigt__p_mfem__InnerProductCoefficient,
  &_swigt__p_mfem__IntegrationPoint,
  &_swigt__p_mfem__IntegrationRule,
  &_swigt__p_mfem__InverseMatrixCoefficient,
  &_swigt__p_mfem__L2ElementRestriction,
  &_swigt__p_mfem__L2FaceRestriction,
  &_swigt__p_mfem__L2Pos_HexahedronElement,
  &_swigt__p_mfem__L2Pos_QuadrilateralElement,
  &_swigt__p_mfem__L2Pos_SegmentElement,
  &_swigt__p_mfem__L2Pos_TetrahedronElement,
  &_swigt__p_mfem__L2Pos_TriangleElement,
  &_swigt__p_mfem__L2Pos_WedgeElement,
  &_swigt__p_mfem__L2_FECollection,
  &_swigt__p_mfem__L2_HexahedronElement,
  &_swigt__p_mfem__L2_QuadrilateralElement,
  &_swigt__p_mfem__L2_SegmentElement,
  &_swigt__p_mfem__L2_TetrahedronElement,
  &_swigt__p_mfem__L2_TriangleElement,
  &_swigt__p_mfem__L2_WedgeElement,
  &_swigt__p_mfem__Lagrange1DFiniteElement,
  &_swigt__p_mfem__LagrangeHexFiniteElement,
  &_swigt__p_mfem__Linear1DFiniteElement,
  &_swigt__p_mfem__Linear2DFiniteElement,
  &_swigt__p_mfem__Linear3DFiniteElement,
  &_swigt__p_mfem__LinearDiscont2DFECollection,
  &_swigt__p_mfem__LinearDiscont3DFECollection,
  &_swigt__p_mfem__LinearFECollection,
  &_swigt__p_mfem__LinearForm,
  &_swigt__p_mfem__LinearNonConf3DFECollection,
  &_swigt__p_mfem__LinearPyramidFiniteElement,
  &_swigt__p_mfem__LinearWedgeFiniteElement,
  &_swigt__p_mfem__Local_FECollection,
  &_swigt__p_mfem__Matrix,
  &_swigt__p_mfem__MatrixArrayCoefficient,
  &_swigt__p_mfem__MatrixCoefficient,
  &_swigt__p_mfem__MatrixConstantCoefficient,
  &_swigt__p_mfem__MatrixFunctionCoefficient,
  &_swigt__p_mfem__MatrixInverse,
  &_swigt__p_mfem__MatrixProductCoefficient,
  &_swigt__p_mfem__MatrixPyCoefficientBase,
  &_swigt__p_mfem__MatrixRestrictedCoefficient,
  &_swigt__p_mfem__MatrixSumCoefficient,
  &_swigt__p_mfem__MatrixVectorProductCoefficient,
  &_swigt__p_mfem__NCL2FaceRestriction,
  &_swigt__p_mfem__ND1_3DFECollection,
  &_swigt__p_mfem__ND_FECollection,
  &_swigt__p_mfem__ND_HexahedronElement,
  &_swigt__p_mfem__ND_QuadrilateralElement,
  &_swigt__p_mfem__ND_R1D_FECollection,
  &_swigt__p_mfem__ND_R1D_PointElement,
  &_swigt__p_mfem__ND_R1D_SegmentElement,
  &_swigt__p_mfem__ND_R2D_FECollection,
  &_swigt__p_mfem__ND_R2D_FiniteElement,
  &_swigt__p_mfem__ND_R2D_QuadrilateralElement,
  &_swigt__p_mfem__ND_R2D_SegmentElement,
  &_swigt__p_mfem__ND_R2D_Trace_FECollection,
  &_swigt__p_mfem__ND_R2D_TriangleElement,
  &_swigt__p_mfem__ND_SegmentElement,
  &_swigt__p_mfem__ND_TetrahedronElement,
  &_swigt__p_mfem__ND_Trace_FECollection,
  &_swigt__p_mfem__ND_TriangleElement,
  &_swigt__p_mfem__ND_WedgeElement,
  &_swigt__p_mfem__NURBS1DFiniteElement,
  &_swigt__p_mfem__NURBS2DFiniteElement,
  &_swigt__p_mfem__NURBS3DFiniteElement,
  &_swigt__p_mfem__NURBSFECollection,
  &_swigt__p_mfem__NURBSFiniteElement,
  &_swigt__p_mfem__Nedelec1HexFiniteElement,
  &_swigt__p_mfem__Nedelec1PyrFiniteElement,
  &_swigt__p_mfem__Nedelec1TetFiniteElement,
  &_swigt__p_mfem__Nedelec1WdgFiniteElement,
  &_swigt__p_mfem__NodalFiniteElement,
  &_swigt__p_mfem__NodalTensorFiniteElement,
  &_swigt__p_mfem__NodeExtrudeCoefficient,
  &_swigt__p_mfem__NormalizedVectorCoefficient,
  &_swigt__p_mfem__Operator,
  &_swigt__p_mfem__OperatorHandle,
  &_swigt__p_mfem__OuterProductCoefficient,
  &_swigt__p_mfem__P0HexFiniteElement,
  &_swigt__p_mfem__P0PyrFiniteElement,
  &_swigt__p_mfem__P0QuadFiniteElement,
  &_swigt__p_mfem__P0SegmentFiniteElement,
  &_swigt__p_mfem__P0TetFiniteElement,
  &_swigt__p_mfem__P0TriangleFiniteElement,
  &_swigt__p_mfem__P0WdgFiniteElement,
  &_swigt__p_mfem__P1OnQuadFECollection,
  &_swigt__p_mfem__P1OnQuadFiniteElement,
  &_swigt__p_mfem__P1SegmentFiniteElement,
  &_swigt__p_mfem__P1TetNonConfFiniteElement,
  &_swigt__p_mfem__P2SegmentFiniteElement,
  &_swigt__p_mfem__PWCoefficient,
  &_swigt__p_mfem__PWConstCoefficient,
  &_swigt__p_mfem__PWMatrixCoefficient,
  &_swigt__p_mfem__PWVectorCoefficient,
  &_swigt__p_mfem__PointFiniteElement,
  &_swigt__p_mfem__PositiveFiniteElement,
  &_swigt__p_mfem__PositiveTensorFiniteElement,
  &_swigt__p_mfem__PowerCoefficient,
  &_swigt__p_mfem__ProductCoefficient,
  &_swigt__p_mfem__ProductOperator,
  &_swigt__p_mfem__PyCoefficientBase,
  &_swigt__p_mfem__PyOperatorBase,
  &_swigt__p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_mfem__Quad1DFiniteElement,
  &_swigt__p_mfem__Quad2DFiniteElement,
  &_swigt__p_mfem__QuadPos1DFiniteElement,
  &_swigt__p_mfem__Quadratic3DFiniteElement,
  &_swigt__p_mfem__QuadraticDiscont2DFECollection,
  &_swigt__p_mfem__QuadraticDiscont3DFECollection,
  &_swigt__p_mfem__QuadraticFECollection,
  &_swigt__p_mfem__QuadraticPosDiscont2DFECollection,
  &_swigt__p_mfem__QuadraticPosFECollection,
  &_swigt__p_mfem__QuadratureFunctionCoefficient,
  &_swigt__p_mfem__RAPOperator,
  &_swigt__p_mfem__RT0HexFiniteElement,
  &_swigt__p_mfem__RT0PyrFiniteElement,
  &_swigt__p_mfem__RT0QuadFiniteElement,
  &_swigt__p_mfem__RT0TetFiniteElement,
  &_swigt__p_mfem__RT0TriangleFiniteElement,
  &_swigt__p_mfem__RT0WdgFiniteElement,
  &_swigt__p_mfem__RT0_2DFECollection,
  &_swigt__p_mfem__RT0_3DFECollection,
  &_swigt__p_mfem__RT1HexFiniteElement,
  &_swigt__p_mfem__RT1QuadFiniteElement,
  &_swigt__p_mfem__RT1TriangleFiniteElement,
  &_swigt__p_mfem__RT1_2DFECollection,
  &_swigt__p_mfem__RT1_3DFECollection,
  &_swigt__p_mfem__RT2QuadFiniteElement,
  &_swigt__p_mfem__RT2TriangleFiniteElement,
  &_swigt__p_mfem__RT2_2DFECollection,
  &_swigt__p_mfem__RT_FECollection,
  &_swigt__p_mfem__RT_HexahedronElement,
  &_swigt__p_mfem__RT_QuadrilateralElement,
  &_swigt__p_mfem__RT_R1D_FECollection,
  &_swigt__p_mfem__RT_R1D_SegmentElement,
  &_swigt__p_mfem__RT_R2D_FECollection,
  &_swigt__p_mfem__RT_R2D_FiniteElement,
  &_swigt__p_mfem__RT_R2D_QuadrilateralElement,
  &_swigt__p_mfem__RT_R2D_SegmentElement,
  &_swigt__p_mfem__RT_R2D_Trace_FECollection,
  &_swigt__p_mfem__RT_R2D_TriangleElement,
  &_swigt__p_mfem__RT_TetrahedronElement,
  &_swigt__p_mfem__RT_Trace_FECollection,
  &_swigt__p_mfem__RT_TriangleElement,
  &_swigt__p_mfem__RT_WedgeElement,
  &_swigt__p_mfem__RatioCoefficient,
  &_swigt__p_mfem__RectangularConstrainedOperator,
  &_swigt__p_mfem__RefinedBiLinear2DFiniteElement,
  &_swigt__p_mfem__RefinedLinear1DFiniteElement,
  &_swigt__p_mfem__RefinedLinear2DFiniteElement,
  &_swigt__p_mfem__RefinedLinear3DFiniteElement,
  &_swigt__p_mfem__RefinedLinearFECollection,
  &_swigt__p_mfem__RefinedTriLinear3DFiniteElement,
  &_swigt__p_mfem__Refinement,
  &_swigt__p_mfem__RestrictedCoefficient,
  &_swigt__p_mfem__RotTriLinearHexFiniteElement,
  &_swigt__p_mfem__ScalarFiniteElement,
  &_swigt__p_mfem__ScalarMatrixProductCoefficient,
  &_swigt__p_mfem__ScalarVectorProductCoefficient,
  &_swigt__p_mfem__ScaledOperator,
  &_swigt__p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_mfem__Solver,
  &_swigt__p_mfem__SparseMatrix,
  &_swigt__p_mfem__SumCoefficient,
  &_swigt__p_mfem__SymmetricMatrixCoefficient,
  &_swigt__p_mfem__SymmetricMatrixConstantCoefficient,
  &_swigt__p_mfem__SymmetricMatrixFunctionCoefficient,
  &_swigt__p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_mfem__TimeDependentOperator,
  &_swigt__p_mfem__TransformedCoefficient,
  &_swigt__p_mfem__TransposeMatrixCoefficient,
  &_swigt__p_mfem__TransposeOperator,
  &_swigt__p_mfem__TriLinear3DFiniteElement,
  &_swigt__p_mfem__TripleProductOperator,
  &_swigt__p_mfem__Vector,
  &_swigt__p_mfem__VectorArrayCoefficient,
  &_swigt__p_mfem__VectorCoefficient,
  &_swigt__p_mfem__VectorConstantCoefficient,
  &_swigt__p_mfem__VectorCrossProductCoefficient,
  &_swigt__p_mfem__VectorDeltaCoefficient,
  &_swigt__p_mfem__VectorFiniteElement,
  &_swigt__p_mfem__VectorFunctionCoefficient,
  &_swigt__p_mfem__VectorGridFunctionCoefficient,
  &_swigt__p_mfem__VectorPyCoefficientBase,
  &_swigt__p_mfem__VectorQuadratureFunctionCoefficient,
  &_swigt__p_mfem__VectorRestrictedCoefficient,
  &_swigt__p_mfem__VectorRotProductCoefficient,
  &_swigt__p_mfem__VectorSumCoefficient,
  &_swigt__p_mfem__VectorTensorFiniteElement,
  &_swigt__p_p_mfem__AbstractSparseMatrix,
  &_swigt__p_p_mfem__CoefficientVector,
  &_swigt__p_p_mfem__ConformingFaceRestriction,
  &_swigt__p_p_mfem__ConstrainedOperator,
  &_swigt__p_p_mfem__DenseMatrix,
  &_swigt__p_p_mfem__DenseMatrixInverse,
  &_swigt__p_p_mfem__DenseSymmetricMatrix,
  &_swigt__p_p_mfem__ElementRestriction,
  &_swigt__p_p_mfem__ElementRestrictionOperator,
  &_swigt__p_p_mfem__FaceRestriction,
  &_swigt__p_p_mfem__FiniteElementSpace,
  &_swigt__p_p_mfem__GridFunction,
  &_swigt__p_p_mfem__IdentityOperator,
  &_swigt__p_p_mfem__IntegrationRule,
  &_swigt__p_p_mfem__L2ElementRestriction,
  &_swigt__p_p_mfem__L2FaceRestriction,
  &_swigt__p_p_mfem__LinearForm,
  &_swigt__p_p_mfem__Matrix,
  &_swigt__p_p_mfem__MatrixInverse,
  &_swigt__p_p_mfem__NCL2FaceRestriction,
  &_swigt__p_p_mfem__Operator,
  &_swigt__p_p_mfem__ProductOperator,
  &_swigt__p_p_mfem__PyOperatorBase,
  &_swigt__p_p_mfem__PyTimeDependentOperatorBase,
  &_swigt__p_p_mfem__RAPOperator,
  &_swigt__p_p_mfem__RectangularConstrainedOperator,
  &_swigt__p_p_mfem__ScaledOperator,
  &_swigt__p_p_mfem__SecondOrderTimeDependentOperator,
  &_swigt__p_p_mfem__Solver,
  &_swigt__p_p_mfem__SparseMatrix,
  &_swigt__p_p_mfem__TimeDependentAdjointOperator,
  &_swigt__p_p_mfem__TimeDependentOperator,
  &_swigt__p_p_mfem__TransposeOperator,
  &_swigt__p_p_mfem__TripleProductOperator,
  &_swigt__p_p_mfem__Vector,
  &_swigt__p_pri_t,
  &_swigt__p_pyr_t,
  &_swigt__p_quad_t,
  &_swigt__p_seg_t,
  &_swigt__p_size_type,
  &_swigt__p_tet_t,
  &_swigt__p_tri_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc___input[] = {  {&_swigt___input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixNumbaCoefficient[] = {  {&_swigt__p_MatrixNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyMFEM__wFILE[] = {  {&_swigt__p_PyMFEM__wFILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefCoord[] = {  {&_swigt__p_RefCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScalarNumbaCoefficient[] = {  {&_swigt__p_ScalarNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorNumbaCoefficient[] = {  {&_swigt__p_VectorNumbaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hex_t[] = {  {&_swigt__p_hex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ArrayT_int_t[] = {  {&_swigt__p_mfem__ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstantCoefficient[] = {{&_swigt__p_mfem__ConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DeltaCoefficient[] = {{&_swigt__p_mfem__DeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DeterminantCoefficient[] = {{&_swigt__p_mfem__DeterminantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DivergenceGridFunctionCoefficient[] = {{&_swigt__p_mfem__DivergenceGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ExtrudeCoefficient[] = {{&_swigt__p_mfem__ExtrudeCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FunctionCoefficient[] = {{&_swigt__p_mfem__FunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GridFunctionCoefficient[] = {{&_swigt__p_mfem__GridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InnerProductCoefficient[] = {{&_swigt__p_mfem__InnerProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWCoefficient[] = {{&_swigt__p_mfem__PWCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWConstCoefficient[] = {{&_swigt__p_mfem__PWConstCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PowerCoefficient[] = {{&_swigt__p_mfem__PowerCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductCoefficient[] = {{&_swigt__p_mfem__ProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyCoefficientBase[] = {{&_swigt__p_mfem__PyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadratureFunctionCoefficient[] = {{&_swigt__p_mfem__QuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RatioCoefficient[] = {{&_swigt__p_mfem__RatioCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RestrictedCoefficient[] = {{&_swigt__p_mfem__RestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SumCoefficient[] = {{&_swigt__p_mfem__SumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransformedCoefficient[] = {{&_swigt__p_mfem__TransformedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorRotProductCoefficient[] = {{&_swigt__p_mfem__VectorRotProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Coefficient[] = {  {&_swigt__p_mfem__Coefficient, 0, 0, 0},  {&_swigt__p_ScalarNumbaCoefficient, _p_ScalarNumbaCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ConstantCoefficient, _p_mfem__ConstantCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DeltaCoefficient, _p_mfem__DeltaCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DeterminantCoefficient, _p_mfem__DeterminantCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__DivergenceGridFunctionCoefficient, _p_mfem__DivergenceGridFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ExtrudeCoefficient, _p_mfem__ExtrudeCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__FunctionCoefficient, _p_mfem__FunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__GridFunctionCoefficient, _p_mfem__GridFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__InnerProductCoefficient, _p_mfem__InnerProductCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PWCoefficient, _p_mfem__PWCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PWConstCoefficient, _p_mfem__PWConstCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PowerCoefficient, _p_mfem__PowerCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__ProductCoefficient, _p_mfem__ProductCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__PyCoefficientBase, _p_mfem__PyCoefficientBaseTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__QuadratureFunctionCoefficient, _p_mfem__QuadratureFunctionCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__RatioCoefficient, _p_mfem__RatioCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__RestrictedCoefficient, _p_mfem__RestrictedCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__SumCoefficient, _p_mfem__SumCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__TransformedCoefficient, _p_mfem__TransformedCoefficientTo_p_mfem__Coefficient, 0, 0},  {&_swigt__p_mfem__VectorRotProductCoefficient, _p_mfem__VectorRotProductCoefficientTo_p_mfem__Coefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConformingFaceRestriction[] = {  {&_swigt__p_mfem__ConformingFaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Const2DFECollection[] = {  {&_swigt__p_mfem__Const2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Const3DFECollection[] = {  {&_swigt__p_mfem__Const3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConvectionIntegrator[] = {  {&_swigt__p_mfem__ConvectionIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrouzeixRaviartFECollection[] = {  {&_swigt__p_mfem__CrouzeixRaviartFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CubicDiscont2DFECollection[] = {  {&_swigt__p_mfem__CubicDiscont2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CubicFECollection[] = {  {&_swigt__p_mfem__CubicFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DGTraceIntegrator[] = {  {&_swigt__p_mfem__DGTraceIntegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DG_Interface_FECollection[] = {  {&_swigt__p_mfem__DG_Interface_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiCubic2DFiniteElement[] = {{&_swigt__p_mfem__BiCubic2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiLinear2DFiniteElement[] = {{&_swigt__p_mfem__BiLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiQuad2DFiniteElement[] = {{&_swigt__p_mfem__BiQuad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__BiQuadPos2DFiniteElement[] = {{&_swigt__p_mfem__BiQuadPos2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrouzeixRaviartFiniteElement[] = {{&_swigt__p_mfem__CrouzeixRaviartFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrouzeixRaviartQuadFiniteElement[] = {{&_swigt__p_mfem__CrouzeixRaviartQuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Cubic1DFiniteElement[] = {{&_swigt__p_mfem__Cubic1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Cubic2DFiniteElement[] = {{&_swigt__p_mfem__Cubic2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Cubic3DFiniteElement[] = {{&_swigt__p_mfem__Cubic3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussBiLinear2DFiniteElement[] = {{&_swigt__p_mfem__GaussBiLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussBiQuad2DFiniteElement[] = {{&_swigt__p_mfem__GaussBiQuad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussLinear2DFiniteElement[] = {{&_swigt__p_mfem__GaussLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussQuad2DFiniteElement[] = {{&_swigt__p_mfem__GaussQuad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_HexahedronElement[] = {{&_swigt__p_mfem__H1Pos_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_QuadrilateralElement[] = {{&_swigt__p_mfem__H1Pos_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_SegmentElement[] = {{&_swigt__p_mfem__H1Pos_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_TetrahedronElement[] = {{&_swigt__p_mfem__H1Pos_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_TriangleElement[] = {{&_swigt__p_mfem__H1Pos_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_WedgeElement[] = {{&_swigt__p_mfem__H1Pos_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Ser_QuadrilateralElement[] = {{&_swigt__p_mfem__H1Ser_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_HexahedronElement[] = {{&_swigt__p_mfem__H1_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_QuadrilateralElement[] = {{&_swigt__p_mfem__H1_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_SegmentElement[] = {{&_swigt__p_mfem__H1_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_TetrahedronElement[] = {{&_swigt__p_mfem__H1_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_TriangleElement[] = {{&_swigt__p_mfem__H1_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_WedgeElement[] = {{&_swigt__p_mfem__H1_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_HexahedronElement[] = {{&_swigt__p_mfem__L2Pos_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_QuadrilateralElement[] = {{&_swigt__p_mfem__L2Pos_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_SegmentElement[] = {{&_swigt__p_mfem__L2Pos_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_TetrahedronElement[] = {{&_swigt__p_mfem__L2Pos_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_TriangleElement[] = {{&_swigt__p_mfem__L2Pos_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2Pos_WedgeElement[] = {{&_swigt__p_mfem__L2Pos_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_HexahedronElement[] = {{&_swigt__p_mfem__L2_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_QuadrilateralElement[] = {{&_swigt__p_mfem__L2_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_SegmentElement[] = {{&_swigt__p_mfem__L2_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_TetrahedronElement[] = {{&_swigt__p_mfem__L2_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_TriangleElement[] = {{&_swigt__p_mfem__L2_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_WedgeElement[] = {{&_swigt__p_mfem__L2_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Lagrange1DFiniteElement[] = {{&_swigt__p_mfem__Lagrange1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LagrangeHexFiniteElement[] = {{&_swigt__p_mfem__LagrangeHexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Linear1DFiniteElement[] = {{&_swigt__p_mfem__Linear1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Linear2DFiniteElement[] = {{&_swigt__p_mfem__Linear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Linear3DFiniteElement[] = {{&_swigt__p_mfem__Linear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearPyramidFiniteElement[] = {{&_swigt__p_mfem__LinearPyramidFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearWedgeFiniteElement[] = {{&_swigt__p_mfem__LinearWedgeFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_HexahedronElement[] = {{&_swigt__p_mfem__ND_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_QuadrilateralElement[] = {{&_swigt__p_mfem__ND_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R1D_PointElement[] = {{&_swigt__p_mfem__ND_R1D_PointElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R1D_SegmentElement[] = {{&_swigt__p_mfem__ND_R1D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_FiniteElement[] = {{&_swigt__p_mfem__ND_R2D_FiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_QuadrilateralElement[] = {{&_swigt__p_mfem__ND_R2D_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_SegmentElement[] = {{&_swigt__p_mfem__ND_R2D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_TriangleElement[] = {{&_swigt__p_mfem__ND_R2D_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_SegmentElement[] = {{&_swigt__p_mfem__ND_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_TetrahedronElement[] = {{&_swigt__p_mfem__ND_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_TriangleElement[] = {{&_swigt__p_mfem__ND_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_WedgeElement[] = {{&_swigt__p_mfem__ND_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBS1DFiniteElement[] = {{&_swigt__p_mfem__NURBS1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBS2DFiniteElement[] = {{&_swigt__p_mfem__NURBS2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBS3DFiniteElement[] = {{&_swigt__p_mfem__NURBS3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBSFiniteElement[] = {{&_swigt__p_mfem__NURBSFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1HexFiniteElement[] = {{&_swigt__p_mfem__Nedelec1HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1PyrFiniteElement[] = {{&_swigt__p_mfem__Nedelec1PyrFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1TetFiniteElement[] = {{&_swigt__p_mfem__Nedelec1TetFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Nedelec1WdgFiniteElement[] = {{&_swigt__p_mfem__Nedelec1WdgFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NodalFiniteElement[] = {{&_swigt__p_mfem__NodalFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NodalTensorFiniteElement[] = {{&_swigt__p_mfem__NodalTensorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0HexFiniteElement[] = {{&_swigt__p_mfem__P0HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0PyrFiniteElement[] = {{&_swigt__p_mfem__P0PyrFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0QuadFiniteElement[] = {{&_swigt__p_mfem__P0QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0SegmentFiniteElement[] = {{&_swigt__p_mfem__P0SegmentFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0TetFiniteElement[] = {{&_swigt__p_mfem__P0TetFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0TriangleFiniteElement[] = {{&_swigt__p_mfem__P0TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P0WdgFiniteElement[] = {{&_swigt__p_mfem__P0WdgFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1OnQuadFiniteElement[] = {{&_swigt__p_mfem__P1OnQuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1SegmentFiniteElement[] = {{&_swigt__p_mfem__P1SegmentFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1TetNonConfFiniteElement[] = {{&_swigt__p_mfem__P1TetNonConfFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P2SegmentFiniteElement[] = {{&_swigt__p_mfem__P2SegmentFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PointFiniteElement[] = {{&_swigt__p_mfem__PointFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PositiveFiniteElement[] = {{&_swigt__p_mfem__PositiveFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PositiveTensorFiniteElement[] = {{&_swigt__p_mfem__PositiveTensorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Quad1DFiniteElement[] = {{&_swigt__p_mfem__Quad1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Quad2DFiniteElement[] = {{&_swigt__p_mfem__Quad2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadPos1DFiniteElement[] = {{&_swigt__p_mfem__QuadPos1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Quadratic3DFiniteElement[] = {{&_swigt__p_mfem__Quadratic3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0HexFiniteElement[] = {{&_swigt__p_mfem__RT0HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0PyrFiniteElement[] = {{&_swigt__p_mfem__RT0PyrFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0QuadFiniteElement[] = {{&_swigt__p_mfem__RT0QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0TetFiniteElement[] = {{&_swigt__p_mfem__RT0TetFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0TriangleFiniteElement[] = {{&_swigt__p_mfem__RT0TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0WdgFiniteElement[] = {{&_swigt__p_mfem__RT0WdgFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1HexFiniteElement[] = {{&_swigt__p_mfem__RT1HexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1QuadFiniteElement[] = {{&_swigt__p_mfem__RT1QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1TriangleFiniteElement[] = {{&_swigt__p_mfem__RT1TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT2QuadFiniteElement[] = {{&_swigt__p_mfem__RT2QuadFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT2TriangleFiniteElement[] = {{&_swigt__p_mfem__RT2TriangleFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_HexahedronElement[] = {{&_swigt__p_mfem__RT_HexahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_QuadrilateralElement[] = {{&_swigt__p_mfem__RT_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R1D_SegmentElement[] = {{&_swigt__p_mfem__RT_R1D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_FiniteElement[] = {{&_swigt__p_mfem__RT_R2D_FiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_QuadrilateralElement[] = {{&_swigt__p_mfem__RT_R2D_QuadrilateralElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_SegmentElement[] = {{&_swigt__p_mfem__RT_R2D_SegmentElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_TriangleElement[] = {{&_swigt__p_mfem__RT_R2D_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_TetrahedronElement[] = {{&_swigt__p_mfem__RT_TetrahedronElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_TriangleElement[] = {{&_swigt__p_mfem__RT_TriangleElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_WedgeElement[] = {{&_swigt__p_mfem__RT_WedgeElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedBiLinear2DFiniteElement[] = {{&_swigt__p_mfem__RefinedBiLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinear1DFiniteElement[] = {{&_swigt__p_mfem__RefinedLinear1DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinear2DFiniteElement[] = {{&_swigt__p_mfem__RefinedLinear2DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinear3DFiniteElement[] = {{&_swigt__p_mfem__RefinedLinear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedTriLinear3DFiniteElement[] = {{&_swigt__p_mfem__RefinedTriLinear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RotTriLinearHexFiniteElement[] = {{&_swigt__p_mfem__RotTriLinearHexFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarFiniteElement[] = {{&_swigt__p_mfem__ScalarFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TriLinear3DFiniteElement[] = {{&_swigt__p_mfem__TriLinear3DFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorFiniteElement[] = {{&_swigt__p_mfem__VectorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorTensorFiniteElement[] = {{&_swigt__p_mfem__VectorTensorFiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FiniteElement[] = {  {&_swigt__p_mfem__FiniteElement, 0, 0, 0},  {&_swigt__p_mfem__BiCubic2DFiniteElement, _p_mfem__BiCubic2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__BiLinear2DFiniteElement, _p_mfem__BiLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__BiQuad2DFiniteElement, _p_mfem__BiQuad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__BiQuadPos2DFiniteElement, _p_mfem__BiQuadPos2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__CrouzeixRaviartFiniteElement, _p_mfem__CrouzeixRaviartFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__CrouzeixRaviartQuadFiniteElement, _p_mfem__CrouzeixRaviartQuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Cubic1DFiniteElement, _p_mfem__Cubic1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Cubic2DFiniteElement, _p_mfem__Cubic2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Cubic3DFiniteElement, _p_mfem__Cubic3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussBiLinear2DFiniteElement, _p_mfem__GaussBiLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussBiQuad2DFiniteElement, _p_mfem__GaussBiQuad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussLinear2DFiniteElement, _p_mfem__GaussLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__GaussQuad2DFiniteElement, _p_mfem__GaussQuad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_HexahedronElement, _p_mfem__H1Pos_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_QuadrilateralElement, _p_mfem__H1Pos_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_SegmentElement, _p_mfem__H1Pos_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_TetrahedronElement, _p_mfem__H1Pos_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_TriangleElement, _p_mfem__H1Pos_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Pos_WedgeElement, _p_mfem__H1Pos_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1Ser_QuadrilateralElement, _p_mfem__H1Ser_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_HexahedronElement, _p_mfem__H1_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_QuadrilateralElement, _p_mfem__H1_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_SegmentElement, _p_mfem__H1_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_TetrahedronElement, _p_mfem__H1_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_TriangleElement, _p_mfem__H1_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__H1_WedgeElement, _p_mfem__H1_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_HexahedronElement, _p_mfem__L2Pos_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_QuadrilateralElement, _p_mfem__L2Pos_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_SegmentElement, _p_mfem__L2Pos_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_TetrahedronElement, _p_mfem__L2Pos_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_TriangleElement, _p_mfem__L2Pos_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2Pos_WedgeElement, _p_mfem__L2Pos_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_HexahedronElement, _p_mfem__L2_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_QuadrilateralElement, _p_mfem__L2_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_SegmentElement, _p_mfem__L2_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_TetrahedronElement, _p_mfem__L2_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_TriangleElement, _p_mfem__L2_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__L2_WedgeElement, _p_mfem__L2_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Lagrange1DFiniteElement, _p_mfem__Lagrange1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__LagrangeHexFiniteElement, _p_mfem__LagrangeHexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Linear1DFiniteElement, _p_mfem__Linear1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Linear2DFiniteElement, _p_mfem__Linear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Linear3DFiniteElement, _p_mfem__Linear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__LinearPyramidFiniteElement, _p_mfem__LinearPyramidFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__LinearWedgeFiniteElement, _p_mfem__LinearWedgeFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_HexahedronElement, _p_mfem__ND_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_QuadrilateralElement, _p_mfem__ND_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R1D_PointElement, _p_mfem__ND_R1D_PointElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R1D_SegmentElement, _p_mfem__ND_R1D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_FiniteElement, _p_mfem__ND_R2D_FiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_QuadrilateralElement, _p_mfem__ND_R2D_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_SegmentElement, _p_mfem__ND_R2D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_R2D_TriangleElement, _p_mfem__ND_R2D_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_SegmentElement, _p_mfem__ND_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_TetrahedronElement, _p_mfem__ND_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_TriangleElement, _p_mfem__ND_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ND_WedgeElement, _p_mfem__ND_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBS1DFiniteElement, _p_mfem__NURBS1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBS2DFiniteElement, _p_mfem__NURBS2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBS3DFiniteElement, _p_mfem__NURBS3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NURBSFiniteElement, _p_mfem__NURBSFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1HexFiniteElement, _p_mfem__Nedelec1HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1PyrFiniteElement, _p_mfem__Nedelec1PyrFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1TetFiniteElement, _p_mfem__Nedelec1TetFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Nedelec1WdgFiniteElement, _p_mfem__Nedelec1WdgFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NodalFiniteElement, _p_mfem__NodalFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__NodalTensorFiniteElement, _p_mfem__NodalTensorFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0HexFiniteElement, _p_mfem__P0HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0PyrFiniteElement, _p_mfem__P0PyrFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0QuadFiniteElement, _p_mfem__P0QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0SegmentFiniteElement, _p_mfem__P0SegmentFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0TetFiniteElement, _p_mfem__P0TetFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0TriangleFiniteElement, _p_mfem__P0TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P0WdgFiniteElement, _p_mfem__P0WdgFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P1OnQuadFiniteElement, _p_mfem__P1OnQuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P1SegmentFiniteElement, _p_mfem__P1SegmentFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P1TetNonConfFiniteElement, _p_mfem__P1TetNonConfFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__P2SegmentFiniteElement, _p_mfem__P2SegmentFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__PointFiniteElement, _p_mfem__PointFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__PositiveFiniteElement, _p_mfem__PositiveFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__PositiveTensorFiniteElement, _p_mfem__PositiveTensorFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Quad1DFiniteElement, _p_mfem__Quad1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Quad2DFiniteElement, _p_mfem__Quad2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__QuadPos1DFiniteElement, _p_mfem__QuadPos1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__Quadratic3DFiniteElement, _p_mfem__Quadratic3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0HexFiniteElement, _p_mfem__RT0HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0PyrFiniteElement, _p_mfem__RT0PyrFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0QuadFiniteElement, _p_mfem__RT0QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0TetFiniteElement, _p_mfem__RT0TetFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0TriangleFiniteElement, _p_mfem__RT0TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT0WdgFiniteElement, _p_mfem__RT0WdgFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT1HexFiniteElement, _p_mfem__RT1HexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT1QuadFiniteElement, _p_mfem__RT1QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT1TriangleFiniteElement, _p_mfem__RT1TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT2QuadFiniteElement, _p_mfem__RT2QuadFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT2TriangleFiniteElement, _p_mfem__RT2TriangleFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_HexahedronElement, _p_mfem__RT_HexahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_QuadrilateralElement, _p_mfem__RT_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R1D_SegmentElement, _p_mfem__RT_R1D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_FiniteElement, _p_mfem__RT_R2D_FiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_QuadrilateralElement, _p_mfem__RT_R2D_QuadrilateralElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_SegmentElement, _p_mfem__RT_R2D_SegmentElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_R2D_TriangleElement, _p_mfem__RT_R2D_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_TetrahedronElement, _p_mfem__RT_TetrahedronElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_TriangleElement, _p_mfem__RT_TriangleElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RT_WedgeElement, _p_mfem__RT_WedgeElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedBiLinear2DFiniteElement, _p_mfem__RefinedBiLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedLinear1DFiniteElement, _p_mfem__RefinedLinear1DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedLinear2DFiniteElement, _p_mfem__RefinedLinear2DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedLinear3DFiniteElement, _p_mfem__RefinedLinear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RefinedTriLinear3DFiniteElement, _p_mfem__RefinedTriLinear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__RotTriLinearHexFiniteElement, _p_mfem__RotTriLinearHexFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__ScalarFiniteElement, _p_mfem__ScalarFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__TriLinear3DFiniteElement, _p_mfem__TriLinear3DFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__VectorFiniteElement, _p_mfem__VectorFiniteElementTo_p_mfem__FiniteElement, 0, 0},  {&_swigt__p_mfem__VectorTensorFiniteElement, _p_mfem__VectorTensorFiniteElementTo_p_mfem__FiniteElement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FiniteElementCollection[] = {  {&_swigt__p_mfem__FiniteElementCollection, 0, 0, 0},  {&_swigt__p_mfem__Const2DFECollection, _p_mfem__Const2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__Const3DFECollection, _p_mfem__Const3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__CrouzeixRaviartFECollection, _p_mfem__CrouzeixRaviartFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__CubicDiscont2DFECollection, _p_mfem__CubicDiscont2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__CubicFECollection, _p_mfem__CubicFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__DG_Interface_FECollection, _p_mfem__DG_Interface_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__GaussLinearDiscont2DFECollection, _p_mfem__GaussLinearDiscont2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__GaussQuadraticDiscont2DFECollection, _p_mfem__GaussQuadraticDiscont2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__H1Pos_FECollection, _p_mfem__H1Pos_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__H1Ser_FECollection, _p_mfem__H1Ser_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__H1_FECollection, _p_mfem__H1_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__H1_Trace_FECollection, _p_mfem__H1_Trace_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__L2_FECollection, _p_mfem__L2_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__LinearDiscont2DFECollection, _p_mfem__LinearDiscont2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__LinearDiscont3DFECollection, _p_mfem__LinearDiscont3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__LinearFECollection, _p_mfem__LinearFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__LinearNonConf3DFECollection, _p_mfem__LinearNonConf3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__Local_FECollection, _p_mfem__Local_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__ND1_3DFECollection, _p_mfem__ND1_3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__ND_FECollection, _p_mfem__ND_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__ND_R1D_FECollection, _p_mfem__ND_R1D_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__ND_R2D_FECollection, _p_mfem__ND_R2D_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__ND_R2D_Trace_FECollection, _p_mfem__ND_R2D_Trace_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__ND_Trace_FECollection, _p_mfem__ND_Trace_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__NURBSFECollection, _p_mfem__NURBSFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__P1OnQuadFECollection, _p_mfem__P1OnQuadFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__QuadraticDiscont2DFECollection, _p_mfem__QuadraticDiscont2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__QuadraticDiscont3DFECollection, _p_mfem__QuadraticDiscont3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__QuadraticFECollection, _p_mfem__QuadraticFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__QuadraticPosDiscont2DFECollection, _p_mfem__QuadraticPosDiscont2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__QuadraticPosFECollection, _p_mfem__QuadraticPosFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT0_2DFECollection, _p_mfem__RT0_2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT0_3DFECollection, _p_mfem__RT0_3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT1_2DFECollection, _p_mfem__RT1_2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT1_3DFECollection, _p_mfem__RT1_3DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT2_2DFECollection, _p_mfem__RT2_2DFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT_FECollection, _p_mfem__RT_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT_R1D_FECollection, _p_mfem__RT_R1D_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT_R2D_FECollection, _p_mfem__RT_R2D_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT_R2D_Trace_FECollection, _p_mfem__RT_R2D_Trace_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RT_Trace_FECollection, _p_mfem__RT_Trace_FECollectionTo_p_mfem__FiniteElementCollection, 0, 0},  {&_swigt__p_mfem__RefinedLinearFECollection, _p_mfem__RefinedLinearFECollectionTo_p_mfem__FiniteElementCollection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FiniteElementSpace[] = {  {&_swigt__p_mfem__FiniteElementSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussLinearDiscont2DFECollection[] = {  {&_swigt__p_mfem__GaussLinearDiscont2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GaussQuadraticDiscont2DFECollection[] = {  {&_swigt__p_mfem__GaussQuadraticDiscont2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GridFunction[] = {  {&_swigt__p_mfem__GridFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Pos_FECollection[] = {  {&_swigt__p_mfem__H1Pos_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1Ser_FECollection[] = {  {&_swigt__p_mfem__H1Ser_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_FECollection[] = {  {&_swigt__p_mfem__H1_FECollection, 0, 0, 0},  {&_swigt__p_mfem__H1Pos_FECollection, _p_mfem__H1Pos_FECollectionTo_p_mfem__H1_FECollection, 0, 0},  {&_swigt__p_mfem__H1Ser_FECollection, _p_mfem__H1Ser_FECollectionTo_p_mfem__H1_FECollection, 0, 0},  {&_swigt__p_mfem__H1_Trace_FECollection, _p_mfem__H1_Trace_FECollectionTo_p_mfem__H1_FECollection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__H1_Trace_FECollection[] = {  {&_swigt__p_mfem__H1_Trace_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IntegrationPoint[] = {  {&_swigt__p_mfem__IntegrationPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IntegrationRule[] = {  {&_swigt__p_mfem__IntegrationRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2_FECollection[] = {  {&_swigt__p_mfem__L2_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearDiscont2DFECollection[] = {  {&_swigt__p_mfem__LinearDiscont2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearDiscont3DFECollection[] = {  {&_swigt__p_mfem__LinearDiscont3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearFECollection[] = {  {&_swigt__p_mfem__LinearFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearNonConf3DFECollection[] = {  {&_swigt__p_mfem__LinearNonConf3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Local_FECollection[] = {  {&_swigt__p_mfem__Local_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CrossCrossCoefficient[] = {{&_swigt__p_mfem__CrossCrossCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityMatrixCoefficient[] = {{&_swigt__p_mfem__IdentityMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__InverseMatrixCoefficient[] = {{&_swigt__p_mfem__InverseMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixArrayCoefficient[] = {{&_swigt__p_mfem__MatrixArrayCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixConstantCoefficient[] = {{&_swigt__p_mfem__MatrixConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixFunctionCoefficient[] = {{&_swigt__p_mfem__MatrixFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixProductCoefficient[] = {{&_swigt__p_mfem__MatrixProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixPyCoefficientBase[] = {{&_swigt__p_mfem__MatrixPyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixRestrictedCoefficient[] = {{&_swigt__p_mfem__MatrixRestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixSumCoefficient[] = {{&_swigt__p_mfem__MatrixSumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__OuterProductCoefficient[] = {{&_swigt__p_mfem__OuterProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWMatrixCoefficient[] = {{&_swigt__p_mfem__PWMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarMatrixProductCoefficient[] = {{&_swigt__p_mfem__ScalarMatrixProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixCoefficient[] = {{&_swigt__p_mfem__SymmetricMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixConstantCoefficient[] = {{&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SymmetricMatrixFunctionCoefficient[] = {{&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeMatrixCoefficient[] = {{&_swigt__p_mfem__TransposeMatrixCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixCoefficient[] = {  {&_swigt__p_mfem__MatrixCoefficient, 0, 0, 0},  {&_swigt__p_MatrixNumbaCoefficient, _p_MatrixNumbaCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__CrossCrossCoefficient, _p_mfem__CrossCrossCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__IdentityMatrixCoefficient, _p_mfem__IdentityMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__InverseMatrixCoefficient, _p_mfem__InverseMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixArrayCoefficient, _p_mfem__MatrixArrayCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixConstantCoefficient, _p_mfem__MatrixConstantCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixFunctionCoefficient, _p_mfem__MatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixProductCoefficient, _p_mfem__MatrixProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixPyCoefficientBase, _p_mfem__MatrixPyCoefficientBaseTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixRestrictedCoefficient, _p_mfem__MatrixRestrictedCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixSumCoefficient, _p_mfem__MatrixSumCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__OuterProductCoefficient, _p_mfem__OuterProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__PWMatrixCoefficient, _p_mfem__PWMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__ScalarMatrixProductCoefficient, _p_mfem__ScalarMatrixProductCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixCoefficient, _p_mfem__SymmetricMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixConstantCoefficient, _p_mfem__SymmetricMatrixConstantCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__SymmetricMatrixFunctionCoefficient, _p_mfem__SymmetricMatrixFunctionCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},  {&_swigt__p_mfem__TransposeMatrixCoefficient, _p_mfem__TransposeMatrixCoefficientTo_p_mfem__MatrixCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixVectorProductCoefficient[] = {  {&_swigt__p_mfem__MatrixVectorProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND1_3DFECollection[] = {  {&_swigt__p_mfem__ND1_3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_FECollection[] = {  {&_swigt__p_mfem__ND_FECollection, 0, 0, 0},  {&_swigt__p_mfem__ND_Trace_FECollection, _p_mfem__ND_Trace_FECollectionTo_p_mfem__ND_FECollection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R1D_FECollection[] = {  {&_swigt__p_mfem__ND_R1D_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_FECollection[] = {  {&_swigt__p_mfem__ND_R2D_FECollection, 0, 0, 0},  {&_swigt__p_mfem__ND_R2D_Trace_FECollection, _p_mfem__ND_R2D_Trace_FECollectionTo_p_mfem__ND_R2D_FECollection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_R2D_Trace_FECollection[] = {  {&_swigt__p_mfem__ND_R2D_Trace_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ND_Trace_FECollection[] = {  {&_swigt__p_mfem__ND_Trace_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NURBSFECollection[] = {  {&_swigt__p_mfem__NURBSFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ConstrainedOperator[] = {{&_swigt__p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrix[] = {{&_swigt__p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseMatrixInverse[] = {{&_swigt__p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__DenseSymmetricMatrix[] = {{&_swigt__p_mfem__DenseSymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ElementRestriction[] = {{&_swigt__p_mfem__ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ElementRestrictionOperator[] = {{&_swigt__p_mfem__ElementRestrictionOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__FaceRestriction[] = {{&_swigt__p_mfem__FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__IdentityOperator[] = {{&_swigt__p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2ElementRestriction[] = {{&_swigt__p_mfem__L2ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__L2FaceRestriction[] = {{&_swigt__p_mfem__L2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Matrix[] = {{&_swigt__p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__MatrixInverse[] = {{&_swigt__p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NCL2FaceRestriction[] = {{&_swigt__p_mfem__NCL2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ProductOperator[] = {{&_swigt__p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyOperatorBase[] = {{&_swigt__p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RAPOperator[] = {{&_swigt__p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScaledOperator[] = {{&_swigt__p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__SparseMatrix[] = {{&_swigt__p_mfem__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TimeDependentOperator[] = {{&_swigt__p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TransposeOperator[] = {{&_swigt__p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__TripleProductOperator[] = {{&_swigt__p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Operator[] = {  {&_swigt__p_mfem__Operator, 0, 0, 0},  {&_swigt__p_mfem__AbstractSparseMatrix, _p_mfem__AbstractSparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ConformingFaceRestriction, _p_mfem__ConformingFaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ConstrainedOperator, _p_mfem__ConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrix, _p_mfem__DenseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__DenseSymmetricMatrix, _p_mfem__DenseSymmetricMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ElementRestriction, _p_mfem__ElementRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ElementRestrictionOperator, _p_mfem__ElementRestrictionOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__FaceRestriction, _p_mfem__FaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__IdentityOperator, _p_mfem__IdentityOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__L2ElementRestriction, _p_mfem__L2ElementRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__L2FaceRestriction, _p_mfem__L2FaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Matrix, _p_mfem__MatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__NCL2FaceRestriction, _p_mfem__NCL2FaceRestrictionTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ProductOperator, _p_mfem__ProductOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyOperatorBase, _p_mfem__PyOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__PyTimeDependentOperatorBase, _p_mfem__PyTimeDependentOperatorBaseTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RAPOperator, _p_mfem__RAPOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__RectangularConstrainedOperator, _p_mfem__RectangularConstrainedOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__ScaledOperator, _p_mfem__ScaledOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SecondOrderTimeDependentOperator, _p_mfem__SecondOrderTimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__Solver, _p_mfem__SolverTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__SparseMatrix, _p_mfem__SparseMatrixTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentAdjointOperator, _p_mfem__TimeDependentAdjointOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TimeDependentOperator, _p_mfem__TimeDependentOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TransposeOperator, _p_mfem__TransposeOperatorTo_p_mfem__Operator, 0, 0},  {&_swigt__p_mfem__TripleProductOperator, _p_mfem__TripleProductOperatorTo_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__OperatorHandle[] = {  {&_swigt__p_mfem__OperatorHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__P1OnQuadFECollection[] = {  {&_swigt__p_mfem__P1OnQuadFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadraticDiscont2DFECollection[] = {  {&_swigt__p_mfem__QuadraticDiscont2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadraticDiscont3DFECollection[] = {  {&_swigt__p_mfem__QuadraticDiscont3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadraticFECollection[] = {  {&_swigt__p_mfem__QuadraticFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadraticPosDiscont2DFECollection[] = {  {&_swigt__p_mfem__QuadraticPosDiscont2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__QuadraticPosFECollection[] = {  {&_swigt__p_mfem__QuadraticPosFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0_2DFECollection[] = {  {&_swigt__p_mfem__RT0_2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT0_3DFECollection[] = {  {&_swigt__p_mfem__RT0_3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1_2DFECollection[] = {  {&_swigt__p_mfem__RT1_2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT1_3DFECollection[] = {  {&_swigt__p_mfem__RT1_3DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT2_2DFECollection[] = {  {&_swigt__p_mfem__RT2_2DFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_FECollection[] = {  {&_swigt__p_mfem__RT_FECollection, 0, 0, 0},  {&_swigt__p_mfem__DG_Interface_FECollection, _p_mfem__DG_Interface_FECollectionTo_p_mfem__RT_FECollection, 0, 0},  {&_swigt__p_mfem__RT_Trace_FECollection, _p_mfem__RT_Trace_FECollectionTo_p_mfem__RT_FECollection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R1D_FECollection[] = {  {&_swigt__p_mfem__RT_R1D_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_FECollection[] = {  {&_swigt__p_mfem__RT_R2D_FECollection, 0, 0, 0},  {&_swigt__p_mfem__RT_R2D_Trace_FECollection, _p_mfem__RT_R2D_Trace_FECollectionTo_p_mfem__RT_R2D_FECollection, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_R2D_Trace_FECollection[] = {  {&_swigt__p_mfem__RT_R2D_Trace_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RT_Trace_FECollection[] = {  {&_swigt__p_mfem__RT_Trace_FECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__RefinedLinearFECollection[] = {  {&_swigt__p_mfem__RefinedLinearFECollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Refinement[] = {  {&_swigt__p_mfem__Refinement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Solver[] = {  {&_swigt__p_mfem__Solver, 0, 0, 0},  {&_swigt__p_mfem__DenseMatrixInverse, _p_mfem__DenseMatrixInverseTo_p_mfem__Solver, 0, 0},  {&_swigt__p_mfem__MatrixInverse, _p_mfem__MatrixInverseTo_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CoefficientVector[] = {{&_swigt__p_mfem__CoefficientVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__LinearForm[] = {{&_swigt__p_mfem__LinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__Vector[] = {  {&_swigt__p_mfem__Vector, 0, 0, 0},  {&_swigt__p_mfem__CoefficientVector, _p_mfem__CoefficientVectorTo_p_mfem__Vector, 0, 0},  {&_swigt__p_mfem__GridFunction, _p_mfem__GridFunctionTo_p_mfem__Vector, 0, 0},  {&_swigt__p_mfem__LinearForm, _p_mfem__LinearFormTo_p_mfem__Vector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__CurlGridFunctionCoefficient[] = {{&_swigt__p_mfem__CurlGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__GradientGridFunctionCoefficient[] = {{&_swigt__p_mfem__GradientGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NodeExtrudeCoefficient[] = {{&_swigt__p_mfem__NodeExtrudeCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__NormalizedVectorCoefficient[] = {{&_swigt__p_mfem__NormalizedVectorCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__PWVectorCoefficient[] = {{&_swigt__p_mfem__PWVectorCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__ScalarVectorProductCoefficient[] = {{&_swigt__p_mfem__ScalarVectorProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorArrayCoefficient[] = {{&_swigt__p_mfem__VectorArrayCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorConstantCoefficient[] = {{&_swigt__p_mfem__VectorConstantCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorCrossProductCoefficient[] = {{&_swigt__p_mfem__VectorCrossProductCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorDeltaCoefficient[] = {{&_swigt__p_mfem__VectorDeltaCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorFunctionCoefficient[] = {{&_swigt__p_mfem__VectorFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorGridFunctionCoefficient[] = {{&_swigt__p_mfem__VectorGridFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorPyCoefficientBase[] = {{&_swigt__p_mfem__VectorPyCoefficientBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorQuadratureFunctionCoefficient[] = {{&_swigt__p_mfem__VectorQuadratureFunctionCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorRestrictedCoefficient[] = {{&_swigt__p_mfem__VectorRestrictedCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorSumCoefficient[] = {{&_swigt__p_mfem__VectorSumCoefficient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mfem__VectorCoefficient[] = {  {&_swigt__p_mfem__VectorCoefficient, 0, 0, 0},  {&_swigt__p_VectorNumbaCoefficient, _p_VectorNumbaCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__CurlGridFunctionCoefficient, _p_mfem__CurlGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__GradientGridFunctionCoefficient, _p_mfem__GradientGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__MatrixVectorProductCoefficient, _p_mfem__MatrixVectorProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__NodeExtrudeCoefficient, _p_mfem__NodeExtrudeCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__NormalizedVectorCoefficient, _p_mfem__NormalizedVectorCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__PWVectorCoefficient, _p_mfem__PWVectorCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__ScalarVectorProductCoefficient, _p_mfem__ScalarVectorProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorArrayCoefficient, _p_mfem__VectorArrayCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorConstantCoefficient, _p_mfem__VectorConstantCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorCrossProductCoefficient, _p_mfem__VectorCrossProductCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorDeltaCoefficient, _p_mfem__VectorDeltaCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorFunctionCoefficient, _p_mfem__VectorFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorGridFunctionCoefficient, _p_mfem__VectorGridFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorPyCoefficientBase, _p_mfem__VectorPyCoefficientBaseTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorQuadratureFunctionCoefficient, _p_mfem__VectorQuadratureFunctionCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorRestrictedCoefficient, _p_mfem__VectorRestrictedCoefficientTo_p_mfem__VectorCoefficient, 0, 0},  {&_swigt__p_mfem__VectorSumCoefficient, _p_mfem__VectorSumCoefficientTo_p_mfem__VectorCoefficient, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__FiniteElementSpace[] = {  {&_swigt__p_p_mfem__FiniteElementSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IntegrationRule[] = {  {&_swigt__p_p_mfem__IntegrationRule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__AbstractSparseMatrix[] = {{&_swigt__p_p_mfem__AbstractSparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConformingFaceRestriction[] = {{&_swigt__p_p_mfem__ConformingFaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ConstrainedOperator[] = {{&_swigt__p_p_mfem__ConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrix[] = {{&_swigt__p_p_mfem__DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseMatrixInverse[] = {{&_swigt__p_p_mfem__DenseMatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__DenseSymmetricMatrix[] = {{&_swigt__p_p_mfem__DenseSymmetricMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ElementRestriction[] = {{&_swigt__p_p_mfem__ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ElementRestrictionOperator[] = {{&_swigt__p_p_mfem__ElementRestrictionOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__FaceRestriction[] = {{&_swigt__p_p_mfem__FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__IdentityOperator[] = {{&_swigt__p_p_mfem__IdentityOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__L2ElementRestriction[] = {{&_swigt__p_p_mfem__L2ElementRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__L2FaceRestriction[] = {{&_swigt__p_p_mfem__L2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Matrix[] = {{&_swigt__p_p_mfem__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__MatrixInverse[] = {{&_swigt__p_p_mfem__MatrixInverse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__NCL2FaceRestriction[] = {{&_swigt__p_p_mfem__NCL2FaceRestriction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ProductOperator[] = {{&_swigt__p_p_mfem__ProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyOperatorBase[] = {{&_swigt__p_p_mfem__PyOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__PyTimeDependentOperatorBase[] = {{&_swigt__p_p_mfem__PyTimeDependentOperatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RAPOperator[] = {{&_swigt__p_p_mfem__RAPOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__RectangularConstrainedOperator[] = {{&_swigt__p_p_mfem__RectangularConstrainedOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__ScaledOperator[] = {{&_swigt__p_p_mfem__ScaledOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SecondOrderTimeDependentOperator[] = {{&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__SparseMatrix[] = {{&_swigt__p_p_mfem__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentAdjointOperator[] = {{&_swigt__p_p_mfem__TimeDependentAdjointOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TimeDependentOperator[] = {{&_swigt__p_p_mfem__TimeDependentOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TransposeOperator[] = {{&_swigt__p_p_mfem__TransposeOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__TripleProductOperator[] = {{&_swigt__p_p_mfem__TripleProductOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Operator[] = {  {&_swigt__p_p_mfem__Operator, 0, 0, 0},  {&_swigt__p_p_mfem__AbstractSparseMatrix, _p_p_mfem__AbstractSparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ConformingFaceRestriction, _p_p_mfem__ConformingFaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ConstrainedOperator, _p_p_mfem__ConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrix, _p_p_mfem__DenseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__DenseSymmetricMatrix, _p_p_mfem__DenseSymmetricMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ElementRestriction, _p_p_mfem__ElementRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ElementRestrictionOperator, _p_p_mfem__ElementRestrictionOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__FaceRestriction, _p_p_mfem__FaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__IdentityOperator, _p_p_mfem__IdentityOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__L2ElementRestriction, _p_p_mfem__L2ElementRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__L2FaceRestriction, _p_p_mfem__L2FaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Matrix, _p_p_mfem__MatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__NCL2FaceRestriction, _p_p_mfem__NCL2FaceRestrictionTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ProductOperator, _p_p_mfem__ProductOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyOperatorBase, _p_p_mfem__PyOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__PyTimeDependentOperatorBase, _p_p_mfem__PyTimeDependentOperatorBaseTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RAPOperator, _p_p_mfem__RAPOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__RectangularConstrainedOperator, _p_p_mfem__RectangularConstrainedOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__ScaledOperator, _p_p_mfem__ScaledOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SecondOrderTimeDependentOperator, _p_p_mfem__SecondOrderTimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__Solver, _p_p_mfem__SolverTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__SparseMatrix, _p_p_mfem__SparseMatrixTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentAdjointOperator, _p_p_mfem__TimeDependentAdjointOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TimeDependentOperator, _p_p_mfem__TimeDependentOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TransposeOperator, _p_p_mfem__TransposeOperatorTo_p_p_mfem__Operator, 0, 0},  {&_swigt__p_p_mfem__TripleProductOperator, _p_p_mfem__TripleProductOperatorTo_p_p_mfem__Operator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Solver[] = {  {&_swigt__p_p_mfem__Solver, 0, 0, 0},  {&_swigt__p_p_mfem__DenseMatrixInverse, _p_p_mfem__DenseMatrixInverseTo_p_p_mfem__Solver, 0, 0},  {&_swigt__p_p_mfem__MatrixInverse, _p_p_mfem__MatrixInverseTo_p_p_mfem__Solver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__CoefficientVector[] = {{&_swigt__p_p_mfem__CoefficientVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__GridFunction[] = {{&_swigt__p_p_mfem__GridFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__LinearForm[] = {{&_swigt__p_p_mfem__LinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_mfem__Vector[] = {  {&_swigt__p_p_mfem__Vector, 0, 0, 0},  {&_swigt__p_p_mfem__CoefficientVector, _p_p_mfem__CoefficientVectorTo_p_p_mfem__Vector, 0, 0},  {&_swigt__p_p_mfem__GridFunction, _p_p_mfem__GridFunctionTo_p_p_mfem__Vector, 0, 0},  {&_swigt__p_p_mfem__LinearForm, _p_p_mfem__LinearFormTo_p_p_mfem__Vector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pri_t[] = {  {&_swigt__p_pri_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pyr_t[] = {  {&_swigt__p_pyr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_quad_t[] = {  {&_swigt__p_quad_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seg_t[] = {  {&_swigt__p_seg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tet_t[] = {  {&_swigt__p_tet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tri_t[] = {  {&_swigt__p_tri_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc___input,
  _swigc__p_MatrixNumbaCoefficient,
  _swigc__p_PyMFEM__wFILE,
  _swigc__p_RefCoord,
  _swigc__p_ScalarNumbaCoefficient,
  _swigc__p_VectorNumbaCoefficient,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_hex_t,
  _swigc__p_int,
  _swigc__p_mfem__AbstractSparseMatrix,
  _swigc__p_mfem__ArrayT_int_t,
  _swigc__p_mfem__BiCubic2DFiniteElement,
  _swigc__p_mfem__BiLinear2DFiniteElement,
  _swigc__p_mfem__BiQuad2DFiniteElement,
  _swigc__p_mfem__BiQuadPos2DFiniteElement,
  _swigc__p_mfem__Coefficient,
  _swigc__p_mfem__CoefficientVector,
  _swigc__p_mfem__ConformingFaceRestriction,
  _swigc__p_mfem__Const2DFECollection,
  _swigc__p_mfem__Const3DFECollection,
  _swigc__p_mfem__ConstantCoefficient,
  _swigc__p_mfem__ConstrainedOperator,
  _swigc__p_mfem__ConvectionIntegrator,
  _swigc__p_mfem__CrossCrossCoefficient,
  _swigc__p_mfem__CrouzeixRaviartFECollection,
  _swigc__p_mfem__CrouzeixRaviartFiniteElement,
  _swigc__p_mfem__CrouzeixRaviartQuadFiniteElement,
  _swigc__p_mfem__Cubic1DFiniteElement,
  _swigc__p_mfem__Cubic2DFiniteElement,
  _swigc__p_mfem__Cubic3DFiniteElement,
  _swigc__p_mfem__CubicDiscont2DFECollection,
  _swigc__p_mfem__CubicFECollection,
  _swigc__p_mfem__CurlGridFunctionCoefficient,
  _swigc__p_mfem__DGTraceIntegrator,
  _swigc__p_mfem__DG_Interface_FECollection,
  _swigc__p_mfem__DeltaCoefficient,
  _swigc__p_mfem__DenseMatrix,
  _swigc__p_mfem__DenseMatrixInverse,
  _swigc__p_mfem__DenseSymmetricMatrix,
  _swigc__p_mfem__DeterminantCoefficient,
  _swigc__p_mfem__DivergenceGridFunctionCoefficient,
  _swigc__p_mfem__ElementRestriction,
  _swigc__p_mfem__ElementRestrictionOperator,
  _swigc__p_mfem__ExtrudeCoefficient,
  _swigc__p_mfem__FaceRestriction,
  _swigc__p_mfem__FiniteElement,
  _swigc__p_mfem__FiniteElementCollection,
  _swigc__p_mfem__FiniteElementSpace,
  _swigc__p_mfem__FunctionCoefficient,
  _swigc__p_mfem__GaussBiLinear2DFiniteElement,
  _swigc__p_mfem__GaussBiQuad2DFiniteElement,
  _swigc__p_mfem__GaussLinear2DFiniteElement,
  _swigc__p_mfem__GaussLinearDiscont2DFECollection,
  _swigc__p_mfem__GaussQuad2DFiniteElement,
  _swigc__p_mfem__GaussQuadraticDiscont2DFECollection,
  _swigc__p_mfem__GradientGridFunctionCoefficient,
  _swigc__p_mfem__GridFunction,
  _swigc__p_mfem__GridFunctionCoefficient,
  _swigc__p_mfem__H1Pos_FECollection,
  _swigc__p_mfem__H1Pos_HexahedronElement,
  _swigc__p_mfem__H1Pos_QuadrilateralElement,
  _swigc__p_mfem__H1Pos_SegmentElement,
  _swigc__p_mfem__H1Pos_TetrahedronElement,
  _swigc__p_mfem__H1Pos_TriangleElement,
  _swigc__p_mfem__H1Pos_WedgeElement,
  _swigc__p_mfem__H1Ser_FECollection,
  _swigc__p_mfem__H1Ser_QuadrilateralElement,
  _swigc__p_mfem__H1_FECollection,
  _swigc__p_mfem__H1_HexahedronElement,
  _swigc__p_mfem__H1_QuadrilateralElement,
  _swigc__p_mfem__H1_SegmentElement,
  _swigc__p_mfem__H1_TetrahedronElement,
  _swigc__p_mfem__H1_Trace_FECollection,
  _swigc__p_mfem__H1_TriangleElement,
  _swigc__p_mfem__H1_WedgeElement,
  _swigc__p_mfem__IdentityMatrixCoefficient,
  _swigc__p_mfem__IdentityOperator,
  _swigc__p_mfem__InnerProductCoefficient,
  _swigc__p_mfem__IntegrationPoint,
  _swigc__p_mfem__IntegrationRule,
  _swigc__p_mfem__InverseMatrixCoefficient,
  _swigc__p_mfem__L2ElementRestriction,
  _swigc__p_mfem__L2FaceRestriction,
  _swigc__p_mfem__L2Pos_HexahedronElement,
  _swigc__p_mfem__L2Pos_QuadrilateralElement,
  _swigc__p_mfem__L2Pos_SegmentElement,
  _swigc__p_mfem__L2Pos_TetrahedronElement,
  _swigc__p_mfem__L2Pos_TriangleElement,
  _swigc__p_mfem__L2Pos_WedgeElement,
  _swigc__p_mfem__L2_FECollection,
  _swigc__p_mfem__L2_HexahedronElement,
  _swigc__p_mfem__L2_QuadrilateralElement,
  _swigc__p_mfem__L2_SegmentElement,
  _swigc__p_mfem__L2_TetrahedronElement,
  _swigc__p_mfem__L2_TriangleElement,
  _swigc__p_mfem__L2_WedgeElement,
  _swigc__p_mfem__Lagrange1DFiniteElement,
  _swigc__p_mfem__LagrangeHexFiniteElement,
  _swigc__p_mfem__Linear1DFiniteElement,
  _swigc__p_mfem__Linear2DFiniteElement,
  _swigc__p_mfem__Linear3DFiniteElement,
  _swigc__p_mfem__LinearDiscont2DFECollection,
  _swigc__p_mfem__LinearDiscont3DFECollection,
  _swigc__p_mfem__LinearFECollection,
  _swigc__p_mfem__LinearForm,
  _swigc__p_mfem__LinearNonConf3DFECollection,
  _swigc__p_mfem__LinearPyramidFiniteElement,
  _swigc__p_mfem__LinearWedgeFiniteElement,
  _swigc__p_mfem__Local_FECollection,
  _swigc__p_mfem__Matrix,
  _swigc__p_mfem__MatrixArrayCoefficient,
  _swigc__p_mfem__MatrixCoefficient,
  _swigc__p_mfem__MatrixConstantCoefficient,
  _swigc__p_mfem__MatrixFunctionCoefficient,
  _swigc__p_mfem__MatrixInverse,
  _swigc__p_mfem__MatrixProductCoefficient,
  _swigc__p_mfem__MatrixPyCoefficientBase,
  _swigc__p_mfem__MatrixRestrictedCoefficient,
  _swigc__p_mfem__MatrixSumCoefficient,
  _swigc__p_mfem__MatrixVectorProductCoefficient,
  _swigc__p_mfem__NCL2FaceRestriction,
  _swigc__p_mfem__ND1_3DFECollection,
  _swigc__p_mfem__ND_FECollection,
  _swigc__p_mfem__ND_HexahedronElement,
  _swigc__p_mfem__ND_QuadrilateralElement,
  _swigc__p_mfem__ND_R1D_FECollection,
  _swigc__p_mfem__ND_R1D_PointElement,
  _swigc__p_mfem__ND_R1D_SegmentElement,
  _swigc__p_mfem__ND_R2D_FECollection,
  _swigc__p_mfem__ND_R2D_FiniteElement,
  _swigc__p_mfem__ND_R2D_QuadrilateralElement,
  _swigc__p_mfem__ND_R2D_SegmentElement,
  _swigc__p_mfem__ND_R2D_Trace_FECollection,
  _swigc__p_mfem__ND_R2D_TriangleElement,
  _swigc__p_mfem__ND_SegmentElement,
  _swigc__p_mfem__ND_TetrahedronElement,
  _swigc__p_mfem__ND_Trace_FECollection,
  _swigc__p_mfem__ND_TriangleElement,
  _swigc__p_mfem__ND_WedgeElement,
  _swigc__p_mfem__NURBS1DFiniteElement,
  _swigc__p_mfem__NURBS2DFiniteElement,
  _swigc__p_mfem__NURBS3DFiniteElement,
  _swigc__p_mfem__NURBSFECollection,
  _swigc__p_mfem__NURBSFiniteElement,
  _swigc__p_mfem__Nedelec1HexFiniteElement,
  _swigc__p_mfem__Nedelec1PyrFiniteElement,
  _swigc__p_mfem__Nedelec1TetFiniteElement,
  _swigc__p_mfem__Nedelec1WdgFiniteElement,
  _swigc__p_mfem__NodalFiniteElement,
  _swigc__p_mfem__NodalTensorFiniteElement,
  _swigc__p_mfem__NodeExtrudeCoefficient,
  _swigc__p_mfem__NormalizedVectorCoefficient,
  _swigc__p_mfem__Operator,
  _swigc__p_mfem__OperatorHandle,
  _swigc__p_mfem__OuterProductCoefficient,
  _swigc__p_mfem__P0HexFiniteElement,
  _swigc__p_mfem__P0PyrFiniteElement,
  _swigc__p_mfem__P0QuadFiniteElement,
  _swigc__p_mfem__P0SegmentFiniteElement,
  _swigc__p_mfem__P0TetFiniteElement,
  _swigc__p_mfem__P0TriangleFiniteElement,
  _swigc__p_mfem__P0WdgFiniteElement,
  _swigc__p_mfem__P1OnQuadFECollection,
  _swigc__p_mfem__P1OnQuadFiniteElement,
  _swigc__p_mfem__P1SegmentFiniteElement,
  _swigc__p_mfem__P1TetNonConfFiniteElement,
  _swigc__p_mfem__P2SegmentFiniteElement,
  _swigc__p_mfem__PWCoefficient,
  _swigc__p_mfem__PWConstCoefficient,
  _swigc__p_mfem__PWMatrixCoefficient,
  _swigc__p_mfem__PWVectorCoefficient,
  _swigc__p_mfem__PointFiniteElement,
  _swigc__p_mfem__PositiveFiniteElement,
  _swigc__p_mfem__PositiveTensorFiniteElement,
  _swigc__p_mfem__PowerCoefficient,
  _swigc__p_mfem__ProductCoefficient,
  _swigc__p_mfem__ProductOperator,
  _swigc__p_mfem__PyCoefficientBase,
  _swigc__p_mfem__PyOperatorBase,
  _swigc__p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_mfem__Quad1DFiniteElement,
  _swigc__p_mfem__Quad2DFiniteElement,
  _swigc__p_mfem__QuadPos1DFiniteElement,
  _swigc__p_mfem__Quadratic3DFiniteElement,
  _swigc__p_mfem__QuadraticDiscont2DFECollection,
  _swigc__p_mfem__QuadraticDiscont3DFECollection,
  _swigc__p_mfem__QuadraticFECollection,
  _swigc__p_mfem__QuadraticPosDiscont2DFECollection,
  _swigc__p_mfem__QuadraticPosFECollection,
  _swigc__p_mfem__QuadratureFunctionCoefficient,
  _swigc__p_mfem__RAPOperator,
  _swigc__p_mfem__RT0HexFiniteElement,
  _swigc__p_mfem__RT0PyrFiniteElement,
  _swigc__p_mfem__RT0QuadFiniteElement,
  _swigc__p_mfem__RT0TetFiniteElement,
  _swigc__p_mfem__RT0TriangleFiniteElement,
  _swigc__p_mfem__RT0WdgFiniteElement,
  _swigc__p_mfem__RT0_2DFECollection,
  _swigc__p_mfem__RT0_3DFECollection,
  _swigc__p_mfem__RT1HexFiniteElement,
  _swigc__p_mfem__RT1QuadFiniteElement,
  _swigc__p_mfem__RT1TriangleFiniteElement,
  _swigc__p_mfem__RT1_2DFECollection,
  _swigc__p_mfem__RT1_3DFECollection,
  _swigc__p_mfem__RT2QuadFiniteElement,
  _swigc__p_mfem__RT2TriangleFiniteElement,
  _swigc__p_mfem__RT2_2DFECollection,
  _swigc__p_mfem__RT_FECollection,
  _swigc__p_mfem__RT_HexahedronElement,
  _swigc__p_mfem__RT_QuadrilateralElement,
  _swigc__p_mfem__RT_R1D_FECollection,
  _swigc__p_mfem__RT_R1D_SegmentElement,
  _swigc__p_mfem__RT_R2D_FECollection,
  _swigc__p_mfem__RT_R2D_FiniteElement,
  _swigc__p_mfem__RT_R2D_QuadrilateralElement,
  _swigc__p_mfem__RT_R2D_SegmentElement,
  _swigc__p_mfem__RT_R2D_Trace_FECollection,
  _swigc__p_mfem__RT_R2D_TriangleElement,
  _swigc__p_mfem__RT_TetrahedronElement,
  _swigc__p_mfem__RT_Trace_FECollection,
  _swigc__p_mfem__RT_TriangleElement,
  _swigc__p_mfem__RT_WedgeElement,
  _swigc__p_mfem__RatioCoefficient,
  _swigc__p_mfem__RectangularConstrainedOperator,
  _swigc__p_mfem__RefinedBiLinear2DFiniteElement,
  _swigc__p_mfem__RefinedLinear1DFiniteElement,
  _swigc__p_mfem__RefinedLinear2DFiniteElement,
  _swigc__p_mfem__RefinedLinear3DFiniteElement,
  _swigc__p_mfem__RefinedLinearFECollection,
  _swigc__p_mfem__RefinedTriLinear3DFiniteElement,
  _swigc__p_mfem__Refinement,
  _swigc__p_mfem__RestrictedCoefficient,
  _swigc__p_mfem__RotTriLinearHexFiniteElement,
  _swigc__p_mfem__ScalarFiniteElement,
  _swigc__p_mfem__ScalarMatrixProductCoefficient,
  _swigc__p_mfem__ScalarVectorProductCoefficient,
  _swigc__p_mfem__ScaledOperator,
  _swigc__p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_mfem__Solver,
  _swigc__p_mfem__SparseMatrix,
  _swigc__p_mfem__SumCoefficient,
  _swigc__p_mfem__SymmetricMatrixCoefficient,
  _swigc__p_mfem__SymmetricMatrixConstantCoefficient,
  _swigc__p_mfem__SymmetricMatrixFunctionCoefficient,
  _swigc__p_mfem__TimeDependentAdjointOperator,
  _swigc__p_mfem__TimeDependentOperator,
  _swigc__p_mfem__TransformedCoefficient,
  _swigc__p_mfem__TransposeMatrixCoefficient,
  _swigc__p_mfem__TransposeOperator,
  _swigc__p_mfem__TriLinear3DFiniteElement,
  _swigc__p_mfem__TripleProductOperator,
  _swigc__p_mfem__Vector,
  _swigc__p_mfem__VectorArrayCoefficient,
  _swigc__p_mfem__VectorCoefficient,
  _swigc__p_mfem__VectorConstantCoefficient,
  _swigc__p_mfem__VectorCrossProductCoefficient,
  _swigc__p_mfem__VectorDeltaCoefficient,
  _swigc__p_mfem__VectorFiniteElement,
  _swigc__p_mfem__VectorFunctionCoefficient,
  _swigc__p_mfem__VectorGridFunctionCoefficient,
  _swigc__p_mfem__VectorPyCoefficientBase,
  _swigc__p_mfem__VectorQuadratureFunctionCoefficient,
  _swigc__p_mfem__VectorRestrictedCoefficient,
  _swigc__p_mfem__VectorRotProductCoefficient,
  _swigc__p_mfem__VectorSumCoefficient,
  _swigc__p_mfem__VectorTensorFiniteElement,
  _swigc__p_p_mfem__AbstractSparseMatrix,
  _swigc__p_p_mfem__CoefficientVector,
  _swigc__p_p_mfem__ConformingFaceRestriction,
  _swigc__p_p_mfem__ConstrainedOperator,
  _swigc__p_p_mfem__DenseMatrix,
  _swigc__p_p_mfem__DenseMatrixInverse,
  _swigc__p_p_mfem__DenseSymmetricMatrix,
  _swigc__p_p_mfem__ElementRestriction,
  _swigc__p_p_mfem__ElementRestrictionOperator,
  _swigc__p_p_mfem__FaceRestriction,
  _swigc__p_p_mfem__FiniteElementSpace,
  _swigc__p_p_mfem__GridFunction,
  _swigc__p_p_mfem__IdentityOperator,
  _swigc__p_p_mfem__IntegrationRule,
  _swigc__p_p_mfem__L2ElementRestriction,
  _swigc__p_p_mfem__L2FaceRestriction,
  _swigc__p_p_mfem__LinearForm,
  _swigc__p_p_mfem__Matrix,
  _swigc__p_p_mfem__MatrixInverse,
  _swigc__p_p_mfem__NCL2FaceRestriction,
  _swigc__p_p_mfem__Operator,
  _swigc__p_p_mfem__ProductOperator,
  _swigc__p_p_mfem__PyOperatorBase,
  _swigc__p_p_mfem__PyTimeDependentOperatorBase,
  _swigc__p_p_mfem__RAPOperator,
  _swigc__p_p_mfem__RectangularConstrainedOperator,
  _swigc__p_p_mfem__ScaledOperator,
  _swigc__p_p_mfem__SecondOrderTimeDependentOperator,
  _swigc__p_p_mfem__Solver,
  _swigc__p_p_mfem__SparseMatrix,
  _swigc__p_p_mfem__TimeDependentAdjointOperator,
  _swigc__p_p_mfem__TimeDependentOperator,
  _swigc__p_p_mfem__TransposeOperator,
  _swigc__p_p_mfem__TripleProductOperator,
  _swigc__p_p_mfem__Vector,
  _swigc__p_pri_t,
  _swigc__p_pyr_t,
  _swigc__p_quad_t,
  _swigc__p_seg_t,
  _swigc__p_size_type,
  _swigc__p_tet_t,
  _swigc__p_tri_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "FiniteElementCollection_CONTINUOUS",SWIG_From_int(static_cast< int >(mfem::FiniteElementCollection::CONTINUOUS)));
  SWIG_Python_SetConstant(d, "FiniteElementCollection_TANGENTIAL",SWIG_From_int(static_cast< int >(mfem::FiniteElementCollection::TANGENTIAL)));
  SWIG_Python_SetConstant(d, "FiniteElementCollection_NORMAL",SWIG_From_int(static_cast< int >(mfem::FiniteElementCollection::NORMAL)));
  SWIG_Python_SetConstant(d, "FiniteElementCollection_DISCONTINUOUS",SWIG_From_int(static_cast< int >(mfem::FiniteElementCollection::DISCONTINUOUS)));
  SWIG_Python_SetConstant(d, "NURBSFECollection_VariableOrder",SWIG_From_int(static_cast< int >(mfem::NURBSFECollection::VariableOrder)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

